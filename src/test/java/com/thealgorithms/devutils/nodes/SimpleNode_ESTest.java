/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:34:32 GMT 2022
 */

package com.thealgorithms.devutils.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import com.thealgorithms.devutils.nodes.SimpleNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SimpleNode<String> simpleNode0 = new SimpleNode<String>("(M,");
      simpleNode0.setNextNode(simpleNode0);
      SimpleNode<String> simpleNode1 = simpleNode0.getNextNode();
      assertSame(simpleNode1, simpleNode0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SimpleNode<String> simpleNode0 = new SimpleNode<String>("(M,");
      SimpleNode<Object> simpleNode1 = new SimpleNode<Object>("(M,", (SimpleNode<Object>) null);
      assertFalse(simpleNode1.hasNext());
      
      SimpleNode<Object> simpleNode2 = new SimpleNode<Object>(simpleNode0);
      simpleNode1.setNextNode(simpleNode2);
      SimpleNode<Object> simpleNode3 = simpleNode1.getNextNode();
      assertNotSame(simpleNode1, simpleNode3);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SimpleNode<Object> simpleNode0 = new SimpleNode<Object>(integer0);
      boolean boolean0 = simpleNode0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SimpleNode<String> simpleNode0 = new SimpleNode<String>("(M,");
      simpleNode0.setNextNode(simpleNode0);
      boolean boolean0 = simpleNode0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SimpleNode<Object> simpleNode0 = new SimpleNode<Object>("(M,", (SimpleNode<Object>) null);
      SimpleNode<Object> simpleNode1 = simpleNode0.getNextNode();
      assertNull(simpleNode1);
      assertFalse(simpleNode0.hasNext());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SimpleNode<Integer> simpleNode0 = new SimpleNode<Integer>();
      assertFalse(simpleNode0.hasNext());
  }
}

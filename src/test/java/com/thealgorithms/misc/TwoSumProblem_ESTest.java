/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:07:48 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.misc.TwoSumProblem;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TwoSumProblem_ESTest extends TwoSumProblem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      int[] intArray1 = twoSumProblem0.HashMap(intArray0, 1);
      assertArrayEquals(new int[] {1, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 2}, intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[0];
      int[] intArray1 = twoSumProblem0.TwoPointer(intArray0, (-41));
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[2];
      intArray0[1] = (-1);
      int[] intArray1 = twoSumProblem0.BruteForce(intArray0, (-1490));
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        TwoSumProblem.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("8 #`");
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        TwoSumProblem.main(stringArray0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      // Undeclared exception!
      try { 
        twoSumProblem0.TwoPointer((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.TwoSumProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      // Undeclared exception!
      try { 
        twoSumProblem0.HashMap((int[]) null, 525);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.TwoSumProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      // Undeclared exception!
      try { 
        twoSumProblem0.BruteForce((int[]) null, 2728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.TwoSumProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[10];
      intArray0[0] = (-1);
      int[] intArray1 = twoSumProblem0.HashMap(intArray0, 0);
      assertArrayEquals(new int[] {1, 9}, intArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[1];
      int[] intArray1 = twoSumProblem0.HashMap(intArray0, 0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[10];
      intArray0[0] = (-1);
      int[] intArray1 = twoSumProblem0.TwoPointer(intArray0, 0);
      assertArrayEquals(new int[] {1, 9}, intArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[10];
      int[] intArray1 = twoSumProblem0.TwoPointer(intArray0, 0);
      int[] intArray2 = twoSumProblem0.TwoPointer(intArray1, 0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
      assertArrayEquals(new int[] {0, 9}, intArray1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TwoSumProblem twoSumProblem0 = new TwoSumProblem();
      int[] intArray0 = new int[10];
      intArray0[0] = (-1);
      int[] intArray1 = twoSumProblem0.BruteForce(intArray0, 0);
      assertArrayEquals(new int[] {8, 9}, intArray1);
  }
}

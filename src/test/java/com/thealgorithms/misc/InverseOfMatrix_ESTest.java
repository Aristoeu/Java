/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:24:00 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.misc.InverseOfMatrix;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InverseOfMatrix_ESTest extends InverseOfMatrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[4][8];
      double[][] doubleArray1 = InverseOfMatrix.invert(doubleArray0);
      assertEquals(4, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[0][5];
      double[][] doubleArray1 = InverseOfMatrix.invert(doubleArray0);
      assertEquals(0, doubleArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        InverseOfMatrix.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("Lvl");
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        InverseOfMatrix.main(stringArray0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("-4");
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        InverseOfMatrix.main(stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.InverseOfMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        InverseOfMatrix.invert((double[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.InverseOfMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[][] doubleArray0 = new double[7][7];
      // Undeclared exception!
      try { 
        InverseOfMatrix.gaussian(doubleArray0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.InverseOfMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[][] doubleArray0 = new double[2][4];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-237.987874578631);
      doubleArray0[1] = doubleArray1;
      int[] intArray0 = new int[2];
      InverseOfMatrix.gaussian(doubleArray0, intArray0);
      assertArrayEquals(new int[] {1, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-425.51315418288);
      doubleArray0[0] = doubleArray1;
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        InverseOfMatrix.gaussian(doubleArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.misc.InverseOfMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[][] doubleArray0 = new double[8][0];
      // Undeclared exception!
      try { 
        InverseOfMatrix.invert(doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.misc.InverseOfMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("2");
      SystemInUtil.addInputLine("2");
      SystemInUtil.addInputLine("2");
      String[] stringArray0 = new String[4];
      SystemInUtil.addInputLine("2");
      SystemInUtil.addInputLine("2");
      InverseOfMatrix.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InverseOfMatrix inverseOfMatrix0 = new InverseOfMatrix();
  }
}

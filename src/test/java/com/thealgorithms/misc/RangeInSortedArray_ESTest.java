/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:01:24 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.misc.RangeInSortedArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RangeInSortedArray_ESTest extends RangeInSortedArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = RangeInSortedArray.getLessThan(intArray0, 1137, 1137, 95);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = RangeInSortedArray.getCountLessThan(intArray0, 7);
      assertEquals(3, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = RangeInSortedArray.getCountLessThan(intArray0, (-1035));
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 23;
      int[] intArray1 = RangeInSortedArray.sortedRange(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {23, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {1, 3}, intArray1);
      assertEquals(4, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[] intArray1 = RangeInSortedArray.sortedRange(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 1}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
      
      RangeInSortedArray.alteredBinSearch(intArray1, 0, (-1), 0, intArray1, false);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(2, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[1] = (-1);
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 0, intArray0, false);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[18];
      assertFalse(intArray1.equals((Object)intArray0));
      
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 0, intArray1, false);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals(18, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[16];
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 3, intArray0, false);
      assertEquals(16, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[12];
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearch(intArray0, 0, (-23), 38, intArray0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[11];
      intArray0[1] = 287;
      RangeInSortedArray.alteredBinSearch(intArray0, 287, 0, 1, intArray0, true);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[25];
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 38, (int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = (-3366);
      RangeInSortedArray.alteredBinSearch(intArray0, (-438), (-1), 3, intArray0, true);
      assertArrayEquals(new int[] {(-3366), 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = RangeInSortedArray.sortedRange(intArray0, (-843));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      assertEquals(3, intArray0.length);
      assertEquals(2, intArray1.length);
      
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearch(intArray1, 0, 1, 2, intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      RangeInSortedArray.alteredBinSearch(intArray0, (-1270), 1, 8, intArray1, true);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = RangeInSortedArray.sortedRange(intArray0, 0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
      
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 1, intArray1, false);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray1);
      assertEquals(1, intArray0.length);
      assertEquals(2, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RangeInSortedArray.sortedRange((int[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        RangeInSortedArray.getLessThan(intArray0, (-1391), (-1391), 3226);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 917
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RangeInSortedArray.getCountLessThan((int[]) null, 1880);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearchIter((int[]) null, 1588, 1588, 1588, (int[]) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      int int0 = RangeInSortedArray.getLessThan(intArray0, 0, 0, 0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {4, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[11];
      int int0 = RangeInSortedArray.getLessThan(intArray0, 1, 0, 0);
      assertEquals(1, int0);
      assertEquals(11, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        RangeInSortedArray.getLessThan((int[]) null, (-1), (-1), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = (-2811);
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, false);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[3] = 1;
      RangeInSortedArray.alteredBinSearchIter(intArray0, 1, 0, 6, intArray0, true);
      assertArrayEquals(new int[] {3, 0, 0, 1, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[5];
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 1, 6, intArray0, true);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[5];
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, false);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-807);
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, true);
      assertArrayEquals(new int[] {(-807), 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, false);
      assertArrayEquals(new int[] {4, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      RangeInSortedArray.alteredBinSearchIter(intArray0, 0, 0, 0, intArray0, true);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        RangeInSortedArray.alteredBinSearch(intArray0, 1, 0, 0, intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.misc.RangeInSortedArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 0, 0, intArray0, true);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[5];
      RangeInSortedArray.alteredBinSearch(intArray0, 0, 751, 0, intArray0, false);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[12];
      intArray0[6] = 288;
      RangeInSortedArray.alteredBinSearch(intArray0, 0, (-23), 38, intArray0, true);
      assertEquals(12, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      RangeInSortedArray.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      RangeInSortedArray rangeInSortedArray0 = new RangeInSortedArray();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = RangeInSortedArray.getCountLessThan(intArray0, 0);
      assertEquals(1, int0);
  }
}

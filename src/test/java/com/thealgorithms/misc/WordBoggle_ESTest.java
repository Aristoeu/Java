/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:12:10 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.misc.TrieNode;
import com.thealgorithms.misc.WordBoggle;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WordBoggle_ESTest extends WordBoggle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      WordBoggle.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      WordBoggle wordBoggle0 = new WordBoggle();
      assertNotNull(wordBoggle0);
      
      char[][] charArray0 = new char[4][3];
      char[] charArray1 = new char[1];
      charArray1[0] = '$';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[9];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'y';
      charArray2[1] = '=';
      charArray2[2] = '$';
      charArray2[3] = '$';
      charArray2[4] = '$';
      charArray2[5] = '$';
      charArray2[6] = '$';
      charArray2[7] = '$';
      charArray2[8] = '$';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[0];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      charArray0[2] = charArray3;
      char[] charArray4 = new char[5];
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray3));
      
      charArray4[0] = '$';
      charArray4[1] = 'y';
      charArray4[2] = '=';
      charArray4[3] = '=';
      charArray4[4] = '=';
      charArray0[3] = charArray4;
      List<Integer[]> list0 = WordBoggle.getNeighbors(0, 0, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      WordBoggle.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = 0;
      int int1 = 0;
      char[][] charArrayArray0 = null;
      // Undeclared exception!
      try { 
        WordBoggle.getNeighbors(0, 0, (char[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.WordBoggle", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[][] charArray0 = new char[2][2];
      char[] charArray1 = new char[8];
      charArray1[0] = 'V';
      charArray1[1] = 'R';
      charArray1[2] = ',';
      charArray1[3] = 'M';
      charArray1[4] = '\\';
      charArray1[5] = 'O';
      charArray1[6] = ':';
      charArray1[7] = ',';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = ',';
      charArray2[1] = 'M';
      charArray0[1] = charArray2;
      TrieNode trieNode0 = new TrieNode();
      assertNotNull(trieNode0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        WordBoggle.explore((-1826), (-1826), charArray0, trieNode0, (boolean[][]) null, linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[][] charArray0 = new char[2][2];
      char[] charArray1 = new char[7];
      charArray1[0] = 'm';
      charArray1[1] = 'j';
      charArray1[2] = 'V';
      charArray1[3] = '^';
      charArray1[4] = 'j';
      charArray1[5] = 'l';
      charArray1[6] = 'C';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'i';
      charArray2[1] = 'j';
      charArray2[2] = 'V';
      charArray2[3] = 'j';
      charArray2[4] = '^';
      charArray0[1] = charArray2;
      List<Integer[]> list0 = WordBoggle.getNeighbors(114, (-404), charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[][] charArray0 = new char[3][9];
      char[] charArray1 = new char[9];
      charArray1[0] = 'r';
      charArray1[1] = '$';
      charArray1[2] = '$';
      charArray1[3] = 'f';
      charArray1[4] = 'D';
      charArray1[5] = '4';
      charArray1[6] = 'c';
      charArray1[7] = 'J';
      charArray1[8] = 'l';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'c';
      charArray2[1] = 'J';
      charArray2[2] = '$';
      charArray2[3] = 'D';
      charArray2[4] = '$';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[9];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = 'c';
      charArray3[1] = ']';
      charArray3[2] = 'J';
      charArray3[3] = '$';
      charArray3[4] = 'J';
      charArray3[5] = '$';
      charArray3[6] = 'c';
      charArray3[7] = '4';
      charArray3[8] = 'p';
      charArray0[2] = charArray3;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      // Undeclared exception!
      try { 
        WordBoggle.boggleBoard(charArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[][] charArray0 = new char[3][8];
      char[] charArray1 = new char[0];
      charArray0[0] = charArray1;
      char[] charArray2 = new char[3];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '\'';
      charArray2[1] = 'F';
      charArray2[2] = 'p';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[0];
      assertFalse(charArray3.equals((Object)charArray1));
      assertFalse(charArray3.equals((Object)charArray2));
      
      charArray0[2] = charArray3;
      List<Integer[]> list0 = WordBoggle.getNeighbors(0, 771, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(list0);
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      List<String> list1 = WordBoggle.boggleBoard(charArray0, stringArray0);
      assertEquals(3, charArray0.length);
      assertEquals(2, stringArray0.length);
      assertNotNull(list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(list1.contains(""));
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      WordBoggle.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[][] charArray0 = new char[1][3];
      char[] charArray1 = new char[2];
      charArray1[0] = '{';
      charArray1[1] = 'C';
      charArray0[0] = charArray1;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "+$G5$Vq";
      stringArray0[1] = "com.thealgorithms.misc.TrieNode";
      stringArray0[2] = "44+C6LuGj";
      stringArray0[3] = "Iy?";
      stringArray0[4] = "";
      // Undeclared exception!
      try { 
        WordBoggle.boggleBoard(charArray0, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[][] charArray0 = new char[1][8];
      char[] charArray1 = new char[7];
      charArray1[0] = 'y';
      charArray1[1] = '-';
      charArray1[2] = '#';
      charArray1[3] = '8';
      charArray1[4] = 'D';
      charArray1[5] = '}';
      charArray1[6] = 'F';
      charArray0[0] = charArray1;
      TrieNode trieNode0 = new TrieNode();
      assertNotNull(trieNode0);
      
      boolean[][] booleanArray0 = new boolean[3][3];
      boolean[] booleanArray1 = new boolean[5];
      booleanArray1[0] = false;
      booleanArray1[1] = false;
      booleanArray1[2] = false;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[5];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = true;
      booleanArray2[4] = true;
      booleanArray0[1] = booleanArray2;
      boolean[] booleanArray3 = new boolean[3];
      assertFalse(booleanArray3.equals((Object)booleanArray1));
      assertFalse(booleanArray3.equals((Object)booleanArray2));
      
      booleanArray3[0] = true;
      booleanArray3[1] = true;
      booleanArray3[2] = false;
      booleanArray0[2] = booleanArray3;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      WordBoggle.explore(0, 0, charArray0, trieNode0, booleanArray0, linkedHashSet0);
      assertEquals(1, charArray0.length);
      assertEquals(3, booleanArray0.length);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WordBoggle wordBoggle0 = new WordBoggle();
      assertNotNull(wordBoggle0);
      
      char[][] charArray0 = new char[3][8];
      char[] charArray1 = new char[3];
      charArray1[0] = '\'';
      charArray1[1] = '%';
      charArray1[2] = '@';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '%';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[3];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = '\'';
      charArray3[1] = 'B';
      charArray3[2] = '%';
      charArray0[2] = charArray3;
      boolean[][] booleanArray0 = new boolean[2][0];
      boolean[] booleanArray1 = new boolean[6];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[4];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = true;
      booleanArray2[1] = false;
      booleanArray2[2] = false;
      booleanArray2[3] = false;
      booleanArray0[1] = booleanArray2;
      // Undeclared exception!
      try { 
        WordBoggle.explore(0, 0, charArray0, (TrieNode) null, booleanArray0, (Set<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "boggle";
      stringArray0[1] = "MXUoo?";
      stringArray0[2] = "&:TIM%|XcE6N z-s";
      WordBoggle.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      WordBoggle wordBoggle0 = new WordBoggle();
      assertNotNull(wordBoggle0);
      
      char[][] charArray0 = new char[2][2];
      char[] charArray1 = new char[1];
      charArray1[0] = 'z';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[1];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = '#';
      charArray0[1] = charArray2;
      List<Integer[]> list0 = WordBoggle.getNeighbors((-433), (-433), charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[][] charArray0 = new char[0][3];
      // Undeclared exception!
      try { 
        WordBoggle.getNeighbors((-1594), (-1594), charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.misc.WordBoggle", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      char[][] charArray0 = new char[0][8];
      // Undeclared exception!
      try { 
        WordBoggle.getNeighbors(0, 0, charArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.misc.WordBoggle", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[][] charArray0 = new char[1][9];
      char[] charArray1 = new char[6];
      charArray1[0] = 'O';
      charArray1[1] = '!';
      charArray1[2] = 'N';
      charArray1[3] = '8';
      charArray1[4] = 'M';
      charArray1[5] = 'R';
      charArray0[0] = charArray1;
      TrieNode trieNode0 = new TrieNode();
      assertNotNull(trieNode0);
      
      boolean[][] booleanArray0 = new boolean[1][9];
      boolean[] booleanArray1 = new boolean[7];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[5] = false;
      booleanArray1[6] = true;
      booleanArray0[0] = booleanArray1;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      WordBoggle.explore(0, 0, charArray0, trieNode0, booleanArray0, linkedHashSet0);
      assertEquals(1, charArray0.length);
      assertEquals(1, booleanArray0.length);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[][] charArray0 = new char[0][8];
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "b";
      stringArray0[2] = "";
      stringArray0[3] = "eX?knZK";
      List<String> list0 = WordBoggle.boggleBoard(charArray0, stringArray0);
      assertEquals(0, charArray0.length);
      assertEquals(4, stringArray0.length);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains("eX?knZK"));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WordBoggle wordBoggle0 = new WordBoggle();
      assertNotNull(wordBoggle0);
      
      char[][] charArray0 = new char[4][3];
      char[] charArray1 = new char[9];
      charArray1[0] = '}';
      charArray1[1] = '5';
      charArray1[2] = '$';
      charArray1[3] = ',';
      charArray1[4] = '1';
      charArray1[5] = '(';
      charArray1[6] = 'g';
      charArray1[7] = '=';
      charArray1[8] = '';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[5];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'g';
      charArray2[1] = '';
      charArray2[2] = '(';
      charArray2[3] = '';
      charArray2[4] = ',';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[0];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray0[2] = charArray3;
      char[] charArray4 = new char[0];
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray2));
      assertFalse(charArray4.equals((Object)charArray1));
      
      charArray0[3] = charArray4;
      List<Integer[]> list0 = WordBoggle.getNeighbors(1470, 745, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      
      char[][] charArrayArray0 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "this";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        WordBoggle.boggleBoard((char[][]) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.WordBoggle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[][] charArray0 = new char[4][8];
      char[] charArray1 = new char[5];
      charArray1[0] = 'e';
      charArray1[1] = 'n';
      charArray1[2] = ':';
      charArray1[3] = 'Z';
      charArray1[4] = '<';
      charArray0[0] = charArray1;
      char[] charArray2 = new char[2];
      assertFalse(charArray2.equals((Object)charArray1));
      
      charArray2[0] = 'n';
      charArray2[1] = ':';
      charArray0[1] = charArray2;
      char[] charArray3 = new char[9];
      assertFalse(charArray3.equals((Object)charArray2));
      assertFalse(charArray3.equals((Object)charArray1));
      
      charArray3[0] = 'Z';
      charArray3[1] = 't';
      charArray3[2] = 'n';
      charArray3[3] = 'Z';
      charArray3[4] = 'e';
      charArray3[5] = '\\';
      charArray3[6] = 'e';
      charArray3[7] = 'Z';
      charArray3[8] = ':';
      charArray0[2] = charArray3;
      char[] charArray4 = new char[3];
      assertFalse(charArray4.equals((Object)charArray3));
      assertFalse(charArray4.equals((Object)charArray1));
      assertFalse(charArray4.equals((Object)charArray2));
      
      charArray4[0] = 'e';
      charArray4[1] = 'X';
      charArray4[2] = ':';
      charArray0[3] = charArray4;
      TrieNode trieNode0 = new TrieNode();
      assertNotNull(trieNode0);
      
      boolean[][] booleanArray0 = new boolean[2][7];
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray0[0] = booleanArray1;
      boolean[] booleanArray2 = new boolean[2];
      assertFalse(booleanArray2.equals((Object)booleanArray1));
      
      booleanArray2[0] = false;
      booleanArray2[1] = false;
      booleanArray0[1] = booleanArray2;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        WordBoggle.explore(973, 973, charArray0, trieNode0, booleanArray0, linkedHashSet0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WordBoggle.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[11];
      WordBoggle.main(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WordBoggle wordBoggle0 = new WordBoggle();
      String[] stringArray0 = new String[4];
      WordBoggle.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[][] charArray0 = new char[4][1];
      char[] charArray1 = new char[5];
      charArray1[2] = 'S';
      charArray1[3] = '{';
      charArray1[4] = 'j';
      char[] charArray2 = new char[4];
      charArray2[0] = 'j';
      charArray2[2] = '{';
      char[] charArray3 = new char[6];
      charArray3[3] = 'X';
      charArray3[5] = '<';
      charArray0[2] = charArray3;
      char[] charArray4 = new char[9];
      charArray4[0] = 'X';
      charArray4[1] = 'j';
      charArray4[5] = 'j';
      charArray4[6] = 'X';
      charArray4[8] = 'j';
      charArray0[3] = charArray4;
      TrieNode trieNode0 = new TrieNode();
      boolean[][] booleanArray0 = new boolean[5][8];
      booleanArray0[1] = booleanArray0[0];
      booleanArray0[2] = booleanArray0[1];
      booleanArray0[3] = booleanArray0[0];
      boolean[] booleanArray1 = new boolean[9];
      booleanArray1[0] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      booleanArray1[4] = false;
      booleanArray1[6] = false;
      booleanArray1[8] = false;
      WordBoggle.explore(0, 0, charArray0, trieNode0, booleanArray0, (Set<String>) null);
      assertEquals(5, booleanArray0.length);
  }
}

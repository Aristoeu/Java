/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:24:02 GMT 2022
 */

package com.thealgorithms.backtracking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.backtracking.Permutation;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Permutation_ESTest extends Permutation_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer((-1839));
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((-775));
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(1);
      integerArray0[2] = integer2;
      Permutation.permutation(integerArray0);
      Permutation.permutation(integerArray0);
      Permutation permutation0 = new Permutation();
      Permutation.permutation(integerArray0);
      // Undeclared exception!
      try { 
        Permutation.permutation((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.Permutation", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Permutation permutation0 = new Permutation();
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = new Integer(3059);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((int) integerArray0[0]);
      integerArray0[2] = integer2;
      Integer integer3 = new Integer((int) integerArray0[2]);
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1204));
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(0);
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-3950));
      integerArray0[7] = integer7;
      Integer integer8 = new Integer((-387));
      integerArray0[8] = integer8;
      // Undeclared exception!
      Permutation.permutation(integerArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Permutation permutation0 = new Permutation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.thealgorithms.backtracking.Permutation";
      stringArray0[1] = "e&!M|Va7^8-VQ%a";
      stringArray0[2] = "HH,&";
      stringArray0[3] = "";
      Permutation.permutation(stringArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Permutation permutation0 = new Permutation();
      Integer[] integerArray0 = new Integer[8];
      int int0 = 107;
      Integer integer0 = new Integer(107);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(107);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(int0);
      integerArray0[2] = integer2;
      int int1 = (-1);
      Integer integer3 = new Integer((-1));
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((-1785));
      integerArray0[4] = integer4;
      Integer integer5 = new Integer(int1);
      integerArray0[5] = integer5;
      Integer integer6 = new Integer((-1));
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((int) integerArray0[4]);
      integerArray0[7] = integer7;
      // Undeclared exception!
      Permutation.permutation(integerArray0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Permutation permutation0 = new Permutation();
      String[] stringArray0 = new String[0];
      List<String[]> list0 = Permutation.permutation(stringArray0);
      assertEquals(1, list0.size());
  }
}

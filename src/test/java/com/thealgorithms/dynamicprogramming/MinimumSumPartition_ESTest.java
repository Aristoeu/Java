/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:31:40 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.MinimumSumPartition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinimumSumPartition_ESTest extends MinimumSumPartition_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 9;
      intArray0[0] = 9;
      int int1 = 1834;
      intArray0[1] = 1834;
      MinimumSumPartition.subSet(intArray0);
      MinimumSumPartition.subSet(intArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w";
      stringArray0[1] = "com.thealgorithms.dynamicprogramming.MinimumSumPartition";
      stringArray0[2] = "*#wgp?%<";
      MinimumSumPartition.main(stringArray0);
      MinimumSumPartition minimumSumPartition0 = new MinimumSumPartition();
      MinimumSumPartition.main(stringArray0);
      String[] stringArray1 = new String[0];
      MinimumSumPartition.main(stringArray1);
      // Undeclared exception!
      MinimumSumPartition.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = "7-E b}{_$Bd!";
      stringArray0[0] = "7-E b}{_$Bd!";
      String string1 = "p_@>q+)&#";
      stringArray0[1] = "p_@>q+)&#";
      MinimumSumPartition.main(stringArray0);
      MinimumSumPartition.main(stringArray0);
      MinimumSumPartition.main(stringArray0);
      MinimumSumPartition minimumSumPartition0 = new MinimumSumPartition();
      MinimumSumPartition.main(stringArray0);
      MinimumSumPartition.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "p_@>q+)&#";
      MinimumSumPartition.main(stringArray1);
      MinimumSumPartition.main(stringArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 885;
      intArray0[2] = (-725);
      intArray0[3] = 2900;
      // Undeclared exception!
      MinimumSumPartition.subSet(intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      MinimumSumPartition.main(stringArray0);
      int[] intArray0 = new int[0];
      MinimumSumPartition.getMin(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-3940);
      intArray0[2] = 5089;
      intArray0[3] = 809;
      intArray0[4] = 3233;
      intArray0[5] = 0;
      MinimumSumPartition.getMin(intArray0, (-3940));
      // Undeclared exception!
      try { 
        MinimumSumPartition.subSet(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5192
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumSumPartition", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 5110;
      MinimumSumPartition.getSum(intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MinimumSumPartition.getSum((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumSumPartition", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MinimumSumPartition.getMin((int[]) null, (-1220));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumSumPartition", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2093;
      intArray0[3] = 357;
      MinimumSumPartition.subSet(intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-742);
      intArray0[1] = (-464);
      intArray0[2] = (-3664);
      MinimumSumPartition.getMin(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 2006;
      intArray0[1] = 0;
      MinimumSumPartition.getMin(intArray0, (-2969));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = (-2678);
      intArray0[2] = 2;
      intArray0[3] = 36;
      MinimumSumPartition.getSum(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        MinimumSumPartition.subSet((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumSumPartition", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "com.thealgorithms.dynamicprogramming.MinimumSumPartition";
      stringArray0[1] = "M,Cz";
      stringArray0[2] = "";
      MinimumSumPartition.main(stringArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 792;
      intArray0[1] = (-774);
      intArray0[2] = (-2881);
      intArray0[3] = (-1527);
      intArray0[4] = 0;
      intArray0[5] = 1355;
      intArray0[6] = 1;
      // Undeclared exception!
      try { 
        MinimumSumPartition.subSet(intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumSumPartition", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vH+S~MKZE@QVf>n_D";
      stringArray0[1] = "";
      stringArray0[2] = "T),{q}r]zDl DUju";
      stringArray0[3] = "com.thealgorithms.dynamicprogramming.MinimumSumPartition";
      stringArray0[4] = "";
      stringArray0[5] = "hHZ";
      MinimumSumPartition.main(stringArray0);
      int[] intArray0 = new int[0];
      MinimumSumPartition.getSum(intArray0);
      MinimumSumPartition.subSet(intArray0);
      MinimumSumPartition.subSet(intArray0);
      MinimumSumPartition minimumSumPartition0 = new MinimumSumPartition();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "%}|3cYv!";
      stringArray0[2] = "4yN";
      stringArray0[3] = "r-ffn";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "<~7u~+^DEB";
      stringArray0[7] = "(D5s+CccdYZQ~v[7 7";
      MinimumSumPartition.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 49;
      intArray0[1] = 340;
      intArray0[2] = 296;
      intArray0[3] = 0;
      intArray0[4] = (-175);
      intArray0[5] = 2113;
      intArray0[6] = 1273;
      // Undeclared exception!
      MinimumSumPartition.subSet(intArray0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:05:55 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.UniquePaths;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UniquePaths_ESTest extends UniquePaths_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UniquePaths.uniquePaths2(1, 1, 1);
      UniquePaths.uniquePaths2(2940, 1, 2940);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UniquePaths uniquePaths0 = new UniquePaths();
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths(2671, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths2(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.dynamicprogramming.UniquePaths", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths2(0, (-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.UniquePaths", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UniquePaths uniquePaths0 = new UniquePaths();
      UniquePaths.uniquePaths(0, 777, (-1154));
      // Undeclared exception!
      UniquePaths.uniquePaths(1245, 1245, 4679);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths(0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UniquePaths uniquePaths0 = new UniquePaths();
      int int0 = 2405;
      int int1 = 197;
      // Undeclared exception!
      UniquePaths.uniquePaths2(2405, 197, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UniquePaths uniquePaths0 = new UniquePaths();
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths((-1320), (-1), (-2524));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.UniquePaths", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UniquePaths uniquePaths0 = new UniquePaths();
      // Undeclared exception!
      UniquePaths.uniquePaths(1103, 570, 1103);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      UniquePaths.uniquePaths2(1, 1, 1);
      int int1 = 0;
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths(1, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1163);
      int int1 = 1325;
      UniquePaths.uniquePaths((-1163), 1325, 1325);
      int int2 = 0;
      // Undeclared exception!
      UniquePaths.uniquePaths2(1325, 1325, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1);
      UniquePaths.uniquePaths2(1, 1, (-1));
      UniquePaths uniquePaths0 = new UniquePaths();
      UniquePaths.uniquePaths((-1), 1, 1);
      // Undeclared exception!
      try { 
        UniquePaths.uniquePaths(741, (-1228), (-1228));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.UniquePaths", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UniquePaths.uniquePaths2(4, 4, 4);
      int int0 = 2352;
      int int1 = 1427;
      int int2 = (-3016);
      // Undeclared exception!
      UniquePaths.uniquePaths(2352, 1427, (-3016));
  }
}

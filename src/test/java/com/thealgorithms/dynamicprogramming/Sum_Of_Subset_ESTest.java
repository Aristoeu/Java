/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:26:41 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.Sum_Of_Subset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sum_Of_Subset_ESTest extends Sum_Of_Subset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[] intArray0 = new int[20];
      intArray0[0] = (-1879);
      int int0 = 18;
      intArray0[1] = 18;
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 18, (-1879));
      assertFalse(boolean0);
      assertEquals(20, intArray0.length);
      
      boolean boolean1 = Sum_Of_Subset.subsetSum(intArray0, (-1879), 0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(20, intArray0.length);
      
      String[] stringArray0 = new String[0];
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset sum_Of_Subset0 = new Sum_Of_Subset();
      assertNotNull(sum_Of_Subset0);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      Sum_Of_Subset.subsetSum(intArray0, 18, 8);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "d-}kb[??}1{icJE";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "q91 jfq`*F{nJsgRF";
      stringArray0[5] = "Nope, that number does not exist";
      stringArray0[6] = "";
      stringArray0[7] = "hd-~0rL u";
      Sum_Of_Subset.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3894;
      intArray0[1] = 964;
      intArray0[2] = (-1599);
      intArray0[3] = (-168);
      intArray0[4] = (-1);
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 3, 964);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3894, 964, (-1599), (-168), (-1)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "iLUmpNu+3|r@v]";
      Sum_Of_Subset.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      Sum_Of_Subset.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = (-5349);
      intArray0[2] = 0;
      intArray0[3] = 768;
      intArray0[4] = (-1381);
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 0, 3);
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {3, (-5349), 0, 768, (-1381)}, intArray0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        Sum_Of_Subset.subsetSum((int[]) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1);
      intArray0[3] = 1;
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 0, 316);
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, (-1), 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Sum_Of_Subset sum_Of_Subset0 = new Sum_Of_Subset();
      assertNotNull(sum_Of_Subset0);
      
      int[] intArray0 = new int[0];
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 3, (-3246));
      assertFalse(boolean0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, 702, 0);
      assertTrue(boolean0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {(-1), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Sum_Of_Subset sum_Of_Subset0 = new Sum_Of_Subset();
      assertNotNull(sum_Of_Subset0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "1UE(g<!ywL/)3Q)$d)7";
      stringArray0[2] = "com.thealgorithms.dynamicprogramming.Sum_Of_Subset";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Sum_Of_Subset.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      int[] intArray0 = new int[3];
      intArray0[0] = (-495);
      intArray0[1] = 3;
      intArray0[2] = (-367);
      boolean boolean0 = Sum_Of_Subset.subsetSum(intArray0, (-58), (-58));
      assertFalse(boolean0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-495), 3, (-367)}, intArray0);
      
      // Undeclared exception!
      try { 
        Sum_Of_Subset.subsetSum(intArray0, 2470, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Sum_Of_Subset.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Sum_Of_Subset sum_Of_Subset0 = new Sum_Of_Subset();
      Sum_Of_Subset.main(stringArray0);
      Sum_Of_Subset.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}

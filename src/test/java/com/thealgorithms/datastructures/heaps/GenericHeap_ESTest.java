/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:16:20 GMT 2022
 */

package com.thealgorithms.datastructures.heaps;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.heaps.GenericHeap;
import java.util.ArrayList;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericHeap_ESTest extends GenericHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("$AqJf;^Z");
      genericHeap0.add("$AqJf;^Z");
      genericHeap0.add("$AqJf;^Z");
      genericHeap0.add("$AqJf;^Z");
      String string0 = genericHeap0.remove();
      assertEquals("$AqJf;^Z", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("WHy#]L\"%G:BTafzzj");
      genericHeap0.updatePriority("WHy#]L\"%G:BTafzzj");
      assertFalse(genericHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("");
      int int0 = genericHeap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.data.add((String) null);
      String string0 = genericHeap0.remove();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      genericHeap0.data = arrayList0;
      arrayList0.add((String) null);
      String string0 = genericHeap0.get();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.data.add("y:~dZ@<2hHZ`dWns");
      String string0 = genericHeap0.get();
      assertEquals("y:~dZ@<2hHZ`dWns", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      HashMap<String, Integer> hashMap0 = genericHeap0.map;
      Integer integer0 = new Integer(0);
      hashMap0.put("", integer0);
      // Undeclared exception!
      try { 
        genericHeap0.updatePriority("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      Integer integer0 = Integer.valueOf((-1));
      genericHeap0.map.put((String) null, integer0);
      // Undeclared exception!
      try { 
        genericHeap0.updatePriority((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.data = null;
      // Undeclared exception!
      try { 
        genericHeap0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("");
      genericHeap0.data.add("");
      genericHeap0.data.add((String) null);
      // Undeclared exception!
      try { 
        genericHeap0.remove();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      ArrayList<String> arrayList0 = genericHeap0.data;
      genericHeap0.data = arrayList0;
      genericHeap0.data = null;
      // Undeclared exception!
      try { 
        genericHeap0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericHeap<Integer> genericHeap0 = new GenericHeap<Integer>();
      genericHeap0.data = null;
      // Undeclared exception!
      try { 
        genericHeap0.get();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.GenericHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      // Undeclared exception!
      try { 
        genericHeap0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.GenericHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      int int0 = genericHeap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("A+");
      genericHeap0.add("A+");
      genericHeap0.data.add("vc+N^H6`");
      genericHeap0.data.add("A+");
      String string0 = genericHeap0.remove();
      assertEquals("A+", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("A+");
      genericHeap0.add("A+");
      genericHeap0.data.add("vc+N^H6`");
      String string0 = genericHeap0.remove();
      assertEquals("A+", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GenericHeap<Integer> genericHeap0 = new GenericHeap<Integer>();
      boolean boolean0 = genericHeap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      genericHeap0.add("$AqJf;^Z");
      genericHeap0.add(",W_|iBs>REaxN+Gu{nI");
      genericHeap0.add("$AqJf;^Z");
      genericHeap0.add(",W_|iBs>REaxN+Gu{nI");
      String string0 = genericHeap0.remove();
      assertEquals(",W_|iBs>REaxN+Gu{nI", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      // Undeclared exception!
      try { 
        genericHeap0.remove();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      // Undeclared exception!
      try { 
        genericHeap0.get();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      // Undeclared exception!
      try { 
        genericHeap0.updatePriority(",W_|iBs>REaxN+Gu{nI");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.GenericHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GenericHeap<String> genericHeap0 = new GenericHeap<String>();
      assertTrue(genericHeap0.isEmpty());
      
      genericHeap0.add("");
      boolean boolean0 = genericHeap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GenericHeap<Integer> genericHeap0 = new GenericHeap<Integer>();
      genericHeap0.display();
      assertEquals(0, genericHeap0.size());
  }
}

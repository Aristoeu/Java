/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:48:24 GMT 2022
 */

package com.thealgorithms.datastructures.heaps;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.heaps.FibonacciHeap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FibonacciHeap_ESTest extends FibonacciHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(5017);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(5017);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-403));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(5017);
      fibonacciHeap0.meld(fibonacciHeap1);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode2 = fibonacciHeap0.insert(5017);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode2);
      fibonacciHeap0.insert(5017);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(5017);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(5017);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-403));
      fibonacciHeap0.insert(5017);
      fibonacciHeap0.meld(fibonacciHeap1);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(6);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.insert(5017);
      fibonacciHeap0.potential();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(1246);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(1872);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap(0);
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-1));
      fibonacciHeap0.insert((-1));
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      FibonacciHeap.totalLinks();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(0);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      FibonacciHeap.totalCuts();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-713));
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.size();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-1));
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap(729);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.potential();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-1));
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap(729);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.findMin();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(2980);
      fibonacciHeap0.findMin();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(3837);
      // Undeclared exception!
      try { 
        fibonacciHeap0.meld((FibonacciHeap) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-107));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.new HeapNode((-107));
      fibonacciHeap0.meld(fibonacciHeap0);
      fibonacciHeap0.meld(fibonacciHeap0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      // Undeclared exception!
      try { 
        fibonacciHeap0.deleteMin();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.FibonacciHeap$HeapNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap(0);
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap1.insert(0);
      // Undeclared exception!
      try { 
        fibonacciHeap1.deleteMin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.heaps.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(5017);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(5017);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-416));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(5017);
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      fibonacciHeap0.insert(6);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      // Undeclared exception!
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.findMin();
      fibonacciHeap0.deleteMin();
      // Undeclared exception!
      try { 
        fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-2547));
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap();
      fibonacciHeap1.meld(fibonacciHeap0);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      // Undeclared exception!
      fibonacciHeap0.countersRep();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-713));
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.insert(1078);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(1078);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.insert(0);
      fibonacciHeap0.meld(fibonacciHeap1);
      // Undeclared exception!
      try { 
        fibonacciHeap1.countersRep();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-713));
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.insert(1078);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(1078);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.insert(0);
      fibonacciHeap0.deleteMin();
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      boolean boolean0 = fibonacciHeap0.empty();
      assertEquals(0, fibonacciHeap0.potential());
      assertTrue(boolean0);
      assertEquals(0, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      boolean boolean0 = fibonacciHeap0.empty();
      assertFalse(boolean0);
      assertEquals(1, fibonacciHeap0.potential());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-107));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.new HeapNode((-107));
      int int0 = fibonacciHeap_HeapNode0.getKey();
      assertEquals(1, fibonacciHeap0.potential());
      assertEquals((-107), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap();
      int int0 = fibonacciHeap0.size();
      assertEquals(0, fibonacciHeap0.potential());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(5017);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(5017);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-403));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert(5017);
      fibonacciHeap0.meld(fibonacciHeap1);
      fibonacciHeap0.insert(6);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.insert(5017);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      assertEquals(3, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(5017);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(5017);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-421));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap1.insert(5017);
      fibonacciHeap0.meld(fibonacciHeap1);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode2 = fibonacciHeap0.insert(5017);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode2);
      fibonacciHeap0.insert(5017);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.deleteMin();
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      assertEquals(2, fibonacciHeap1.size());
      assertEquals(7, fibonacciHeap0.totalLinks());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      fibonacciHeap0.insert((-2547));
      fibonacciHeap0.countersRep();
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-28));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-28));
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-28));
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.countersRep();
      assertEquals(0, fibonacciHeap1.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      fibonacciHeap0.insert((-2547));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(1148);
      fibonacciHeap0.insert((-2547));
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      assertEquals(2, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-28));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-28));
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap((-28));
      fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap1.deleteMin();
      assertEquals(0, fibonacciHeap1.potential());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap();
      fibonacciHeap0.meld(fibonacciHeap1);
      assertEquals(1, fibonacciHeap0.size());
      assertEquals(0, fibonacciHeap1.potential());
      assertEquals(0, fibonacciHeap1.size());
      assertEquals(1, fibonacciHeap0.potential());
      assertTrue(fibonacciHeap1.empty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = FibonacciHeap.totalLinks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = FibonacciHeap.totalCuts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(0);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.findMin();
      assertEquals(0, fibonacciHeap_HeapNode0.key);
      assertEquals(1, fibonacciHeap0.potential());
      assertEquals(1, fibonacciHeap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap(1246);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert(1246);
      FibonacciHeap fibonacciHeap1 = new FibonacciHeap(0);
      fibonacciHeap0.meld(fibonacciHeap1);
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap1.insert(1872);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      // Undeclared exception!
      try { 
        fibonacciHeap1.delete(fibonacciHeap_HeapNode0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.heaps.FibonacciHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FibonacciHeap fibonacciHeap0 = new FibonacciHeap((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode0 = fibonacciHeap0.insert((-1));
      FibonacciHeap.HeapNode fibonacciHeap_HeapNode1 = fibonacciHeap0.insert((-1));
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      fibonacciHeap0.meld(fibonacciHeap0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode0);
      fibonacciHeap0.delete(fibonacciHeap_HeapNode1);
      // Undeclared exception!
      fibonacciHeap0.deleteMin();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:05:34 GMT 2022
 */

package com.thealgorithms.datastructures.stacks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.stacks.LinkedListStack;
import com.thealgorithms.datastructures.stacks.Node;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedListStack_ESTest extends LinkedListStack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(0);
      linkedListStack0.push(0);
      linkedListStack0.toString();
      assertEquals(2, linkedListStack0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(1);
      int int0 = linkedListStack0.pop();
      assertEquals(0, linkedListStack0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(1);
      int int0 = linkedListStack0.peek();
      assertEquals(1, linkedListStack0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push((-764));
      int int0 = linkedListStack0.peek();
      assertEquals(1, linkedListStack0.getSize());
      assertEquals((-764), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(0);
      int int0 = linkedListStack0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      Node node0 = new Node((-1));
      linkedListStack0.head = node0;
      node0.next = linkedListStack0.head;
      // Undeclared exception!
      linkedListStack0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(2);
      Node node0 = new Node((-4807));
      linkedListStack0.head = node0;
      linkedListStack0.push(2);
      linkedListStack0.head = node0;
      linkedListStack0.pop();
      // Undeclared exception!
      try { 
        linkedListStack0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.stacks.LinkedListStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(47);
      linkedListStack0.head = null;
      // Undeclared exception!
      try { 
        linkedListStack0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.stacks.LinkedListStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      boolean boolean0 = linkedListStack0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(0);
      boolean boolean0 = linkedListStack0.isEmpty();
      assertEquals(1, linkedListStack0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      // Undeclared exception!
      try { 
        linkedListStack0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      // Undeclared exception!
      try { 
        linkedListStack0.peek();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Empty stack. Nothing to pop
         //
         verifyException("com.thealgorithms.datastructures.stacks.LinkedListStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(0);
      int int0 = linkedListStack0.peek();
      assertEquals(1, linkedListStack0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      // Undeclared exception!
      try { 
        linkedListStack0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // Empty stack. Nothing to pop
         //
         verifyException("com.thealgorithms.datastructures.stacks.LinkedListStack", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      linkedListStack0.push(0);
      assertEquals(1, linkedListStack0.getSize());
      
      int int0 = linkedListStack0.pop();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedListStack linkedListStack0 = new LinkedListStack();
      int int0 = linkedListStack0.getSize();
      assertEquals(0, int0);
  }
}

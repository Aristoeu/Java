/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:45:39 GMT 2022
 */

package com.thealgorithms.datastructures.queues;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.queues.Queue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Queue_ESTest extends Queue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert((-620));
      queue0.insert((-620));
      queue0.toString();
      assertEquals((-620), queue0.peekFront());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert((-620));
      queue0.insert((-620));
      int int0 = queue0.remove();
      assertEquals((-620), queue0.peekFront());
      assertEquals((-620), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(0);
      assertEquals(1, queue0.getSize());
      
      int int0 = queue0.remove();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(0);
      int int0 = queue0.peekRear();
      assertFalse(queue0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(4695);
      int int0 = queue0.peekRear();
      assertEquals(1, queue0.getSize());
      assertEquals(4695, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert((-1));
      int int0 = queue0.peekRear();
      assertFalse(queue0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(4695);
      int int0 = queue0.peekFront();
      assertFalse(queue0.isEmpty());
      assertEquals(4695, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert((-620));
      int int0 = queue0.peekFront();
      assertEquals(1, queue0.getSize());
      assertEquals((-620), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(0);
      int int0 = queue0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Queue queue0 = new Queue(0);
      // Undeclared exception!
      try { 
        queue0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Queue queue0 = new Queue(0);
      // Undeclared exception!
      try { 
        queue0.peekFront();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.queues.Queue", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Queue queue0 = null;
      try {
        queue0 = new Queue((-2456));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.Queue", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Queue queue0 = new Queue(0);
      boolean boolean0 = queue0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Queue queue0 = new Queue();
      boolean boolean0 = queue0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Queue queue0 = new Queue();
      boolean boolean0 = queue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(432);
      boolean boolean0 = queue0.isEmpty();
      assertEquals(432, queue0.peekFront());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Queue queue0 = new Queue();
      // Undeclared exception!
      queue0.toString();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Queue queue0 = new Queue();
      int int0 = queue0.remove();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Queue queue0 = new Queue(0);
      assertTrue(queue0.isFull());
      
      boolean boolean0 = queue0.insert(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.insert(2022);
      assertEquals(2022, queue0.peekFront());
      
      int int0 = queue0.remove();
      assertEquals(2022, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Queue queue0 = new Queue(0);
      // Undeclared exception!
      try { 
        queue0.peekRear();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.queues.Queue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Queue queue0 = new Queue();
      int int0 = queue0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Queue queue0 = new Queue();
      queue0.peekFront();
      assertTrue(queue0.isEmpty());
  }
}

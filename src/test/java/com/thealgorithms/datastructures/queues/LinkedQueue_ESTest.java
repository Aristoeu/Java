/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:25:39 GMT 2022
 */

package com.thealgorithms.datastructures.queues;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.queues.LinkedQueue;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedQueue_ESTest extends LinkedQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue(2263);
      int int0 = linkedQueue0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue(0);
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.peekRear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue((-3165));
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.peekRear();
      assertEquals((-3165), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue(0);
      int int0 = linkedQueue0.peekFront();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue(1);
      boolean boolean0 = linkedQueue0.enqueue((-1893));
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.dequeue();
      assertEquals(1, int0);
      
      int int1 = linkedQueue0.peekFront();
      assertEquals((-1893), int1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue(0);
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.dequeue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue(1);
      assertTrue(boolean0);
      
      String string0 = linkedQueue0.toString();
      assertEquals("[1]", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue(1);
      linkedQueue0.clear();
      assertEquals(0, linkedQueue0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue(1);
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.peekRear();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.enqueue(1);
      assertTrue(boolean0);
      
      int int0 = linkedQueue0.peekFront();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue((-1599));
      assertEquals(1, linkedQueue0.size());
      
      linkedQueue0.dequeue();
      String string0 = linkedQueue0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      boolean boolean0 = linkedQueue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      LinkedQueue.Node linkedQueue_Node0 = linkedQueue0.new Node(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      int int0 = linkedQueue0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      linkedQueue0.enqueue(1);
      boolean boolean0 = linkedQueue0.isEmpty();
      assertEquals(1, linkedQueue0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      LinkedQueue.Node linkedQueue_Node0 = linkedQueue0.new Node();
      LinkedQueue.Node linkedQueue_Node1 = linkedQueue0.new Node((-2323), linkedQueue_Node0);
      assertFalse(linkedQueue_Node1.equals((Object)linkedQueue_Node0));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      // Undeclared exception!
      try { 
        linkedQueue0.peekRear();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("com.thealgorithms.datastructures.queues.LinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      // Undeclared exception!
      try { 
        linkedQueue0.peekFront();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("com.thealgorithms.datastructures.queues.LinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LinkedQueue.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedQueue linkedQueue0 = new LinkedQueue();
      // Undeclared exception!
      try { 
        linkedQueue0.dequeue();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // queue is empty
         //
         verifyException("com.thealgorithms.datastructures.queues.LinkedQueue", e);
      }
  }
}

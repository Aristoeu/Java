/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:51:21 GMT 2022
 */

package com.thealgorithms.datastructures.queues;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.queues.PriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PriorityQueue_ESTest extends PriorityQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(616);
      priorityQueue0.insert(616);
      priorityQueue0.remove();
      priorityQueue0.insert(0);
      priorityQueue0.insert(616);
      assertEquals(2, priorityQueue0.getSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(616);
      priorityQueue0.insert(616);
      priorityQueue0.insert(0);
      priorityQueue0.insert(616);
      assertEquals(3, priorityQueue0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(852);
      priorityQueue0.insert(0);
      int int0 = priorityQueue0.remove();
      assertTrue(priorityQueue0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2101);
      priorityQueue0.insert((-1199));
      int int0 = priorityQueue0.remove();
      assertEquals(0, priorityQueue0.getSize());
      assertEquals((-1199), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(1105);
      priorityQueue0.insert(3535);
      priorityQueue0.remove();
      priorityQueue0.insert(1105);
      priorityQueue0.remove();
      priorityQueue0.insert(3535);
      priorityQueue0.remove();
      priorityQueue0.insert(0);
      int int0 = priorityQueue0.peek();
      assertEquals(1, priorityQueue0.getSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(945);
      priorityQueue0.insert(1);
      int int0 = priorityQueue0.peek();
      assertEquals(1, priorityQueue0.getSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2101);
      priorityQueue0.insert((-1199));
      int int0 = priorityQueue0.peek();
      assertEquals(1, priorityQueue0.getSize());
      assertEquals((-1199), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(945);
      priorityQueue0.insert(1);
      int int0 = priorityQueue0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PriorityQueue priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue((-3013));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(616);
      priorityQueue0.isFull();
      assertTrue(priorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(0);
      boolean boolean0 = priorityQueue0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2913);
      priorityQueue0.insert(2913);
      boolean boolean0 = priorityQueue0.isEmpty();
      assertEquals(1, priorityQueue0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(1);
      priorityQueue0.insert(1);
      // Undeclared exception!
      try { 
        priorityQueue0.insert(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Queue is full
         //
         verifyException("com.thealgorithms.datastructures.queues.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2913);
      priorityQueue0.insert(2913);
      priorityQueue0.insert(29);
      assertEquals(2, priorityQueue0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2913);
      // Undeclared exception!
      try { 
        priorityQueue0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.queues.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(2913);
      // Undeclared exception!
      try { 
        priorityQueue0.remove();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.queues.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(1);
      int int0 = priorityQueue0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PriorityQueue priorityQueue0 = new PriorityQueue(0);
      boolean boolean0 = priorityQueue0.isEmpty();
      assertTrue(priorityQueue0.isFull());
      assertTrue(boolean0);
  }
}

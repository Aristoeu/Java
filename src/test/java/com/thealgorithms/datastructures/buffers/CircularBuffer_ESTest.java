/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:54:27 GMT 2022
 */

package com.thealgorithms.datastructures.buffers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.buffers.CircularBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularBuffer_ESTest extends CircularBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CircularBuffer<Object> circularBuffer0 = new CircularBuffer<Object>(1877);
      Integer integer0 = new Integer((-1));
      circularBuffer0.put(integer0);
      assertFalse(circularBuffer0.isEmpty());
      
      circularBuffer0.get();
      assertTrue(circularBuffer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CircularBuffer<Object> circularBuffer0 = null;
      try {
        circularBuffer0 = new CircularBuffer<Object>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.buffers.CircularBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CircularBuffer<Object> circularBuffer0 = new CircularBuffer<Object>(3433);
      boolean boolean0 = circularBuffer0.isFull();
      assertTrue(circularBuffer0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CircularBuffer<String> circularBuffer0 = new CircularBuffer<String>(0);
      boolean boolean0 = circularBuffer0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CircularBuffer<Object> circularBuffer0 = new CircularBuffer<Object>(885);
      assertTrue(circularBuffer0.isEmpty());
      
      circularBuffer0.put((Object) null);
      boolean boolean0 = circularBuffer0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CircularBuffer<Integer> circularBuffer0 = new CircularBuffer<Integer>(313);
      boolean boolean0 = circularBuffer0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CircularBuffer<String> circularBuffer0 = new CircularBuffer<String>(1);
      boolean boolean0 = circularBuffer0.put((String) null);
      assertTrue(boolean0);
      
      boolean boolean1 = circularBuffer0.put((String) null);
      assertFalse(circularBuffer0.isEmpty());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CircularBuffer<String> circularBuffer0 = new CircularBuffer<String>(1);
      circularBuffer0.get();
      assertFalse(circularBuffer0.isFull());
      assertTrue(circularBuffer0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CircularBuffer<String> circularBuffer0 = new CircularBuffer<String>(1);
      circularBuffer0.put((String) null);
      circularBuffer0.get();
      boolean boolean0 = circularBuffer0.put((String) null);
      assertTrue(circularBuffer0.isFull());
      assertFalse(circularBuffer0.isEmpty());
      assertTrue(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:47:07 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.LevelOrderTraversal;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevelOrderTraversal_ESTest extends LevelOrderTraversal_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.root = null;
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = levelOrderTraversal0.new Node(656);
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node0, 1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = null;
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal.Node levelOrderTraversal_Node1 = levelOrderTraversal0.new Node(0);
      levelOrderTraversal0.root = levelOrderTraversal_Node1;
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 1);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 0);
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 0);
      int int0 = levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      levelOrderTraversal_Node1.data = (-1);
      levelOrderTraversal_Node1.left = levelOrderTraversal0.root;
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal.Node levelOrderTraversal_Node2 = levelOrderTraversal_Node1.left;
      levelOrderTraversal_Node2.left = levelOrderTraversal_Node1;
      int int1 = (-1903);
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node2, int1);
      int int2 = (-1);
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node1, int2);
      levelOrderTraversal_Node1.right = levelOrderTraversal0.root;
      levelOrderTraversal0.height(levelOrderTraversal_Node1.left);
      int int3 = 0;
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node1, int3);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      int int4 = (-3775);
      levelOrderTraversal_Node1.left.data = int4;
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node1, int0);
      levelOrderTraversal0.height(levelOrderTraversal_Node0);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = levelOrderTraversal0.new Node(0);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal_Node0.right = null;
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal levelOrderTraversal1 = new LevelOrderTraversal(levelOrderTraversal_Node0);
      levelOrderTraversal1.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal.Node levelOrderTraversal_Node1 = levelOrderTraversal1.new Node((-1));
      levelOrderTraversal_Node1.data = 0;
      levelOrderTraversal1.printGivenLevel(levelOrderTraversal_Node1, 0);
      levelOrderTraversal0.height(levelOrderTraversal_Node0);
      levelOrderTraversal1.printLevelOrder();
      int int0 = levelOrderTraversal0.height(levelOrderTraversal_Node1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 472);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.root = null;
      levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 1155);
      levelOrderTraversal0.printGivenLevel((LevelOrderTraversal.Node) null, 1);
      levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = levelOrderTraversal0.new Node(3235);
      levelOrderTraversal_Node0.data = 0;
      int int0 = levelOrderTraversal0.height(levelOrderTraversal_Node0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      int int0 = levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = levelOrderTraversal0.new Node(0);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal_Node0.right = null;
      levelOrderTraversal0.printLevelOrder();
      LevelOrderTraversal levelOrderTraversal1 = new LevelOrderTraversal(levelOrderTraversal_Node0);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal_Node0.left = null;
      levelOrderTraversal1.printGivenLevel(levelOrderTraversal_Node0, 0);
      levelOrderTraversal1.printLevelOrder();
      levelOrderTraversal1.printLevelOrder();
      assertNotSame(levelOrderTraversal0, levelOrderTraversal1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LevelOrderTraversal levelOrderTraversal0 = new LevelOrderTraversal((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      LevelOrderTraversal.Node levelOrderTraversal_Node0 = levelOrderTraversal0.new Node((-1011));
      levelOrderTraversal_Node0.left = null;
      levelOrderTraversal0.printGivenLevel(levelOrderTraversal_Node0, 1088);
      levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.height((LevelOrderTraversal.Node) null);
      levelOrderTraversal0.printLevelOrder();
      levelOrderTraversal0.printLevelOrder();
  }
}

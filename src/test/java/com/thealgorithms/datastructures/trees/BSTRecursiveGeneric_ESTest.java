/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:28:06 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.BSTRecursiveGeneric;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BSTRecursiveGeneric_ESTest extends BSTRecursiveGeneric_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add((String) null);
      // Undeclared exception!
      try { 
        bSTRecursiveGeneric0.remove("hills was inserted but not found");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.trees.BSTRecursiveGeneric", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("xq(4Ds./O0");
      // Undeclared exception!
      try { 
        bSTRecursiveGeneric0.find((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("");
      // Undeclared exception!
      try { 
        bSTRecursiveGeneric0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BSTRecursiveGeneric<Integer> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<Integer>();
      Integer integer0 = new Integer(1570);
      bSTRecursiveGeneric0.add(integer0);
      boolean boolean0 = bSTRecursiveGeneric0.find(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      boolean boolean0 = bSTRecursiveGeneric0.find((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add((String) null);
      bSTRecursiveGeneric0.inorder();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("");
      bSTRecursiveGeneric0.postorder();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("Since boy was not present so deleting would do no change");
      bSTRecursiveGeneric0.add("com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node");
      bSTRecursiveGeneric0.add("XS.P]S2/n");
      bSTRecursiveGeneric0.postorder();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("Since boy was not present so deleting would do no change");
      bSTRecursiveGeneric0.preorder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("Since boy was not present so deleting would do no change");
      bSTRecursiveGeneric0.add("com.thealgorithms.datastructures.trees.BSTRecursiveGeneric$Node");
      bSTRecursiveGeneric0.add("XS.P]S2/n");
      bSTRecursiveGeneric0.preorder();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("");
      bSTRecursiveGeneric0.add(")!:I^$/sur6[T0");
      List<String> list0 = bSTRecursiveGeneric0.inorderSort();
      assertTrue(list0.contains(")!:I^$/sur6[T0"));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("N/^2b8hCNuyTn");
      bSTRecursiveGeneric0.add("");
      List<String> list0 = bSTRecursiveGeneric0.inorderSort();
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.inorder();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("date was just deleted from BST");
      bSTRecursiveGeneric0.add("date was just deleted from BST");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("GD{oB`[4k8jHcuzkzz");
      bSTRecursiveGeneric0.add("EUc$K");
      bSTRecursiveGeneric0.add("&Hx");
      bSTRecursiveGeneric0.add("|a");
      bSTRecursiveGeneric0.remove("GD{oB`[4k8jHcuzkzz");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("fg/kDm%'8_Cm5d");
      bSTRecursiveGeneric0.add("date was just deleted from BST");
      bSTRecursiveGeneric0.remove("fg/kDm%'8_Cm5d");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.add("GD{oB`[4k8jHcuzkzz");
      bSTRecursiveGeneric0.add("&Hx");
      bSTRecursiveGeneric0.remove("GD{oB`[4k8jHcuzkzz");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[3];
      BSTRecursiveGeneric.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.postorder();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      List<String> list0 = bSTRecursiveGeneric0.inorderSort();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BSTRecursiveGeneric<String> bSTRecursiveGeneric0 = new BSTRecursiveGeneric<String>();
      bSTRecursiveGeneric0.preorder();
  }
}

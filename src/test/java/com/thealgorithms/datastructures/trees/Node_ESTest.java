/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:20:30 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int int0 = (-2633);
      Node node0 = new Node((-2633));
      node0.insert((-1589));
      Node node1 = new Node((-2633));
      node0.printPreOrder();
      node0.left = node1;
      node1.left = node0;
      // Undeclared exception!
      try { 
        node1.left.printInOrder();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Node node0 = new Node(1);
      node0.printPostOrder();
      Node node1 = new Node(113);
      node0.left = node1;
      node0.printLevelOrder();
      node0.printLevelOrder();
      node0.left.right = node1;
      node0.printPreOrder();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      node0.insert(0);
      Node node1 = node0.right;
      node0.left = node1;
      node0.printLevelOrder();
      node0.printLevelOrder();
      int int1 = 0;
      node0.left.insert(0);
      int int2 = (-1417);
      node0.insert((-1417));
      node1.left = node0;
      // Undeclared exception!
      node1.printLevelOrder();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Node node0 = new Node(1111);
      node0.data = 1111;
      Node node1 = new Node(1);
      node1.printPreOrder();
      node0.left = node1;
      node0.left = node1;
      node0.printPreOrder();
      node1.right = node0.left;
      // Undeclared exception!
      try { 
        node0.printPostOrder();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Node node0 = new Node(1035);
      node0.printInOrder();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Node node0 = new Node(1);
      node0.data = 1;
      Node node1 = new Node((-62));
      node0.left = node1;
      node0.printInOrder();
      node0.printInOrder();
      node0.insert((-3687));
      node0.printPostOrder();
      node0.left.printLevelOrder();
      node0.printPostOrder();
      node0.printPreOrder();
      node1.printLevelOrder();
      node0.printLevelOrder();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Node node0 = new Node((-161));
      node0.printPostOrder();
      node0.printLevelOrder();
      Node node1 = new Node(0);
      node0.left = node1;
      node0.printPostOrder();
      node0.printPostOrder();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Node node0 = new Node((-1));
      node0.insert((-1));
      node0.printLevelOrder();
      node0.printPostOrder();
      node0.printLevelOrder();
      node0.insert(460);
      node0.printLevelOrder();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Node node0 = new Node(1);
      node0.printPreOrder();
      node0.printLevelOrder();
      node0.printPreOrder();
      int int0 = (-1);
      Node node1 = new Node((-1));
      node0.right = node1;
      node1.insert(1);
      node0.right.printLevelOrder();
      node0.insert((-1536));
      node0.printInOrder();
      node0.right.printPreOrder();
      node0.right.left = node1;
      node0.right.insert((-1536));
      node0.left = node1;
      node0.printPreOrder();
      node0.printLevelOrder();
      int int1 = 1;
      node0.left.data = int1;
      node0.right.printPostOrder();
      node1.printPostOrder();
      node0.right.insert(int0);
      node0.printPreOrder();
      node0.left.printInOrder();
      node0.printInOrder();
      node0.right.left.printInOrder();
      node0.right.left.printLevelOrder();
      node0.printInOrder();
      node0.left.printInOrder();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Node node0 = new Node(0);
      Node node1 = new Node(2980);
      node0.right = node1;
      Node node2 = node0.right;
      node0.left = node2;
      node0.printLevelOrder();
      node0.printPostOrder();
      node0.printPreOrder();
      node0.left.data = (-664);
      node0.printPreOrder();
      node0.insert(0);
      node0.printInOrder();
      node2.printLevelOrder();
      node0.insert((-664));
      assertFalse(node0.equals((Object)node2));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:22:19 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.GenericTree;
import java.util.InputMismatchException;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericTree_ESTest extends GenericTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.depthcaller((-25));
      assertEquals(1, genericTree0.size2call());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      boolean boolean0 = genericTree0.findcall((-1959));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SystemInUtil.addInputLine("-0");
      SystemInUtil.addInputLine("-0");
      GenericTree genericTree0 = new GenericTree();
      assertEquals(0, genericTree0.maxcall());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("+4");
      SystemInUtil.addInputLine("-2");
      GenericTree genericTree0 = new GenericTree();
      int int0 = genericTree0.maxcall();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("z4]?cciya@3w");
      GenericTree genericTree0 = null;
      try {
        genericTree0 = new GenericTree();
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.levelorder();
      assertEquals(0, genericTree0.heightcall());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.depthcaller(1);
      assertEquals(0, genericTree0.heightcall());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      boolean boolean0 = genericTree0.findcall(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SystemInUtil.addInputLine("1");
      SystemInUtil.addInputLine("1");
      GenericTree genericTree0 = null;
      try {
        genericTree0 = new GenericTree();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      int int0 = genericTree0.maxcall();
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      int int0 = genericTree0.size2call();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.depthcaller(0);
      assertEquals(0, genericTree0.heightcall());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.display();
      assertEquals((-7), genericTree0.maxcall());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      int int0 = genericTree0.heightcall();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.removeleavescall();
      assertEquals(1, genericTree0.size2call());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.postordercall();
      assertEquals(0, genericTree0.heightcall());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("-7");
      SystemInUtil.addInputLine("-7");
      GenericTree genericTree0 = new GenericTree();
      genericTree0.preordercall();
      assertEquals(1, genericTree0.size2call());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SystemInUtil.addInputLine("-2");
      SystemInUtil.addInputLine("-2");
      GenericTree genericTree0 = new GenericTree();
      boolean boolean0 = genericTree0.findcall((-2));
      assertTrue(boolean0);
  }
}

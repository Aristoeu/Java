/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:50:25 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.DoublyLinkedList;
import com.thealgorithms.datastructures.lists.Link;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DoublyLinkedList_ESTest extends DoublyLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      assertTrue(doublyLinkedList0.isEmpty());
      
      doublyLinkedList0.displayBackwards();
      assertTrue(doublyLinkedList0.isEmpty());
      
      doublyLinkedList0.display();
      doublyLinkedList0.display();
      doublyLinkedList0.displayBackwards();
      doublyLinkedList0.display();
      doublyLinkedList0.head = null;
      doublyLinkedList0.isEmpty();
      doublyLinkedList0.isEmpty();
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertTrue(boolean0);
      
      doublyLinkedList0.displayBackwards();
      doublyLinkedList0.display();
      assertTrue(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = null;
      try {
        doublyLinkedList0 = new DoublyLinkedList((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[0];
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList(intArray0);
      assertTrue(doublyLinkedList0.isEmpty());
      
      Link link0 = new Link(595);
      link0.displayLink();
      Link link1 = new Link(1);
      link1.displayLink();
      link0.next = link1;
      link1.displayLink();
      link1.previous = link0.next;
      doublyLinkedList0.displayBackwards();
      link1.next = link0;
      doublyLinkedList0.display();
      doublyLinkedList0.head = link0;
      doublyLinkedList0.displayBackwards();
      // Undeclared exception!
      doublyLinkedList0.display();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      Link link0 = new Link((-1769));
      doublyLinkedList0.head = link0;
      doublyLinkedList0.display();
      doublyLinkedList0.displayBackwards();
      doublyLinkedList0.displayBackwards();
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-2757);
      intArray0[1] = 0;
      intArray0[2] = (-3551);
      DoublyLinkedList doublyLinkedList0 = null;
      try {
        doublyLinkedList0 = new DoublyLinkedList(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      Link link0 = new Link(0);
      doublyLinkedList0.head = link0;
      doublyLinkedList0.display();
      doublyLinkedList0.display();
      assertFalse(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      doublyLinkedList0.display();
      assertTrue(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[1];
      DoublyLinkedList doublyLinkedList0 = null;
      try {
        doublyLinkedList0 = new DoublyLinkedList(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      DoublyLinkedList doublyLinkedList0 = null;
      try {
        doublyLinkedList0 = new DoublyLinkedList(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.DoublyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      doublyLinkedList0.displayBackwards();
      boolean boolean0 = doublyLinkedList0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      Link link0 = new Link(3);
      doublyLinkedList0.head = link0;
      doublyLinkedList0.isEmpty();
      doublyLinkedList0.display();
      doublyLinkedList0.displayBackwards();
      assertFalse(doublyLinkedList0.isEmpty());
  }
}

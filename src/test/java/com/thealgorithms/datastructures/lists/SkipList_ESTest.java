/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:29:10 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.SkipList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SkipList_ESTest extends SkipList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(49);
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      int int0 = skipList_BernoulliHeightStrategy0.nodeHeight(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy(0.0935991296517155);
      int int0 = skipList_BernoulliHeightStrategy0.nodeHeight(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = null;
      try {
        skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy(1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability should be from 0 to 1. But was: 1.0
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList$BernoulliHeightStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = null;
      try {
        skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy((-3180.771882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability should be from 0 to 1. But was: -3180.771882
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList$BernoulliHeightStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("}L");
      skipList0.toString();
      assertEquals(1, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      SkipList<Integer> skipList0 = new SkipList<Integer>((-1), skipList_BernoulliHeightStrategy0);
      Integer integer0 = new Integer((-140));
      skipList0.add(integer0);
      Integer integer1 = new Integer(0);
      boolean boolean0 = skipList0.contains(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      Random.setNextRandom(992);
      SkipList<String> skipList0 = new SkipList<String>(10, skipList_BernoulliHeightStrategy0);
      skipList0.add("#MJ, CcjuH7OE=O1");
      assertEquals(1, skipList0.size());
      
      skipList0.remove("#MJ, CcjuH7OE=O1");
      assertEquals(0, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("");
      skipList0.remove("G8V8hx=0Ju");
      assertEquals(0, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SkipList<Integer> skipList0 = new SkipList<Integer>();
      // Undeclared exception!
      try { 
        skipList0.get((-1372));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      SkipList<String> skipList0 = new SkipList<String>((-3845), skipList_BernoulliHeightStrategy0);
      skipList0.add("");
      skipList0.add("");
      assertEquals(2, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      int int0 = skipList_BernoulliHeightStrategy0.height(49);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      int int0 = skipList_BernoulliHeightStrategy0.height(2130596638);
      assertEquals(31, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      SkipList<String> skipList0 = new SkipList<String>((-1694), skipList_BernoulliHeightStrategy0);
      skipList0.add("llPabxcA j$(nu");
      int int0 = skipList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.remove("G8V8hx=0Ju");
      int int0 = skipList0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.get((-1));
      assertEquals(0, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      SkipList<String> skipList0 = new SkipList<String>((-3845), skipList_BernoulliHeightStrategy0);
      skipList0.add("");
      String string0 = skipList0.get(0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.remove("j0?t!c=Vg`<z]");
      skipList0.remove("T");
      // Undeclared exception!
      try { 
        skipList0.toString();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      SkipList<Integer> skipList0 = new SkipList<Integer>(0, skipList_BernoulliHeightStrategy0);
      Integer integer0 = new Integer((-106));
      skipList0.remove(integer0);
      // Undeclared exception!
      try { 
        skipList0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SkipList<Integer> skipList0 = new SkipList<Integer>();
      // Undeclared exception!
      try { 
        skipList0.remove((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      // Undeclared exception!
      try { 
        skipList0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SkipList<String> skipList0 = null;
      try {
        skipList0 = new SkipList<String>(0, (SkipList.HeightStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Random.setNextRandom((-58));
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("UxH9i~;}Z");
      skipList0.add("9-");
      skipList0.remove("9-");
      assertEquals(1, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Random.setNextRandom((-58));
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy();
      int int0 = skipList_BernoulliHeightStrategy0.nodeHeight((-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = null;
      try {
        skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy(2144410706);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability should be from 0 to 1. But was: 2.144410706E9
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList$BernoulliHeightStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SkipList.BernoulliHeightStrategy skipList_BernoulliHeightStrategy0 = null;
      try {
        skipList_BernoulliHeightStrategy0 = new SkipList.BernoulliHeightStrategy(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Probability should be from 0 to 1. But was: 0.0
         //
         verifyException("com.thealgorithms.datastructures.lists.SkipList$BernoulliHeightStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("UxH9i~;}Z");
      boolean boolean0 = skipList0.contains("&]:XjT$ANa-&93o3");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("llPabxcA j$(nu");
      boolean boolean0 = skipList0.contains("llPabxcA j$(nu");
      assertEquals(1, skipList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("llPabxcA j$(nu");
      assertEquals(1, skipList0.size());
      
      skipList0.remove("");
      assertEquals(0, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      skipList0.add("");
      skipList0.add("com.thealgorithms.datastructures.lists.SkipList$Node");
      assertEquals(2, skipList0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SkipList<String> skipList0 = new SkipList<String>();
      int int0 = skipList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SkipList<Integer> skipList0 = new SkipList<Integer>();
      // Undeclared exception!
      try { 
        skipList0.contains((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }
}

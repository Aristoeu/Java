/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:09:51 GMT 2022
 */

package com.thealgorithms.datastructures.disjointsets;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.disjointsets.DisjointSets;
import com.thealgorithms.datastructures.disjointsets.Node;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DisjointSets_ESTest extends DisjointSets_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DisjointSets<String> disjointSets0 = new DisjointSets<String>();
      assertNotNull(disjointSets0);
      
      Node<String> node0 = new Node<String>("}d/TA-");
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<String> node1 = disjointSets0.MakeSet("com.thealgorithms.datastructures.disjointsets.DisjointSets");
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      
      Node<String> node2 = disjointSets0.MakeSet("?GHTi#;>l!3PQTQY");
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      node2.parent = node1;
      disjointSets0.UnionSet(node0, node2);
      assertEquals(0, node0.rank);
      assertEquals(0, node2.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DisjointSets<Integer> disjointSets0 = new DisjointSets<Integer>();
      assertNotNull(disjointSets0);
      
      Integer integer0 = new Integer(104);
      assertNotNull(integer0);
      assertEquals(104, (int)integer0);
      
      Node<Integer> node0 = disjointSets0.MakeSet(integer0);
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<Integer> node1 = new Node<Integer>(integer0);
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      node0.rank = (-1);
      node1.parent = node0;
      Node<Integer> node2 = new Node<Integer>(integer0);
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      disjointSets0.UnionSet(node1, node2);
      assertEquals(0, node1.rank);
      assertEquals(0, node2.rank);
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DisjointSets<String> disjointSets0 = new DisjointSets<String>();
      assertNotNull(disjointSets0);
      
      Node<String> node0 = disjointSets0.MakeSet("");
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<String> node1 = disjointSets0.MakeSet("RmX");
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node1, node0);
      
      Node<String> node2 = disjointSets0.MakeSet("");
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      disjointSets0.UnionSet(node0, node2);
      assertEquals(0, node0.rank);
      assertEquals(1, node2.rank);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      disjointSets0.UnionSet(node0, node1);
      assertEquals(0, node0.rank);
      assertEquals(0, node1.rank);
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DisjointSets<Object> disjointSets0 = new DisjointSets<Object>();
      assertNotNull(disjointSets0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node<Object> node0 = disjointSets0.MakeSet(object0);
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<Object> node1 = new Node<Object>(object0);
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      disjointSets0.UnionSet(node0, node1);
      assertEquals(0, node0.rank);
      assertEquals(1, node1.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      node0.parent.rank = (-1066);
      Node<Object> node2 = new Node<Object>("a'xv<,3g!");
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      disjointSets0.UnionSet(node2, node0);
      assertEquals(0, node0.rank);
      assertEquals(0, node2.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DisjointSets<Object> disjointSets0 = new DisjointSets<Object>();
      assertNotNull(disjointSets0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Node<Object> node0 = disjointSets0.MakeSet(object0);
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<Object> node1 = new Node<Object>(node0.parent.data);
      assertEquals(0, node0.rank);
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      disjointSets0.UnionSet(node0, node1);
      assertEquals(0, node0.rank);
      assertEquals(1, node1.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      Node<Object> node2 = new Node<Object>("a'xv<,3g!");
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      
      disjointSets0.UnionSet(node2, node0);
      assertEquals(0, node0.rank);
      assertEquals(0, node2.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DisjointSets<Integer> disjointSets0 = new DisjointSets<Integer>();
      assertNotNull(disjointSets0);
      
      Integer integer0 = new Integer(104);
      assertNotNull(integer0);
      assertEquals(104, (int)integer0);
      
      Node<Integer> node0 = disjointSets0.MakeSet(integer0);
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<Integer> node1 = new Node<Integer>(integer0);
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      DisjointSets<Object> disjointSets1 = new DisjointSets<Object>();
      assertNotNull(disjointSets1);
      
      Node<Object> node2 = disjointSets1.MakeSet(integer0);
      assertEquals(0, node2.rank);
      assertNotNull(node2);
      
      node1.parent = node0;
      Node<Integer> node3 = new Node<Integer>((Integer) node2.rank);
      assertEquals(0, node2.rank);
      assertEquals(0, node3.rank);
      assertNotNull(node3);
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      
      disjointSets0.UnionSet(node1, node3);
      assertEquals(0, node1.rank);
      assertEquals(0, node2.rank);
      assertEquals(1, node3.rank);
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node1));
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(node3, node0);
      assertNotSame(node3, node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DisjointSets<Integer> disjointSets0 = new DisjointSets<Integer>();
      assertNotNull(disjointSets0);
      
      Integer integer0 = new Integer(104);
      assertNotNull(integer0);
      assertEquals(104, (int)integer0);
      
      Node<Integer> node0 = disjointSets0.MakeSet(integer0);
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<Integer> node1 = new Node<Integer>(integer0);
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      node1.parent = node0;
      disjointSets0.UnionSet(node0, node1);
      assertEquals(0, node0.rank);
      assertEquals(0, node1.rank);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DisjointSets<String> disjointSets0 = new DisjointSets<String>();
      assertNotNull(disjointSets0);
      
      Node<String> node0 = new Node<String>("com.thealgorithms.datastructures.disjointsets.Node");
      assertEquals(0, node0.rank);
      assertNotNull(node0);
      
      Node<String> node1 = node0.parent;
      assertEquals(0, node1.rank);
      assertNotNull(node1);
      assertSame(node1, node0);
      
      node1.parent = null;
      // Undeclared exception!
      try { 
        disjointSets0.UnionSet(node1, node1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.disjointsets.DisjointSets", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DisjointSets<Object> disjointSets0 = new DisjointSets<Object>();
      assertNotNull(disjointSets0);
      
      // Undeclared exception!
      try { 
        disjointSets0.FindSet((Node<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.disjointsets.DisjointSets", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer(104);
      DisjointSets<Object> disjointSets0 = new DisjointSets<Object>();
      Node<Object> node0 = disjointSets0.MakeSet(integer0);
      Node<Object> node1 = disjointSets0.FindSet(node0);
      assertSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(104);
      DisjointSets<Object> disjointSets0 = new DisjointSets<Object>();
      Node<Object> node0 = disjointSets0.MakeSet(integer0);
      Object object0 = new Object();
      Node<Object> node1 = disjointSets0.MakeSet(object0);
      disjointSets0.UnionSet(node1, node0);
      assertEquals(1, node0.rank);
      
      Node<Object> node2 = disjointSets0.FindSet(node1);
      assertEquals(1, node2.rank);
  }
}

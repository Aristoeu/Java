/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:22:57 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.AdjacencyListGraph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdjacencyListGraph_ESTest extends AdjacencyListGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdjacencyListGraph<Integer> adjacencyListGraph0 = new AdjacencyListGraph<Integer>();
      Integer integer0 = new Integer((-946));
      adjacencyListGraph0.addEdge(integer0, integer0);
      Integer integer1 = new Integer((-4061));
      boolean boolean0 = adjacencyListGraph0.removeEdge(integer1, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("'VZ{IOzH#", "'VZ{IOzH#");
      boolean boolean0 = adjacencyListGraph0.removeEdge("'VZ{IOzH#", "Vertex: 'VZ{IOzH#\nAdjacent vertices: 'VZ{IOzH# \nVertex: 'VZ{IOzH#\nAdjacent vertices: \n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("Bei2auHqW@F:|ks", "YsL;?,");
      boolean boolean0 = adjacencyListGraph0.addEdge("Bei2auHqW@F:|ks", "com.thealgorithms.datastructures.graphs.AdjacencyListGraph");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.vertices = null;
      // Undeclared exception!
      try { 
        adjacencyListGraph0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyListGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("NA", (String) null);
      // Undeclared exception!
      try { 
        adjacencyListGraph0.removeEdge("}RXxrVDWk", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "0");
      String string0 = adjacencyListGraph0.toString();
      assertEquals("Vertex: \nAdjacent vertices: 0 \nVertex: 0\nAdjacent vertices: \n", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      String string0 = adjacencyListGraph0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      boolean boolean0 = adjacencyListGraph0.addEdge("", "0");
      boolean boolean1 = adjacencyListGraph0.addEdge("0", "");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "");
      boolean boolean0 = adjacencyListGraph0.removeEdge("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "0");
      boolean boolean0 = adjacencyListGraph0.removeEdge("", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "0");
      boolean boolean0 = adjacencyListGraph0.addEdge("", "0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "0");
      boolean boolean0 = adjacencyListGraph0.addEdge("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdjacencyListGraph<String> adjacencyListGraph0 = new AdjacencyListGraph<String>();
      adjacencyListGraph0.addEdge("", "~m");
      // Undeclared exception!
      try { 
        adjacencyListGraph0.addEdge((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyListGraph", e);
      }
  }
}

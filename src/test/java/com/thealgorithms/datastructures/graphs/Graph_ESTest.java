/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:21:44 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.Graph;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Graph_ESTest extends Graph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.addEdge("DVT5BGdG_U+K\\BTS", "DVT5BGdG_U+K\\BTS");
      graph0.addEdge("", "");
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.addEdge("DVT5BGdG_U+K\\BTS", "DVT5BGdG_U+K\\BTS");
      graph0.addEdge("", "DVT5BGdG_U+K\\BTS");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.nodeList = null;
      // Undeclared exception!
      try { 
        graph0.countGraphs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer(0);
      Graph.Node graph_Node0 = graph0.new Node(integer0);
      Graph.Edge graph_Edge0 = graph0.new Edge(graph_Node0, graph_Node0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.addEdge("DVT5BGdG_U+K\\BTS", "DVT5BGdG_U+K\\BTS");
      int int0 = graph0.countGraphs();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      int int0 = graph0.countGraphs();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.addEdge("DVT5BGdG_U+K\\BTS", "");
      graph0.addEdge("DVT5BGdG_U+K\\BTS", "");
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Graph<String> graph0 = new Graph<String>();
      graph0.addEdge("", "");
      graph0.addEdge("e-or", "e-or");
  }
}

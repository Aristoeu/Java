/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:47:53 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.PrimMST;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PrimMST_ESTest extends PrimMST_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[][] intArray0 = new int[5][3];
      int[] intArray1 = new int[6];
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[1] = (-1949);
      intArray0[2] = intArray2;
      // Undeclared exception!
      try { 
        primMST0.primMST(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[9];
      int[][] intArray1 = new int[9][6];
      intArray1[0] = intArray0;
      intArray1[4] = intArray0;
      intArray0[2] = 7;
      intArray0[4] = 3;
      // Undeclared exception!
      try { 
        primMST0.primMST(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[9];
      int[][] intArray1 = new int[9][6];
      primMST0.printMST(intArray0, 0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[5];
      intArray0[1] = 2;
      intArray0[2] = (-3689);
      intArray0[4] = (-2143);
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      primMST0.primMST(intArray1);
      assertEquals(7, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[5];
      Boolean[] booleanArray0 = new Boolean[8];
      Boolean boolean0 = new Boolean(false);
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = booleanArray0[2];
      booleanArray0[4] = booleanArray0[2];
      int int0 = primMST0.minKey(intArray0, booleanArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[5];
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean(true);
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = Boolean.FALSE;
      booleanArray0[2] = boolean1;
      booleanArray0[3] = booleanArray0[0];
      booleanArray0[4] = booleanArray0[0];
      int int0 = primMST0.minKey(intArray0, booleanArray0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[2];
      Boolean[] booleanArray0 = new Boolean[5];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = boolean0;
      booleanArray0[4] = booleanArray0[0];
      int int0 = primMST0.minKey(intArray0, booleanArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      // Undeclared exception!
      try { 
        primMST0.printMST((int[]) null, 1315, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[1][8];
      // Undeclared exception!
      try { 
        primMST0.printMST(intArray0, (-1370), intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      // Undeclared exception!
      try { 
        primMST0.primMST((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        primMST0.minKey(intArray0, (Boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.PrimMST", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      PrimMST.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PrimMST primMST0 = new PrimMST();
      int[] intArray0 = new int[6];
      Boolean[] booleanArray0 = new Boolean[4];
      Boolean boolean0 = Boolean.TRUE;
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      booleanArray0[2] = boolean0;
      booleanArray0[3] = booleanArray0[0];
      // Undeclared exception!
      try { 
        primMST0.minKey(intArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.thealgorithms.datastructures.graphs.PrimMST", e);
      }
  }
}

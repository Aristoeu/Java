/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:31:43 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.dijkstras;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class dijkstras_ESTest extends dijkstras_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[9];
      intArray1[4] = (-1064);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        dijkstras0.dijkstra(intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.thealgorithms.datastructures.graphs.dijkstras", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[8];
      dijkstras0.k = (-1);
      dijkstras0.print(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[9];
      dijkstras0.k = 1;
      Boolean[] booleanArray0 = new Boolean[2];
      Boolean boolean0 = Boolean.FALSE;
      booleanArray0[0] = boolean0;
      int int0 = dijkstras0.minDist(intArray0, booleanArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[9];
      Boolean[] booleanArray0 = new Boolean[9];
      Boolean boolean0 = Boolean.valueOf("23E]f#@1fjTbK");
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      booleanArray0[2] = booleanArray0[1];
      booleanArray0[3] = booleanArray0[0];
      booleanArray0[4] = boolean0;
      booleanArray0[5] = boolean0;
      booleanArray0[6] = boolean0;
      booleanArray0[7] = booleanArray0[1];
      booleanArray0[8] = booleanArray0[4];
      int int0 = dijkstras0.minDist(intArray0, booleanArray0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[8];
      dijkstras0.k = (-1);
      Boolean[] booleanArray0 = new Boolean[1];
      int int0 = dijkstras0.minDist(intArray0, booleanArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      // Undeclared exception!
      try { 
        dijkstras0.print((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.dijkstras", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        dijkstras0.print(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.thealgorithms.datastructures.graphs.dijkstras", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      Boolean[] booleanArray0 = new Boolean[7];
      // Undeclared exception!
      try { 
        dijkstras0.minDist((int[]) null, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[] intArray0 = new int[7];
      Boolean[] booleanArray0 = new Boolean[7];
      Boolean boolean0 = new Boolean("jYF");
      booleanArray0[0] = boolean0;
      booleanArray0[1] = booleanArray0[0];
      booleanArray0[2] = booleanArray0[0];
      booleanArray0[3] = booleanArray0[2];
      booleanArray0[4] = boolean0;
      booleanArray0[5] = booleanArray0[1];
      booleanArray0[6] = booleanArray0[1];
      // Undeclared exception!
      try { 
        dijkstras0.minDist(intArray0, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      // Undeclared exception!
      try { 
        dijkstras0.dijkstra((int[][]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.dijkstras", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      dijkstras dijkstras0 = new dijkstras();
      int[][] intArray0 = new int[1][4];
      dijkstras0.k = (-945);
      // Undeclared exception!
      try { 
        dijkstras0.dijkstra(intArray0, (-945));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.dijkstras", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      dijkstras.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }
}

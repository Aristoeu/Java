/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:18:26 GMT 2022
 */

package com.thealgorithms.backtracking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.backtracking.MazeRecursion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MazeRecursion_ESTest extends MazeRecursion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[6];
      intArray1[5] = 3056;
      intArray0[6] = intArray1;
      // Undeclared exception!
      try { 
        MazeRecursion.setWay2(intArray0, (-1331), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1331
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[][] intArray0 = new int[8][3];
      int[] intArray1 = new int[7];
      intArray1[5] = 1294;
      intArray0[6] = intArray1;
      // Undeclared exception!
      try { 
        MazeRecursion.setWay(intArray0, 0, (-1938));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1938
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[7][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 3984;
      intArray1[2] = (-1);
      intArray0[0] = intArray1;
      intArray0[3] = intArray0[0];
      intArray0[4] = intArray0[3];
      int[] intArray2 = new int[7];
      intArray0[6] = intArray2;
      // Undeclared exception!
      try { 
        MazeRecursion.setWay(intArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[][] intArray0 = new int[7][2];
      int[] intArray1 = new int[4];
      intArray1[2] = (-1);
      intArray0[0] = intArray1;
      intArray0[3] = intArray0[0];
      intArray0[4] = intArray0[3];
      int[] intArray2 = new int[7];
      intArray0[6] = intArray2;
      // Undeclared exception!
      try { 
        MazeRecursion.setWay(intArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        MazeRecursion.setWay2((int[][]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        MazeRecursion.setWay((int[][]) null, (-1858), (-1858));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[8][5];
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[6] = intArray0;
      boolean boolean0 = MazeRecursion.setWay2(intArray1, 3, 3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[][] intArray0 = new int[8][9];
      int[] intArray1 = new int[4];
      intArray1[3] = (-1852);
      intArray0[1] = intArray1;
      intArray0[7] = intArray0[1];
      boolean boolean0 = MazeRecursion.setWay2(intArray0, 7, 3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[8][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[6] = intArray0;
      boolean boolean0 = MazeRecursion.setWay2(intArray1, 3, 3);
      boolean boolean1 = MazeRecursion.setWay2(intArray1, (-3845), 3);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[][] intArray0 = new int[7][2];
      int[] intArray1 = new int[4];
      intArray0[1] = intArray1;
      intArray0[2] = intArray1;
      intArray1[2] = 1;
      int[] intArray2 = new int[16];
      intArray0[6] = intArray2;
      // Undeclared exception!
      try { 
        MazeRecursion.setWay(intArray0, 1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.backtracking.MazeRecursion", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[7][6];
      int[] intArray1 = new int[3];
      intArray1[0] = 2054;
      intArray0[0] = intArray1;
      boolean boolean0 = MazeRecursion.setWay(intArray0, 0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[8];
      int[][] intArray1 = new int[8][5];
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      MazeRecursion.setWay(intArray1, 3, 3);
      boolean boolean0 = MazeRecursion.setWay(intArray1, 506, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MazeRecursion.mazeRecursion();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MazeRecursion mazeRecursion0 = new MazeRecursion();
  }
}

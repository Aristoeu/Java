/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:06:39 GMT 2022
 */

package com.thealgorithms.conversions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.conversions.DecimalToAnyBase;
import java.io.IOException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecimalToAnyBase_ESTest extends DecimalToAnyBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecimalToAnyBase.reVal(9);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SystemInUtil.addInputLine("10");
      SystemInUtil.addInputLine("10");
      DecimalToAnyBase.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecimalToAnyBase.reVal(10);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecimalToAnyBase.convertToAnyBase((-120), 955);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SystemInUtil.addInputLine("10");
      try { 
        DecimalToAnyBase.main(stringArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated exception in System.in
         //
         verifyException("org.evosuite.runtime.util.SystemInUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      DecimalToAnyBase.convertToAnyBase(1, 1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        DecimalToAnyBase.convertToAnyBase(48, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char char0 = DecimalToAnyBase.reVal(843);
      assertEquals('\u0382', char0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = DecimalToAnyBase.convertToAnyBase(988, 1786);
      assertEquals("\u0413", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char char0 = DecimalToAnyBase.reVal((-2386));
      assertEquals('\uF6E5', char0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecimalToAnyBase decimalToAnyBase0 = new DecimalToAnyBase();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      try { 
        DecimalToAnyBase.main(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }
}

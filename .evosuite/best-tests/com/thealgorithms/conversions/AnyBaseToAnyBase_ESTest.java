/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:57:55 GMT 2022
 */

package com.thealgorithms.conversions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.conversions.AnyBaseToAnyBase;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AnyBaseToAnyBase_ESTest extends AnyBaseToAnyBase_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = AnyBaseToAnyBase.base2base("The number is invalid for this base!", 1149, 11);
      assertNotNull(string0);
      assertEquals("94A73073", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = AnyBaseToAnyBase.base2base("O:%?;ZNz8J", (-2816), 3);
      assertNotNull(string0);
      assertEquals("-1-1-2-2-10-2-2-200-10-1-2-1-1-1-10", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = AnyBaseToAnyBase.base2base("<CAL,OLWIFIs", 1020, 1020);
      assertNotNull(string0);
      assertEquals("-1-619-853-633", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemInUtil.addInputLine("(V^QYC.$hM<hSt");
      SystemInUtil.addInputLine("6");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      AnyBaseToAnyBase.validForBase((String) null, 1187374);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.validForBase((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.conversions.AnyBaseToAnyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.validForBase("", (-2375));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 > -2375
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      AnyBaseToAnyBase.base2base(", +ey#", 3368, (-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.base2base((String) null, (-4161), (-4161));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.conversions.AnyBaseToAnyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.base2base("hU$!SwMuIb", 0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("com.thealgorithms.conversions.AnyBaseToAnyBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = AnyBaseToAnyBase.validForBase("Invalid input.", 3724);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = AnyBaseToAnyBase.base2base("5u%F", 3758, 196);
      assertEquals("hw\u00E9\u00A0", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = AnyBaseToAnyBase.base2base("0", (-229), (-229));
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = AnyBaseToAnyBase.validForBase("0", 916);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("(V^QYC.$hM<hSt");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("0");
      SystemInUtil.addInputLine("Enter end base (between 2 and 36): ");
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine("e");
      String[] stringArray0 = new String[9];
      SystemInUtil.addInputLine("41");
      // Undeclared exception!
      try { 
        AnyBaseToAnyBase.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AnyBaseToAnyBase anyBaseToAnyBase0 = new AnyBaseToAnyBase();
  }
}

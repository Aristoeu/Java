/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:12:31 GMT 2022
 */

package com.thealgorithms.conversions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.conversions.RgbHsvConversion;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RgbHsvConversion_ESTest extends RgbHsvConversion_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = RgbHsvConversion.hsvToRgb(120.1, 1.0, 1.0);
      assertArrayEquals(new int[] {0, 255, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = RgbHsvConversion.hsvToRgb(64.0, 0.8784313725490196, 0.8784313725490196);
      assertArrayEquals(new int[] {211, 224, 27}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = RgbHsvConversion.hsvToRgb(0.88, 0.88, 0.88);
      assertArrayEquals(new int[] {224, 30, 27}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb(360.0, 360.0, 360.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // saturation should be between 0 and 1
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = RgbHsvConversion.rgbToHsv(0, 128, 128);
      assertArrayEquals(new double[] {180.0, 1.0, 0.5019607843137255}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = RgbHsvConversion.rgbToHsv(1, 0, 1);
      assertArrayEquals(new double[] {300.0, 1.0, 0.00392156862745098}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = RgbHsvConversion.rgbToHsv(0, 0, 128);
      assertArrayEquals(new double[] {240.0, 1.0, 0.5019607843137255}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = RgbHsvConversion.rgbToHsv(0, 0, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = RgbHsvConversion.hsvToRgb(0.0, 0.0, 0.0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv(1, 0, 1165);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blue should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv(20, 20, (-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // blue should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv(196, 2638, 196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // green should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv(16, (-312), (-312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // green should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv(366, 366, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // red should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.rgbToHsv((-2927), (-2927), (-2927));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // red should be between 0 and 255
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb(1.0, 1.0, 1444.1461048472765);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value should be between 0 and 1
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb(0, 0, (-904.3109181));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value should be between 0 and 1
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb(1.0, (-1269.561631057945), 120.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // saturation should be between 0 and 1
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb(1375.338, 1375.338, 1375.338);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hue should be between 0 and 360
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        RgbHsvConversion.hsvToRgb((-195.5317811781), (-195.5317811781), (-195.5317811781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // hue should be between 0 and 360
         //
         verifyException("com.thealgorithms.conversions.RgbHsvConversion", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[6];
      RgbHsvConversion.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RgbHsvConversion rgbHsvConversion0 = new RgbHsvConversion();
  }
}

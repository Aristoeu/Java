/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:34:32 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.BoundaryFill;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BoundaryFill_ESTest extends BoundaryFill_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[8];
      intArray1[0] = (-2568);
      intArray0[0] = intArray1;
      BoundaryFill.boundaryFill(intArray0, 0, 0, 0, (-2841));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      BoundaryFill.getPixel(intArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[6][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 2269;
      intArray0[1] = intArray1;
      BoundaryFill.getPixel(intArray0, 1, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[7];
      intArray1[0] = (-91);
      intArray0[0] = intArray1;
      BoundaryFill.getPixel(intArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundaryFill.putPixel((int[][]) null, 0, 0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.BoundaryFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[][] intArray0 = new int[8][7];
      // Undeclared exception!
      try { 
        BoundaryFill.putPixel(intArray0, (-943), (-1), (-2349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -943
         //
         verifyException("com.thealgorithms.dynamicprogramming.BoundaryFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundaryFill.printImageArray((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.BoundaryFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[2];
      intArray0[1] = intArray1;
      // Undeclared exception!
      try { 
        BoundaryFill.printImageArray(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.dynamicprogramming.BoundaryFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundaryFill.getPixel((int[][]) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        BoundaryFill.boundaryFill((int[][]) null, 0, 5, 5, 5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[8][8];
      BoundaryFill.printImageArray(intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[][] intArray0 = new int[5][6];
      BoundaryFill.boundaryFill(intArray0, 0, 0, (-1254), 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[][] intArray0 = new int[2][4];
      int[] intArray1 = new int[1];
      intArray1[0] = (-2000);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        BoundaryFill.boundaryFill(intArray0, 0, 0, 0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      BoundaryFill.boundaryFill(intArray0, 0, (-1663), 0, 0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[][] intArray0 = new int[2][7];
      BoundaryFill.boundaryFill(intArray0, 0, 0, 0, (-166));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      // Undeclared exception!
      try { 
        BoundaryFill.getPixel(intArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[][] intArray0 = new int[2][7];
      BoundaryFill.putPixel(intArray0, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[][] intArray0 = new int[7][6];
      BoundaryFill.boundaryFill(intArray0, (-367), (-367), (-367), (-367));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[13];
      BoundaryFill.main(stringArray0);
      assertEquals(13, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BoundaryFill boundaryFill0 = new BoundaryFill();
  }
}

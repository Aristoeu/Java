/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:31:01 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.KnapsackMemoization;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class KnapsackMemoization_ESTest extends KnapsackMemoization_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[7];
      intArray0[1] = 3;
      intArray0[2] = 2;
      KnapsackMemoization.knapsack(intArray0, intArray0, 4, 3);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        KnapsackMemoization.knapsack((int[]) null, (int[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.KnapsackMemoization", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[10];
      // Undeclared exception!
      try { 
        KnapsackMemoization.knapsack(intArray0, intArray0, (-1), (-3031));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3031
         //
         verifyException("com.thealgorithms.dynamicprogramming.KnapsackMemoization", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      KnapsackMemoization.knapsack(intArray0, intArray0, 4, 1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[10];
      intArray0[2] = 3;
      KnapsackMemoization.knapsack(intArray0, intArray0, 2, 3);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      KnapsackMemoization.knapsack((int[]) null, (int[]) null, 8, 0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[2];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[7];
      int int0 = KnapsackMemoization.knapsack(intArray0, intArray0, 3, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      KnapsackMemoization knapsackMemoization0 = new KnapsackMemoization();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[5];
      KnapsackMemoization.main(stringArray0);
      int[] intArray0 = new int[7];
      int int0 = KnapsackMemoization.knapsack(intArray0, intArray0, 0, 3);
      assertEquals(0, int0);
  }
}

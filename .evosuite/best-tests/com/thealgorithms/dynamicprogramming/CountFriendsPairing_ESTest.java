/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:18:12 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.CountFriendsPairing;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CountFriendsPairing_ESTest extends CountFriendsPairing_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4143;
      intArray0[1] = 4143;
      intArray0[2] = 4143;
      intArray0[3] = 4143;
      CountFriendsPairing.countFriendsPairing(4143, intArray0);
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      CountFriendsPairing.countFriendsPairing(4143, intArray0);
      // Undeclared exception!
      CountFriendsPairing.countFriendsPairing(4143, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      int int1 = (-831);
      intArray0[6] = (-831);
      intArray0[7] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int int2 = 246;
      CountFriendsPairing.countFriendsPairing(246, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      // Undeclared exception!
      try { 
        CountFriendsPairing.countFriendsPairing((-831), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CountFriendsPairing", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = null;
      CountFriendsPairing.countFriendsPairing(1, (int[]) null);
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      CountFriendsPairing.countFriendsPairing(1, (int[]) null);
      CountFriendsPairing.countFriendsPairing(1, (int[]) null);
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = (-3573);
      intArray1[3] = 0;
      intArray1[4] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray1);
      // Undeclared exception!
      try { 
        CountFriendsPairing.countFriendsPairing(491, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CountFriendsPairing", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1345;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        CountFriendsPairing.countFriendsPairing(1345, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.dynamicprogramming.CountFriendsPairing", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = (-1);
      CountFriendsPairing.countFriendsPairing(1, intArray0);
      CountFriendsPairing.countFriendsPairing(241, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-3455);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        CountFriendsPairing.countFriendsPairing((-1), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.dynamicprogramming.CountFriendsPairing", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int int0 = (-1354);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1354);
      // Undeclared exception!
      try { 
        CountFriendsPairing.countFriendsPairing((-1354), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CountFriendsPairing", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int[] intArray0 = new int[9];
      intArray0[0] = 1233;
      intArray0[1] = 1233;
      intArray0[2] = 1233;
      intArray0[3] = (-32);
      intArray0[4] = 1233;
      intArray0[5] = (-2606);
      intArray0[6] = 1233;
      intArray0[7] = 1233;
      intArray0[8] = 1233;
      CountFriendsPairing.countFriendsPairing(1233, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int int0 = 1942;
      int[] intArray0 = new int[3];
      intArray0[0] = 1942;
      intArray0[1] = 1942;
      intArray0[2] = 1942;
      CountFriendsPairing.countFriendsPairing(1942, intArray0);
      int int1 = 589;
      CountFriendsPairing.countFriendsPairing(589, intArray0);
      int int2 = 633;
      CountFriendsPairing.countFriendsPairing(633, intArray0);
      int int3 = 1338;
      CountFriendsPairing.countFriendsPairing(1338, intArray0);
      int int4 = 2833;
      int[] intArray1 = new int[4];
      intArray1[0] = 1942;
      intArray1[1] = 589;
      intArray1[2] = 1338;
      intArray1[3] = 2833;
      CountFriendsPairing.countFriendsPairing(2833, intArray1);
      // Undeclared exception!
      CountFriendsPairing.countFriendsPairing(2833, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray1);
      boolean boolean0 = CountFriendsPairing.countFriendsPairing(0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      CountFriendsPairing countFriendsPairing0 = new CountFriendsPairing();
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 0;
      CountFriendsPairing.countFriendsPairing(0, intArray1);
      CountFriendsPairing.countFriendsPairing(0, intArray1);
      CountFriendsPairing.countFriendsPairing(0, intArray0);
      int[] intArray2 = new int[9];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = (-1887);
      intArray2[3] = 0;
      intArray2[4] = 0;
      intArray2[5] = 44;
      intArray2[6] = 0;
      intArray2[7] = 0;
      intArray2[8] = 0;
      boolean boolean0 = CountFriendsPairing.countFriendsPairing(0, intArray2);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, (-1887), 0, 0, 44, 0, 0, 0}, intArray2);
  }
}

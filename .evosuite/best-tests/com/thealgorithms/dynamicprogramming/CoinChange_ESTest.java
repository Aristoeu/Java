/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:56:17 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.CoinChange;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CoinChange_ESTest extends CoinChange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 546;
      CoinChange.printAmount(intArray0);
      int[] intArray1 = new int[9];
      intArray1[0] = 546;
      intArray1[1] = 546;
      intArray1[2] = 679;
      intArray1[3] = 546;
      intArray1[4] = 0;
      intArray1[5] = 546;
      intArray1[6] = 546;
      intArray1[7] = 334;
      intArray1[8] = 546;
      // Undeclared exception!
      CoinChange.change(intArray1, 3092);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 4950;
      intArray0[1] = (-1);
      intArray0[2] = (-1526);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 1481;
      int int0 = 1160;
      intArray0[6] = 1160;
      CoinChange.printAmount(intArray0);
      CoinChange.minimumCoins(intArray0, 0);
      CoinChange.printAmount(intArray0);
      CoinChange coinChange0 = new CoinChange();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      CoinChange.main(stringArray0);
      CoinChange.printAmount(intArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")N{SM[yq7T,";
      CoinChange.main(stringArray1);
      // Undeclared exception!
      CoinChange.minimumCoins(intArray0, 2788);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CoinChange.main((String[]) null);
      int[] intArray0 = new int[2];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 0;
      CoinChange.change(intArray0, 0);
      CoinChange.main((String[]) null);
      int int0 = CoinChange.change(intArray0, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CoinChange.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      CoinChange.main(stringArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1456);
      intArray0[1] = (-2899);
      intArray0[2] = 0;
      intArray0[3] = 466;
      intArray0[4] = (-2857);
      intArray0[5] = (-13);
      intArray0[6] = 2701;
      intArray0[7] = (-1033);
      // Undeclared exception!
      try { 
        CoinChange.minimumCoins(intArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = CoinChange.minimumCoins(intArray0, 463);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 901;
      intArray0[5] = 1792;
      CoinChange.minimumCoins(intArray0, 1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      CoinChange.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`$D4;F7FneYs/#[";
      CoinChange.main(stringArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 342;
      CoinChange.change(intArray0, 342);
      CoinChange.main(stringArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        CoinChange.minimumCoins((int[]) null, 342);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = 2819;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        CoinChange.change(intArray0, (-41));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CoinChange", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = null;
      int int0 = (-1);
      // Undeclared exception!
      try { 
        CoinChange.change((int[]) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CoinChange coinChange0 = new CoinChange();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 50;
      intArray0[1] = 5;
      intArray0[2] = 0;
      CoinChange.printAmount(intArray0);
      assertArrayEquals(new int[] {50, 5, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CoinChange.printAmount((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CoinChange", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        CoinChange.change((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = 633;
      intArray0[2] = 1063;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      CoinChange.minimumCoins(intArray0, 0);
      // Undeclared exception!
      try { 
        CoinChange.minimumCoins(intArray0, (-515));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.CoinChange", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      CoinChange.printAmount(intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = CoinChange.change(intArray0, 3254);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = CoinChange.minimumCoins(intArray0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CoinChange.main(stringArray0);
      CoinChange coinChange0 = new CoinChange();
      int[] intArray0 = new int[19];
      CoinChange.printAmount(intArray0);
      assertEquals(19, intArray0.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:41:46 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.MinimumPathSum;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinimumPathSum_ESTest extends MinimumPathSum_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      int[][] intArray0 = new int[3][6];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 441;
      intArray0[1] = intArray2;
      int int0 = MinimumPathSum.minimumPathSum(intArray0);
      assertEquals(441, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[2];
      intArray1[0] = (-2105);
      intArray0[0] = intArray1;
      int int0 = MinimumPathSum.minimumPathSum(intArray0);
      assertEquals((-2105), int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        MinimumPathSum.minimumPathSum((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumPathSum", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      int[] intArray1 = new int[9];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        MinimumPathSum.minimumPathSum(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.thealgorithms.dynamicprogramming.MinimumPathSum", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int[][] intArray0 = new int[5][7];
      int int0 = MinimumPathSum.minimumPathSum(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int int0 = MinimumPathSum.minimumPathSum(intArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MinimumPathSum minimumPathSum0 = new MinimumPathSum();
      minimumPathSum0.testLessColumns();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MinimumPathSum minimumPathSum0 = new MinimumPathSum();
      minimumPathSum0.testOneRowOneColumn();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MinimumPathSum minimumPathSum0 = new MinimumPathSum();
      minimumPathSum0.testRegular();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MinimumPathSum minimumPathSum0 = new MinimumPathSum();
      minimumPathSum0.testLessRows();
  }
}

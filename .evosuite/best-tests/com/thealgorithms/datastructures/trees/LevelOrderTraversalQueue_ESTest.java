/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:08:56 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.LevelOrderTraversalQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LevelOrderTraversalQueue_ESTest extends LevelOrderTraversalQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(1916);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue0.new Node((-1091));
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
      levelOrderTraversalQueue_Node0.left = levelOrderTraversalQueue_Node1;
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
      levelOrderTraversalQueue_Node0.left.right = levelOrderTraversalQueue_Node1;
      // Undeclared exception!
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node((-1));
      levelOrderTraversalQueue_Node0.data = (-1);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue0.new Node((-1));
      levelOrderTraversalQueue_Node1.right = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue_Node1.right = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      levelOrderTraversalQueue_Node1.data = 1983;
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
      levelOrderTraversalQueue_Node0.left = levelOrderTraversalQueue_Node1;
      // Undeclared exception!
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(2278);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue_Node0.left;
      // Undeclared exception!
      try { 
        levelOrderTraversalQueue0.printLevelOrder((LevelOrderTraversalQueue.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(0);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue0.new Node(2396);
      levelOrderTraversalQueue_Node1.right = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node2 = null;
      // Undeclared exception!
      try { 
        levelOrderTraversalQueue0.printLevelOrder((LevelOrderTraversalQueue.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(2355);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue0.new Node(2355);
      levelOrderTraversalQueue_Node1.left = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node1);
      assertNotSame(levelOrderTraversalQueue_Node1, levelOrderTraversalQueue_Node0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(300);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LevelOrderTraversalQueue levelOrderTraversalQueue0 = new LevelOrderTraversalQueue();
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node0 = levelOrderTraversalQueue0.new Node(0);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      levelOrderTraversalQueue0.printLevelOrder(levelOrderTraversalQueue_Node0);
      LevelOrderTraversalQueue levelOrderTraversalQueue1 = new LevelOrderTraversalQueue();
      levelOrderTraversalQueue1.printLevelOrder(levelOrderTraversalQueue_Node0);
      LevelOrderTraversalQueue.Node levelOrderTraversalQueue_Node1 = levelOrderTraversalQueue1.new Node(0);
      levelOrderTraversalQueue_Node1.left = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue_Node1.right = levelOrderTraversalQueue_Node0;
      levelOrderTraversalQueue1.printLevelOrder(levelOrderTraversalQueue_Node1);
      assertNotSame(levelOrderTraversalQueue_Node1, levelOrderTraversalQueue_Node0);
  }
}

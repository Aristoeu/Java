/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:16:58 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckIfBinaryTreeBalanced_ESTest extends CheckIfBinaryTreeBalanced_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode((-1821));
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode1 = checkIfBinaryTreeBalanced0.new BTNode(0);
      checkIfBinaryTreeBalanced_BTNode0.left = checkIfBinaryTreeBalanced_BTNode1;
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree1 = checkIfBinaryTreeBalanced0.new BinaryTree();
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree1);
      checkIfBinaryTreeBalanced_BTNode1.right = checkIfBinaryTreeBalanced_BinaryTree0.root;
      // Undeclared exception!
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "/Ej 7";
      stringArray0[1] = "+HJPxJ,&GJ`Zb";
      stringArray0[2] = "";
      CheckIfBinaryTreeBalanced.main(stringArray0);
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode(0);
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree1 = checkIfBinaryTreeBalanced0.new BinaryTree();
      checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree1);
      CheckIfBinaryTreeBalanced.main(stringArray0);
      checkIfBinaryTreeBalanced_BinaryTree1.root = checkIfBinaryTreeBalanced_BTNode0;
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode1 = checkIfBinaryTreeBalanced0.new BTNode(0);
      checkIfBinaryTreeBalanced_BTNode0.right = checkIfBinaryTreeBalanced_BTNode1;
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree1);
      checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree1);
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree0);
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "xYmv@If#g;yAs";
      stringArray0[1] = "";
      stringArray0[2] = "Mrc:|/;_6K%%'|dL";
      stringArray0[3] = "SqsyU87Lh34@JQkfbqH";
      stringArray0[4] = "";
      stringArray0[5] = "/F6";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      CheckIfBinaryTreeBalanced.main(stringArray0);
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      CheckIfBinaryTreeBalanced.main(stringArray0);
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode(0);
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      checkIfBinaryTreeBalanced_BTNode0.left = checkIfBinaryTreeBalanced_BinaryTree0.root;
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      checkIfBinaryTreeBalanced_BTNode0.right = checkIfBinaryTreeBalanced_BinaryTree0.root;
      // Undeclared exception!
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "B,r!as;}rwT";
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      stringArray0[4] = "8pgi3+'qrv";
      stringArray0[5] = "tsL: s<%";
      stringArray0[6] = "";
      stringArray0[7] = "hv)?H_qEqg`U+K1J$SH";
      stringArray0[8] = "";
      CheckIfBinaryTreeBalanced.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "8pgi3+'qrv";
      stringArray1[2] = "tsL: s<%";
      stringArray1[3] = "";
      stringArray1[4] = "8pgi3+'qrv";
      stringArray1[5] = "B,r!as;}rwT";
      stringArray1[6] = "com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced$BinaryTree";
      CheckIfBinaryTreeBalanced.main(stringArray1);
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree1 = null;
      // Undeclared exception!
      try { 
        checkIfBinaryTreeBalanced0.isBalancedRecursive((CheckIfBinaryTreeBalanced.BinaryTree) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.trees.CheckIfBinaryTreeBalanced", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode(3579);
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode1 = checkIfBinaryTreeBalanced0.new BTNode(3579);
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode2 = checkIfBinaryTreeBalanced_BTNode1.right;
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree0);
      checkIfBinaryTreeBalanced_BinaryTree0.root = null;
      boolean boolean1 = checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced1 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced1.new BinaryTree();
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced1 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced1.new BinaryTree();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode((-248));
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode((-1100));
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      String[] stringArray0 = null;
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = null;
      // Undeclared exception!
      try { 
        checkIfBinaryTreeBalanced0.isBalancedIterative((CheckIfBinaryTreeBalanced.BinaryTree) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      CheckIfBinaryTreeBalanced.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      CheckIfBinaryTreeBalanced.main(stringArray0);
      CheckIfBinaryTreeBalanced checkIfBinaryTreeBalanced0 = new CheckIfBinaryTreeBalanced();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode0 = checkIfBinaryTreeBalanced0.new BTNode(0);
      CheckIfBinaryTreeBalanced.BinaryTree checkIfBinaryTreeBalanced_BinaryTree0 = checkIfBinaryTreeBalanced0.new BinaryTree();
      CheckIfBinaryTreeBalanced.BTNode checkIfBinaryTreeBalanced_BTNode1 = checkIfBinaryTreeBalanced_BinaryTree0.root;
      checkIfBinaryTreeBalanced0.isBalancedRecursive(checkIfBinaryTreeBalanced_BinaryTree0);
      checkIfBinaryTreeBalanced_BinaryTree0.root = checkIfBinaryTreeBalanced_BTNode0;
      boolean boolean0 = checkIfBinaryTreeBalanced0.isBalancedIterative(checkIfBinaryTreeBalanced_BinaryTree0);
      assertTrue(boolean0);
  }
}

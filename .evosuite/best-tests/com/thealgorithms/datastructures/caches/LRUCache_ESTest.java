/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:00:35 GMT 2022
 */

package com.thealgorithms.datastructures.caches;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.caches.LRUCache;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LRUCache_ESTest extends LRUCache_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LRUCache<Object, String> lRUCache0 = null;
      try {
        lRUCache0 = new LRUCache<Object, String>((-1964));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // capacity must greater than 0!
         //
         verifyException("com.thealgorithms.datastructures.caches.LRUCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LRUCache.Entry<Integer, String> lRUCache_Entry0 = new LRUCache.Entry<Integer, String>();
      LRUCache.Entry<Integer, String> lRUCache_Entry1 = new LRUCache.Entry<Integer, String>();
      Integer integer0 = new Integer((-791));
      LRUCache.Entry<Integer, String> lRUCache_Entry2 = new LRUCache.Entry<Integer, String>(lRUCache_Entry1, lRUCache_Entry0, integer0, (String) null);
      lRUCache_Entry0.setPreEntry(lRUCache_Entry2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LRUCache.Entry<Object, String> lRUCache_Entry0 = new LRUCache.Entry<Object, String>();
      LRUCache.Entry<Object, String> lRUCache_Entry1 = new LRUCache.Entry<Object, String>(lRUCache_Entry0, lRUCache_Entry0, lRUCache_Entry0, "");
      LRUCache.Entry<Object, String> lRUCache_Entry2 = lRUCache_Entry1.getPreEntry();
      assertNotNull(lRUCache_Entry2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LRUCache.Entry<String, String> lRUCache_Entry0 = new LRUCache.Entry<String, String>();
      LRUCache.Entry<String, String> lRUCache_Entry1 = new LRUCache.Entry<String, String>(lRUCache_Entry0, lRUCache_Entry0, (String) null, (String) null);
      lRUCache_Entry0.setNextEntry(lRUCache_Entry1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LRUCache.Entry<LRUCache.Entry<String, Object>, String> lRUCache_Entry0 = new LRUCache.Entry<LRUCache.Entry<String, Object>, String>();
      String string0 = lRUCache_Entry0.getValue();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LRUCache.Entry<String, String> lRUCache_Entry0 = new LRUCache.Entry<String, String>();
      lRUCache_Entry0.setKey("");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LRUCache.Entry<String, String> lRUCache_Entry0 = new LRUCache.Entry<String, String>();
      LRUCache.Entry<String, String> lRUCache_Entry1 = lRUCache_Entry0.getNextEntry();
      assertNull(lRUCache_Entry1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LRUCache<String, Integer> lRUCache0 = new LRUCache<String, Integer>();
      lRUCache0.put(";", (Integer) null);
      lRUCache0.put(";", (Integer) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LRUCache<String, Integer> lRUCache0 = new LRUCache<String, Integer>();
      Integer integer0 = new Integer(0);
      lRUCache0.put("]90$M~5r,ci.O", integer0);
      lRUCache0.put("", integer0);
      lRUCache0.put("com.thealgorithms.datastructures.caches.LRUCache$Entry", integer0);
      Integer integer1 = lRUCache0.get("");
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LRUCache<String, Integer> lRUCache0 = new LRUCache<String, Integer>();
      Integer integer0 = lRUCache0.get("k&_|76CmI@vi");
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LRUCache<Object, Object> lRUCache0 = new LRUCache<Object, Object>();
      LRUCache<Object, Integer> lRUCache1 = new LRUCache<Object, Integer>(1);
      Integer integer0 = new Integer(1);
      lRUCache1.put(lRUCache0, integer0);
      LRUCache.Entry<Integer, Integer> lRUCache_Entry0 = new LRUCache.Entry<Integer, Integer>();
      // Undeclared exception!
      try { 
        lRUCache1.put(lRUCache_Entry0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.caches.LRUCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LRUCache<Object, String> lRUCache0 = null;
      try {
        lRUCache0 = new LRUCache<Object, String>(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // capacity must greater than 0!
         //
         verifyException("com.thealgorithms.datastructures.caches.LRUCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LRUCache.Entry<String, String> lRUCache_Entry0 = new LRUCache.Entry<String, String>();
      LRUCache.Entry<String, String> lRUCache_Entry1 = new LRUCache.Entry<String, String>(lRUCache_Entry0, lRUCache_Entry0, "77r", "capacity must greater than 0!");
      lRUCache_Entry1.setValue((String) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LRUCache.Entry<String, String> lRUCache_Entry0 = new LRUCache.Entry<String, String>();
      String string0 = lRUCache_Entry0.getKey();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LRUCache<String, Integer> lRUCache0 = new LRUCache<String, Integer>();
      Integer integer0 = new Integer(0);
      lRUCache0.put("", integer0);
      lRUCache0.put("com.thealgorithms.datastructures.caches.LRUCache$Entry", integer0);
      Integer integer1 = lRUCache0.get("");
      assertEquals(0, (int)integer1);
  }
}

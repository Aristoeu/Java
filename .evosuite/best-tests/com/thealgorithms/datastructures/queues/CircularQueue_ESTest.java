/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:38:45 GMT 2022
 */

package com.thealgorithms.datastructures.queues;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.queues.CircularQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularQueue_ESTest extends CircularQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(481);
      circularQueue0.size = 481;
      circularQueue0.size = 0;
      circularQueue0.enQueue(7);
      circularQueue0.enQueue(462);
      assertFalse(circularQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.beginningOfQueue = 0;
      int[] intArray0 = new int[5];
      circularQueue0.arr = intArray0;
      int int0 = circularQueue0.peek();
      assertTrue(circularQueue0.isFull());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(526);
      circularQueue0.enQueue(0);
      circularQueue0.enQueue(526);
      circularQueue0.deQueue();
      int int0 = circularQueue0.peek();
      assertFalse(circularQueue0.isEmpty());
      assertEquals(526, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.beginningOfQueue = 0;
      circularQueue0.deleteQueue();
      // Undeclared exception!
      try { 
        circularQueue0.peek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      // Undeclared exception!
      try { 
        circularQueue0.enQueue(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.beginningOfQueue = 0;
      circularQueue0.deleteQueue();
      // Undeclared exception!
      try { 
        circularQueue0.deQueue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(2596);
      circularQueue0.beginningOfQueue = (-1691);
      // Undeclared exception!
      try { 
        circularQueue0.deQueue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1691
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircularQueue circularQueue0 = null;
      try {
        circularQueue0 = new CircularQueue((-59));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.beginningOfQueue = 0;
      // Undeclared exception!
      try { 
        circularQueue0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(2420);
      circularQueue0.enQueue(2420);
      assertFalse(circularQueue0.isEmpty());
      
      int int0 = circularQueue0.deQueue();
      assertEquals(2420, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(1);
      circularQueue0.enQueue((-2797));
      boolean boolean0 = circularQueue0.isFull();
      assertFalse(circularQueue0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(2420);
      boolean boolean0 = circularQueue0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      assertFalse(circularQueue0.isFull());
      
      circularQueue0.beginningOfQueue = 0;
      boolean boolean0 = circularQueue0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.isEmpty();
      assertFalse(circularQueue0.isFull());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(2420);
      circularQueue0.enQueue(2420);
      boolean boolean0 = circularQueue0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      int int0 = circularQueue0.peek();
      assertEquals((-1), int0);
      assertFalse(circularQueue0.isFull());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(1);
      circularQueue0.beginningOfQueue = 0;
      int int0 = circularQueue0.deQueue();
      assertFalse(circularQueue0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      assertTrue(circularQueue0.isEmpty());
      
      int int0 = circularQueue0.deQueue();
      assertFalse(circularQueue0.isFull());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      assertTrue(circularQueue0.isEmpty());
      
      int[] intArray0 = new int[7];
      circularQueue0.beginningOfQueue = 0;
      circularQueue0.arr = intArray0;
      int int0 = circularQueue0.deQueue();
      assertEquals(0, int0);
      
      circularQueue0.enQueue(0);
      assertTrue(circularQueue0.isFull());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(1);
      assertTrue(circularQueue0.isEmpty());
      
      circularQueue0.beginningOfQueue = 0;
      circularQueue0.topOfQueue = 0;
      circularQueue0.enQueue(1);
      assertTrue(circularQueue0.isFull());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      boolean boolean0 = circularQueue0.isFull();
      assertFalse(boolean0);
      assertTrue(circularQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[5];
      CircularQueue.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CircularQueue circularQueue0 = new CircularQueue(0);
      circularQueue0.deleteQueue();
      // Undeclared exception!
      try { 
        circularQueue0.enQueue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.queues.CircularQueue", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:35:19 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.RandomNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomNode_ESTest extends RandomNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RandomNode.ListNode randomNode_ListNode0 = new RandomNode.ListNode(0);
      RandomNode randomNode0 = new RandomNode(randomNode_ListNode0);
      int int0 = randomNode0.getRandom();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RandomNode.ListNode randomNode_ListNode0 = new RandomNode.ListNode(1);
      RandomNode randomNode0 = new RandomNode(randomNode_ListNode0);
      int int0 = randomNode0.getRandom();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RandomNode randomNode0 = new RandomNode((RandomNode.ListNode) null);
      // Undeclared exception!
      try { 
        randomNode0.getRandom();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RandomNode.ListNode randomNode_ListNode0 = new RandomNode.ListNode(1053);
      randomNode_ListNode0.next = randomNode_ListNode0;
      RandomNode randomNode0 = new RandomNode(randomNode_ListNode0.next);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RandomNode.ListNode randomNode_ListNode0 = new RandomNode.ListNode((-1503));
      RandomNode randomNode0 = new RandomNode(randomNode_ListNode0);
      int int0 = randomNode0.getRandom();
      assertEquals((-1503), int0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[2];
      RandomNode.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }
}

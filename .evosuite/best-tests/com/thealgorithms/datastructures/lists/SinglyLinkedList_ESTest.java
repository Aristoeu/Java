/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:17:45 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.Node;
import com.thealgorithms.datastructures.lists.SinglyLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SinglyLinkedList_ESTest extends SinglyLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(432, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = (Node) singlyLinkedList0;
      node0.next = node1;
      singlyLinkedList0.insertHead(432);
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(432, 0);
      singlyLinkedList0.search(0);
      singlyLinkedList0.print();
      singlyLinkedList0.count();
      singlyLinkedList0.insertHead(2819);
      singlyLinkedList0.detectLoop();
      singlyLinkedList0.deleteDuplicates();
      singlyLinkedList0.deleteNth(0);
      singlyLinkedList0.toString();
      singlyLinkedList0.detectLoop();
      singlyLinkedList0.toString();
      singlyLinkedList0.getNth(0);
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(432, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = node1;
      node0.value = 432;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(432, 0);
      singlyLinkedList0.search(0);
      singlyLinkedList0.print();
      singlyLinkedList0.print();
      singlyLinkedList0.count();
      singlyLinkedList0.insertHead(2819);
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      try { 
        singlyLinkedList0.insert(2819);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      Node node0 = new Node(1);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 1);
      node0.next = (Node) singlyLinkedList0;
      node0.value = 1;
      node0.next = (Node) singlyLinkedList0;
      node0.next.value = 1;
      singlyLinkedList0.swapNodes(101, 1);
      singlyLinkedList0.insert(1);
      singlyLinkedList0.insert(1);
      singlyLinkedList0.deleteNth(1);
      node0.next.next = node0.next;
      node0.next.value = 1;
      node0.next.value = 101;
      node0.next = (Node) singlyLinkedList0;
      node0.next.value = 1;
      singlyLinkedList0.insertHead(0);
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      singlyLinkedList0.swapNodes(0, 0);
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.insert(801);
      singlyLinkedList0.deleteDuplicates();
      singlyLinkedList0.reverseList(node0.next);
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteNth(801);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 801
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Node node0 = new Node();
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      node0.next = (Node) singlyLinkedList0;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node0, 379);
      singlyLinkedList1.clear();
      SinglyLinkedList.main((String[]) null);
      singlyLinkedList1.insertNth((-11), 0);
      singlyLinkedList1.getNth(0);
      singlyLinkedList1.deleteDuplicates();
      // Undeclared exception!
      try { 
        singlyLinkedList1.insertNth(0, (-11));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = new Node();
      node0.value = 1;
      node0.value = 1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 3162);
      // Undeclared exception!
      try { 
        singlyLinkedList0.insertNth((-1767), 3162);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = new Node(439);
      Node node1 = new Node(439, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(0, 439);
      int int0 = (-9);
      int int1 = (-15);
      // Undeclared exception!
      try { 
        singlyLinkedList0.delete();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(439, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(0, 439);
      singlyLinkedList0.search((-15));
      singlyLinkedList0.print();
      singlyLinkedList0.count();
      singlyLinkedList0.insertHead((-15));
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      try { 
        singlyLinkedList0.insert(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(432, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(432, 0);
      singlyLinkedList0.search(0);
      singlyLinkedList0.print();
      singlyLinkedList0.print();
      singlyLinkedList0.count();
      singlyLinkedList0.insertHead(2819);
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      try { 
        singlyLinkedList0.insert(2819);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 35);
      node0.value = 0;
      singlyLinkedList0.insertHead((-1));
      node1.next = node0;
      singlyLinkedList0.insertNth(0, 35);
      singlyLinkedList0.reverseList(node0);
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
      singlyLinkedList0.size();
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteNth(37);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(439, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 791);
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(0, (-5));
      singlyLinkedList0.search(0);
      singlyLinkedList0.print();
      singlyLinkedList0.print();
      singlyLinkedList0.count();
      singlyLinkedList0.insertHead(2810);
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      try { 
        singlyLinkedList0.insert(2810);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "com.thealgorithms.datastructures.lists.Node";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "O}>xw_D?`v";
      SinglyLinkedList.main(stringArray0);
      Node node0 = new Node(100);
      node0.value = 7;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 7);
      singlyLinkedList0.setHead(node0);
      Node node1 = singlyLinkedList0.getHead();
      singlyLinkedList0.deleteHead();
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      node1.next = node0;
      singlyLinkedList1.deleteDuplicates();
      singlyLinkedList0.size();
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteHead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = new Node((-962));
      Node node1 = new Node((-962), node0);
      node1.value = 952;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, (-962));
      singlyLinkedList0.size();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "D(DDb'6x)jqc1+)%<";
      stringArray0[1] = "->";
      stringArray0[2] = "SkXW*An!<JJTu>";
      stringArray0[3] = "OE_MFYa@";
      stringArray0[4] = "lkxl8;7eivZ66 ";
      stringArray0[5] = "W?#CU;M|}1";
      stringArray0[6] = "";
      stringArray0[7] = "com.thealgorithms.datastructures.lists.SinglyLinkedList";
      SinglyLinkedList.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      node0.value = 2560;
      singlyLinkedList0.swapNodes(0, 0);
      node0.value = 0;
      singlyLinkedList0.insertHead((-1129));
      node1.next = node0;
      singlyLinkedList0.insertNth(0, 0);
      singlyLinkedList0.reverseList(node0);
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
      singlyLinkedList0.size();
      // Undeclared exception!
      singlyLinkedList0.deleteDuplicates();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.insertNth((-2382), 0);
      Node node0 = new Node((-2703), singlyLinkedList0);
      node0.value = (-2382);
      node0.next = (Node) singlyLinkedList0;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.print();
      singlyLinkedList0.setHead(node0);
      singlyLinkedList0.insert((-2703));
      singlyLinkedList0.insertHead(0);
      singlyLinkedList0.isEmpty();
      singlyLinkedList0.isEmpty();
      singlyLinkedList0.deleteDuplicates();
      singlyLinkedList0.swapNodes(0, 0);
      singlyLinkedList0.count();
      singlyLinkedList0.getNth(0);
      singlyLinkedList0.count();
      singlyLinkedList0.search(2673);
      singlyLinkedList0.reverseList(node0.next);
      singlyLinkedList0.deleteHead();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-2285);
      Node node0 = new Node();
      Node node1 = new Node((-2285), node0);
      node1.value = (-2285);
      node0.next = node1;
      node1.next = node0;
      node0.value = (-2285);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      node1.next = (Node) singlyLinkedList0;
      node0.next = (Node) singlyLinkedList0;
      node0.next.next = node0.next;
      node1.next = node0;
      int int1 = (-1);
      node0.value = (-1);
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node1, (-2285));
      // Undeclared exception!
      singlyLinkedList1.clear();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      
      Node node1 = new Node(298, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertEquals(0, singlyLinkedList1.size());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.count());
      assertFalse(singlyLinkedList1.detectLoop());
      
      node0.next = (Node) singlyLinkedList1;
      assertEquals(0, singlyLinkedList1.size());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.count());
      assertFalse(singlyLinkedList1.detectLoop());
      
      singlyLinkedList0.deleteDuplicates();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      
      int int0 = singlyLinkedList0.size();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertEquals(0, int0);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      
      node0.value = 0;
      node0.next = node1;
      assertEquals(0, singlyLinkedList1.size());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.count());
      assertFalse(singlyLinkedList1.detectLoop());
      
      singlyLinkedList0.insertHead(0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.detectLoop());
      
      Node node2 = singlyLinkedList0.reverseList(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.detectLoop());
      
      Node node3 = singlyLinkedList0.getHead();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node0, node1);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(node3, node1);
      assertNotSame(node3, node0);
      assertSame(node3, node2);
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.detectLoop());
      
      // Undeclared exception!
      singlyLinkedList0.search(993);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      
      node0.value = 0;
      Node node1 = new Node(1502, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.next = node0;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      singlyLinkedList0.clear();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.setHead(node1.next);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.next.equals((Object)node1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(node1.next, node1);
      assertSame(node1.next, node0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.count());
      
      node1.value = 0;
      singlyLinkedList0.setHead(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.count());
      
      singlyLinkedList0.insertHead(10);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      boolean boolean0 = singlyLinkedList0.isEmpty();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      boolean boolean1 = singlyLinkedList0.search((-1));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean1);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      node1.next.next = node0;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertEquals(0, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertEquals(0, singlyLinkedList1.count());
      assertTrue(singlyLinkedList1.isEmpty());
      
      int int0 = singlyLinkedList0.getNth(0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertEquals(10, int0);
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      // Undeclared exception!
      singlyLinkedList0.reverseList(singlyLinkedList1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = new Node(779);
      assertNotNull(node0);
      
      int int0 = (-2921);
      node0.value = (-2921);
      node0.value = 779;
      node0.value = (-186);
      Node node1 = new Node();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.next = node1;
      node0.value = 779;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 1125);
      assertFalse(node0.equals((Object)node1));
      assertNotNull(singlyLinkedList0);
      assertEquals(2, singlyLinkedList0.count());
      assertEquals(1125, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.deleteHead();
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1124, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.deleteDuplicates();
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1124, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.deleteNth(0);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(1123, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.insert(1125);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1124, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      Node node0 = new Node(0);
      assertNotNull(node0);
      
      Node node1 = new Node((-1138), node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, (-81));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals((-81), singlyLinkedList0.size());
      
      Node node2 = new Node((-81), singlyLinkedList0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals((-81), singlyLinkedList0.size());
      
      node0.next = node2;
      Node node3 = new Node(0, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      
      node0.next = node3;
      node0.next.value = (-269);
      node2.value = 0;
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals((-81), singlyLinkedList0.size());
      
      node2.value = (-81);
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals((-81), singlyLinkedList0.size());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node3, 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertTrue(singlyLinkedList1.detectLoop());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.size());
      
      singlyLinkedList1.insert((-269));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertTrue(singlyLinkedList1.detectLoop());
      assertEquals(1, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      
      singlyLinkedList1.insert(5);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node3);
      assertNotSame(node0, node2);
      assertNotSame(node3, node1);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertTrue(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      assertEquals(2, singlyLinkedList1.size());
      
      // Undeclared exception!
      singlyLinkedList1.toString();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = new Node(0);
      assertNotNull(node0);
      
      Node node1 = new Node(0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.next = node1;
      int int0 = 1924;
      node0.next = node1;
      node1.value = (-1226);
      node1.next = node0;
      node0.next = node1.next;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      node0.next.next = (Node) singlyLinkedList0;
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      node0.value = (-1226);
      node0.next = node1.next;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node1, 1924);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertFalse(singlyLinkedList1.isEmpty());
      assertTrue(singlyLinkedList1.detectLoop());
      assertEquals(1924, singlyLinkedList1.size());
      
      Node node2 = singlyLinkedList1.reverseList(node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertSame(node2, node1);
      assertNotSame(node2, node0);
      assertFalse(singlyLinkedList1.isEmpty());
      assertTrue(singlyLinkedList1.detectLoop());
      assertEquals(1924, singlyLinkedList1.size());
      
      node0.next.next = node0.next;
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      boolean boolean0 = singlyLinkedList1.detectLoop();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node1.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(node0, node1);
      assertNotSame(node0, node2);
      assertSame(node1, node2);
      assertNotSame(node1, node0);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertTrue(boolean0);
      assertFalse(singlyLinkedList1.isEmpty());
      assertTrue(singlyLinkedList1.detectLoop());
      assertEquals(1924, singlyLinkedList1.size());
      
      // Undeclared exception!
      singlyLinkedList1.count();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      int int0 = (-1480);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      
      node0.next = (Node) singlyLinkedList0;
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node0, (-1480));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertEquals(2, singlyLinkedList1.count());
      assertEquals((-1480), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertFalse(singlyLinkedList1.detectLoop());
      
      node0.value = (-1480);
      singlyLinkedList1.print();
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertEquals(2, singlyLinkedList1.count());
      assertEquals((-1480), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertFalse(singlyLinkedList1.detectLoop());
      
      singlyLinkedList1.deleteDuplicates();
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertEquals(2, singlyLinkedList1.count());
      assertEquals((-1480), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertFalse(singlyLinkedList1.detectLoop());
      
      node0.next.value = (-1480);
      singlyLinkedList1.setHead(node0.next);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(node0.next.equals((Object)node0));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals((-1480), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertFalse(singlyLinkedList1.detectLoop());
      
      // Undeclared exception!
      try { 
        singlyLinkedList1.insert(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1480
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = new Node(178, (Node) null);
      assertNotNull(node0);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 6293);
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(6293, singlyLinkedList0.size());
      assertEquals(1, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.delete();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{Z/ep{q";
      stringArray0[1] = "* ";
      stringArray0[2] = "4jl6\"<;n";
      SinglyLinkedList.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = 100;
      Node node0 = new Node(100);
      assertNotNull(node0);
      
      Node node1 = new Node((-3115), node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node1.next = node0;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 359);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      assertEquals(359, singlyLinkedList0.size());
      
      int int1 = 100;
      // Undeclared exception!
      try { 
        singlyLinkedList0.getNth(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      Node node1 = new Node(439, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      node1.value = 439;
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(0, 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(3, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      node1.value = 0;
      boolean boolean0 = singlyLinkedList0.search(0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertTrue(boolean0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(3, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.print();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(3, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.print();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(3, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      int int0 = singlyLinkedList0.count();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(3, int0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(3, singlyLinkedList0.count());
      assertEquals(782, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.insertHead(2819);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(4, singlyLinkedList0.count());
      assertEquals(783, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      boolean boolean1 = singlyLinkedList0.detectLoop();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean1);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(4, singlyLinkedList0.count());
      assertEquals(783, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.insert(2819);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2380;
      Node node0 = new Node(2380);
      assertNotNull(node0);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 2380);
      assertNotNull(singlyLinkedList0);
      assertEquals(2380, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      
      String[] stringArray0 = new String[5];
      node0.next = (Node) singlyLinkedList0;
      assertEquals(2380, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      
      stringArray0[0] = "nVt;Bk{=A^";
      stringArray0[1] = "";
      String string0 = "7->3";
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteNth(1173);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      
      singlyLinkedList0.insert((-378));
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      
      singlyLinkedList0.deleteDuplicates();
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      
      int int0 = singlyLinkedList0.count();
      assertEquals(1, int0);
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.next = null;
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.next = null;
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.clear();
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.setHead((Node) null);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      Node node0 = singlyLinkedList0.getHead();
      assertNull(node0);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.insert((-1));
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      singlyLinkedList0.clear();
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      String[] stringArray0 = new String[4];
      singlyLinkedList0.insertNth(0, 0);
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "7->3";
      singlyLinkedList0.swapNodes(0, (-1));
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      stringArray0[3] = "->";
      SinglyLinkedList.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      singlyLinkedList0.delete();
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      
      boolean boolean0 = singlyLinkedList0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = new Node(2584);
      assertNotNull(node0);
      
      Node node1 = new Node(2584, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      boolean boolean0 = singlyLinkedList0.search(2);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(boolean0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(2, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, (-3469));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList1.isEmpty());
      assertEquals((-3469), singlyLinkedList1.size());
      assertEquals(1, singlyLinkedList1.count());
      assertFalse(singlyLinkedList1.detectLoop());
      
      boolean boolean0 = singlyLinkedList1.search(0);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertTrue(boolean0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList1.isEmpty());
      assertEquals((-3469), singlyLinkedList1.size());
      assertEquals(1, singlyLinkedList1.count());
      assertFalse(singlyLinkedList1.detectLoop());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-1);
      Node node0 = new Node();
      assertNotNull(node0);
      
      Node node1 = new Node((-1), node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, (-1890));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertEquals(2, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals((-1890), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.swapNodes((-1), (-1890));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertEquals(2, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals((-1890), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      node1.value = (-1);
      // Undeclared exception!
      try { 
        singlyLinkedList0.getNth(96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 96
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      Node node1 = new Node(1253, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 1253);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1253, singlyLinkedList0.size());
      assertEquals(2, singlyLinkedList0.count());
      
      singlyLinkedList0.deleteHead();
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(1252, singlyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      
      singlyLinkedList0.insertNth(0, 0);
      assertEquals(1, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.print();
      assertEquals(1, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      String string0 = singlyLinkedList0.toString();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals(1, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertEquals(0, singlyLinkedList1.count());
      assertTrue(singlyLinkedList1.isEmpty());
      assertFalse(singlyLinkedList1.detectLoop());
      assertEquals(0, singlyLinkedList1.size());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(singlyLinkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      
      int int0 = singlyLinkedList0.count();
      assertEquals(0, int0);
      assertEquals(0, singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.insertNth(0, (-678));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -678
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      singlyLinkedList0.swapNodes(1519, 1519);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      SinglyLinkedList.main((String[]) null);
      singlyLinkedList0.insertHead(665);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.count());
      
      singlyLinkedList0.insert(665);
      assertEquals(2, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      Node node0 = singlyLinkedList0.getHead();
      assertNotNull(node0);
      assertEquals(2, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2, singlyLinkedList0.count());
      
      singlyLinkedList0.delete();
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList0.count());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      
      singlyLinkedList0.clear();
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, 5);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotNull(singlyLinkedList1);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals(5, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "7->3";
      SinglyLinkedList.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      singlyLinkedList1.deleteDuplicates();
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals(5, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      
      boolean boolean0 = singlyLinkedList1.detectLoop();
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(boolean0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals(5, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      
      singlyLinkedList1.insertHead(5);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(2, singlyLinkedList1.count());
      assertEquals(6, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      
      singlyLinkedList1.deleteDuplicates();
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(2, singlyLinkedList1.count());
      assertEquals(6, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      Node node1 = new Node(1, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 1);
      assertFalse(node0.equals((Object)node1));
      assertNotNull(singlyLinkedList0);
      assertEquals(1, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      
      singlyLinkedList0.insertHead(1);
      assertFalse(node0.equals((Object)node1));
      assertNotSame(node0, node1);
      assertEquals(2, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      
      // Undeclared exception!
      singlyLinkedList0.print();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = null;
      int int0 = (-1873);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList((Node) null, (-1873));
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals((-1873), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      boolean boolean0 = singlyLinkedList0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, singlyLinkedList0.count());
      assertEquals((-1873), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteNth((-1873));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1873
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 285);
      assertNotNull(singlyLinkedList0);
      assertEquals(285, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      
      boolean boolean0 = singlyLinkedList0.isEmpty();
      assertFalse(boolean0);
      assertEquals(285, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      int int0 = 1994;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, 1994);
      singlyLinkedList0.setHead(singlyLinkedList1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      String string0 = "+-O2Y0E\"$>UK/#31 ";
      int int1 = 201;
      // Undeclared exception!
      try { 
        singlyLinkedList1.deleteNth(201);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = new Node(2370);
      int int0 = 0;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      singlyLinkedList0.insert(0);
      node0.value = 157;
      singlyLinkedList0.deleteNth(0);
      int int1 = 2513;
      node0.next = (Node) singlyLinkedList0;
      // Undeclared exception!
      try { 
        singlyLinkedList0.checkBounds(2513, 2370, 1573);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2513
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.toString();
      assertTrue(singlyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = new Node();
      node0.value = (-2048);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      // Undeclared exception!
      try { 
        singlyLinkedList0.delete();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = null;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList((Node) null, 1329);
      singlyLinkedList0.value = 0;
      // Undeclared exception!
      try { 
        singlyLinkedList0.checkBounds((-145), 1329, 1329);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -145
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.print();
      singlyLinkedList0.clear();
      Node node0 = new Node();
      int int0 = (-415);
      node0.value = (-415);
      singlyLinkedList0.next = node0;
      singlyLinkedList0.deleteDuplicates();
      int int1 = 3162;
      node0.value = 3162;
      singlyLinkedList0.clear();
      // Undeclared exception!
      try { 
        singlyLinkedList0.getNth(3162);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3162
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = new Node();
      node0.next = null;
      node0.value = (-2158);
      Node node1 = new Node((-2158), node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, (-2158));
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      try { 
        singlyLinkedList0.delete();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2159
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = new Node((-3884));
      int int0 = (-1729);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, (-1729));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y}pTK-HPqp-Pe_t";
      stringArray0[1] = "";
      stringArray0[2] = "q0qRRo&4`aD2n~";
      stringArray0[3] = "R'0{nM+,pnES";
      stringArray0[4] = "com.thealgorithms.datastructures.lists.SinglyLinkedList";
      stringArray0[5] = "U";
      stringArray0[6] = "OSjsn=;LL}B";
      stringArray0[7] = "Z$7e&:\"fb*783E{r=X";
      stringArray0[8] = " k3r.gI).nErn";
      SinglyLinkedList.main(stringArray0);
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node0, (-3884));
      singlyLinkedList0.setHead(singlyLinkedList1);
      // Undeclared exception!
      try { 
        singlyLinkedList0.insertHead((-1729));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = new Node();
      node0.value = (-538);
      Node node1 = new Node((-538), (Node) null);
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, (-2677));
      singlyLinkedList0.toString();
      singlyLinkedList0.next = null;
      singlyLinkedList0.clear();
      singlyLinkedList0.clear();
      node1.next = null;
      singlyLinkedList0.isEmpty();
      singlyLinkedList0.deleteDuplicates();
      // Undeclared exception!
      try { 
        singlyLinkedList0.getNth(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = new Node();
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      node0.next = (Node) singlyLinkedList0;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(node0, 379);
      singlyLinkedList1.clear();
      assertEquals(0, singlyLinkedList1.size());
      
      SinglyLinkedList.main((String[]) null);
      singlyLinkedList1.insertNth(0, 0);
      singlyLinkedList1.getNth(0);
      singlyLinkedList1.deleteDuplicates();
      singlyLinkedList1.insertNth(0, 0);
      singlyLinkedList1.size();
      singlyLinkedList0.swapNodes(3, 2091);
      assertEquals(0, singlyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.clear();
      int int0 = 0;
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteHead();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      int int0 = 0;
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList();
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(singlyLinkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.insert(2463);
      singlyLinkedList0.swapNodes((-1), 828);
      singlyLinkedList0.size();
      singlyLinkedList0.print();
      // Undeclared exception!
      try { 
        singlyLinkedList0.getNth(2463);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2463
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Node node0 = new Node((-1));
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, (-1));
      singlyLinkedList0.swapNodes((-1), (-1));
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node((-7204), node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, (-7204));
      singlyLinkedList0.swapNodes((-1909), (-7204));
      assertEquals((-7204), singlyLinkedList0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node();
      node0.next = node1;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 0);
      node0.value = 0;
      singlyLinkedList0.insertHead((-1129));
      node1.next = node0;
      singlyLinkedList0.insertNth(0, 0);
      singlyLinkedList0.reverseList(node0);
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
      singlyLinkedList0.size();
      // Undeclared exception!
      try { 
        singlyLinkedList0.deleteNth(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Node node0 = new Node();
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, (-788));
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, (-148));
      singlyLinkedList1.setHead(singlyLinkedList0);
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals((-148), singlyLinkedList1.size());
      assertEquals(1, singlyLinkedList1.count());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.checkBounds((-1586), (-1586), (-1586));
      assertTrue(singlyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "W0FMXEb^r";
      SinglyLinkedList.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.clear();
      Node node0 = new Node();
      // Undeclared exception!
      try { 
        singlyLinkedList0.reverseList(node0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      int int0 = singlyLinkedList0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(439, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 439);
      int int0 = 0;
      node0.next = node1;
      singlyLinkedList0.swapNodes(0, 439);
      singlyLinkedList0.detectLoop();
      // Undeclared exception!
      singlyLinkedList0.count();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, (-27));
      singlyLinkedList1.deleteDuplicates();
      singlyLinkedList0.next = (Node) singlyLinkedList1;
      singlyLinkedList1.deleteDuplicates();
      assertEquals(1, singlyLinkedList1.count());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Node node0 = new Node();
      Node node1 = new Node(432, node0);
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 782);
      node0.next = node1;
      node0.next = (Node) singlyLinkedList0;
      singlyLinkedList0.swapNodes(432, 0);
      singlyLinkedList0.search(0);
      singlyLinkedList0.detectLoop();
      singlyLinkedList0.deleteNth(0);
      singlyLinkedList0.toString();
      singlyLinkedList0.detectLoop();
      singlyLinkedList0.getNth(0);
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Node node0 = new Node();
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 1);
      singlyLinkedList0.swapNodes(1, 1);
      singlyLinkedList0.insert(0);
      singlyLinkedList0.insertHead(1);
      singlyLinkedList0.reverseList(node0.next);
      singlyLinkedList0.getNth(1);
      singlyLinkedList0.size();
      // Undeclared exception!
      try { 
        singlyLinkedList0.insertNth(0, 530);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 530
         //
         verifyException("com.thealgorithms.datastructures.lists.SinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.swapNodes(0, 434);
      singlyLinkedList0.print();
      singlyLinkedList0.insertHead(434);
      singlyLinkedList0.isEmpty();
      singlyLinkedList0.insert(434);
      singlyLinkedList0.toString();
      String[] stringArray0 = new String[0];
      SinglyLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = new Node(100);
      node0.value = 100;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 100);
      Node node1 = singlyLinkedList0.getHead();
      singlyLinkedList0.deleteHead();
      node1.next = (Node) singlyLinkedList0;
      singlyLinkedList0.size();
      assertEquals(99, singlyLinkedList0.size());
      
      singlyLinkedList0.clear();
      singlyLinkedList0.setHead(node0.next);
      singlyLinkedList0.swapNodes(0, (-2319));
      assertEquals(0, singlyLinkedList0.size());
  }
}

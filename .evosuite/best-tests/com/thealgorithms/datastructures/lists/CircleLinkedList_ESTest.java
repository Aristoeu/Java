/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:02:29 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.CircleLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircleLinkedList_ESTest extends CircleLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      circleLinkedList0.append("TpBL@B_WcNTT43NYX");
      assertEquals(1, circleLinkedList0.getSize());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "o-AM?[ f>Irw:0";
      String string0 = circleLinkedList0.remove(0);
      assertEquals("TpBL@B_WcNTT43NYX", string0);
      assertNotNull(string0);
      assertEquals(0, circleLinkedList0.getSize());
      
      stringArray0[1] = "pF";
      stringArray0[2] = "";
      circleLinkedList0.append("o-AM?[ f>Irw:0");
      assertEquals(1, circleLinkedList0.getSize());
      
      stringArray0[3] = "Cannot add null element to the list";
      stringArray0[4] = "";
      CircleLinkedList.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = circleLinkedList0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("[ o-AM?[ f>Irw:0 ]", string1);
      assertNotNull(string1);
      assertEquals(1, circleLinkedList0.getSize());
      
      circleLinkedList0.append("+tTY'5`Rj.U");
      assertEquals(2, circleLinkedList0.getSize());
      
      String string2 = circleLinkedList0.remove(0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("o-AM?[ f>Irw:0", string2);
      assertNotNull(string2);
      assertEquals(1, circleLinkedList0.getSize());
      
      int int0 = circleLinkedList0.getSize();
      assertEquals(1, int0);
      assertEquals(1, circleLinkedList0.getSize());
      
      String string3 = circleLinkedList0.remove(1);
      assertNull(string3);
      assertEquals(0, circleLinkedList0.getSize());
      
      CircleLinkedList.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      CircleLinkedList.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      // Undeclared exception!
      circleLinkedList0.toString();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      circleLinkedList0.append(":GI0");
      assertEquals(1, circleLinkedList0.getSize());
      
      circleLinkedList0.append(":GI0");
      assertEquals(2, circleLinkedList0.getSize());
      
      String string0 = circleLinkedList0.toString();
      assertEquals("[ :GI0 , :GI0 ]", string0);
      assertNotNull(string0);
      assertEquals(2, circleLinkedList0.getSize());
      
      String string1 = circleLinkedList0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("[ :GI0 , :GI0 ]", string1);
      assertNotNull(string1);
      assertEquals(2, circleLinkedList0.getSize());
      
      int int0 = circleLinkedList0.getSize();
      assertEquals(2, int0);
      assertEquals(2, circleLinkedList0.getSize());
      
      circleLinkedList0.append("[ :GI0 , :GI0 ]");
      assertEquals(3, circleLinkedList0.getSize());
      
      int int1 = circleLinkedList0.getSize();
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      assertEquals(3, circleLinkedList0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.append((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot add null element to the list
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CircleLinkedList<Integer> circleLinkedList0 = new CircleLinkedList<Integer>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.remove(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`<.|";
      stringArray0[1] = "com.thealgorithms.datastructures.lists.CircleLinkedList$Node";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "com.thealgorithms.datastructures.lists.CircleLinkedList$Node";
      stringArray0[6] = ",vv";
      CircleLinkedList.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // position cannot be greater than size or negative
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      int int0 = circleLinkedList0.getSize();
      assertEquals(0, int0);
      assertEquals(0, circleLinkedList0.getSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircleLinkedList<Integer> circleLinkedList0 = new CircleLinkedList<Integer>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.remove((-3539));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // position cannot be greater than size or negative
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      String[] stringArray0 = new String[0];
      CircleLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        circleLinkedList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      circleLinkedList0.append("");
      assertEquals(1, circleLinkedList0.getSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.append((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Cannot add null element to the list
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      assertNotNull(circleLinkedList0);
      assertEquals(0, circleLinkedList0.getSize());
      
      // Undeclared exception!
      try { 
        circleLinkedList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CircleLinkedList<String> circleLinkedList0 = new CircleLinkedList<String>();
      circleLinkedList0.append("o-AM?[ f>Irw:0");
      circleLinkedList0.append("o-AM?[ f>Irw:0");
      circleLinkedList0.remove(0);
      int int0 = circleLinkedList0.getSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CircleLinkedList<Object> circleLinkedList0 = new CircleLinkedList<Object>();
      String[] stringArray0 = new String[9];
      CircleLinkedList.main(stringArray0);
      // Undeclared exception!
      try { 
        circleLinkedList0.remove((-734));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // position cannot be greater than size or negative
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CircleLinkedList<Integer> circleLinkedList0 = new CircleLinkedList<Integer>();
      // Undeclared exception!
      try { 
        circleLinkedList0.remove(1409);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // position cannot be greater than size or negative
         //
         verifyException("com.thealgorithms.datastructures.lists.CircleLinkedList", e);
      }
  }
}

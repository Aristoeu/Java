/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:45:41 GMT 2022
 */

package com.thealgorithms.datastructures.stacks;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.stacks.PostfixToInfix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PostfixToInfix_ESTest extends PostfixToInfix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PostfixToInfix.isOperator('/');
      PostfixToInfix.isOperator('/');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "X";
      stringArray0[2] = "";
      stringArray0[3] = "AB+C+D+";
      stringArray0[4] = "W*N\t";
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.isValidPostfixExpression("X");
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.isValidPostfixExpression("@ f");
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.main(stringArray0);
      boolean boolean0 = PostfixToInfix.isValidPostfixExpression("7YXc'fCz3shZMbA");
      PostfixToInfix.main(stringArray0);
      boolean boolean1 = PostfixToInfix.isValidPostfixExpression("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "u+9;x";
      PostfixToInfix.isValidPostfixExpression("u+9;x");
      String string1 = "qugAdjqC`B2";
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("qugAdjqC`B2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PostfixToInfix.isOperator('-');
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "R";
      PostfixToInfix.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",h^";
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.isOperator('+');
      PostfixToInfix.isValidPostfixExpression("");
      PostfixToInfix.isOperator('+');
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.getPostfixToInfix(",h^");
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.getPostfixToInfix(",h^");
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.main(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      PostfixToInfix.main(stringArray1);
      PostfixToInfix.isOperator('+');
      PostfixToInfix.isOperator('k');
      PostfixToInfix.isValidPostfixExpression("(,^h)");
      PostfixToInfix.isValidPostfixExpression("a ;/sP'");
      PostfixToInfix.main(stringArray0);
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "*!!\\ANH*q!";
      PostfixToInfix.isValidPostfixExpression("*!!ANH*q!");
      PostfixToInfix.isValidPostfixExpression("*!!ANH*q!");
      PostfixToInfix.isOperator('N');
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("U hvd#U`e|Dk.-N0h0D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&k/5Le@**RJh";
      stringArray0[1] = "";
      stringArray0[2] = "ZETqq:6Mf+}\"Yr`eX'";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Invalid Postfix Expression";
      stringArray0[6] = "";
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.isValidPostfixExpression("&k/5Le@**RJh");
      PostfixToInfix.isOperator('*');
      PostfixToInfix.isValidPostfixExpression("&k/5Le@**RJh");
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.getPostfixToInfix("");
      PostfixToInfix.getPostfixToInfix("");
      String string0 = PostfixToInfix.getPostfixToInfix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = PostfixToInfix.isValidPostfixExpression("");
      assertFalse(boolean0);
      
      boolean boolean1 = PostfixToInfix.isOperator('^');
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "_#/^%T`h5@F'tTdd";
      PostfixToInfix.isValidPostfixExpression("_#/^%T`h5@F'tTdd");
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "_#/^%T`h5@F'tTdd";
      stringArray0[1] = "_#/^%T`h5@F'tTdd";
      stringArray0[2] = "_#/^%T`h5@F'tTdd";
      stringArray0[3] = "_#/^%T`h5@F'tTdd";
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.getPostfixToInfix("");
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("iZ#)m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PostfixToInfix.isOperator('k');
      PostfixToInfix.getPostfixToInfix("");
      char char0 = 'p';
      PostfixToInfix.isOperator('p');
      PostfixToInfix.isOperator('k');
      PostfixToInfix.isOperator('q');
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      PostfixToInfix.getPostfixToInfix("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PostfixToInfix.main(stringArray0);
      String string0 = null;
      // Undeclared exception!
      try { 
        PostfixToInfix.isValidPostfixExpression((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PostfixToInfix.isOperator('4');
      boolean boolean0 = PostfixToInfix.isValidPostfixExpression("AB+C+D+");
      boolean boolean1 = PostfixToInfix.isValidPostfixExpression("");
      assertFalse(boolean1 == boolean0);
      
      PostfixToInfix.isOperator('4');
      PostfixToInfix.getPostfixToInfix("");
      boolean boolean2 = PostfixToInfix.isOperator('Z');
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = PostfixToInfix.isValidPostfixExpression("$a)b$@Q ^o{{h");
      boolean boolean1 = PostfixToInfix.isOperator('_');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PostfixToInfix.isValidPostfixExpression("\"mX~%");
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("Z*S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PostfixToInfix.isOperator('|');
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      PostfixToInfix.getPostfixToInfix("AB+C+D+");
      PostfixToInfix.main((String[]) null);
      PostfixToInfix.isOperator('=');
      PostfixToInfix.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PostfixToInfix.isOperator('S');
      char char0 = 'o';
      PostfixToInfix.isOperator('o');
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("^S%9tFPV32");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PostfixToInfix.isValidPostfixExpression("'");
      PostfixToInfix.isValidPostfixExpression("");
      String string0 = "B {V_?5t59;t";
      PostfixToInfix.isValidPostfixExpression("B {V_?5t59;t");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "'";
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.getPostfixToInfix("");
      PostfixToInfix.getPostfixToInfix("");
      PostfixToInfix.main(stringArray0);
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      PostfixToInfix.main(stringArray0);
      String string1 = "`@Ka G";
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("`@Ka G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("V6(k*V+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PostfixToInfix.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
      boolean boolean0 = PostfixToInfix.isValidPostfixExpression(":{@uyPNF.;dEEG");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[10];
      PostfixToInfix.isValidPostfixExpression("^S%9tFPV32");
      PostfixToInfix.main(stringArray0);
      PostfixToInfix.isValidPostfixExpression("g328OVb8$4cqO");
      PostfixToInfix.isValidPostfixExpression(":c.y*vFmxf#L1\u0004Qv");
      String string0 = PostfixToInfix.getPostfixToInfix("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = null;
      PostfixToInfix.main((String[]) null);
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PostfixToInfix.isValidPostfixExpression("_#/^%T`h5@F'tTd");
      PostfixToInfix postfixToInfix0 = new PostfixToInfix();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        PostfixToInfix.getPostfixToInfix("Z*S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Postfix Expression
         //
         verifyException("com.thealgorithms.datastructures.stacks.PostfixToInfix", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:24:32 GMT 2022
 */

package com.thealgorithms.datastructures.dynamicarray;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.dynamicarray.DynamicArray;
import java.util.Iterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DynamicArray_ESTest extends DynamicArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(2);
      dynamicArray0.iterator();
      dynamicArray0.iterator();
      dynamicArray0.add("'05kyCpO0l~");
      dynamicArray0.add("'05kyCpO0l~");
      dynamicArray0.stream();
      dynamicArray0.add("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.add("");
      dynamicArray0.forEach(consumer0);
      dynamicArray0.isEmpty();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.forEach(consumer1);
      dynamicArray0.isEmpty();
      dynamicArray0.remove(2);
      dynamicArray0.isEmpty();
      dynamicArray0.iterator();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.spliterator();
      dynamicArray0.forEach(consumer0);
      dynamicArray0.add("");
      dynamicArray0.toString();
      dynamicArray0.getSize();
      DynamicArray<Object> dynamicArray1 = new DynamicArray<Object>();
      dynamicArray0.add("[]");
      dynamicArray1.toString();
      dynamicArray1.iterator();
      dynamicArray0.remove(1);
      dynamicArray1.spliterator();
      dynamicArray1.toString();
      dynamicArray1.toString();
      DynamicArray<Integer> dynamicArray2 = new DynamicArray<Integer>();
      dynamicArray2.spliterator();
      Integer integer0 = new Integer(5232);
      dynamicArray2.add(integer0);
      Object object0 = new Object();
      dynamicArray1.add(object0);
      dynamicArray0.stream();
      dynamicArray0.getSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(1286);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.forEach(consumer0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      DynamicArray.main(stringArray0);
      dynamicArray0.iterator();
      DynamicArray<Object> dynamicArray1 = new DynamicArray<Object>(1995);
      dynamicArray1.add(dynamicArray0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray1.forEach(consumer1);
      Stream<Object> stream0 = dynamicArray1.stream();
      dynamicArray1.stream();
      dynamicArray1.remove(4);
      dynamicArray1.stream();
      dynamicArray0.getSize();
      dynamicArray1.add(stream0);
      dynamicArray1.add("");
      dynamicArray1.remove(0);
      dynamicArray0.iterator();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>(3);
      Integer integer0 = new Integer(0);
      dynamicArray0.add(integer0);
      dynamicArray0.stream();
      dynamicArray0.toString();
      dynamicArray0.remove(0);
      // Undeclared exception!
      try { 
        dynamicArray0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>();
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      dynamicArray0.add("&4+~!n4{'+zg^k<AiV");
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      dynamicArray0.add(dynamicArray0);
      assertEquals(2, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      int int0 = dynamicArray0.getSize();
      assertEquals(2, int0);
      assertEquals(2, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        dynamicArray0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(1286);
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.forEach(consumer0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      int int0 = dynamicArray0.getSize();
      assertEquals(0, int0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "p";
      DynamicArray.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      DynamicArray<Object> dynamicArray1 = new DynamicArray<Object>(1995);
      assertNotNull(dynamicArray1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      dynamicArray1.add(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      assertEquals(1, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray1.forEach(consumer1);
      assertEquals(1, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
      
      Stream<Object> stream0 = dynamicArray1.stream();
      assertNotNull(stream0);
      assertEquals(1, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
      
      Stream<Object> stream1 = dynamicArray1.stream();
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertEquals(1, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
      
      Object object0 = dynamicArray1.remove(4);
      assertNull(object0);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      Stream<Object> stream2 = dynamicArray1.stream();
      assertFalse(stream2.equals((Object)stream0));
      assertFalse(stream2.equals((Object)stream1));
      assertNotSame(stream2, stream0);
      assertNotSame(stream2, stream1);
      assertNotNull(stream2);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      int int1 = dynamicArray0.getSize();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      dynamicArray1.add(stream0);
      assertFalse(stream0.equals((Object)stream1));
      assertFalse(stream0.equals((Object)stream2));
      assertNotSame(stream0, stream1);
      assertNotSame(stream0, stream2);
      assertEquals(1, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
      
      dynamicArray1.add("");
      assertEquals(2, dynamicArray1.getSize());
      assertFalse(dynamicArray1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>();
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Spliterator<Object> spliterator0 = dynamicArray0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      String string0 = dynamicArray0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      boolean boolean0 = dynamicArray0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      DynamicArray.main((String[]) null);
      DynamicArray.main((String[]) null);
      dynamicArray0.add("[]");
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.forEach(consumer0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      String string1 = dynamicArray0.toString();
      assertEquals("[[]]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      DynamicArray<String> dynamicArray1 = new DynamicArray<String>();
      assertNotNull(dynamicArray1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      String string2 = dynamicArray1.get(2);
      assertNull(string2);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      int int0 = 0;
      Object object0 = dynamicArray0.get(0);
      assertEquals("[]", object0);
      assertFalse(object0.equals((Object)string1));
      assertTrue(object0.equals((Object)string0));
      assertNotNull(object0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        dynamicArray1.put((-2490), "[[]]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2490
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>();
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      dynamicArray0.add(integer0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Integer integer1 = dynamicArray0.remove(0);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      DynamicArray<String> dynamicArray1 = new DynamicArray<String>(586);
      assertNotNull(dynamicArray1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T.3hhW>gAj:00d";
      stringArray0[1] = "=qzY*)HW=";
      stringArray0[2] = "";
      stringArray0[3] = "/LUt<Nv";
      stringArray0[4] = "Marley";
      DynamicArray.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      Iterator iterator0 = dynamicArray1.iterator();
      assertNotNull(iterator0);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      boolean boolean0 = dynamicArray1.isEmpty();
      assertTrue(boolean0);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>();
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      dynamicArray0.add(iterator0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "P(cIO$OdX[%";
      DynamicArray.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = dynamicArray0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(1);
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "`9\"feL/%A8U'=";
      stringArray0[2] = "";
      stringArray0[3] = "com.thealgorithms.datastructures.dynamicarray.DynamicArray$DynamicArrayIterator";
      stringArray0[4] = "";
      stringArray0[5] = "`qN";
      stringArray0[6] = "3TG#dg]|g`#mJR?";
      DynamicArray.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      // Undeclared exception!
      try { 
        dynamicArray0.put(1, "com.thealgorithms.datastructures.dynamicarray.DynamicArray$DynamicArrayIterator");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>(1884);
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Stream<Integer> stream0 = dynamicArray0.stream();
      assertNotNull(stream0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Stream<Integer> stream1 = dynamicArray0.stream();
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      boolean boolean0 = dynamicArray0.isEmpty();
      assertTrue(boolean0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      DynamicArray<Object> dynamicArray1 = new DynamicArray<Object>();
      assertNotNull(dynamicArray1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      dynamicArray1.add(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      assertFalse(dynamicArray1.isEmpty());
      assertEquals(1, dynamicArray1.getSize());
      
      dynamicArray1.add("x%|,(PBhFj^*S1C");
      assertFalse(dynamicArray1.isEmpty());
      assertEquals(2, dynamicArray1.getSize());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "x%|,(PBhFj^*S1C";
      stringArray0[1] = "x%|,(PBhFj^*S1C";
      stringArray0[2] = "x%|,(PBhFj^*S1C";
      stringArray0[3] = "x%|,(PBhFj^*S1C";
      stringArray0[4] = "x%|,(PBhFj^*S1C";
      stringArray0[5] = "x%|,(PBhFj^*S1C";
      stringArray0[6] = "x%|,(PBhFj^*S1C";
      stringArray0[7] = "x%|,(PBhFj^*S1C";
      DynamicArray.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      DynamicArray<String> dynamicArray2 = new DynamicArray<String>(0);
      assertNotNull(dynamicArray2);
      assertTrue(dynamicArray2.isEmpty());
      assertEquals(0, dynamicArray2.getSize());
      
      // Undeclared exception!
      try { 
        dynamicArray2.add("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>();
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      boolean boolean0 = dynamicArray0.isEmpty();
      assertTrue(boolean0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(0);
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      // Undeclared exception!
      try { 
        dynamicArray0.add("kqyP:O/@,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>();
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      dynamicArray0.put(1, integer0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>();
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Stream<Integer> stream0 = dynamicArray0.stream();
      assertNotNull(stream0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Integer integer0 = new Integer((-3535));
      assertEquals((-3535), (int)integer0);
      assertNotNull(integer0);
      
      Stream<Integer> stream1 = dynamicArray0.stream();
      assertFalse(stream1.equals((Object)stream0));
      assertNotSame(stream1, stream0);
      assertNotNull(stream1);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      dynamicArray0.add(integer0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      String string0 = dynamicArray0.toString();
      assertEquals("[-3535]", string0);
      assertNotNull(string0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Stream<Integer> stream2 = dynamicArray0.stream();
      assertFalse(stream2.equals((Object)stream0));
      assertFalse(stream2.equals((Object)stream1));
      assertNotSame(stream2, stream0);
      assertNotSame(stream2, stream1);
      assertNotNull(stream2);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      int int0 = dynamicArray0.getSize();
      assertEquals(1, int0);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      String string1 = dynamicArray0.toString();
      assertEquals("[-3535]", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      DynamicArray<String> dynamicArray1 = null;
      try {
        dynamicArray1 = new DynamicArray<String>((-1577));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>();
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      DynamicArray<String> dynamicArray1 = new DynamicArray<String>();
      assertNotNull(dynamicArray1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      String[] stringArray0 = new String[1];
      DynamicArray.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = ">=Gk{+^?e[";
      stringArray0[0] = ">=Gk{+^?e[";
      DynamicArray.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stream<String> stream0 = dynamicArray1.stream();
      assertNotNull(stream0);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.forEach(consumer0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Object object0 = dynamicArray1.get(0);
      assertNull(object0);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      dynamicArray0.add((Object) null);
      assertEquals(1, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Object object1 = dynamicArray0.remove(0);
      assertNull(object1);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      int int0 = dynamicArray0.getSize();
      assertEquals(0, int0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Stream<Object> stream1 = dynamicArray0.stream();
      assertNotNull(stream1);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      String string1 = dynamicArray1.get(0);
      assertNull(string1);
      assertTrue(dynamicArray1.isEmpty());
      assertEquals(0, dynamicArray1.getSize());
      
      // Undeclared exception!
      try { 
        dynamicArray0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(0);
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      // Undeclared exception!
      try { 
        dynamicArray0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DynamicArray.main((String[]) null);
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>();
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Iterator iterator0 = dynamicArray0.iterator();
      assertNotNull(iterator0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Iterator iterator1 = dynamicArray0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>();
      assertNotNull(dynamicArray0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
      
      Stream<Object> stream0 = dynamicArray0.stream();
      assertNotNull(stream0);
      assertEquals(0, dynamicArray0.getSize());
      assertTrue(dynamicArray0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DynamicArray<Object> dynamicArray0 = new DynamicArray<Object>(362);
      assertNotNull(dynamicArray0);
      assertTrue(dynamicArray0.isEmpty());
      assertEquals(0, dynamicArray0.getSize());
      
      Integer integer0 = new Integer(362);
      assertEquals(362, (int)integer0);
      assertNotNull(integer0);
      
      dynamicArray0.add(integer0);
      assertFalse(dynamicArray0.isEmpty());
      assertEquals(1, dynamicArray0.getSize());
      
      dynamicArray0.add(integer0);
      assertEquals(2, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Integer integer1 = new Integer(362);
      assertEquals(362, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      dynamicArray0.add(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(3, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Integer integer2 = new Integer(362);
      assertEquals(362, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      dynamicArray0.add(integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer1));
      assertEquals(4, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      dynamicArray0.add(object0);
      assertEquals(5, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Object object1 = dynamicArray0.remove(1);
      assertEquals(362, object1);
      assertTrue(object1.equals((Object)integer2));
      assertTrue(object1.equals((Object)integer1));
      assertNotNull(object1);
      assertEquals(4, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      DynamicArray.main((String[]) null);
      String string0 = dynamicArray0.toString();
      assertNotNull(string0);
      assertEquals(4, dynamicArray0.getSize());
      assertFalse(dynamicArray0.isEmpty());
      
      DynamicArray<String> dynamicArray1 = new DynamicArray<String>();
      assertNotNull(dynamicArray1);
      assertEquals(0, dynamicArray1.getSize());
      assertTrue(dynamicArray1.isEmpty());
      
      Stream<String> stream0 = dynamicArray1.stream();
      assertNotNull(stream0);
      assertEquals(0, dynamicArray1.getSize());
      assertTrue(dynamicArray1.isEmpty());
      
      // Undeclared exception!
      try { 
        dynamicArray1.remove(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(2);
      dynamicArray0.add("'05kyCpO0l~");
      dynamicArray0.add("'05kyCpO0l~");
      dynamicArray0.add("'05kyCpO0l~");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      dynamicArray0.add("'05kyCpO0l~");
      dynamicArray0.forEach(consumer0);
      boolean boolean0 = dynamicArray0.isEmpty();
      assertEquals(4, dynamicArray0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DynamicArray<String> dynamicArray0 = new DynamicArray<String>(1286);
      DynamicArray<Object> dynamicArray1 = new DynamicArray<Object>(2012);
      dynamicArray1.add(dynamicArray0);
      assertEquals(1, dynamicArray1.getSize());
      
      dynamicArray1.remove(1286);
      assertEquals(0, dynamicArray1.getSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>();
      // Undeclared exception!
      try { 
        dynamicArray0.get(5270);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DynamicArray<Integer> dynamicArray0 = new DynamicArray<Integer>();
      Integer integer0 = new Integer((-24));
      // Undeclared exception!
      try { 
        dynamicArray0.put((-24), integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("com.thealgorithms.datastructures.dynamicarray.DynamicArray", e);
      }
  }
}

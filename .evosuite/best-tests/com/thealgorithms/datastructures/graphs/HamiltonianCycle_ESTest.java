/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:32:58 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.HamiltonianCycle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HamiltonianCycle_ESTest extends HamiltonianCycle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[6][8];
      int[] intArray1 = new int[7];
      intArray1[4] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[1] = 1;
      intArray0[4] = intArray3;
      int[] intArray4 = hamiltonianCycle0.findHamiltonianCycle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1), (-1), (-1), (-1), (-1)}, intArray4);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      // Undeclared exception!
      try { 
        hamiltonianCycle0.isPathFound(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.HamiltonianCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[8];
      intArray0[0] = intArray1;
      hamiltonianCycle0.findHamiltonianCycle(intArray0);
      // Undeclared exception!
      try { 
        hamiltonianCycle0.isPathFound(2543);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2543
         //
         verifyException("com.thealgorithms.datastructures.graphs.HamiltonianCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      // Undeclared exception!
      try { 
        hamiltonianCycle0.findHamiltonianCycle((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.HamiltonianCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[2][5];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        hamiltonianCycle0.findHamiltonianCycle(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.graphs.HamiltonianCycle", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[2][6];
      int[] intArray1 = new int[9];
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = hamiltonianCycle0.findHamiltonianCycle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1), (-1)}, intArray2);
      
      boolean boolean0 = hamiltonianCycle0.isPresent(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      intArray0[1] = intArray1;
      hamiltonianCycle0.findHamiltonianCycle(intArray0);
      hamiltonianCycle0.isPathFound(1);
      boolean boolean0 = hamiltonianCycle0.isPresent((-1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      boolean boolean0 = hamiltonianCycle0.isPresent((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = hamiltonianCycle0.findHamiltonianCycle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray1);
      
      boolean boolean0 = hamiltonianCycle0.isPathFound(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      int[] intArray2 = hamiltonianCycle0.findHamiltonianCycle(intArray0);
      assertArrayEquals(new int[] {(-1), (-1)}, intArray2);
      
      intArray0[0] = intArray1;
      boolean boolean0 = hamiltonianCycle0.isPathFound(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[8];
      intArray0[0] = intArray1;
      intArray0[1] = intArray0[0];
      hamiltonianCycle0.findHamiltonianCycle(intArray0);
      boolean boolean0 = hamiltonianCycle0.isPathFound(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HamiltonianCycle hamiltonianCycle0 = new HamiltonianCycle();
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = hamiltonianCycle0.findHamiltonianCycle(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray2);
  }
}

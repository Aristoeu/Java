/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:33:45 GMT 2022
 */

package com.thealgorithms.devutils.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.devutils.nodes.LargeTreeNode;
import com.thealgorithms.devutils.nodes.SimpleTreeNode;
import com.thealgorithms.devutils.nodes.TreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TreeNode_ESTest extends TreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      largeTreeNode0.isLeafNode();
      assertEquals(0, largeTreeNode0.getDepth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTreeNode<Object> simpleTreeNode0 = new SimpleTreeNode<Object>("u");
      SimpleTreeNode<Object> simpleTreeNode1 = new SimpleTreeNode<Object>("u", simpleTreeNode0, simpleTreeNode0, simpleTreeNode0);
      simpleTreeNode1.isLeafNode();
      assertEquals(1, simpleTreeNode1.getDepth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LargeTreeNode<Object> largeTreeNode0 = new LargeTreeNode<Object>((Object) null);
      LargeTreeNode<Object> largeTreeNode1 = new LargeTreeNode<Object>(largeTreeNode0, largeTreeNode0);
      TreeNode<Object> treeNode0 = largeTreeNode1.getParent();
      assertTrue(treeNode0.isRootNode());
      assertEquals(1, largeTreeNode1.getDepth());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(1);
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      SimpleTreeNode<Integer> simpleTreeNode1 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode0);
      SimpleTreeNode<Integer> simpleTreeNode2 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode1, simpleTreeNode0, simpleTreeNode0);
      simpleTreeNode2.getParent();
      assertEquals(2, simpleTreeNode2.getDepth());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTreeNode<Object> simpleTreeNode0 = new SimpleTreeNode<Object>("u");
      Object object0 = new Object();
      LargeTreeNode<Object> largeTreeNode0 = new LargeTreeNode<Object>(object0);
      LargeTreeNode<Object> largeTreeNode1 = new LargeTreeNode<Object>(simpleTreeNode0, largeTreeNode0);
      int int0 = largeTreeNode1.getDepth();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>((Integer) null);
      // Undeclared exception!
      try { 
        simpleTreeNode0.setParent((TreeNode<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.devutils.nodes.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      LargeTreeNode<Object> largeTreeNode0 = new LargeTreeNode<Object>(object0);
      int int0 = largeTreeNode0.getDepth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LargeTreeNode<Object> largeTreeNode0 = new LargeTreeNode<Object>();
      boolean boolean0 = largeTreeNode0.isRootNode();
      assertEquals(0, largeTreeNode0.getDepth());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("[bt8z");
      SimpleTreeNode<String> simpleTreeNode1 = new SimpleTreeNode<String>("[bt8z", simpleTreeNode0);
      boolean boolean0 = simpleTreeNode1.isRootNode();
      assertEquals(1, simpleTreeNode1.getDepth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTreeNode<Object> simpleTreeNode0 = new SimpleTreeNode<Object>();
      simpleTreeNode0.getParent();
      assertEquals(0, simpleTreeNode0.getDepth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LargeTreeNode<Object> largeTreeNode0 = new LargeTreeNode<Object>();
      SimpleTreeNode<Object> simpleTreeNode0 = new SimpleTreeNode<Object>();
      largeTreeNode0.setParent(simpleTreeNode0);
      assertEquals(1, largeTreeNode0.getDepth());
  }
}

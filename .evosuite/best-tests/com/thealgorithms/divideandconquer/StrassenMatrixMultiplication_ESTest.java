/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:34:37 GMT 2022
 */

package com.thealgorithms.divideandconquer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.divideandconquer.StrassenMatrixMultiplication;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StrassenMatrixMultiplication_ESTest extends StrassenMatrixMultiplication_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StrassenMatrixMultiplication.main(stringArray0);
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      int int0 = 8;
      intArray1[1] = 8;
      intArray1[2] = 8;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      StrassenMatrixMultiplication.main(stringArray0);
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.split(intArray0, intArray0, 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "8BJR!ZF||";
      stringArray0[3] = "^uSEJtSz|b";
      stringArray0[4] = "Vp@9`.X6Js(UNY!7X/";
      stringArray0[5] = "";
      stringArray0[6] = "";
      StrassenMatrixMultiplication.main(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "S07)S![(~W3FvQFM";
      StrassenMatrixMultiplication.main(stringArray1);
      stringArray1[1] = "";
      StrassenMatrixMultiplication.main(stringArray1);
      stringArray1[2] = "G 6?U[";
      StrassenMatrixMultiplication.main(stringArray1);
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.add((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[1][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = (-1);
      intArray1[2] = (-1141);
      intArray1[3] = 3547;
      intArray1[4] = 1;
      intArray1[5] = 2;
      intArray1[6] = 2;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      strassenMatrixMultiplication0.join(intArray0, intArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArrayArray0 = null;
      int int0 = 0;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m2tMS4>?=0F";
      stringArray0[1] = "1!qP}6z:h6)E'RfA7";
      stringArray0[2] = "zYgKq= ";
      stringArray0[3] = "";
      stringArray0[4] = "m2$4wI l$f:'";
      stringArray0[5] = "";
      stringArray0[6] = "";
      StrassenMatrixMultiplication.main(stringArray0);
      int int1 = 419;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.join((int[][]) null, (int[][]) null, 0, 419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[0][2];
      strassenMatrixMultiplication0.split(intArray0, intArray0, 1162, 1162);
      strassenMatrixMultiplication0.sub(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[2][3];
      int[] intArray1 = new int[2];
      intArray1[0] = 3090;
      intArray1[1] = 464;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 3090;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6J>D7{2_J";
      stringArray0[1] = "";
      stringArray0[2] = "6F@_tI\fd6G";
      stringArray0[3] = "";
      stringArray0[4] = "";
      StrassenMatrixMultiplication.main(stringArray0);
      intArray2[1] = 464;
      intArray2[2] = 3090;
      intArray0[1] = intArray2;
      strassenMatrixMultiplication0.add(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StrassenMatrixMultiplication.main((String[]) null);
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      StrassenMatrixMultiplication.main((String[]) null);
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[4];
      intArray1[0] = (-1216);
      intArray1[1] = (-58);
      intArray1[2] = (-2025);
      intArray1[3] = 246;
      intArray0[0] = intArray1;
      strassenMatrixMultiplication0.multiply(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[0][7];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}i`:8oC";
      stringArray0[1] = "p^u1=mup2K:";
      stringArray0[2] = "";
      stringArray0[3] = "Wus{cDGbq9l";
      stringArray0[4] = "";
      StrassenMatrixMultiplication.main(stringArray0);
      strassenMatrixMultiplication0.join(intArray0, intArray0, 572, 572);
      strassenMatrixMultiplication0.add(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.multiply((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.StrassenMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[8][3];
      int[] intArray1 = new int[9];
      intArray1[0] = (-2566);
      intArray1[1] = 0;
      intArray1[2] = 3830;
      intArray1[3] = 3178;
      intArray1[4] = 1626;
      intArray1[5] = 0;
      intArray1[6] = (-205);
      intArray1[7] = (-1);
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = (-495);
      intArray2[1] = 2914;
      intArray2[2] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = (-1);
      intArray4[1] = (-495);
      intArray4[2] = 3830;
      intArray4[3] = (-495);
      intArray4[4] = 1626;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = (-205);
      intArray5[1] = 2914;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 1626;
      intArray5[5] = (-495);
      intArray5[6] = (-495);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 3178;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = 3830;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = (-2566);
      intArray7[1] = 3178;
      intArray7[2] = 2914;
      intArray7[3] = (-205);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[3];
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.multiply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 1293;
      intArray1[2] = 0;
      intArray1[3] = (-1732);
      intArray1[4] = 0;
      intArray1[5] = 1282;
      intArray1[6] = 0;
      intArray1[7] = 1807;
      intArray0[0] = intArray1;
      strassenMatrixMultiplication0.sub(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[1];
      intArray1[0] = 1358;
      intArray0[0] = intArray1;
      int[][] intArray2 = new int[1][3];
      intArray2[0] = intArray1;
      strassenMatrixMultiplication0.sub(intArray0, intArray2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      String[] stringArray0 = new String[0];
      StrassenMatrixMultiplication.main(stringArray0);
      String[] stringArray1 = new String[5];
      StrassenMatrixMultiplication.main(stringArray1);
      StrassenMatrixMultiplication.main(stringArray1);
      StrassenMatrixMultiplication.main(stringArray1);
      StrassenMatrixMultiplication.main(stringArray1);
      stringArray1[0] = "";
      StrassenMatrixMultiplication.main(stringArray0);
      StrassenMatrixMultiplication.main(stringArray1);
      StrassenMatrixMultiplication.main(stringArray1);
      stringArray1[1] = "`OS <ks";
      StrassenMatrixMultiplication.main(stringArray1);
      stringArray1[2] = "";
      stringArray1[3] = "4";
      stringArray1[4] = "j";
      StrassenMatrixMultiplication.main(stringArray1);
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.sub((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.StrassenMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[8];
      intArray1[0] = (-1121);
      intArray1[1] = 0;
      intArray1[2] = 9;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = (-1);
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      strassenMatrixMultiplication0.add(intArray0, intArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[9];
      intArray1[0] = (-1);
      intArray1[1] = (-3838);
      intArray1[2] = 0;
      intArray1[3] = (-1628);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v}<,OZI2{Siw(";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Strassen Multiplication Algorithm Implementation For Matrix Multiplication :\n";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "P'Qa-DUO:%|IE{,,[9m";
      StrassenMatrixMultiplication.main(stringArray0);
      intArray1[4] = (-398);
      intArray1[5] = 9;
      intArray1[6] = 418;
      intArray1[7] = 0;
      intArray1[8] = (-1);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.join(intArray0, intArray0, 1, (-1425));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1);
      intArray1[1] = 1;
      intArray1[2] = (-51);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = (-1);
      intArray2[1] = (-1);
      intArray2[2] = (-1);
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = (-51);
      intArray2[6] = (-1);
      intArray2[7] = (-51);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = (-1);
      intArray3[1] = 1;
      intArray3[2] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-51);
      intArray4[1] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = (-51);
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.split(intArray0, intArray0, 0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[7][8];
      int[] intArray1 = new int[2];
      intArray1[0] = 2734;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2734;
      intArray2[3] = (-203);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = (-203);
      intArray3[2] = (-203);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = (-203);
      intArray4[2] = 2734;
      intArray4[3] = (-203);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 2734;
      intArray5[1] = (-203);
      intArray5[2] = (-4023);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = (-203);
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = (-4023);
      intArray6[4] = 0;
      intArray6[5] = (-203);
      intArray6[6] = (-203);
      intArray6[7] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = (-4023);
      intArray7[1] = (-203);
      intArray7[2] = (-203);
      intArray7[3] = (-203);
      intArray7[4] = (-4023);
      intArray7[5] = (-4523);
      intArray7[6] = (-4023);
      intArray7[7] = (-4023);
      intArray0[6] = intArray7;
      int[][] intArray8 = new int[9][5];
      intArray8[0] = intArray5;
      intArray8[1] = intArray1;
      intArray8[2] = intArray1;
      intArray8[3] = intArray6;
      int[] intArray9 = new int[9];
      intArray9[0] = (-4523);
      intArray9[1] = (-4523);
      intArray9[2] = (-4523);
      intArray9[3] = 1;
      intArray9[4] = (-4023);
      intArray9[5] = (-4523);
      intArray9[6] = (-203);
      intArray9[7] = 1924;
      intArray9[8] = (-4023);
      intArray8[4] = intArray9;
      intArray8[5] = intArray7;
      intArray8[6] = intArray6;
      intArray8[7] = intArray3;
      intArray8[8] = intArray6;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.add(intArray0, intArray8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 3;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 3;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 3;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 3;
      intArray5[1] = 3;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 0;
      intArray5[5] = 0;
      intArray5[6] = 3;
      intArray5[7] = 3;
      intArray5[8] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[6];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 0;
      intArray7[1] = 0;
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 0;
      intArray8[3] = 0;
      intArray8[4] = 0;
      intArray0[7] = intArray8;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.sub(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.thealgorithms.divideandconquer.StrassenMatrixMultiplication", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      String[] stringArray0 = new String[2];
      StrassenMatrixMultiplication.main(stringArray0);
      StrassenMatrixMultiplication.main(stringArray0);
      stringArray0[0] = "";
      stringArray0[1] = ">V-]k%smeT^n";
      StrassenMatrixMultiplication.main(stringArray0);
      int[][] intArrayArray0 = null;
      int int0 = (-2020);
      StrassenMatrixMultiplication.main(stringArray0);
      StrassenMatrixMultiplication.main(stringArray0);
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.split((int[][]) null, (int[][]) null, (-2020), (-2020));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StrassenMatrixMultiplication.main(stringArray0);
      StrassenMatrixMultiplication.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArrayArray0 = null;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.sub((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StrassenMatrixMultiplication strassenMatrixMultiplication0 = new StrassenMatrixMultiplication();
      int[][] intArray0 = new int[6][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 3029;
      intArray1[1] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 3029;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray2[4] = 56;
      String[] stringArray0 = new String[0];
      StrassenMatrixMultiplication.main(stringArray0);
      intArray2[5] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 3029;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = (-843);
      intArray4[1] = 3029;
      intArray4[2] = 3029;
      intArray4[3] = 56;
      intArray4[4] = 0;
      intArray4[5] = 56;
      intArray4[6] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-843);
      intArray0[4] = intArray5;
      intArray0[5] = intArray2;
      // Undeclared exception!
      try { 
        strassenMatrixMultiplication0.multiply(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:53:22 GMT 2022
 */

package com.thealgorithms.divideandconquer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.divideandconquer.ClosestPair;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClosestPair_ESTest extends ClosestPair_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(3714);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[17];
      double double0 = closestPair0.bruteForce(closestPair_LocationArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(17, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = closestPair0.createLocation(0);
      assertEquals(0, closestPair_LocationArray0.length);
      assertNotNull(closestPair_LocationArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(2);
      assertNotNull(closestPair0);
      
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(2, 2);
      assertNotNull(closestPair_Location0);
      
      ClosestPair.Location closestPair_Location1 = closestPair0.buildLocation(0.0, 2);
      assertFalse(closestPair_Location1.equals((Object)closestPair_Location0));
      assertNotNull(closestPair_Location1);
      assertNotSame(closestPair_Location1, closestPair_Location0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_Location1;
      double double0 = closestPair0.closestPair(closestPair_LocationArray0, 2);
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(0.0, 0.0);
      assertNotNull(closestPair_Location0);
      
      closestPair_LocationArray0[0] = closestPair_Location0;
      ClosestPair.Location closestPair_Location1 = new ClosestPair.Location(64.86091, 0);
      assertFalse(closestPair_Location1.equals((Object)closestPair_Location0));
      assertNotNull(closestPair_Location1);
      
      closestPair_LocationArray0[1] = closestPair_Location1;
      double double0 = closestPair0.bruteForce(closestPair_LocationArray0);
      assertEquals(64.86091, double0, 0.01);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(286);
      assertNotNull(closestPair0);
      
      // Undeclared exception!
      try { 
        closestPair0.yQuickSort((ClosestPair.Location[]) null, 0, 286);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(1);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      // Undeclared exception!
      try { 
        closestPair0.yPartition(closestPair_LocationArray0, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(978);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      // Undeclared exception!
      try { 
        closestPair0.yPartition(closestPair_LocationArray0, 0, 978);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 978
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      // Undeclared exception!
      try { 
        closestPair0.xPartition((ClosestPair.Location[]) null, 1057, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(3591);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[4];
      // Undeclared exception!
      try { 
        closestPair0.xPartition(closestPair_LocationArray0, 10, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClosestPair.setSecondCount((-1973));
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        ClosestPair.main(stringArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      // Undeclared exception!
      try { 
        closestPair0.createLocation((-1266));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(4421);
      assertNotNull(closestPair0);
      
      // Undeclared exception!
      try { 
        closestPair0.closestPair((ClosestPair.Location[]) null, 4421);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[9];
      // Undeclared exception!
      try { 
        closestPair0.closestPair(closestPair_LocationArray0, (-490));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(10);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[1];
      // Undeclared exception!
      try { 
        closestPair0.closestPair(closestPair_LocationArray0, 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClosestPair closestPair0 = null;
      try {
        closestPair0 = new ClosestPair((-1769));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location closestPair_Location0 = closestPair0.buildLocation(0, 0);
      assertNotNull(closestPair_Location0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[3];
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_Location0;
      closestPair_LocationArray0[2] = closestPair_Location0;
      double double0 = closestPair0.bruteForce(closestPair_LocationArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3, closestPair_LocationArray0.length);
      
      double double1 = closestPair0.bruteForce(closestPair_LocationArray0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, closestPair_LocationArray0.length);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[3];
      // Undeclared exception!
      try { 
        closestPair0.bruteForce(closestPair_LocationArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(1252.452, 0.0);
      assertNotNull(closestPair_Location0);
      
      ClosestPair closestPair0 = new ClosestPair(7);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[8];
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_Location0;
      closestPair_LocationArray0[2] = closestPair_Location0;
      closestPair_LocationArray0[3] = closestPair_Location0;
      closestPair_LocationArray0[4] = closestPair_Location0;
      closestPair_Location0.x = (-1464.4317042507);
      ClosestPair.Location closestPair_Location1 = closestPair0.buildLocation((-793.10737076), 6.708203932499369);
      assertFalse(closestPair_Location1.equals((Object)closestPair_Location0));
      assertNotNull(closestPair_Location1);
      assertNotSame(closestPair_Location1, closestPair_Location0);
      
      closestPair_LocationArray0[5] = closestPair_Location1;
      closestPair_LocationArray0[6] = closestPair_Location0;
      double double0 = closestPair0.closestPair(closestPair_LocationArray0, 7);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      double double0 = closestPair0.closestPair(closestPair_LocationArray0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      closestPair0.yQuickSort(closestPair_LocationArray0, 0, 0);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(694);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[5];
      // Undeclared exception!
      try { 
        closestPair0.yQuickSort(closestPair_LocationArray0, 1, 694);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 694
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(2461);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[9];
      // Undeclared exception!
      try { 
        closestPair0.xQuickSort(closestPair_LocationArray0, 0, 2461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2461
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(4421);
      assertNotNull(closestPair0);
      
      closestPair0.xQuickSort((ClosestPair.Location[]) null, 4421, (-557));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(0.0, 0.0);
      assertNotNull(closestPair_Location0);
      
      closestPair_LocationArray0[0] = closestPair_Location0;
      ClosestPair.Location closestPair_Location1 = new ClosestPair.Location(64.86091, 0);
      assertFalse(closestPair_Location1.equals((Object)closestPair_Location0));
      assertNotNull(closestPair_Location1);
      
      closestPair_Location0.x = 4387.19009745042;
      closestPair_LocationArray0[1] = closestPair_Location1;
      closestPair_Location1.y = 1243.2264542343762;
      int int0 = closestPair0.xPartition(closestPair_LocationArray0, 0, 1);
      assertEquals(0, int0);
      assertEquals(2, closestPair_LocationArray0.length);
      
      int int1 = closestPair0.yPartition(closestPair_LocationArray0, 0, 1);
      assertEquals(0, int1);
      assertEquals(2, closestPair_LocationArray0.length);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(0.0, 0.0);
      assertNotNull(closestPair_Location0);
      
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_LocationArray0[0];
      int int0 = closestPair0.yPartition(closestPair_LocationArray0, 0, 1);
      assertEquals(1, int0);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      assertNotNull(closestPair0);
      
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(0.0, 0.0);
      assertNotNull(closestPair_Location0);
      
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_Location0;
      int int0 = closestPair0.xPartition(closestPair_LocationArray0, 0, 1);
      assertEquals(1, int0);
      assertEquals(2, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClosestPair.setMinNum((-1.0));
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        ClosestPair.main(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.divideandconquer.ClosestPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ClosestPair.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(1252.1848672999756, 1252.1848672999756);
      ClosestPair closestPair0 = new ClosestPair(7);
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[8];
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_Location0;
      closestPair_LocationArray0[2] = closestPair_Location0;
      closestPair_LocationArray0[3] = closestPair_Location0;
      closestPair_LocationArray0[4] = closestPair_Location0;
      closestPair_LocationArray0[5] = closestPair_Location0;
      closestPair_LocationArray0[6] = closestPair_Location0;
      double double0 = closestPair0.closestPair(closestPair_LocationArray0, 7);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(7);
      ClosestPair.Location[] closestPair_LocationArray0 = closestPair0.createLocation(7);
      assertEquals(7, closestPair_LocationArray0.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClosestPair closestPair0 = new ClosestPair(0);
      ClosestPair.Location[] closestPair_LocationArray0 = new ClosestPair.Location[2];
      ClosestPair.Location closestPair_Location0 = new ClosestPair.Location(0.0, 0.0);
      closestPair_LocationArray0[0] = closestPair_Location0;
      closestPair_LocationArray0[1] = closestPair_LocationArray0[0];
      closestPair0.bruteForce(closestPair_LocationArray0);
      double double0 = closestPair0.bruteForce(closestPair_LocationArray0);
      assertEquals(0.0, double0, 0.01);
  }
}

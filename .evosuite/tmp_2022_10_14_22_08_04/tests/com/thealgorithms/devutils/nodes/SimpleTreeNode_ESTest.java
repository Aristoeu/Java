/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:21:23 GMT 2022
 */

package com.thealgorithms.devutils.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.devutils.nodes.SimpleTreeNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleTreeNode_ESTest extends SimpleTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("38");
      SimpleTreeNode<String> simpleTreeNode1 = new SimpleTreeNode<String>(";4e\"<]5\"P261h{#%n", simpleTreeNode0);
      simpleTreeNode1.setLeftNode(simpleTreeNode0);
      assertFalse(simpleTreeNode1.isLeafNode());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("38");
      simpleTreeNode0.setRightNode(simpleTreeNode0);
      SimpleTreeNode<String> simpleTreeNode1 = simpleTreeNode0.getRightNode();
      assertEquals(0, simpleTreeNode1.getDepth());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("");
      SimpleTreeNode<String> simpleTreeNode1 = new SimpleTreeNode<String>(";4e\"<]5\"P261h{#%n", simpleTreeNode0, simpleTreeNode0, simpleTreeNode0);
      SimpleTreeNode<String> simpleTreeNode2 = simpleTreeNode1.getRightNode();
      assertTrue(simpleTreeNode2.isRootNode());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("38");
      SimpleTreeNode<String> simpleTreeNode1 = new SimpleTreeNode<String>(";4e\"<]5\"P261h{#%n", simpleTreeNode0);
      simpleTreeNode0.setRightNode(simpleTreeNode1);
      SimpleTreeNode<String> simpleTreeNode2 = simpleTreeNode0.getRightNode();
      assertFalse(simpleTreeNode2.isRootNode());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1523);
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>();
      SimpleTreeNode<Integer> simpleTreeNode1 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode0, simpleTreeNode0, simpleTreeNode0);
      SimpleTreeNode<Integer> simpleTreeNode2 = simpleTreeNode1.getLeftNode();
      assertTrue(simpleTreeNode2.isRootNode());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = null;
      try {
        simpleTreeNode0 = new SimpleTreeNode<String>("com.thealgorithms.devutils.nodes.TreeNode", (SimpleTreeNode<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.devutils.nodes.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      boolean boolean0 = simpleTreeNode0.isLeafNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTreeNode<Object> simpleTreeNode0 = new SimpleTreeNode<Object>();
      SimpleTreeNode<Object> simpleTreeNode1 = null;
      try {
        simpleTreeNode1 = new SimpleTreeNode<Object>("", (SimpleTreeNode<Object>) null, simpleTreeNode0, (SimpleTreeNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.devutils.nodes.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      SimpleTreeNode<Integer> simpleTreeNode1 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode0);
      SimpleTreeNode<Integer> simpleTreeNode2 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode1, simpleTreeNode1, simpleTreeNode0);
      SimpleTreeNode<Integer> simpleTreeNode3 = simpleTreeNode2.getLeftNode();
      assertEquals(1, simpleTreeNode3.getDepth());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      assertTrue(simpleTreeNode0.isLeafNode());
      
      simpleTreeNode0.setRightNode(simpleTreeNode0);
      boolean boolean0 = simpleTreeNode0.isLeafNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("");
      SimpleTreeNode<String> simpleTreeNode1 = simpleTreeNode0.getRightNode();
      assertNull(simpleTreeNode1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTreeNode<String> simpleTreeNode0 = new SimpleTreeNode<String>("");
      simpleTreeNode0.setLeftNode(simpleTreeNode0);
      boolean boolean0 = simpleTreeNode0.isLeafNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      SimpleTreeNode<Integer> simpleTreeNode1 = simpleTreeNode0.getLeftNode();
      assertNull(simpleTreeNode1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer((-401));
      SimpleTreeNode<Integer> simpleTreeNode0 = new SimpleTreeNode<Integer>(integer0);
      SimpleTreeNode<Integer> simpleTreeNode1 = new SimpleTreeNode<Integer>(integer0, simpleTreeNode0, simpleTreeNode0, simpleTreeNode0);
      simpleTreeNode0.setRightNode(simpleTreeNode0);
      SimpleTreeNode<Integer> simpleTreeNode2 = simpleTreeNode1.getLeftNode();
      assertEquals(0, simpleTreeNode2.getDepth());
  }
}

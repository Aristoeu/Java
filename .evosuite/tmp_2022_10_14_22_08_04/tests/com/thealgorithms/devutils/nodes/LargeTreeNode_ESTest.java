/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:28:56 GMT 2022
 */

package com.thealgorithms.devutils.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.devutils.nodes.LargeTreeNode;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LargeTreeNode_ESTest extends LargeTreeNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LinkedList<LargeTreeNode<String>> linkedList0 = new LinkedList<LargeTreeNode<String>>();
      LargeTreeNode<String> largeTreeNode1 = new LargeTreeNode<String>((String) null, largeTreeNode0, linkedList0);
      Collection<LargeTreeNode<String>> collection0 = largeTreeNode1.getChildNodes();
      assertFalse(collection0.contains(largeTreeNode0));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = null;
      try {
        largeTreeNode0 = new LargeTreeNode<String>("", (LargeTreeNode<String>) null, (Collection<LargeTreeNode<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.devutils.nodes.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LargeTreeNode<Object> largeTreeNode1 = null;
      try {
        largeTreeNode1 = new LargeTreeNode<Object>(largeTreeNode0, (LargeTreeNode<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.devutils.nodes.TreeNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LargeTreeNode<LargeTreeNode<String>> largeTreeNode1 = new LargeTreeNode<LargeTreeNode<String>>(largeTreeNode0);
      LinkedList<LargeTreeNode<LargeTreeNode<String>>> linkedList0 = new LinkedList<LargeTreeNode<LargeTreeNode<String>>>();
      largeTreeNode1.setChildNodes(linkedList0);
      linkedList0.addFirst(largeTreeNode1);
      boolean boolean0 = largeTreeNode1.isLeafNode();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LargeTreeNode<LargeTreeNode<String>> largeTreeNode1 = new LargeTreeNode<LargeTreeNode<String>>(largeTreeNode0);
      boolean boolean0 = largeTreeNode1.isLeafNode();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      Collection<LargeTreeNode<String>> collection0 = largeTreeNode0.getChildNodes();
      assertNull(collection0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LargeTreeNode<LargeTreeNode<String>> largeTreeNode1 = new LargeTreeNode<LargeTreeNode<String>>(largeTreeNode0);
      LargeTreeNode<LargeTreeNode<String>> largeTreeNode2 = new LargeTreeNode<LargeTreeNode<String>>(largeTreeNode0, largeTreeNode1);
      assertFalse(largeTreeNode2.isRootNode());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LargeTreeNode<String> largeTreeNode0 = new LargeTreeNode<String>();
      LargeTreeNode<LargeTreeNode<String>> largeTreeNode1 = new LargeTreeNode<LargeTreeNode<String>>(largeTreeNode0);
      LinkedList<LargeTreeNode<LargeTreeNode<String>>> linkedList0 = new LinkedList<LargeTreeNode<LargeTreeNode<String>>>();
      largeTreeNode1.setChildNodes(linkedList0);
      boolean boolean0 = largeTreeNode1.isLeafNode();
      assertTrue(boolean0);
  }
}

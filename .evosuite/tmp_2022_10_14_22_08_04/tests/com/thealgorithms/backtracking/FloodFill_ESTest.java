/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:48:27 GMT 2022
 */

package com.thealgorithms.backtracking;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.backtracking.FloodFill;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FloodFill_ESTest extends FloodFill_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      FloodFill.putPixel(intArray0, 0, 1, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[][] intArray0 = new int[4][9];
      FloodFill.getPixel(intArray0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[7];
      intArray1[1] = 158;
      intArray0[0] = intArray1;
      FloodFill.getPixel(intArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[][] intArray0 = new int[8][2];
      int[] intArray1 = new int[6];
      intArray1[1] = (-1047);
      intArray0[0] = intArray1;
      FloodFill.getPixel(intArray0, 0, 1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloodFill.putPixel((int[][]) null, (-1633), (-1597), 278);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.FloodFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[][] intArray0 = new int[1][9];
      // Undeclared exception!
      try { 
        FloodFill.getPixel(intArray0, (-1496), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1496
         //
         verifyException("com.thealgorithms.backtracking.FloodFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloodFill.floodFill((int[][]) null, 1, 0, 1144, (-517));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.FloodFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      FloodFill.floodFill(intArray0, 0, 0, (-3300), 1825);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      FloodFill.floodFill(intArray0, 0, (-1), 0, 0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[][] intArray0 = new int[3][1];
      FloodFill.floodFill(intArray0, 1, 4355, (-3881), 1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[][] intArray0 = new int[8][4];
      FloodFill.floodFill(intArray0, 1757, 0, 0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FloodFill.floodFill((int[][]) null, (-1), (-3077), 0, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[][] intArray0 = new int[3][2];
      FloodFill.floodFill(intArray0, 1, 0, 1, 0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        FloodFill.getPixel((int[][]) null, (-1), (-917));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.backtracking.FloodFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[][] intArray0 = new int[7][1];
      // Undeclared exception!
      try { 
        FloodFill.putPixel(intArray0, 2502, (-416), 3574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2502
         //
         verifyException("com.thealgorithms.backtracking.FloodFill", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FloodFill floodFill0 = new FloodFill();
  }
}

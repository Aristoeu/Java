/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:29:54 GMT 2022
 */

package com.thealgorithms.strings;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.strings.PermuteString;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PermuteString_ESTest extends PermuteString_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PermuteString permuteString0 = new PermuteString();
      PermuteString.generatePermutation((String) null, (-1), (-318));
      // Undeclared exception!
      PermuteString.generatePermutation("mh)L7my6>'uq[Z", 0, 10);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PermuteString.generatePermutation("|NF^'*B#", 0, 1);
      PermuteString.generatePermutation("3My\"3}Qzc&lJ\"e8+=i", 0, 0);
      PermuteString permuteString0 = new PermuteString();
      // Undeclared exception!
      try { 
        PermuteString.generatePermutation("", 1, 3536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PermuteString permuteString0 = new PermuteString();
      // Undeclared exception!
      try { 
        PermuteString.swapString((String) null, 0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PermuteString permuteString0 = new PermuteString();
      PermuteString.main((String[]) null);
      // Undeclared exception!
      try { 
        PermuteString.generatePermutation("", 0, 2701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PermuteString.generatePermutation("", 0, (-1924));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PermuteString.generatePermutation("<f2sLwvC/g]f3(=lU", 2195, 2195);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "h$eN|}qhVj";
      stringArray0[2] = "";
      PermuteString.main(stringArray0);
      PermuteString permuteString0 = new PermuteString();
      PermuteString.main(stringArray0);
      PermuteString.main(stringArray0);
      int int0 = 303;
      // Undeclared exception!
      try { 
        PermuteString.generatePermutation((String) null, 0, 303);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PermuteString.main(stringArray0);
      int int0 = 3618;
      // Undeclared exception!
      try { 
        PermuteString.swapString("", 3618, 3618);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String string0 = PermuteString.swapString("H@/2", 1, 1);
      assertEquals("H@/2", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:36:29 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import com.thealgorithms.datastructures.trees.BSTRecursive;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BSTRecursive_ESTest extends BSTRecursive_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      boolean boolean0 = bSTRecursive0.find(3247);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      boolean boolean0 = bSTRecursive0.find(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(2696);
      bSTRecursive0.add((-931));
      bSTRecursive0.add(0);
      bSTRecursive0.postorder();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add(2673);
      bSTRecursive0.add(1);
      bSTRecursive0.postorder();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.remove(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add((-2600));
      bSTRecursive0.inorder();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.inorder();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add(2673);
      bSTRecursive0.preorder();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add((-2600));
      bSTRecursive0.preorder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add((-2600));
      bSTRecursive0.add((-2600));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add(2673);
      bSTRecursive0.add((-2600));
      bSTRecursive0.add(1);
      bSTRecursive0.remove(0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(1);
      bSTRecursive0.add(0);
      bSTRecursive0.remove(1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.add(0);
      bSTRecursive0.add(2673);
      bSTRecursive0.remove(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.preorder();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BSTRecursive bSTRecursive0 = new BSTRecursive();
      bSTRecursive0.postorder();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      BSTRecursive.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }
}

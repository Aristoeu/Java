/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:39:43 GMT 2022
 */

package com.thealgorithms.datastructures.trees;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.trees.BinaryTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryTree_ESTest extends BinaryTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1129);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1129);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.put(439);
      binaryTree0.bfs(binaryTree_Node1);
      binaryTree_Node1.parent = binaryTree_Node0.left;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(362);
      binaryTree_Node0.parent = binaryTree_Node2;
      binaryTree_Node0.right = binaryTree_Node2;
      binaryTree0.remove(439);
      binaryTree_Node0.left.right = binaryTree_Node0.right;
      binaryTree_Node0.right.right = binaryTree_Node2;
      binaryTree_Node1.left = binaryTree_Node0.right.right;
      BinaryTree.Node binaryTree_Node3 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree_Node0.parent = binaryTree_Node1.parent;
      BinaryTree.Node binaryTree_Node4 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree_Node4.right = binaryTree_Node3;
      binaryTree_Node3.right = binaryTree_Node1.parent;
      binaryTree0.findSuccessor(binaryTree_Node4);
      binaryTree0.findSuccessor(binaryTree_Node4);
      binaryTree0.find(1);
      binaryTree_Node0.right.right.data = 1129;
      binaryTree0.remove((-4086));
      // Undeclared exception!
      try { 
        binaryTree0.remove(1129);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.trees.BinaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(717);
      int int0 = 0;
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree_Node0.left.right = binaryTree_Node1;
      binaryTree_Node0.left.left = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-660));
      binaryTree_Node2.right = binaryTree_Node0.left;
      // Undeclared exception!
      binaryTree0.findSuccessor(binaryTree_Node2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      binaryTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      binaryTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1);
      binaryTree_Node0.parent = binaryTree_Node1;
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.put(0);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.remove(0);
      binaryTree0.findSuccessor(binaryTree_Node0.left);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(1184);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.find(1184);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1));
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node2 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree0.remove((-1));
      binaryTree0.put(0);
      binaryTree0.preOrder(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node2);
      binaryTree0.remove((-1));
      binaryTree0.put(0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-357));
      binaryTree_Node0.data = 598;
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node0);
      binaryTree0.postOrder(binaryTree_Node0);
      binaryTree0.remove((-1523));
      binaryTree0.preOrder(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree0.inOrder(binaryTree_Node0);
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree0.bfs(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node2 = binaryTree0.find((-357));
      binaryTree_Node2.left = binaryTree_Node1;
      binaryTree_Node2.left = binaryTree_Node0;
      // Undeclared exception!
      binaryTree0.find((-1523));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(3222);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(3222);
      binaryTree_Node0.right = binaryTree_Node1;
      binaryTree_Node0.right.left = binaryTree_Node1;
      binaryTree_Node0.right = binaryTree_Node1;
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree_Node0.left = binaryTree_Node1;
      // Undeclared exception!
      binaryTree0.bfs(binaryTree_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      binaryTree0.postOrder((BinaryTree.Node) null);
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      binaryTree_Node0.data = 0;
      binaryTree0.inOrder((BinaryTree.Node) null);
      binaryTree_Node0.data = 0;
      binaryTree0.put((-1770));
      BinaryTree.Node binaryTree_Node1 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree_Node1.data = (-800);
      binaryTree_Node0.parent = null;
      binaryTree_Node1.left = null;
      // Undeclared exception!
      try { 
        binaryTree0.findSuccessor((BinaryTree.Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1392));
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node1);
      binaryTree0.remove((-2775));
      binaryTree_Node1.right = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node2 = binaryTree0.find(4288);
      binaryTree0.put(1);
      binaryTree_Node1.right.data = binaryTree_Node1.right.data;
      binaryTree_Node0.right = binaryTree_Node1.right;
      binaryTree_Node0.right.left = binaryTree_Node2;
      binaryTree_Node1.left = binaryTree_Node0;
      // Undeclared exception!
      binaryTree0.put(1478);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(50);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(50);
      binaryTree_Node0.right = binaryTree_Node1;
      binaryTree0.remove(50);
      binaryTree0.preOrder(binaryTree_Node0);
      binaryTree0.put(50);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(2586);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.find((-3417));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree((BinaryTree.Node) null);
      binaryTree0.bfs((BinaryTree.Node) null);
      binaryTree0.inOrder((BinaryTree.Node) null);
      binaryTree0.find(0);
      binaryTree0.preOrder((BinaryTree.Node) null);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = null;
      BinaryTree binaryTree0 = new BinaryTree((BinaryTree.Node) null);
      // Undeclared exception!
      try { 
        binaryTree0.remove(506);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.trees.BinaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.put(0);
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree0.postOrder(binaryTree_Node0);
      binaryTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(3126);
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(3126);
      binaryTree0.postOrder(binaryTree_Node1);
      binaryTree0.put(1);
      binaryTree0.preOrder(binaryTree_Node1);
      binaryTree0.remove(1383);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-1);
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1));
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.bfs(binaryTree_Node1);
      binaryTree0.postOrder(binaryTree_Node0);
      binaryTree0.postOrder(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(0);
      binaryTree_Node2.left = binaryTree_Node0.left;
      binaryTree_Node1.right = binaryTree_Node2;
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-996));
      binaryTree_Node2.right = binaryTree_Node0;
      binaryTree_Node1.left = binaryTree_Node0;
      binaryTree_Node1.parent = binaryTree_Node3;
      binaryTree_Node1.right.right = binaryTree_Node1.parent;
      binaryTree0.put(1);
      binaryTree_Node0.right = binaryTree_Node1.right;
      // Undeclared exception!
      binaryTree0.remove((-1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      binaryTree0.put((-2407));
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-2381));
      binaryTree_Node1.data = (-1);
      binaryTree_Node0.right = binaryTree_Node1;
      binaryTree0.inOrder(binaryTree_Node0);
      binaryTree0.remove((-4868));
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-296));
      binaryTree0.postOrder(binaryTree_Node2);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-228));
      binaryTree_Node3.right = binaryTree_Node0;
      BinaryTree.Node binaryTree_Node4 = binaryTree0.findSuccessor(binaryTree_Node3);
      binaryTree_Node2.data = (-2407);
      BinaryTree.Node binaryTree_Node5 = new BinaryTree.Node((-1));
      binaryTree_Node5.right = binaryTree_Node0;
      binaryTree0.preOrder(binaryTree_Node5);
      binaryTree0.preOrder(binaryTree_Node4);
      binaryTree0.postOrder(binaryTree_Node2);
      binaryTree0.put((-553));
      binaryTree0.put((-2407));
      binaryTree0.postOrder(binaryTree_Node1);
      binaryTree0.find(0);
      binaryTree0.find(0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(1011);
      binaryTree_Node0.left = binaryTree_Node1;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node(65);
      binaryTree_Node0.parent = binaryTree_Node2;
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node(1122);
      binaryTree_Node3.right = binaryTree_Node0;
      binaryTree_Node0.parent = binaryTree_Node3;
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node4 = binaryTree0.findSuccessor(binaryTree_Node0.parent);
      binaryTree_Node3.data = 472;
      binaryTree_Node2.left = binaryTree_Node0;
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree_Node2.left.left = binaryTree_Node4;
      binaryTree_Node3.data = 65;
      binaryTree0.findSuccessor(binaryTree_Node4);
      binaryTree0.inOrder(binaryTree_Node3);
      binaryTree0.bfs(binaryTree_Node2.left);
      binaryTree0.getRoot();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-1));
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-1));
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.bfs(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node2 = binaryTree0.findSuccessor(binaryTree_Node0);
      binaryTree0.remove((-1));
      binaryTree0.put(0);
      binaryTree0.preOrder(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node2);
      binaryTree0.remove((-1));
      binaryTree0.put((-1));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node((-3228));
      BinaryTree binaryTree0 = new BinaryTree(binaryTree_Node0);
      binaryTree0.preOrder(binaryTree_Node0);
      binaryTree0.remove((-3228));
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node((-3228));
      binaryTree0.inOrder(binaryTree_Node1);
      binaryTree0.inOrder(binaryTree_Node0);
      binaryTree0.find(0);
      binaryTree0.postOrder((BinaryTree.Node) null);
      // Undeclared exception!
      try { 
        binaryTree0.remove((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.trees.BinaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryTree binaryTree0 = new BinaryTree();
      BinaryTree.Node binaryTree_Node0 = new BinaryTree.Node(0);
      binaryTree0.inOrder(binaryTree_Node0);
      BinaryTree.Node binaryTree_Node1 = new BinaryTree.Node(0);
      binaryTree0.inOrder(binaryTree_Node1);
      binaryTree_Node1.data = 0;
      binaryTree0.put(0);
      binaryTree_Node0.parent = binaryTree_Node1;
      binaryTree0.put(0);
      binaryTree_Node1.parent = binaryTree_Node0.parent;
      BinaryTree.Node binaryTree_Node2 = new BinaryTree.Node((-431));
      binaryTree_Node1.parent = binaryTree_Node2;
      binaryTree_Node0.parent.right = binaryTree_Node1.parent;
      binaryTree0.preOrder(binaryTree_Node2);
      binaryTree_Node1.right = binaryTree_Node2;
      binaryTree0.remove(197);
      binaryTree0.postOrder(binaryTree_Node2);
      binaryTree0.preOrder(binaryTree_Node1);
      binaryTree_Node0.left = binaryTree_Node1;
      binaryTree0.remove(1);
      binaryTree0.postOrder(binaryTree_Node1);
      binaryTree0.inOrder(binaryTree_Node1.parent);
      BinaryTree.Node binaryTree_Node3 = new BinaryTree.Node((-431));
      binaryTree0.inOrder(binaryTree_Node3);
      BinaryTree.Node binaryTree_Node4 = binaryTree0.findSuccessor(binaryTree_Node1.right);
      assertSame(binaryTree_Node4, binaryTree_Node2);
  }
}

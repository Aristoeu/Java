/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:40:01 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.CursorLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CursorLinkedList_ESTest extends CursorLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.remove("com.thealgorithms.datastructures.lists.CursorLinkedList");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      Integer integer0 = new Integer((-224));
      cursorLinkedList0.append(integer0);
      Integer integer1 = new Integer(65);
      cursorLinkedList0.append(integer0);
      cursorLinkedList0.append(integer1);
      cursorLinkedList0.remove(integer1);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CursorLinkedList<String> cursorLinkedList0 = new CursorLinkedList<String>();
      cursorLinkedList0.removeByIndex(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      Object object0 = cursorLinkedList0.get(99);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      Integer integer0 = new Integer(0);
      cursorLinkedList0.append(integer0);
      cursorLinkedList0.remove("");
      cursorLinkedList0.remove("p3j6gye]E");
      int int0 = cursorLinkedList0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CursorLinkedList<String> cursorLinkedList0 = new CursorLinkedList<String>();
      cursorLinkedList0.append("");
      cursorLinkedList0.append("dK%");
      int int0 = cursorLinkedList0.indexOf("dK%");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorLinkedList0.remove((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      Integer integer0 = new Integer(1981);
      // Undeclared exception!
      try { 
        cursorLinkedList0.remove(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.lists.CursorLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorLinkedList0.indexOf((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      // Undeclared exception!
      try { 
        cursorLinkedList0.append((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.append("v*[qs");
      Object object0 = cursorLinkedList0.get(1);
      assertEquals("v*[qs", object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.removeByIndex(1);
      Object object0 = cursorLinkedList0.get(1);
      assertEquals("v*[qs", object0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      Integer integer0 = new Integer((-224));
      cursorLinkedList0.append(integer0);
      Integer integer1 = new Integer(65);
      cursorLinkedList0.append(integer1);
      cursorLinkedList0.remove(integer1);
      assertFalse(integer1.equals((Object)integer0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      cursorLinkedList0.removeByIndex(1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      cursorLinkedList0.removeByIndex((-1195));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CursorLinkedList<String> cursorLinkedList0 = new CursorLinkedList<String>();
      String string0 = cursorLinkedList0.get(0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      Object object0 = cursorLinkedList0.get((-564));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      Integer integer0 = new Integer(89);
      cursorLinkedList0.append(integer0);
      Integer integer1 = new Integer(94);
      // Undeclared exception!
      try { 
        cursorLinkedList0.indexOf(integer1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.lists.CursorLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      cursorLinkedList0.append("v*[qs");
      int int0 = cursorLinkedList0.indexOf("v*[qs");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      Integer integer0 = new Integer(0);
      cursorLinkedList0.append(integer0);
      cursorLinkedList0.remove("");
      int int0 = cursorLinkedList0.indexOf(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CursorLinkedList<Object> cursorLinkedList0 = new CursorLinkedList<Object>();
      cursorLinkedList0.append("v*[qs");
      cursorLinkedList0.printList();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      cursorLinkedList0.printList();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CursorLinkedList<Integer> cursorLinkedList0 = new CursorLinkedList<Integer>();
      Integer integer0 = new Integer((-2449));
      cursorLinkedList0.append(integer0);
      cursorLinkedList0.remove(integer0);
  }
}

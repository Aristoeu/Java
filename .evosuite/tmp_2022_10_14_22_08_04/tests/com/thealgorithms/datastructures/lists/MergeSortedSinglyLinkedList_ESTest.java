/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:28:34 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.MergeSortedSinglyLinkedList;
import com.thealgorithms.datastructures.lists.Node;
import com.thealgorithms.datastructures.lists.SinglyLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MergeSortedSinglyLinkedList_ESTest extends MergeSortedSinglyLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MergeSortedSinglyLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      MergeSortedSinglyLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      MergeSortedSinglyLinkedList.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = 1577;
      int int1 = 2389;
      Node node0 = new Node(2389);
      assertNotNull(node0);
      
      node0.value = 2389;
      Node node1 = new Node(1577, node0);
      assertNotNull(node1);
      assertFalse(node1.equals((Object)node0));
      
      node1.value = 2389;
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node1, 2389);
      assertNotNull(singlyLinkedList0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2389, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      
      node0.value = 2405;
      node1.next = node0;
      String string0 = singlyLinkedList0.toString();
      assertNotNull(string0);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(2389, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals("2389->2405", string0);
      
      // Undeclared exception!
      MergeSortedSinglyLinkedList.merge(singlyLinkedList0, singlyLinkedList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MergeSortedSinglyLinkedList mergeSortedSinglyLinkedList0 = new MergeSortedSinglyLinkedList();
      assertNotNull(mergeSortedSinglyLinkedList0);
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(mergeSortedSinglyLinkedList0, (-2469));
      assertNotNull(singlyLinkedList0);
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      assertEquals((-2469), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      
      SinglyLinkedList singlyLinkedList1 = MergeSortedSinglyLinkedList.merge(singlyLinkedList0, mergeSortedSinglyLinkedList0);
      assertNotNull(singlyLinkedList1);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      assertEquals((-2469), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals((-2469), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      
      SinglyLinkedList singlyLinkedList1 = MergeSortedSinglyLinkedList.merge(singlyLinkedList0, singlyLinkedList0);
      assertNotNull(singlyLinkedList1);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertEquals(0, singlyLinkedList1.count());
      
      SinglyLinkedList singlyLinkedList2 = new SinglyLinkedList(singlyLinkedList1, 27);
      assertNotNull(singlyLinkedList2);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertEquals(0, singlyLinkedList1.count());
      assertEquals(27, singlyLinkedList2.size());
      assertFalse(singlyLinkedList2.isEmpty());
      assertFalse(singlyLinkedList2.detectLoop());
      assertEquals(1, singlyLinkedList2.count());
      
      SinglyLinkedList singlyLinkedList3 = MergeSortedSinglyLinkedList.merge(singlyLinkedList0, singlyLinkedList2);
      assertNotNull(singlyLinkedList3);
      assertNotSame(singlyLinkedList0, singlyLinkedList3);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList0, singlyLinkedList2);
      assertNotSame(singlyLinkedList1, singlyLinkedList2);
      assertNotSame(singlyLinkedList1, singlyLinkedList3);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertNotSame(singlyLinkedList2, singlyLinkedList3);
      assertNotSame(singlyLinkedList2, singlyLinkedList1);
      assertNotSame(singlyLinkedList2, singlyLinkedList0);
      assertNotSame(singlyLinkedList3, singlyLinkedList1);
      assertNotSame(singlyLinkedList3, singlyLinkedList2);
      assertNotSame(singlyLinkedList3, singlyLinkedList0);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList2));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList2));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList3.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList3.equals((Object)singlyLinkedList2));
      assertFalse(singlyLinkedList3.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertTrue(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList1.isEmpty());
      assertEquals(0, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertEquals(0, singlyLinkedList1.count());
      assertEquals(27, singlyLinkedList2.size());
      assertFalse(singlyLinkedList2.isEmpty());
      assertFalse(singlyLinkedList2.detectLoop());
      assertEquals(1, singlyLinkedList2.count());
      assertFalse(singlyLinkedList3.detectLoop());
      assertFalse(singlyLinkedList3.isEmpty());
      assertEquals(27, singlyLinkedList3.size());
      assertEquals(1, singlyLinkedList3.count());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      assertNotNull(singlyLinkedList0);
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, (-1408));
      assertNotNull(singlyLinkedList1);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals(1, singlyLinkedList1.count());
      assertEquals((-1408), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      
      SinglyLinkedList singlyLinkedList2 = MergeSortedSinglyLinkedList.merge(singlyLinkedList1, singlyLinkedList1);
      assertNotNull(singlyLinkedList2);
      assertNotSame(singlyLinkedList0, singlyLinkedList2);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertNotSame(singlyLinkedList1, singlyLinkedList2);
      assertNotSame(singlyLinkedList2, singlyLinkedList1);
      assertNotSame(singlyLinkedList2, singlyLinkedList0);
      assertFalse(singlyLinkedList0.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList1));
      assertFalse(singlyLinkedList2.equals((Object)singlyLinkedList0));
      assertEquals(0, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.count());
      assertEquals((-1408), singlyLinkedList1.size());
      assertTrue(singlyLinkedList1.detectLoop());
      assertFalse(singlyLinkedList1.isEmpty());
      assertEquals((-2816), singlyLinkedList2.size());
      assertFalse(singlyLinkedList2.isEmpty());
      assertTrue(singlyLinkedList2.detectLoop());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Node node0 = new Node();
      assertNotNull(node0);
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(node0, 10);
      assertNotNull(singlyLinkedList0);
      assertEquals(1, singlyLinkedList0.count());
      assertEquals(10, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertFalse(singlyLinkedList0.detectLoop());
      
      SinglyLinkedList singlyLinkedList1 = MergeSortedSinglyLinkedList.merge(singlyLinkedList0, singlyLinkedList0);
      assertNotNull(singlyLinkedList1);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertEquals(10, singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals(20, singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertTrue(singlyLinkedList1.detectLoop());
      
      // Undeclared exception!
      MergeSortedSinglyLinkedList.merge(singlyLinkedList1, singlyLinkedList0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = null;
      // Undeclared exception!
      try { 
        MergeSortedSinglyLinkedList.merge((SinglyLinkedList) null, (SinglyLinkedList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MergeSortedSinglyLinkedList mergeSortedSinglyLinkedList0 = new MergeSortedSinglyLinkedList();
      assertNotNull(mergeSortedSinglyLinkedList0);
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      
      SinglyLinkedList singlyLinkedList0 = MergeSortedSinglyLinkedList.merge(mergeSortedSinglyLinkedList0, mergeSortedSinglyLinkedList0);
      assertNotNull(singlyLinkedList0);
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertTrue(singlyLinkedList0.isEmpty());
      assertEquals(0, singlyLinkedList0.size());
      assertEquals(0, singlyLinkedList0.count());
      assertFalse(singlyLinkedList0.detectLoop());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MergeSortedSinglyLinkedList mergeSortedSinglyLinkedList0 = new MergeSortedSinglyLinkedList();
      assertNotNull(mergeSortedSinglyLinkedList0);
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList(mergeSortedSinglyLinkedList0, (-1397));
      assertNotNull(singlyLinkedList0);
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals((-1397), singlyLinkedList0.size());
      assertFalse(singlyLinkedList0.detectLoop());
      assertEquals(1, singlyLinkedList0.count());
      
      SinglyLinkedList singlyLinkedList1 = MergeSortedSinglyLinkedList.merge(singlyLinkedList0, singlyLinkedList0);
      assertNotNull(singlyLinkedList1);
      assertNotSame(singlyLinkedList0, singlyLinkedList1);
      assertNotSame(singlyLinkedList1, singlyLinkedList0);
      assertFalse(singlyLinkedList1.equals((Object)singlyLinkedList0));
      assertEquals(0, mergeSortedSinglyLinkedList0.count());
      assertTrue(mergeSortedSinglyLinkedList0.isEmpty());
      assertFalse(mergeSortedSinglyLinkedList0.detectLoop());
      assertEquals(0, mergeSortedSinglyLinkedList0.size());
      assertFalse(singlyLinkedList0.isEmpty());
      assertEquals((-1397), singlyLinkedList0.size());
      assertTrue(singlyLinkedList0.detectLoop());
      assertEquals((-2794), singlyLinkedList1.size());
      assertFalse(singlyLinkedList1.isEmpty());
      assertTrue(singlyLinkedList1.detectLoop());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MergeSortedSinglyLinkedList.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[9];
      MergeSortedSinglyLinkedList.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }
}

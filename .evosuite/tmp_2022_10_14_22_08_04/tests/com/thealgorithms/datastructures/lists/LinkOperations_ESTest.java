/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:20:36 GMT 2022
 */

package com.thealgorithms.datastructures.lists;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.DoublyLinkedList;
import com.thealgorithms.datastructures.lists.Link;
import com.thealgorithms.datastructures.lists.LinkOperations;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkOperations_ESTest extends LinkOperations_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2189, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      linkOperations0.reverse();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2692, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertOrdered(2692, doublyLinkedList0);
      Link link1 = linkOperations0.deleteHead();
      link0.next = link1;
      linkOperations0.removeDuplicates(doublyLinkedList0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead((-680), doublyLinkedList0);
      Link link0 = new Link((-680));
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      linkOperations0.insertOrdered((-680), doublyLinkedList0);
      Link link1 = linkOperations0.deleteHead();
      doublyLinkedList0.head = link1;
      linkOperations0.removeDuplicates(doublyLinkedList0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2692, doublyLinkedList0);
      Link link0 = new Link(2692);
      link0.next = link0;
      doublyLinkedList0.head = link0;
      link0.value = 10;
      // Undeclared exception!
      try { 
        linkOperations0.removeDuplicates(doublyLinkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The element to be deleted does not exist!
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertOrdered(11, doublyLinkedList0);
      linkOperations0.deleteTail();
      linkOperations0.insertElementByIndex((-139), 1, doublyLinkedList0);
      assertTrue(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertElementByIndex(7, 0, doublyLinkedList0);
      assertTrue(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      // Undeclared exception!
      try { 
        linkOperations0.insertElementByIndex(1, (-2119), doublyLinkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      // Undeclared exception!
      try { 
        linkOperations0.insertElementByIndex(1, 4222, doublyLinkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4222, Size: 0
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertTail(0, doublyLinkedList0);
      linkOperations0.insertHead(0, doublyLinkedList0);
      Link link0 = linkOperations0.deleteTail();
      link0.previous = link0;
      linkOperations0.deleteNode(link0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      // Undeclared exception!
      try { 
        linkOperations0.removeDuplicates(doublyLinkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertOrdered(11, doublyLinkedList0);
      linkOperations0.insertOrdered((-4940), doublyLinkedList0);
      linkOperations0.insertElementByIndex((-139), (-139), doublyLinkedList0);
      linkOperations0.reverse();
      linkOperations0.reverse();
      // Undeclared exception!
      linkOperations0.insertOrdered(1, doublyLinkedList0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      // Undeclared exception!
      try { 
        linkOperations0.insertOrdered(2692, (DoublyLinkedList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertTail(0, doublyLinkedList0);
      linkOperations0.delete(0);
      // Undeclared exception!
      try { 
        linkOperations0.deleteTail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      // Undeclared exception!
      try { 
        linkOperations0.deleteHead();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      // Undeclared exception!
      try { 
        linkOperations0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2692, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      linkOperations0.insertOrdered(2692, (DoublyLinkedList) null);
      linkOperations0.delete(2692);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2692, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      linkOperations0.delete(2692);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2692, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      Link link1 = linkOperations0.deleteHead();
      link0.next = link1;
      linkOperations0.removeDuplicates(doublyLinkedList0);
      assertFalse(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertTail(0, doublyLinkedList0);
      linkOperations0.insertHead(0, doublyLinkedList0);
      Link link0 = linkOperations0.deleteTail();
      // Undeclared exception!
      try { 
        linkOperations0.deleteNode(link0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(2189, doublyLinkedList0);
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      linkOperations0.insertHead(10, doublyLinkedList0);
      // Undeclared exception!
      try { 
        linkOperations0.delete(2692);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // The element to be deleted does not exist!
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertOrdered(11, doublyLinkedList0);
      linkOperations0.insertOrdered((-4940), doublyLinkedList0);
      linkOperations0.reverse();
      Link link0 = linkOperations0.deleteTail();
      assertNotNull(link0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertTail((-2771), doublyLinkedList0);
      Link link0 = linkOperations0.deleteHead();
      assertNotNull(link0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead(1, doublyLinkedList0);
      DoublyLinkedList doublyLinkedList1 = new DoublyLinkedList();
      Link link0 = new Link(1);
      doublyLinkedList1.head = link0;
      linkOperations0.insertElementByIndex(1, 1, doublyLinkedList1);
      linkOperations0.delete(1);
      linkOperations0.deleteNode(link0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertOrdered((-93), doublyLinkedList0);
      linkOperations0.insertOrdered((-4972), doublyLinkedList0);
      // Undeclared exception!
      try { 
        linkOperations0.insertElementByIndex(3, 3, doublyLinkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertOrdered((-4972), doublyLinkedList0);
      linkOperations0.insertOrdered((-93), doublyLinkedList0);
      assertTrue(doublyLinkedList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      Link link0 = new Link(2692);
      doublyLinkedList0.head = link0;
      // Undeclared exception!
      try { 
        linkOperations0.insertTail((-206), doublyLinkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      linkOperations0.insertHead((-680), doublyLinkedList0);
      linkOperations0.insertHead(10, doublyLinkedList0);
      linkOperations0.insertOrdered((-680), doublyLinkedList0);
      Link link0 = linkOperations0.deleteHead();
      Link link1 = link0.next;
      linkOperations0.deleteNode(link1);
      assertNotSame(link0, link1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      DoublyLinkedList doublyLinkedList0 = new DoublyLinkedList();
      Link link0 = new Link((-680));
      doublyLinkedList0.head = link0;
      // Undeclared exception!
      try { 
        linkOperations0.insertHead(10, doublyLinkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.lists.LinkOperations", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkOperations linkOperations0 = new LinkOperations();
      linkOperations0.clearList();
  }
}

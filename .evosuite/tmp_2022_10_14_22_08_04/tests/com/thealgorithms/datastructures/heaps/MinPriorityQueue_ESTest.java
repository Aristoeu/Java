/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:35:12 GMT 2022
 */

package com.thealgorithms.datastructures.heaps;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.heaps.MinPriorityQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinPriorityQueue_ESTest extends MinPriorityQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3351;
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(3351);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      int int1 = minPriorityQueue0.delete();
      assertEquals(225, int1);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(int1 == int0);
      
      MinPriorityQueue.main((String[]) null);
      int int2 = 2053;
      minPriorityQueue0.insert(2053);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(3351);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      MinPriorityQueue.main((String[]) null);
      minPriorityQueue0.insert((-1195));
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals((-1195), minPriorityQueue0.peek());
      
      int int3 = minPriorityQueue0.delete();
      assertEquals((-1195), int3);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      minPriorityQueue0.insert(225);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(225, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      int int4 = (-1);
      minPriorityQueue0.insert((-1));
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert((-1));
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(225);
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      // Undeclared exception!
      minPriorityQueue0.print();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(644);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      MinPriorityQueue.main((String[]) null);
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      int int0 = minPriorityQueue0.delete();
      assertEquals(644, int0);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      int int1 = 1182;
      minPriorityQueue0.insert(1182);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(644, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert((-1167));
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals((-1167), minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals((-1167), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals((-1167), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(644);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals((-1167), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert((-1524));
      assertEquals((-1524), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(644);
      assertEquals((-1524), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(2061);
      assertEquals((-1524), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(2061);
      assertEquals((-1524), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 2085;
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(2085);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(2085);
      assertEquals(2085, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(2085);
      assertEquals(2085, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(2085);
      assertEquals(2085, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Y}pkYuR~";
      stringArray0[3] = " ";
      stringArray0[4] = "&4QG8M'M#";
      stringArray0[5] = "AoGC-esL@9%!,T'r";
      MinPriorityQueue.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      minPriorityQueue0.insert(2085);
      assertEquals(2085, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(6);
      assertEquals(6, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(6);
      assertEquals(6, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(2078);
      assertEquals(6, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      int int1 = 3;
      minPriorityQueue0.insert(3);
      assertEquals(3, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(2078);
      assertEquals(3, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1289);
      assertNotNull(minPriorityQueue0);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(1289);
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(1289, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert((-2246));
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-2246), minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-2246), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(1289);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-2246), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(1289);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-2246), minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-2246), minPriorityQueue0.peek());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      int int0 = minPriorityQueue0.delete();
      assertEquals((-2246), int0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(1289, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      
      MinPriorityQueue.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      minPriorityQueue0.insert((-291));
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      MinPriorityQueue.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      minPriorityQueue0.insert(4);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      MinPriorityQueue.main((String[]) null);
      minPriorityQueue0.insert(1289);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(2515);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      int int1 = minPriorityQueue0.delete();
      assertEquals((-291), int1);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(4, minPriorityQueue0.peek());
      assertFalse(int1 == int0);
      
      minPriorityQueue0.insert(4);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(4, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(4);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(4, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert((-291));
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-291), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert((-746));
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-746), minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(4);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals((-746), minPriorityQueue0.peek());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = (-1);
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue((-1));
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      int int1 = (-3457);
      // Undeclared exception!
      try { 
        minPriorityQueue0.insert((-3457));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert((-2079));
      assertEquals((-2079), minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(]6R(j<*<a-VD";
      stringArray0[1] = "rpQ";
      MinPriorityQueue.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = minPriorityQueue0.delete();
      assertEquals((-2079), int0);
      assertEquals((-2079), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals((-2079), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1286);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      
      minPriorityQueue0.insert(0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      
      int int0 = minPriorityQueue0.peek();
      assertEquals(0, int0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "S.JE |J6X`(";
      stringArray0[4] = "LPM%*&{{~S";
      stringArray0[5] = "";
      stringArray0[6] = ",tYFHoy@YfXl[X(Z";
      stringArray0[7] = "";
      MinPriorityQueue.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(5);
      assertNotNull(minPriorityQueue0);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      
      int int0 = minPriorityQueue0.delete();
      assertEquals(0, int0);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      
      boolean boolean0 = minPriorityQueue0.isEmpty();
      assertFalse(boolean0);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      
      boolean boolean1 = minPriorityQueue0.isFull();
      assertFalse(boolean1);
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.delete();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.heapSort();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.heapSort();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      boolean boolean0 = minPriorityQueue0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      int int0 = minPriorityQueue0.delete();
      assertEquals(0, int0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      boolean boolean1 = minPriorityQueue0.isFull();
      assertFalse(boolean1);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      int int1 = minPriorityQueue0.peek();
      assertEquals(0, int1);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(3100);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert((-1));
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      int int0 = minPriorityQueue0.peek();
      assertEquals((-1), int0);
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      boolean boolean0 = minPriorityQueue0.isEmpty();
      assertFalse(boolean0);
      assertEquals((-1), minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(0);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      boolean boolean0 = minPriorityQueue0.isFull();
      assertTrue(boolean0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      boolean boolean1 = minPriorityQueue0.isFull();
      assertTrue(boolean1);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      int int0 = minPriorityQueue0.delete();
      assertEquals(0, int0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      
      boolean boolean0 = minPriorityQueue0.isFull();
      assertFalse(boolean0);
      assertFalse(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1738);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      int int0 = 1;
      minPriorityQueue0.insert(1);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(1, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      
      int int1 = minPriorityQueue0.delete();
      assertEquals(1, int1);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(1, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      assertTrue(int1 == int0);
      
      int int2 = minPriorityQueue0.peek();
      assertEquals(1, int2);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(1, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(0);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.heapSort();
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(0);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.peek();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isEmpty());
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      
      int int0 = minPriorityQueue0.delete();
      assertEquals(0, int0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertFalse(minPriorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(0);
      assertNotNull(minPriorityQueue0);
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.print();
      assertTrue(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 955;
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(955);
      assertNotNull(minPriorityQueue0);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      
      int int1 = minPriorityQueue0.delete();
      assertEquals(0, int1);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.delete();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(7);
      assertNotNull(minPriorityQueue0);
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&{LY`_67q4Rt";
      stringArray0[1] = "";
      MinPriorityQueue.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(1528);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
      
      minPriorityQueue0.insert(1528);
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      assertEquals(1528, minPriorityQueue0.peek());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = (-347);
      MinPriorityQueue minPriorityQueue0 = null;
      try {
        minPriorityQueue0 = new MinPriorityQueue((-347));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(2);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isFull());
      assertTrue(minPriorityQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(8);
      assertNotNull(minPriorityQueue0);
      assertEquals(0, minPriorityQueue0.peek());
      assertTrue(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(8);
      assertEquals(8, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(8);
      assertEquals(8, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      MinPriorityQueue.main((String[]) null);
      minPriorityQueue0.insert(8);
      assertEquals(8, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      minPriorityQueue0.insert(8);
      assertEquals(8, minPriorityQueue0.peek());
      assertFalse(minPriorityQueue0.isEmpty());
      assertFalse(minPriorityQueue0.isFull());
      
      // Undeclared exception!
      try { 
        minPriorityQueue0.heapSort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.heaps.MinPriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MinPriorityQueue minPriorityQueue0 = new MinPriorityQueue(2084);
      boolean boolean0 = minPriorityQueue0.isEmpty();
      assertTrue(boolean0);
      
      minPriorityQueue0.insert(2084);
      String[] stringArray0 = new String[8];
      MinPriorityQueue.main(stringArray0);
      minPriorityQueue0.peek();
      boolean boolean1 = minPriorityQueue0.isEmpty();
      assertFalse(boolean1);
  }
}

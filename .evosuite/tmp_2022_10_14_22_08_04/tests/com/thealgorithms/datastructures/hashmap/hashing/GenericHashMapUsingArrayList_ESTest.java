/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 04:53:42 GMT 2022
 */

package com.thealgorithms.datastructures.hashmap.hashing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericHashMapUsingArrayList_ESTest extends GenericHashMapUsingArrayList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, String> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      genericHashMapUsingArrayList0.put(linkedList0, "?L3b`y0(\"R2^6B");
      int int0 = genericHashMapUsingArrayList0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, String> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, String>();
      genericHashMapUsingArrayList0.remove("{}");
      int int0 = genericHashMapUsingArrayList0.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, Object> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, Object>();
      genericHashMapUsingArrayList0.buckets = null;
      // Undeclared exception!
      try { 
        genericHashMapUsingArrayList0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericHashMapUsingArrayList<Integer, Object> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Integer, Object>();
      genericHashMapUsingArrayList0.put((Integer) null, "");
      // Undeclared exception!
      try { 
        genericHashMapUsingArrayList0.put((Integer) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, Integer> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, Integer>();
      genericHashMapUsingArrayList0.buckets = null;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        genericHashMapUsingArrayList0.get(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericHashMapUsingArrayList<Integer, Integer> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Integer, Integer>();
      Integer integer0 = new Integer((-1521));
      genericHashMapUsingArrayList0.put(integer0, integer0);
      genericHashMapUsingArrayList0.remove(integer0);
      assertEquals(0, genericHashMapUsingArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericHashMapUsingArrayList<Integer, String> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Integer, String>();
      genericHashMapUsingArrayList0.put((Integer) null, "");
      // Undeclared exception!
      try { 
        genericHashMapUsingArrayList0.remove((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, LinkedList<String>> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, LinkedList<String>>();
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      genericHashMapUsingArrayList0.put(object0, linkedList0);
      genericHashMapUsingArrayList0.get(object0);
      assertEquals(1, genericHashMapUsingArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericHashMapUsingArrayList<String, Integer> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<String, Integer>();
      GenericHashMapUsingArrayList<Object, Integer> genericHashMapUsingArrayList1 = new GenericHashMapUsingArrayList<Object, Integer>();
      Integer integer0 = new Integer((-1));
      genericHashMapUsingArrayList1.put(genericHashMapUsingArrayList0, integer0);
      genericHashMapUsingArrayList1.put(genericHashMapUsingArrayList0, integer0);
      assertEquals(1, genericHashMapUsingArrayList1.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, LinkedList<String>> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, LinkedList<String>>();
      Object object0 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      genericHashMapUsingArrayList0.put(object0, linkedList0);
      genericHashMapUsingArrayList0.toString();
      assertEquals(1, genericHashMapUsingArrayList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericHashMapUsingArrayList<LinkedList<String>, Object> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<LinkedList<String>, Object>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Integer integer0 = new Integer(1);
      genericHashMapUsingArrayList0.put(linkedList0, integer0);
      boolean boolean0 = genericHashMapUsingArrayList0.containsKey(linkedList0);
      assertEquals(1, genericHashMapUsingArrayList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericHashMapUsingArrayList<String, Object> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<String, Object>();
      GenericHashMapUsingArrayList<Object, String> genericHashMapUsingArrayList1 = new GenericHashMapUsingArrayList<Object, String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Object object0 = new Object();
      genericHashMapUsingArrayList1.put(linkedList0, "?L3b`y0(\"R2^6B");
      GenericHashMapUsingArrayList<Integer, String> genericHashMapUsingArrayList2 = new GenericHashMapUsingArrayList<Integer, String>();
      GenericHashMapUsingArrayList<Integer, LinkedList<Object>> genericHashMapUsingArrayList3 = new GenericHashMapUsingArrayList<Integer, LinkedList<Object>>();
      GenericHashMapUsingArrayList<Object, Integer> genericHashMapUsingArrayList4 = new GenericHashMapUsingArrayList<Object, Integer>();
      GenericHashMapUsingArrayList<Object, Object> genericHashMapUsingArrayList5 = new GenericHashMapUsingArrayList<Object, Object>();
      genericHashMapUsingArrayList5.put(object0, genericHashMapUsingArrayList0);
      GenericHashMapUsingArrayList<String, String> genericHashMapUsingArrayList6 = new GenericHashMapUsingArrayList<String, String>();
      genericHashMapUsingArrayList6.remove("?L3b`y0(\"R2^6B");
      Object object1 = new Object();
      genericHashMapUsingArrayList1.get(object1);
      assertEquals(1, genericHashMapUsingArrayList1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericHashMapUsingArrayList<Object, Object> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<Object, Object>();
      Object object0 = new Object();
      boolean boolean0 = genericHashMapUsingArrayList0.containsKey(object0);
      assertEquals(0, genericHashMapUsingArrayList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericHashMapUsingArrayList<String, Integer> genericHashMapUsingArrayList0 = new GenericHashMapUsingArrayList<String, Integer>();
      int int0 = genericHashMapUsingArrayList0.size();
      assertEquals(0, int0);
  }
}

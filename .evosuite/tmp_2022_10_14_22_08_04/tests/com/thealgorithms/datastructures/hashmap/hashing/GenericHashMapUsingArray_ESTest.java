/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:13:40 GMT 2022
 */

package com.thealgorithms.datastructures.hashmap.hashing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GenericHashMapUsingArray_ESTest extends GenericHashMapUsingArray_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Object, Object>();
      Integer integer0 = new Integer(0);
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node0 = genericHashMapUsingArray0.new Node(integer0, genericHashMapUsingArray0);
      genericHashMapUsingArray0.put(genericHashMapUsingArray_Node0, "");
      int int0 = genericHashMapUsingArray0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GenericHashMapUsingArray<String, Integer> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Integer>();
      Integer integer0 = new Integer(1);
      genericHashMapUsingArray0.put((String) null, integer0);
      // Undeclared exception!
      try { 
        genericHashMapUsingArray0.remove((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Object, Object>();
      genericHashMapUsingArray0.put((Object) null, (Object) null);
      // Undeclared exception!
      try { 
        genericHashMapUsingArray0.put((Object) null, "{}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GenericHashMapUsingArray<String, Integer> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Integer>();
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node0 = genericHashMapUsingArray0.new Node("}", (Integer) null);
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray1 = new GenericHashMapUsingArray<Object, Object>();
      genericHashMapUsingArray1.put((Object) null, genericHashMapUsingArray_Node0.value);
      // Undeclared exception!
      try { 
        genericHashMapUsingArray1.get((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GenericHashMapUsingArray<String, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Object>();
      genericHashMapUsingArray0.put((String) null, (Object) null);
      // Undeclared exception!
      try { 
        genericHashMapUsingArray0.containsKey((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.hashmap.hashing.GenericHashMapUsingArray", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GenericHashMapUsingArray<Integer, String> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Integer, String>();
      Integer integer0 = new Integer((-2853));
      genericHashMapUsingArray0.put(integer0, "uL1F4");
      boolean boolean0 = genericHashMapUsingArray0.containsKey(integer0);
      assertEquals(1, genericHashMapUsingArray0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GenericHashMapUsingArray<String, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Object>();
      boolean boolean0 = genericHashMapUsingArray0.containsKey("{}");
      assertEquals(0, genericHashMapUsingArray0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GenericHashMapUsingArray<Integer, Integer> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Integer, Integer>();
      String string0 = genericHashMapUsingArray0.toString();
      assertEquals("{}", string0);
      assertEquals(0, genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Object, Object>();
      GenericHashMapUsingArray<String, Object> genericHashMapUsingArray1 = new GenericHashMapUsingArray<String, Object>();
      genericHashMapUsingArray1.get("*zqM'");
      genericHashMapUsingArray1.put("{}", genericHashMapUsingArray0);
      GenericHashMapUsingArray<Integer, Object> genericHashMapUsingArray2 = new GenericHashMapUsingArray<Integer, Object>();
      Integer integer0 = new Integer(0);
      genericHashMapUsingArray2.put(integer0, "{}");
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray3 = new GenericHashMapUsingArray<Object, Object>();
      GenericHashMapUsingArray<Object, String> genericHashMapUsingArray4 = new GenericHashMapUsingArray<Object, String>();
      genericHashMapUsingArray4.put(genericHashMapUsingArray0, "{}");
      GenericHashMapUsingArray<Object, GenericHashMapUsingArray.Node> genericHashMapUsingArray5 = new GenericHashMapUsingArray<Object, GenericHashMapUsingArray.Node>();
      Integer integer1 = new Integer(0);
      genericHashMapUsingArray2.get(integer1);
      GenericHashMapUsingArray<Object, GenericHashMapUsingArray.Node> genericHashMapUsingArray6 = new GenericHashMapUsingArray<Object, GenericHashMapUsingArray.Node>();
      Integer integer2 = new Integer(0);
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node0 = genericHashMapUsingArray2.new Node(integer2, "*zqM'");
      GenericHashMapUsingArray<Integer, String> genericHashMapUsingArray7 = new GenericHashMapUsingArray<Integer, String>();
      genericHashMapUsingArray4.get(integer2);
      assertEquals(1, genericHashMapUsingArray4.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-2282));
      GenericHashMapUsingArray<Integer, String> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Integer, String>();
      genericHashMapUsingArray0.put(integer0, "");
      genericHashMapUsingArray0.remove(integer0);
      assertEquals(0, genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GenericHashMapUsingArray<String, Integer> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Integer>();
      genericHashMapUsingArray0.remove("*zqM'");
      assertEquals((-1), genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GenericHashMapUsingArray<String, Integer> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Integer>();
      GenericHashMapUsingArray<Object, Integer> genericHashMapUsingArray1 = new GenericHashMapUsingArray<Object, Integer>();
      Integer integer0 = new Integer((-563));
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node0 = genericHashMapUsingArray0.new Node("{}", integer0);
      genericHashMapUsingArray1.remove(genericHashMapUsingArray_Node0);
      int int0 = genericHashMapUsingArray1.size();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GenericHashMapUsingArray<Object, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Object, Object>();
      Integer integer0 = new Integer(2658);
      genericHashMapUsingArray0.put(integer0, integer0);
      GenericHashMapUsingArray<String, Object> genericHashMapUsingArray1 = new GenericHashMapUsingArray<String, Object>();
      genericHashMapUsingArray1.get("");
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node0 = genericHashMapUsingArray1.new Node("", genericHashMapUsingArray0);
      genericHashMapUsingArray0.put("", genericHashMapUsingArray_Node0);
      Object object0 = new Object();
      genericHashMapUsingArray0.put("{2658 : 2658, }", integer0);
      genericHashMapUsingArray0.put(genericHashMapUsingArray_Node0, "{2658 : 2658, }");
      genericHashMapUsingArray0.put(object0, integer0);
      GenericHashMapUsingArray<String, String> genericHashMapUsingArray2 = new GenericHashMapUsingArray<String, String>();
      GenericHashMapUsingArray<String, GenericHashMapUsingArray.Node> genericHashMapUsingArray3 = new GenericHashMapUsingArray<String, GenericHashMapUsingArray.Node>();
      genericHashMapUsingArray0.put(genericHashMapUsingArray1, (Object) null);
      GenericHashMapUsingArray<String, Integer> genericHashMapUsingArray4 = new GenericHashMapUsingArray<String, Integer>();
      GenericHashMapUsingArray.Node genericHashMapUsingArray_Node1 = genericHashMapUsingArray4.new Node("{2658 : 2658, }", integer0);
      genericHashMapUsingArray0.put(genericHashMapUsingArray_Node1, (Object) null);
      assertEquals(7, genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GenericHashMapUsingArray<Integer, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Integer, Object>();
      Integer integer0 = new Integer(0);
      genericHashMapUsingArray0.put(integer0, "{}");
      genericHashMapUsingArray0.put(integer0, "{}");
      assertEquals(1, genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GenericHashMapUsingArray<String, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<String, Object>();
      genericHashMapUsingArray0.put("", "{}");
      genericHashMapUsingArray0.toString();
      assertEquals(1, genericHashMapUsingArray0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GenericHashMapUsingArray<Integer, Object> genericHashMapUsingArray0 = new GenericHashMapUsingArray<Integer, Object>();
      int int0 = genericHashMapUsingArray0.size();
      assertEquals(0, int0);
  }
}

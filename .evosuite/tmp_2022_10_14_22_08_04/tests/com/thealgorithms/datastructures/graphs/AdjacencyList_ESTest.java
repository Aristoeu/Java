/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 07:00:35 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.AdjacencyList;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdjacencyList_ESTest extends AdjacencyList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      AdjacencyList<Integer> adjacencyList0 = new AdjacencyList<Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      adjacencyList0.addEdge(integer0, integer1);
      adjacencyList0.printGraph();
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      AdjacencyList<String> adjacencyList0 = new AdjacencyList<String>();
      adjacencyList0.addEdge("ks}", "ks}");
      adjacencyList0.addEdge("ks}", "");
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      AdjacencyList<String> adjacencyList0 = new AdjacencyList<String>();
      adjacencyList0.addEdge("%JT,P&", "");
      ArrayList<String> arrayList0 = adjacencyList0.getAdjacents("");
      assertFalse(arrayList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      AdjacencyList<String> adjacencyList0 = new AdjacencyList<String>();
      adjacencyList0.addEdge("ks}", "ks}");
      ArrayList<String> arrayList0 = adjacencyList0.getAdjacents("ks}");
      assertTrue(arrayList0.contains("ks}"));
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      AdjacencyList<String> adjacencyList0 = new AdjacencyList<String>();
      HashMap<String, ArrayList<String>> hashMap0 = new HashMap<String, ArrayList<String>>();
      adjacencyList0.adj = (Map<String, ArrayList<String>>) hashMap0;
      hashMap0.put("", (ArrayList<String>) null);
      // Undeclared exception!
      try { 
        adjacencyList0.printGraph();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      AdjacencyList<Integer> adjacencyList0 = new AdjacencyList<Integer>();
      adjacencyList0.adj = null;
      // Undeclared exception!
      try { 
        adjacencyList0.getVertices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      AdjacencyList<Integer> adjacencyList0 = new AdjacencyList<Integer>();
      Integer integer0 = new Integer(1);
      adjacencyList0.adj = null;
      // Undeclared exception!
      try { 
        adjacencyList0.getAdjacents(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      AdjacencyList<String> adjacencyList0 = new AdjacencyList<String>();
      adjacencyList0.adj = null;
      // Undeclared exception!
      try { 
        adjacencyList0.addEdge("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      AdjacencyList<Integer> adjacencyList0 = new AdjacencyList<Integer>();
      Integer integer0 = new Integer(1);
      ArrayList<Integer> arrayList0 = adjacencyList0.getAdjacents(integer0);
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      AdjacencyList<Integer> adjacencyList0 = new AdjacencyList<Integer>();
      Set<Integer> set0 = adjacencyList0.getVertices();
      assertTrue(set0.isEmpty());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 03:51:10 GMT 2022
 */

package com.thealgorithms.datastructures.graphs;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdjacencyMatrixGraph_ESTest extends AdjacencyMatrixGraph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 6;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(6, 6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(6));
      
      boolean boolean1 = adjacencyMatrixGraph0.edgeDoesExist(6, 6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(string0);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string0);
      
      int int1 = 0;
      boolean boolean2 = adjacencyMatrixGraph0.edgeDoesExist(1, 1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int2 = adjacencyMatrixGraph0.numberOfVertices();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, int2);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(1));
      assertFalse(list1.contains(6));
      
      int int3 = 1;
      List<Integer> list2 = adjacencyMatrixGraph0.breadthFirstOrder(1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(list2.contains(int3));
      assertFalse(list2.contains(6));
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(6, 1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string1);
      
      List<Integer> list3 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertFalse(list3.contains(1));
      
      String string2 = adjacencyMatrixGraph0.toString();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string2);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-2235), 3597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(14);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(14));
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("    0  \n0 : 0 \n", string0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(0, 4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(0));
      assertFalse(list1.contains(14));
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0  \n0 : 0 \n", string1);
      
      boolean boolean1 = adjacencyMatrixGraph0.vertexDoesExist(4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertFalse(list2.contains(14));
      assertTrue(list2.contains(0));
      
      boolean boolean2 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, int0);
      
      boolean boolean4 = adjacencyMatrixGraph0.addEdge((-1), 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int0 = 1;
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(6, 1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(6));
      
      boolean boolean1 = adjacencyMatrixGraph0.edgeDoesExist(6, 6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string0);
      
      int int1 = 0;
      boolean boolean2 = adjacencyMatrixGraph0.addEdge(0, 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int2 = adjacencyMatrixGraph0.numberOfVertices();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(6, int2);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(2, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(6));
      assertTrue(list1.contains(1));
      
      int int3 = 1;
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list2.isEmpty());
      assertEquals(2, list2.size());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertTrue(list2.contains(1));
      assertFalse(list2.contains(6));
      
      List<Integer> list3 = adjacencyMatrixGraph0.breadthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(2, list3.size());
      assertFalse(list3.isEmpty());
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertTrue(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertTrue(list3.contains(1));
      assertFalse(list3.contains(6));
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(6, (-95));
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 1 0 0 0 0 \n1 : 1 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string1);
      
      List<Integer> list4 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotSame(list4, list3);
      assertNotSame(list4, list2);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertFalse(list4.equals((Object)list3));
      assertFalse(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list0));
      assertFalse(list4.equals((Object)list1));
      assertNotNull(list4);
      assertFalse(list4.contains(6));
      
      String string2 = adjacencyMatrixGraph0.toString();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 1 0 0 0 0 \n1 : 1 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string2);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-2235), 3597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 44;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(44);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int1 = 1;
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(44, 1);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(44);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(44));
      
      boolean boolean1 = adjacencyMatrixGraph0.addEdge(1, 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = adjacencyMatrixGraph0.edgeDoesExist(44, 44);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder((-1));
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(44));
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertFalse(list2.contains(44));
      assertTrue(list2.contains(1));
      
      int int2 = 926;
      List<Integer> list3 = adjacencyMatrixGraph0.depthFirstOrder(926);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertTrue(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertFalse(list3.contains(44));
      
      List<Integer> list4 = adjacencyMatrixGraph0.breadthFirstOrder(926);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list2);
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list0));
      assertFalse(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list3));
      assertNotNull(list4);
      assertFalse(list4.contains(44));
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(44, (-95));
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int0 = 1;
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(6, 1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(6));
      
      boolean boolean1 = adjacencyMatrixGraph0.edgeDoesExist(6, 6);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string0);
      
      int int1 = 0;
      boolean boolean2 = adjacencyMatrixGraph0.addEdge(0, 1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      int int2 = adjacencyMatrixGraph0.numberOfVertices();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(6, int2);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(list1.isEmpty());
      assertEquals(2, list1.size());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(1));
      assertFalse(list1.contains(6));
      
      int int3 = 926;
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(926);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotNull(list2);
      assertFalse(list2.contains(1));
      
      List<Integer> list3 = adjacencyMatrixGraph0.breadthFirstOrder(926);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertFalse(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertNotNull(list3);
      assertFalse(list3.contains(1));
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(6, (-95));
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 1 0 0 0 0 \n1 : 1 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string1);
      
      List<Integer> list4 = adjacencyMatrixGraph0.breadthFirstOrder(6);
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertNotSame(list4, list0);
      assertNotSame(list4, list2);
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertFalse(list4.equals((Object)list1));
      assertNotNull(list4);
      assertFalse(list4.contains(1));
      
      String string2 = adjacencyMatrixGraph0.toString();
      assertEquals(6, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("    0 1 2 3 4 5  \n0 : 0 1 0 0 0 0 \n1 : 1 0 0 0 0 0 \n2 : 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 \n", string2);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-2235), 3597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 44;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(44);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int1 = 1;
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(44, 1);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(44);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(44));
      
      boolean boolean1 = adjacencyMatrixGraph0.edgeDoesExist(44, 44);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(string0);
      
      boolean boolean2 = adjacencyMatrixGraph0.removeEdge(0, 1);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(1);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(1));
      assertFalse(list1.contains(44));
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder((-1));
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertFalse(list2.contains(1));
      
      List<Integer> list3 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertNotNull(list3);
      assertFalse(list3.contains(44));
      assertTrue(list3.contains(1));
      
      int int2 = 926;
      List<Integer> list4 = adjacencyMatrixGraph0.depthFirstOrder(926);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotSame(list4, list3);
      assertNotSame(list4, list2);
      assertNotSame(list4, list1);
      assertNotSame(list4, list0);
      assertFalse(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list0));
      assertFalse(list4.equals((Object)list1));
      assertNotNull(list4);
      assertFalse(list4.contains(44));
      
      List<Integer> list5 = adjacencyMatrixGraph0.breadthFirstOrder(926);
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotSame(list5, list0);
      assertNotSame(list5, list1);
      assertNotSame(list5, list4);
      assertNotSame(list5, list3);
      assertNotSame(list5, list2);
      assertFalse(list5.equals((Object)list1));
      assertTrue(list5.equals((Object)list2));
      assertTrue(list5.equals((Object)list4));
      assertTrue(list5.equals((Object)list0));
      assertFalse(list5.equals((Object)list3));
      assertNotNull(list5);
      assertFalse(list5.contains(926));
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(44, (-95));
      assertEquals(44, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(1));
      assertTrue(list0.contains(0));
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("    0  \n0 : 0 \n", string0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(0, 4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(978);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(0));
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotNull(list2);
      assertFalse(list2.contains(4283));
      assertTrue(list2.contains(0));
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0  \n0 : 0 \n", string1);
      
      boolean boolean1 = adjacencyMatrixGraph0.vertexDoesExist(4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Integer> list3 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertTrue(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertNotNull(list3);
      assertTrue(list3.contains(0));
      assertFalse(list3.contains(4283));
      
      boolean boolean2 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, int0);
      
      boolean boolean4 = adjacencyMatrixGraph0.addEdge((-1), 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      List<Integer> list4 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, list4.size());
      assertFalse(list4.isEmpty());
      assertNotSame(list4, list2);
      assertNotSame(list4, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list0));
      assertFalse(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list2));
      assertNotNull(list4);
      assertFalse(list4.contains(4283));
      assertTrue(list4.contains(0));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(4);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      boolean boolean0 = adjacencyMatrixGraph0.vertexDoesExist(0);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(4);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(4));
      
      int int0 = AdjacencyMatrixGraph.EDGE_NONE;
      assertEquals(0, int0);
      
      boolean boolean1 = adjacencyMatrixGraph0.removeEdge(0, 0);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(4));
      assertTrue(list1.contains(int0));
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(4, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(list2.contains(int0));
      assertFalse(list2.contains(4));
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(4, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(74);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(74, (-90));
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      boolean boolean1 = adjacencyMatrixGraph0.vertexDoesExist(74);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = adjacencyMatrixGraph0.vertexDoesExist(74);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = adjacencyMatrixGraph0.edgeDoesExist(465, 3273);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(74, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      adjacencyMatrixGraph0.toString();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(string0);
      assertEquals("    0  \n0 : 0 \n", string0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder(3609);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(3609));
      
      boolean boolean0 = adjacencyMatrixGraph0.edgeDoesExist(0, 2846);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      boolean boolean1 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0  \n0 : 1 \n", string1);
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, int0);
      
      boolean boolean2 = adjacencyMatrixGraph0.edgeDoesExist(0, 1933);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = adjacencyMatrixGraph0.vertexDoesExist((-413));
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 53;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(53);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(53, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int1 = 1474;
      int int2 = 0;
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder((-639));
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(53, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains((-639)));
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(53, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(0));
      assertFalse(list1.contains(int1));
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1474, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1474
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(10);
      assertEquals(10, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(10);
      assertEquals(10, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(10));
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(10, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(string0);
      assertEquals("    0 1 2 3 4 5 6 7 8 9  \n0 : 0 0 0 0 0 0 0 0 0 0 \n1 : 0 0 0 0 0 0 0 0 0 0 \n2 : 0 0 0 0 0 0 0 0 0 0 \n3 : 0 0 0 0 0 0 0 0 0 0 \n4 : 0 0 0 0 0 0 0 0 0 0 \n5 : 0 0 0 0 0 0 0 0 0 0 \n6 : 0 0 0 0 0 0 0 0 0 0 \n7 : 0 0 0 0 0 0 0 0 0 0 \n8 : 0 0 0 0 0 0 0 0 0 0 \n9 : 0 0 0 0 0 0 0 0 0 0 \n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      boolean boolean0 = adjacencyMatrixGraph0.vertexDoesExist(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(1));
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, int0);
      
      boolean boolean1 = adjacencyMatrixGraph0.removeEdge(0, 0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotSame(list1, list0);
      assertFalse(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(int0));
      assertFalse(list1.contains(1));
      
      List<Integer> list2 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertTrue(list2.contains(int0));
      assertFalse(list2.contains(1));
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(int0));
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(int0));
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertFalse(list2.contains(int0));
      
      boolean boolean0 = adjacencyMatrixGraph0.vertexDoesExist(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      int int1 = 560;
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(0, 560);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 560
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(1, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
      
      boolean boolean1 = adjacencyMatrixGraph0.addEdge(1925, (-2393));
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = adjacencyMatrixGraph0.numberOfVertices();
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-2393), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2393
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertTrue(list0.contains(0));
      assertFalse(list0.contains(1));
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("    0  \n0 : 0 \n", string0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(0, 4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      List<Integer> list1 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertTrue(list1.contains(0));
      assertFalse(list1.contains(1));
      
      String string1 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("    0  \n0 : 0 \n", string1);
      
      boolean boolean1 = adjacencyMatrixGraph0.vertexDoesExist(4283);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Integer> list2 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertFalse(list2.contains(4283));
      assertTrue(list2.contains(0));
      
      boolean boolean2 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = adjacencyMatrixGraph0.addEdge(0, 0);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(1, int0);
      
      boolean boolean4 = adjacencyMatrixGraph0.addEdge((-1), 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(924);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains(924));
      
      List<Integer> list1 = adjacencyMatrixGraph0.breadthFirstOrder(924);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list1, list0);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertFalse(list1.contains(924));
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(0, 924);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      int int0 = adjacencyMatrixGraph0.numberOfVertices();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.breadthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder(1231);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(0));
      
      boolean boolean0 = adjacencyMatrixGraph0.edgeDoesExist(0, 0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(string0);
      assertEquals("     \n", string0);
      
      boolean boolean1 = adjacencyMatrixGraph0.addEdge(1851, 0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(0));
      
      int int0 = adjacencyMatrixGraph0.numberOfEdges();
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, int0);
      
      boolean boolean0 = adjacencyMatrixGraph0.edgeDoesExist(3215, (-1));
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      List<Integer> list0 = adjacencyMatrixGraph0.depthFirstOrder(1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(1));
      
      String string0 = adjacencyMatrixGraph0.toString();
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(string0);
      assertEquals("    0  \n0 : 0 \n", string0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(1, 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertNotNull(adjacencyMatrixGraph0);
      
      boolean boolean0 = adjacencyMatrixGraph0.addEdge(0, (-2296));
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1674;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1674);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      assertEquals(0, adjacencyMatrixGraph0.numberOfEdges());
      assertEquals(0, adjacencyMatrixGraph0.numberOfVertices());
      assertNotNull(adjacencyMatrixGraph0);
      
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(687);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1);
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = null;
      try {
        adjacencyMatrixGraph0 = new AdjacencyMatrixGraph((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 6;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(6);
      adjacencyMatrixGraph0.addEdge(6, 6);
      adjacencyMatrixGraph0.breadthFirstOrder(6);
      adjacencyMatrixGraph0.edgeDoesExist(6, 6);
      adjacencyMatrixGraph0.toString();
      int int1 = 0;
      adjacencyMatrixGraph0.addEdge(0, 1);
      adjacencyMatrixGraph0.numberOfVertices();
      adjacencyMatrixGraph0.depthFirstOrder(1);
      int int2 = 1;
      adjacencyMatrixGraph0.breadthFirstOrder(1);
      adjacencyMatrixGraph0.edgeDoesExist(6, 1);
      adjacencyMatrixGraph0.toString();
      adjacencyMatrixGraph0.breadthFirstOrder(6);
      adjacencyMatrixGraph0.toString();
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-2235), 3597);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2235
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = null;
      try {
        adjacencyMatrixGraph0 = new AdjacencyMatrixGraph((-2359));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      adjacencyMatrixGraph0.breadthFirstOrder(0);
      adjacencyMatrixGraph0.toString();
      adjacencyMatrixGraph0.addEdge(0, 4283);
      adjacencyMatrixGraph0.depthFirstOrder(0);
      adjacencyMatrixGraph0.toString();
      adjacencyMatrixGraph0.vertexDoesExist(4283);
      adjacencyMatrixGraph0.depthFirstOrder(0);
      adjacencyMatrixGraph0.edgeDoesExist(0, 1);
      adjacencyMatrixGraph0.addEdge(0, 0);
      int int0 = AdjacencyMatrixGraph.EDGE_NONE;
      boolean boolean0 = adjacencyMatrixGraph0.addEdge((-1), 1);
      assertEquals(1, adjacencyMatrixGraph0.numberOfEdges());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(1);
      adjacencyMatrixGraph0.breadthFirstOrder(0);
      adjacencyMatrixGraph0.toString();
      adjacencyMatrixGraph0.addEdge(0, 4283);
      adjacencyMatrixGraph0.depthFirstOrder(0);
      adjacencyMatrixGraph0.breadthFirstOrder(4283);
      adjacencyMatrixGraph0.toString();
      adjacencyMatrixGraph0.edgeDoesExist(0, 0);
      adjacencyMatrixGraph0.addEdge((-2971), 4283);
      adjacencyMatrixGraph0.breadthFirstOrder(0);
      adjacencyMatrixGraph0.addEdge(0, 0);
      adjacencyMatrixGraph0.addEdge(0, 0);
      adjacencyMatrixGraph0.numberOfEdges();
      adjacencyMatrixGraph0.addEdge((-1), 1);
      adjacencyMatrixGraph0.addEdge(4283, (-1));
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1062, 658);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1062
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(0);
      adjacencyMatrixGraph0.breadthFirstOrder((-668));
      adjacencyMatrixGraph0.depthFirstOrder((-3179));
      adjacencyMatrixGraph0.depthFirstOrder(0);
      adjacencyMatrixGraph0.edgeDoesExist(0, (-1));
      adjacencyMatrixGraph0.edgeDoesExist(0, 0);
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge((-82), (-3187));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 44;
      AdjacencyMatrixGraph adjacencyMatrixGraph0 = new AdjacencyMatrixGraph(44);
      int int1 = 1;
      adjacencyMatrixGraph0.addEdge(44, 1);
      adjacencyMatrixGraph0.breadthFirstOrder(44);
      adjacencyMatrixGraph0.edgeDoesExist(44, 44);
      adjacencyMatrixGraph0.removeEdge(0, 1);
      adjacencyMatrixGraph0.breadthFirstOrder(1);
      adjacencyMatrixGraph0.depthFirstOrder((-1));
      adjacencyMatrixGraph0.depthFirstOrder(1);
      int int2 = 926;
      adjacencyMatrixGraph0.depthFirstOrder(926);
      adjacencyMatrixGraph0.breadthFirstOrder(926);
      adjacencyMatrixGraph0.edgeDoesExist(44, (-95));
      // Undeclared exception!
      try { 
        adjacencyMatrixGraph0.removeEdge(1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.datastructures.graphs.AdjacencyMatrixGraph", e);
      }
  }
}

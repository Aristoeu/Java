/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:56:04 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.datastructures.lists.SinglyLinkedList;
import com.thealgorithms.misc.PalindromeSinglyLinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PalindromeSinglyLinkedList_ESTest extends PalindromeSinglyLinkedList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.insert(0);
      singlyLinkedList0.insertNth(4, 0);
      boolean boolean0 = PalindromeSinglyLinkedList.isPalindrome(singlyLinkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, (-3951));
      boolean boolean0 = PalindromeSinglyLinkedList.isPalindrome(singlyLinkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      // Undeclared exception!
      try { 
        PalindromeSinglyLinkedList.isPalindrome((SinglyLinkedList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.PalindromeSinglyLinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      SinglyLinkedList singlyLinkedList1 = new SinglyLinkedList(singlyLinkedList0, 1);
      boolean boolean0 = PalindromeSinglyLinkedList.isPalindrome(singlyLinkedList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SinglyLinkedList singlyLinkedList0 = new SinglyLinkedList();
      singlyLinkedList0.insert(737);
      singlyLinkedList0.insertHead((-983));
      boolean boolean0 = PalindromeSinglyLinkedList.isPalindrome(singlyLinkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      String[] stringArray0 = new String[12];
      PalindromeSinglyLinkedList.main(stringArray0);
      assertEquals(12, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PalindromeSinglyLinkedList palindromeSinglyLinkedList0 = new PalindromeSinglyLinkedList();
  }
}

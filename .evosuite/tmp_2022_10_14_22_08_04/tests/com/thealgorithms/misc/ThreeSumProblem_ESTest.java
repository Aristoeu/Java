/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 05:02:05 GMT 2022
 */

package com.thealgorithms.misc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.misc.ThreeSumProblem;
import java.util.InputMismatchException;
import java.util.List;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThreeSumProblem_ESTest extends ThreeSumProblem_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[0];
      List<List<Integer>> list0 = threeSumProblem0.TwoPointer(intArray0, (-1));
      assertEquals(0, intArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("9");
      SystemInUtil.addInputLine("3");
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        ThreeSumProblem.main(stringArray0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[6];
      List<List<Integer>> list0 = threeSumProblem0.TwoPointer(intArray0, (-17));
      assertEquals(6, intArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[6];
      List<List<Integer>> list0 = threeSumProblem0.Hashmap(intArray0, 2160);
      assertEquals(6, intArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[0];
      List<List<Integer>> list0 = threeSumProblem0.BruteForce(intArray0, (-27));
      assertEquals(0, intArray0.length);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SystemInUtil.addInputLine("'");
      // Undeclared exception!
      try { 
        ThreeSumProblem.main(stringArray0);
        fail("Expecting exception: InputMismatchException");
      
      } catch(InputMismatchException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Scanner", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      // Undeclared exception!
      try { 
        threeSumProblem0.TwoPointer((int[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      // Undeclared exception!
      try { 
        threeSumProblem0.Hashmap((int[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      // Undeclared exception!
      try { 
        threeSumProblem0.BruteForce((int[]) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.misc.ThreeSumProblem", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[6];
      intArray0[1] = (-832);
      List<List<Integer>> list0 = threeSumProblem0.Hashmap(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new int[] {(-832), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      assertNotNull(threeSumProblem0);
      
      int[] intArray0 = new int[6];
      intArray0[5] = 2591;
      List<List<Integer>> list0 = threeSumProblem0.TwoPointer(intArray0, 0);
      assertEquals(6, intArray0.length);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 2591}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      int[] intArray0 = new int[10];
      intArray0[1] = (-844);
      List<List<Integer>> list0 = threeSumProblem0.BruteForce(intArray0, 0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      int[] intArray0 = new int[10];
      intArray0[1] = (-844);
      List<List<Integer>> list0 = threeSumProblem0.Hashmap(intArray0, (-844));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreeSumProblem threeSumProblem0 = new ThreeSumProblem();
      int[] intArray0 = new int[10];
      intArray0[1] = (-844);
      List<List<Integer>> list0 = threeSumProblem0.TwoPointer(intArray0, 0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("3");
      SystemInUtil.addInputLine("3");
      SystemInUtil.addInputLine("3");
      SystemInUtil.addInputLine("3");
      String[] stringArray0 = new String[6];
      SystemInUtil.addInputLine("3");
      ThreeSumProblem.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }
}

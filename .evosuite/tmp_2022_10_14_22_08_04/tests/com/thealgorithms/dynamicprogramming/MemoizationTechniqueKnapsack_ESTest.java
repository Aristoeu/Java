/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:15:14 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MemoizationTechniqueKnapsack_ESTest extends MemoizationTechniqueKnapsack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 44;
      int[] intArray1 = new int[5];
      MemoizationTechniqueKnapsack.knapSack(1, intArray0, intArray1, 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[1] = 372;
      MemoizationTechniqueKnapsack.knapSack(44, intArray0, intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MemoizationTechniqueKnapsack.max((-1), 1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MemoizationTechniqueKnapsack.max(0, (-1679));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MemoizationTechniqueKnapsack.max((-1546), (-1546));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 1;
      int[][] intArray1 = new int[9][3];
      intArray1[1] = intArray0;
      MemoizationTechniqueKnapsack.knapSackRec(1, intArray0, intArray0, 1, intArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 44;
      MemoizationTechniqueKnapsack.knapSack(44, intArray0, intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        MemoizationTechniqueKnapsack.knapSackRec(10, intArray0, intArray0, 1334, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[][] intArray1 = new int[10][3];
      // Undeclared exception!
      try { 
        MemoizationTechniqueKnapsack.knapSackRec(1, intArray0, intArray0, (-5643), intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5643
         //
         verifyException("com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[3];
      // Undeclared exception!
      MemoizationTechniqueKnapsack.knapSack(331, intArray0, intArray0, 100);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        MemoizationTechniqueKnapsack.knapSack(4, (int[]) null, (int[]) null, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        MemoizationTechniqueKnapsack.knapSack((-922), intArray0, intArray0, 1956);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[][] intArray0 = new int[10][3];
      // Undeclared exception!
      try { 
        MemoizationTechniqueKnapsack.knapSack((-1), intArray0[6], intArray0[1], 207);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.dynamicprogramming.MemoizationTechniqueKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[2];
      int[][] intArray1 = new int[10][3];
      int int0 = MemoizationTechniqueKnapsack.knapSackRec(1, intArray0, intArray0, 1, intArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MemoizationTechniqueKnapsack memoizationTechniqueKnapsack0 = new MemoizationTechniqueKnapsack();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[8];
      MemoizationTechniqueKnapsack.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }
}

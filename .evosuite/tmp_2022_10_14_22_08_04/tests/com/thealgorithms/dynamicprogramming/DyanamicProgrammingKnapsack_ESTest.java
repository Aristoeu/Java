/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:27:58 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DyanamicProgrammingKnapsack_ESTest extends DyanamicProgrammingKnapsack_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 2951;
      int int1 = (-1795);
      int int2 = DyanamicProgrammingKnapsack.max(2951, (-1795));
      assertEquals(2951, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "3y0^";
      stringArray0[2] = "e5J";
      stringArray0[3] = "";
      stringArray0[4] = "com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack";
      stringArray0[5] = "";
      stringArray0[6] = "Tu~-|";
      stringArray0[7] = "#SCk0";
      stringArray0[8] = "";
      DyanamicProgrammingKnapsack.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      DyanamicProgrammingKnapsack.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      DyanamicProgrammingKnapsack.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2951;
      intArray0[1] = 2951;
      // Undeclared exception!
      try { 
        DyanamicProgrammingKnapsack.knapSack(2951, intArray0, (int[]) null, 2951);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = DyanamicProgrammingKnapsack.max(1183, 1183);
      assertEquals(1183, int0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1183;
      intArray0[1] = 1183;
      intArray0[2] = 1183;
      intArray0[3] = 1183;
      intArray0[4] = 1183;
      intArray0[5] = 1183;
      intArray0[6] = 786;
      intArray0[7] = 1183;
      intArray0[8] = 1183;
      int int1 = DyanamicProgrammingKnapsack.knapSack(1183, intArray0, intArray0, 1);
      assertEquals(1183, int1);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {1183, 1183, 1183, 1183, 1183, 1183, 786, 1183, 1183}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DyanamicProgrammingKnapsack dyanamicProgrammingKnapsack0 = new DyanamicProgrammingKnapsack();
      assertNotNull(dyanamicProgrammingKnapsack0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "4=YrV";
      stringArray0[3] = "3lEWKOlMGS^Zo$";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      DyanamicProgrammingKnapsack.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      int int0 = DyanamicProgrammingKnapsack.max(2331, 0);
      assertEquals(2331, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 2331;
      intArray0[1] = 2331;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2331;
      intArray0[5] = 0;
      // Undeclared exception!
      DyanamicProgrammingKnapsack.knapSack(1838, intArray0, intArray0, 2331);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = DyanamicProgrammingKnapsack.max(120, 4043);
      assertEquals(4043, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = DyanamicProgrammingKnapsack.max(0, 0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int[] intArray1 = new int[0];
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = DyanamicProgrammingKnapsack.knapSack(0, intArray0, intArray1, 0);
      assertEquals(0, int1);
      assertEquals(3, intArray0.length);
      assertEquals(0, intArray1.length);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      int int0 = DyanamicProgrammingKnapsack.knapSack(0, intArray0, intArray0, 0);
      assertEquals(0, int0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DyanamicProgrammingKnapsack dyanamicProgrammingKnapsack0 = new DyanamicProgrammingKnapsack();
      assertNotNull(dyanamicProgrammingKnapsack0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = (-1);
      // Undeclared exception!
      try { 
        DyanamicProgrammingKnapsack.knapSack((-1), intArray0, intArray0, 3564);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2765;
      intArray0[1] = 2765;
      intArray0[2] = 2765;
      intArray0[3] = 2765;
      intArray0[4] = 2765;
      intArray0[5] = 2765;
      intArray0[6] = 2765;
      intArray0[7] = 0;
      intArray0[8] = 2765;
      // Undeclared exception!
      try { 
        DyanamicProgrammingKnapsack.knapSack(2765, intArray0, intArray0, (-3218));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DyanamicProgrammingKnapsack dyanamicProgrammingKnapsack0 = new DyanamicProgrammingKnapsack();
      DyanamicProgrammingKnapsack.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DyanamicProgrammingKnapsack.max((-1982), (-1982));
      DyanamicProgrammingKnapsack.max((-1982), (-1));
      DyanamicProgrammingKnapsack.max((-1), (-1982));
      int[] intArray0 = new int[5];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1982);
      intArray0[4] = (-1074);
      // Undeclared exception!
      try { 
        DyanamicProgrammingKnapsack.knapSack((-1074), intArray0, intArray0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.DyanamicProgrammingKnapsack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "'2tnU\u0007BzlQf&OY.";
      stringArray0[3] = "yh8Lp;wN\"U^";
      DyanamicProgrammingKnapsack.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DyanamicProgrammingKnapsack.max((-1), (-1));
      DyanamicProgrammingKnapsack dyanamicProgrammingKnapsack0 = new DyanamicProgrammingKnapsack();
  }
}

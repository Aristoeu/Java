/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 15 06:39:54 GMT 2022
 */

package com.thealgorithms.dynamicprogramming;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.thealgorithms.dynamicprogramming.ShortestSuperSequence;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ShortestSuperSequence_ESTest extends ShortestSuperSequence_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = "";
      int int0 = ShortestSuperSequence.shortestSuperSequence("", "");
      assertEquals(0, int0);
      
      String string1 = "q[s$j/";
      int int1 = ShortestSuperSequence.shortestSuperSequence("", "q[s$j/");
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String string2 = "";
      // Undeclared exception!
      ShortestSuperSequence.lcs("q[s$j/", "", 6485, 0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = null;
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.main((String[]) null);
      int int0 = ShortestSuperSequence.shortestSuperSequence("_snE\"V9", "_snE\"V9");
      assertEquals(7, int0);
      
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      assertNotNull(shortestSuperSequence0);
      
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.main((String[]) null);
      int int1 = ShortestSuperSequence.lcs("_snE\"V9", "_snE\"V9", 7, 7);
      assertTrue(int1 == int0);
      assertEquals(7, int1);
      
      String string0 = ">u\\";
      // Undeclared exception!
      try { 
        ShortestSuperSequence.lcs(">u", ">u", 7, (-4831));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.ShortestSuperSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      assertNotNull(shortestSuperSequence0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "o|";
      stringArray0[1] = "";
      stringArray0[2] = "j[";
      stringArray0[3] = "";
      stringArray0[4] = "com.thealgorithms.dynamicprogramming.ShortestSuperSequence";
      stringArray0[5] = "<YP`azZ/K";
      stringArray0[6] = "";
      stringArray0[7] = "AWQ*e_(#`xOQDt4";
      stringArray0[8] = " &j\"~'X~3)LXTSWgS$=";
      ShortestSuperSequence.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "am_[NXih7";
      stringArray1[2] = "W \u0000+J Uxo ,)Q.";
      ShortestSuperSequence.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      ShortestSuperSequence.main((String[]) null);
      String[] stringArray2 = null;
      ShortestSuperSequence.main((String[]) null);
      String string0 = null;
      int int0 = 364;
      // Undeclared exception!
      try { 
        ShortestSuperSequence.lcs((String) null, (String) null, 364, 364);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.ShortestSuperSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      int int0 = ShortestSuperSequence.shortestSuperSequence("0Abu|PsAo7I", "0Abu|PsAo7I");
      assertEquals(11, int0);
      
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      assertNotNull(shortestSuperSequence0);
      
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.main((String[]) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0Abu|PsAo7I";
      stringArray0[1] = "0Abu|PsAo7I";
      stringArray0[2] = "0Abu|PsAo7I";
      stringArray0[3] = "0Abu|PsAo7I";
      ShortestSuperSequence.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "0Abu|PsAo7I";
      stringArray1[1] = "0Abu|PsAo7I";
      ShortestSuperSequence.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      ShortestSuperSequence.main((String[]) null);
      int int1 = ShortestSuperSequence.shortestSuperSequence("0Abu|PsAo7I", "0Abu|PsAo7I");
      assertTrue(int1 == int0);
      assertEquals(11, int1);
      
      int int2 = ShortestSuperSequence.shortestSuperSequence("0Abu|PsAo7I", "Length of the shortest supersequence is ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(49, int2);
      
      String string0 = "Ez6^r_6Pnv";
      // Undeclared exception!
      try { 
        ShortestSuperSequence.shortestSuperSequence("Ez6^r_6Pnv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.ShortestSuperSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      int int0 = ShortestSuperSequence.shortestSuperSequence("<yE )Km", "AGGTAB");
      assertEquals(13, int0);
      
      String string0 = "\"\"a";
      // Undeclared exception!
      try { 
        ShortestSuperSequence.lcs("\"\"a", "AGGTAB", (-1), 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.thealgorithms.dynamicprogramming.ShortestSuperSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      assertNotNull(shortestSuperSequence0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-/Z;dLx8X#sm";
      stringArray0[3] = "";
      stringArray0[4] = "$";
      stringArray0[5] = "<W";
      stringArray0[6] = "Xl.7Hm@2(gZ|!Qg8";
      ShortestSuperSequence.main(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string0 = "";
      int int0 = ShortestSuperSequence.shortestSuperSequence("", "");
      assertEquals(0, int0);
      
      String string1 = "@[YFD3<c] RP_HA";
      // Undeclared exception!
      try { 
        ShortestSuperSequence.lcs("", "@[YFD3<c] RP_HA", (-1995), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.thealgorithms.dynamicprogramming.ShortestSuperSequence", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShortestSuperSequence.shortestSuperSequence("T+t?W_Sx", "T+t?W_Sx");
      ShortestSuperSequence.main((String[]) null);
      ShortestSuperSequence.lcs("T+t?W_Sx", "$Ls|q110ff", 8, 8);
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "T+t?W_Sx";
      stringArray0[1] = "T+t?W_Sx";
      stringArray0[2] = "$Ls|q110ff";
      ShortestSuperSequence.main(stringArray0);
      ShortestSuperSequence.main((String[]) null);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "T+t?W_Sx";
      ShortestSuperSequence.main(stringArray1);
      ShortestSuperSequence.shortestSuperSequence("T+t?W_Sx", "T+t?W_Sx");
      ShortestSuperSequence.main((String[]) null);
      // Undeclared exception!
      try { 
        ShortestSuperSequence.lcs("T+t?W_Sx", "m14kP{l", 2460, 1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShortestSuperSequence.main((String[]) null);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShortestSuperSequence.shortestSuperSequence("+6S0Dm>", "+6S0Dm>");
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ShortestSuperSequence shortestSuperSequence0 = new ShortestSuperSequence();
      String[] stringArray0 = new String[8];
      ShortestSuperSequence.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }
}

package ciphers.SimpleSubstitutionCipher;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!", "xxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!xxvvxxvvxxvvxxvvxxvvxxvvxxvvxxvv!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!" + "'", str2, "`\253!!!\253!!!\253!!!`\253!!!\253!!!\253!!!!");
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u029e\u029e\u029e\u029e\u029e\u029e\u029e\u029e\u0346\u0348\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk\200}}`!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk!ihkkihkkihkk
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!\200}}`!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!]]!" + "'", str2, "!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!\200}}`!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!!L\266!!L\266!!L\266!!]]!");
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!", "LL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LLLL!!LL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!" + "'", str2, "!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!!!~}}\200\200}}\200\200!~}}\200\200}}\200\200!");
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!\253\254\256\256\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!!", "\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn\220\220\216\216\220\220\216\216ppnnppnn!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!" + "'", str2, "\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!\253\254\256\256null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "\275NNN\275NNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348\u0196\u019e\u01a0\u01a0\u0348\u0348!", "!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!!!LLUULLUULLUULLUU!!!LLUULLUULLUULLUU!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "\u0366\u0365\u0368\u0368\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u019a\u028c\u0249\u0249\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266!" + "'", str2, "\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266\266!\266\266!");
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!", "U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!!U!LLU!LLU!LLU!LLU!LLU!LLU!LLU!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!" + "'", str2, "\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!!\276~!!\276~!!\276~!!\276~!!!!!");
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\275!!\275\275!!!", "!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!III!III!!!III!III!!!III!III!III!III!III!III!III!III!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275!!\275\275!!!" + "'", str2, "\275\275!!\275\275!!!");
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("NULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLLNULLLLL!", "ULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnullULLLnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300!" + "'", str2, "\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300\275\276\300\300\300\300\300!");
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u02cc\u02cc\u02cc\u02cc\u02cc\u02cc\u0346\u0348\u0348!", "null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!!null\236\276\276null\236\276\276!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!");
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275\220JJ\200}}`\275\220JJ]]!", "\253\254\256\256~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200\253\254\256\256~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200~}\200\200!ULL~}\200\200~}\200\200!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\220nullnull\200}}`\275\220nullnull]]!" + "'", str2, "\275\220nullnull\200}}`\275\220nullnull]]!");
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368lnulluulnulluulnulluulnulluulnulluulnulluulnulluulnulluu!!lnulluulnulluulnulluulnulluulnulluulnulluulnulluulnulluu!!\200\200\u0346\u0348\u0348!", "]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]]!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231}~\200\200}~\200\200LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231LLUULLUULLUULLUU\226\227\231\231\226\227\231\231\226\227\231\231\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!" + "'", str2, "\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212\u0308\u0308~\210\u0308\u0308\212\212\210\u0308\u0308\212\212!");
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("qrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnullqrttqrttnullnullnullnullnullnullnullnull!", "`!!\210\210UU\210\210UU!!\210\210UU\210\210UU!!\210\210UU\210\210UU`!!\210\210UU\210\210UU!!\210\210UU\210\210UU!!\210\210UU\210\210UU!");
        org.junit.Assert.assertEquals("'" + strstr2, "\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210\210UU\210\210UU\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!\210!!!!");
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!\340\340!!\340\340!!!!!", "nullnullnullnull\220nullnullnullnullnullnullnullnull\200}}`nullnullnullnull\220nullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!" + "'", str2, "nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!!");
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII!", "\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a\u0318\u031a\u031a\u031a!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226!!nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226nullnull\264\264\230\226\226!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200UL``LUL``UL``UL``LUL``UL``}~\200\200}~\200\200\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!!" + "'", str2, "\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226\200L~~\200L~~\264\264\230\226\226!!!");
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX!", "UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!" + "'", str2, "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!", "]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!]null}}]null}}!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!" + "'", str2, "!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!!!\253\253\253!\253\253\253!");
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!", "vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256vvxxvvxxvvxxvvxxvvxxvvxxvvxxvvxx\253\254\256\256\253\254\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!" + "'", str2, "\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220\216!\220\220!!!");
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225nullnullnullnullnullnullnullnull!", "nullnullnullnull!]nullnull!]nullnull!]nullnull!]nullnullnullnullnullnull!]nullnull!]nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUU\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUU!" + "'", str2, "\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUULNUU\230\230\225\225\230\230\225\225\230\230\225\225\230\230\225\225LNUULNUULNUULNUULNUULNUULNUULNUU!");
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215\u0348\u0346\u0346!", "\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!\200\200UU\200\200UU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215}~\200\200}~\200\200nullnull\215\215nullnullnull\215\215nullnull\215\215nullnull\215\215nullnullnull\215\215nullnull\215\215\u0348\u0346\u0346!");
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("XXXX\200}}`XXXX]]!", "!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!null\253\260\260null\253\260\260null\253\260\260null\253\260\260!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\200}}`nullnullnullnull]]!" + "'", str2, "nullnullnullnull\200}}`nullnullnullnull]]!");
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220null\213\220\220!", "\u0366\u0365\u0368\u0368\275\275\275\275\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220!" + "'", str2, "nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220nullnullnullnull\213\220\220!");
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!", "~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!" + "'", str2, "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!!!!!!!!]]!!!!!!!!]]!!!!!!!!\336~LL\336~LL!!!!!!!!\336~LL\336~LL!");
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254!", "\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!!^^^]]]!!^^!!^^!!^^^]]]!!^^!!^^\275\275!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!", "EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!!EEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EEEEEE!EE!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!" + "'", str2, "!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!~\223\223!~\223\223!!!~\223\223!~\223\223!!!~\223\223!~\223\223!");
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!UNNNUNNN!!UNNNUNNN!!!!UNNNUNNN!!UNNNUNNN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NLLLL]NNL]NNL]NNL]NNNLLLL]NNL]NN!", "\275\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\276\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\u0406\u0403\u0404\u0404\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406!" + "'", str2, "\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0404\u0406\u0406\u0406\u0404\u0404\u0404\u0404\u0406\u0406\u0404\u0406\u0406!");
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!", "`\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254```\254``!`\254```\254```\254```\254```\254```\254```\254```\254``!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!" + "'", str2, "\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!\230!\225\225\230!\225\225\250\250!!\250\250!!!");
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("tnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnull!tnullppnullnull!tnullppnullnull!tnullppnullnull!tnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnulltnullpptnullppnullnull!tnullppnullnull!tnullppnullnull!", "~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL~}\200\200~}\200\200LLUULLUULLLLUULLUULL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!" + "'", str2, "LLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUULLUUULLLLUUULLLUUULUUU!LLUUULLLUUULUUU!LLUUULLLUUULUUU!");
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!nullnullnullnullnullnullnullnull!", "\275\275\275\275\275\275\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0200\u0200\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u01fb\u01fc\u01fe\u01fe\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200\u0200!!!", "U\220LL\200}}`U\220LL]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\200}}`\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336\336\300\300\336\336\300\300\336\336\300\300\336\336]]!", "NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!NL!!NL!!\266NL!!NL!!NL!!NL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN\200}}`N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN]]!" + "'", str2, "N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN\200}}`N!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NNN!!NN!!NN!!NN]]!");
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!!\276\230\266\266~\230\230\276\230\266\266~\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!\201\201!!\201!!!" + "'", str
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!", "]nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]nullnull!!nullnull!!!!nullnull!!nullnull!!!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!" + "'", str2, "!!!\244\244\244!\244\244\244!\244\244\244!\244\244\244!!!");
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!!JJ!", "\215}\215\215\215}\215\215\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\u025d\u025e\u0260\u0260\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214\300\300\335\335\300\300\335\335\214\214!", "nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!}`}}}`}}}`}}nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214!" + "'", str2, "UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214UUNNUUNN\214\214!");
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}!\200\200}!\200\200}!\200\200}!\200\200\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215\230R\215\215}!\200\200}!\200\200}!\200\200}
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!" + "'", str2, "}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215}!\200\200}!\200\200}!\200\200}!\200\200\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215\230null\215\215!");
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u0295\u
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!" + "'", str2, "`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull`null!nullnullnullnullnullnull!nullnullnullnullnullnull!nullnullnullnullnull!");
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01de\u01de\u01de\u01de\u01dd\u01de\u01de\u01de\u01dd\u01de\u01de\u01de!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}\253\253\335\336\340\340\335\336\340\340\253\253\335\336\340\340\335\336\340\340}}!", "!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!L\230NNL\230NNL\230NN!!L\230NNL\230NN!!L\230NNL\230NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}!" + "'", str2, "\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull}}!");
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!", "UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUUUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUUUNLLUNLLUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!" + "'", str2, "`\253```\253\u035e\u035e`\253```\253\u035e\u035e!!!!`\253```\253\u035e\u035e`\253```\253\u035e\u035e!");
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!]]!!]]L!!!L!!!!!]]!!]]L!!!L!!!!", "``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230\200}}```MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!]]!!]]null!!!null!!!!!]]!!]]null!!!null!!!!" + "'", str2, "!!]]!!]]null!!!null!!!!!]]!!]]null!!!null!!!!");
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!LUNNLUNNLUNNLUNN\256\254\254LUNNLUNNLUNNLUNN\256\254\254!!!", "NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!!" + "'", str2, "NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!NNNNNNNNNNNNNNNN\256\254\254NNNNNNNNNNNNNNNN\256\254\254!!!");
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c~\200}}~\200}}~\200}}~\200\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c\u028e\u028c\u028c!", "NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!NLLLLLNNLLNN!!!!NLLLLLNNLLNN!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull!" + "'", str2, "~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull~\200}}~\200}}~\200}}~\200\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168\u016a\u0168\u0168nullnullnull!");
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254nullnullnullnullnullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254\256nullnullnullnull\254\254!", "JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!JLLL!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254\256LLLLLLLLLLLLLLLL\254\254!" + "'", str
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("klnnklnnklnnklnn\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!", "\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx\230!\225\225\230!\225\225xx!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\225!!\225\225!!\225\225!!\225\225!!\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!" + "'", str2, "\225\225!!\225\225!!\225\225!!\225\225!!\266\267\271\271\266\267\271\271\266\267\271\271\266\267\271\271!");
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull}}\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull\336nullnullnull}}!", "\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400\u0400!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull}}!");
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LLnull!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!", "\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170\u016d\u016e\u0170\u0170nullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8!" + "'", str2, "\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u0215\u0216\u0218\u0218\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8\u01f8!");
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214RRPPRRPPnullP\214\214nullP\214\214!", "\215}\215\215\215}\215\215~nullnullnull~nullnullnull~nullnullnull~nullnullnull\215}\215\215\215}\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214!" + "'", str2, "nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214nullnullnullnullnullnullnullnull\231\232\234\234null\214\214\231\232\234\234null\214\214!");
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368!nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271nullnull\266\267\271\271\266\267\271\271\u0346\u0348\u0348!", "nullnullnullnullnull\200}}null\200}}null\200}}null\200}}nullnullnullnullnull\200}}null\200}}!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271UN}}UN}}\266\267\271\271\266\267\271\271\u0346\u0348\u0348!");
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU\200}}`LUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUULUUU]]!", "\u0366\u0365\u0368\u0368nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!" + "'", str2, "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!");
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!", "\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120\u011e\u0120\u0120!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UUNNUUNN!!UUNNUUNN!!UUNNUUNNUUNNUUNN!!UUNNUUNN!!UUNNUUNN!", "\u0366\u0365\u0368\u0368\353!!!\353!!!\200\200\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!" + "'", str2, "nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!!nullnull\200\200nullnull\200\200!");
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("Y\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYYY\\YYYYYY\\YYYYYYY!", "\u0366\u0365\u0368\u0368\u014e\u014e!!\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnull!" + "'", str2, "null\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnullnull\\nullnullnullnullnullnull\\nullnullnullnullnullnullnull!");
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198nullnullnullnullnullnullnullnull!", "\275\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\276\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6!" + "'", str2, "XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6XXXXXXXXXXXXXXXX\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6\230\u02d6\u02d6!");
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!!!!!nullnull!", "QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~QTTTQTTT~~~~~QTTTQTTT~~~~~~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!" + "'", str2, "!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!!!!!Q~TTQ~TT!");
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204\204\204\204\204~\204\204!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260\225\225\230\230\225\225\230\230\255\256\260\260\255\256\260\260!" + "'", str
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!]]]!]]]!", "\253\254\256\256\253\254\256\256!!\253\254\256\256\253\254\256\256!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]]]!]]]!" + "'", str2, "!]]]!]]]!");
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!", "nullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnullnullnullnullnullnullnullnullnullnull\354nullnullnull\354nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!!!");
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!!UNLL\275\275\275UNLL\275\275\275!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!" + "'", str2, "LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!!LNLL\275\275\275LNLL\275\275\275!");
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!!U`UU~\210U`UU\212\212\210U`UU\212\212U`UU~\210U`UU\212\212\210U`UU\212\212!", "HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!HH!!~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!" + "'", str2, "H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!!H`HH~\210H`HH\212\212\210H`HH\212\212H`HH~\210H`HH\212\212\210H`HH\212\212!");
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N~LLN~LL!!N~LLN~LL!!N~LLN~LLN~LLN~LL!!N~LLN~LL!!N~LLN~LL!", "\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106\u0128\u0108\u0106\u0106!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnullnull~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnull!" + "'", str2, "null~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnullnull~nullnullnull~nullnull!!null~nullnullnull~nullnull!!null~nullnullnull~nullnull!");
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("NN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNNNN!!NN!!UNNNUNNN!", "L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!L\276\275\275LUNN!LUNNLUNNLUNNLUNNL\276\275\275LUNN!LUNNLUNNLUNNLUNN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLL!" + "'", str2, "LL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLLLL!!LL!!NLLLNLLL!");
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!", "\u0366\u0365\u0368\u0368!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!!!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL!ELL\204\204\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodeu02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02f7\200\200\u02fa\300\300\300\300\300\300\300\300\300\300\300\300\u02fa\300\300\300\300\300\300\300\300\300\300\300\300!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!UU!!UU!!!!!", "nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225!!!!!" + "'", str2, "\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225\u0225!!!!!");
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]N]^^N]^^N]^^N]^^N]^^N]^^N]^^N]^^!N]]!N]]!", "UPPP\200}}`UPPP]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]!" + "'", str2, "null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]null]^^null]^^null]^^null]^^null]^^null]^^null]^^null]^^!null]]!null]]!");
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!unllunll!!!", "NLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLNLLL\275NLLLNLLLnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!!" + "'", str2, "NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!NL\275\275NL\275\275!!!");
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!", "!!NN!!NN!!NN!!NN!!NN!!NN!!NN!!NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!" + "'", str2, "}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn}~\200\200}~\200\200!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!!!nn!!nn!!nn!");
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLLUNLLUNLLUNLLUNLL!", "nullUNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108\u0108!!!", "````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!!````````````````````````````````````````````````````````````````````````````````!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390\u0390!", "!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLLLLLLLLLLLLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!!LLLLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!" + "'", str2, "null]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnullnull]nullnullnull]nullnull!!null]nullnullnull]nullnull!!null]nullnullnull]nullnull!");
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!!\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull\204\204nullnull!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253null\256N\260\260nullnullnull\256N\260\260nullnull\253\253!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!", "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!" + "'", str2, "H\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HHH\271HHHH\271HHH\271HH!");
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!~~!" + "'", str2, "\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126\u0126!~~!");
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u013d\u013e\u0140\u0140\u013d\u013e\u0140\u0140nullnull!", "!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!!NLLLNLLL!!NLLLNLLL!!NLLLNLLL!!NLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!NLLLNLLLNLLL!!NLLLNLLL!!NLLLNLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullL!LLL!LLL!LLL!LLnullnullnullnullL!LLL!LL!" + "'", str2, "nullnullnullnullL!LLL!LLL!LLL!LLnullnullnullnullL!LLL!LL!");
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!!H!!HH!!H!!HH!!!", "UUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUU\256UUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUUUUUU^UUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!" + "'", str2, "null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!!null!!nullnull!!null!!nullnull!!!");
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!null!!!!nullnull\256\254\254null!!!!nullnull\256\254\254!!!", "!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333~}}^!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333!nullnull\333\333nullnull\333\333nullnull\333\333]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!!" + "'", str2, "LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!LNUU!!!!LNUULNUU\256\254\254LNUU!!!!LNUULNUU\256\254\254!!!");
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("`OROOOROOOROO`
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "`^]^^^]^^^]^^`^]^^^]^^^]^^!" + "'", str2, "`^]^^^]^^^]^^`^]^^^]^^^]^^!");
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!", "`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!`!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!" + "'", str2, "\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225\200\200\225\225!");
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!", "hgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjjhgjj!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!" + "'", str2, "\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b\u038b!");
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!\253\253!!!!!!!!!!!" + "'", str
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!!UU!", "\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\253\254\256\256\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!\336!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!" + "'", str2, "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!\300!!!!", "!!!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352\347\350\352\352!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!" + "'", str2, "null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!!");
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!!nullnullnullnullnullnullnullnullULLLULLLnullnullnullnullnullnullnullnullULLLULLL!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UNLLUNLL\253\253UNLLUNLL\253\253UNLLUNLL\253\253UNLLUNLL\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UNLLUNLL\253\253UNLLUNLL\253\253!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("lluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUUlluulluuLLUULLUU!", "~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL~}\200\200~}\200\200NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0nullnull!" + "'", str2, "\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0\u02c0\u02c0\u02c0\u02c0\u02a0\u02a0\u02a0\u02a0nullnull!");
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037enullnull!", "null~}}^null]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]nullll]nullll!" + "'", str2, "\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e\u037e]nullll]nullll!");
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!", "LUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUULUUULUUUUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!" + "'", str2, "\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!!\220\213\213\213\u0348\u0348\220\213\213\213\u0348\u0348!");
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368LL!!LL!!\200\200\u0346\u0348\u0348!", "\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7LL```!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u035d\u035d\u035d\u035d!!\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u035d\u035d\u035d\u035d!!\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnull\276\276nullnull\276\276\253\253nullnull\276\276nullnull\276\276\253\253!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253nullnullnullnullnullnullnullnull\253\253nullnullnullnullnullnullnullnull\253\253!");
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253UU]]UU]]\276\276UU]]UU]]\276\276\253\253!", "LLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!LLUULLUULLUULLUULLUULLUULLUULLUU!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253\u01c8\u01c8\u01c8\u01c8]]\276\276\u01c8\u01c8\u01c8\u01c8]]\276\276\253\253!");
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\255nullnull!\255nullnull!\255nullnull!\255nullnull!\255nullnull!", "\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr\276nullnullrr\275\275\276nullnullrr\275\275null!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rrnull!rr!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!" + "'", str2, "!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!\255RRLLRRLL!");
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!\220EEE\220EEE!!!", "nullnull]]nullnull]]LnullnullnullLnullnullnullnullnull]]nullnull]]LnullnullnullLnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!!" + "'", str2, "\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!\220NNN\220NNN!!!");
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\200}}`\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305\305]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264\264!", "LUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLLLUNNLUNNLL!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!", "!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!!!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!\254!!!\254!!\254\254~!\254!!!\254!!\254\254!\254!!!\254!!\254\254!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!" + "'", str2, "``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!``!!!");
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("ss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssssss!!ss!!ssssssss!", "LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!LNNN\256\254\254LNNN\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnullnullnull!!nullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL\230!\225\225\230!\225\225LL!", "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``!" + "'", str2, "\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``\230!\225\225\230!\225\225``!");
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\200\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0\u0348\u0348\u01e0\u01e0\u01e0]]!", "\260\260nullnull\260\260nullnull}}\260\260nullnull\260\260nullnull}}!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull]]!" + "'", str2, "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull\200\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348~~nullnullnull]]!");
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!", "\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!\340null\335\335\256\254\254\340null\335\335\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!" + "'", str2, "\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346!!!");
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!", "\u0366\u0365\u0368\u0368\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u019e\u019c\u019c\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN!" + "'", str2, "\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN\275\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019c\u019cNN!");
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U!LLU!LL!!U!LLU!LL!!U!LLU!LLU!LLU!LL!!U!LLU!LL!!U!LLU!LL!", "!!!!\300\300!!\300\300!!\300\300!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\300\300!!\300\300!!\300\300!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\275\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262\u0264\u0264\u0262\u0262!", "LNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNNLNUULNUUNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull\275nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200nullnull\200\200!nullnull\200\200nullnull\200\200!", "nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214nullnull\333null\330\330\333null\330\330nullnull\333null\330\330\333null\330\330\214\214!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02bb\u02bc\u02be\u02be\u02be\u02be\u02be\u02be!", "NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214NNNNNNNN\214\214!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\256nullnullnull\256nullnullnullnullnull\256nullnullnull\256nullnullnullnullnull!");
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~!" + "'", str2, "~~!");
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0128\u0128\u0128\u0128\u0346\u0348\u0348!", "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253RRTTRRTT\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253RRTTRRTT\253\253RRTTRRTT\253\253!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230\200}}```MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM``MM\225\230\230]]!", "\275\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\276\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\u0366\u02d6\u02d6\u02d6\u02d6\230\230\u02d6\u02d6\u02d6\u02d6\230\230\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230\200}}```UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230]]!" + "'", str2, "``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230\200}}```UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU``UU\225\230\230]]!");
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!" + "'", str2, "!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!!\256\211\211\200\200\254\254\256\211\211\200\200\254\254!");
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", "\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225\275\276\u031d\u031dLL\275\276\u031d\u031dLL\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" + "'", str2, "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!!!!!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!\230LLEELLEELLEE\230LLEELLEELLEE\230LLEELLEELLEE!", "]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!]]]]]]]]nullnull]]]]]]]]nullnull!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!" + "'", str2, "!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!!!!!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull\230\u014e\u014e\u014e\u014e\u014e\u014enullnull!");
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!", "!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!!!HHH!HHH!!!HHH!HHH!HHH!HHH!HHH!HHH!HHH!HHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!" + "'", str2, "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!!!]!!!!!!]!!!!!!");
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225nullnullnullnullnullnullnullnullnullbnullnullnullbnullnullnullnullnullnullnullnullnullnullnullbnullnullnullbnullnull\225\225!", "\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\200\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e\u0348\u0348\u016c\u016e\u016e\u016c\u016e\u016e\u016c\u016e\u016e]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225!" + "'", str2, "\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225\u016c\u016c\u016c\u016cL~NNL~NN\225\225!");
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + strstr2, "!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!!\275!!!\275!!!!\275!\275!!!\275!!!!!\275!!!\275!!!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!\276\275!!!");
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230~}\200\200~}\200\200LL~~}\200\200LL~~}\200\200\230\230LL~~}\200\200LL~~}\200\200\230\230!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a\u038a!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!U!!!U!!nullnullnullnullnullnullnullnull!", "]!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]]!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!!!\275\275\275!!]]!!\275\275\275!!!!\275\275\275!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!" + "'", str2, "!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!!!!!!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!");
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~\256\256!" + "'", str2, "!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``!`!!!`!!``\254~\256\256\254~\256\256\254~\256\256\254~\256\256!");
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnull!", "nullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBBnullnullBB!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!" + "'", str2, "\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!");
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368\u0170\u0170\u0346\u0348\u0348!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL```LL``LL``LL``LL!", "\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!\276!!!\276!!!!!\276!!!\276!!!!!\276!!!\276!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!!" + "'", str2, "``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!```!!``!!``!!``!!!");
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0\u01e0!", "L!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULLL!LULLLULL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e\u016e\u016e\200\u016e\u016e\200\u016e\u016e\u016e\u016e!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346llnullnull!" + "'", str2, "\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346\u0346llnullnull\200\u0346llnullnull\200\u0346\u0346llnullnull!");
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!!!!\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225\230null\225\225!", "null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```null\340\275\275!!!```!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!!!!\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!" + "'", str2, "\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!!!!\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225\230\u01f4\u01f5\u01f7\u01f7\225\225!");
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u017e\u017e\u017e\u017e\u017e\u017e\u017e\u017enullnullnullnull!", "\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019a\u019all!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023dU~~!" + "'", str2, "\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023d\u023dU~~!");
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0366\u0365\u0368\u0368LL!!\213\213\213\u0346\u0348\u0348!", "null]!]]]!]]]!]]null]!]]]!]]]!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368TT!!\213\213\213\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368TT!!\213\213\213\u0346\u0348\u0348!");
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\253\256\256\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271\266nullnull!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!", "!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!luu!luu!!!luu!luu!!!luu!luu!luu!luu!luu!luu!luu!luu!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!" + "'", str2, "!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271\266L!UUL!UU!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!xxxxxxxx!!!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL~}\200\200~}\200\200\336\336LL\336\336LL!", "\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU\276!UUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull!" + "'", str2, "~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull~}\200\200~}\200\200nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("}~\200\200}~\200\200!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335}~\200\200}~\200\200!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!\335\335\335!", "UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!``UNLLUNLL``UNLLUNLL``UNLLUNLLUNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!UNLLUNLL!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull}~\200\200}~\200\200!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!\216\216!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!", "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!" + "'", str2, "\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!\270\256\270\270\270\256\270\270!!!");
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u0346!", "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!" + "'", str2, "!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!!UNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLLUNLL!");
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!!LLUULLUULLUULLUULLUULLUULLUULLUU!", "\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151\u014f\u014d\u0151\u0151nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!" + "'", str2, "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e!");
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!", "UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!UU!!U!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!" + "'", str2, "^~~~^\220~~^\220~~^\220~~^\220~~^~~~^\220~~^\220~~!");
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!", "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullL\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullL\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!L\225!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!" + "'", str2, "!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!!!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!~\200\200!");
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d\u017d!!!", "\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull~}}^\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull\245\245nullnull]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!", "LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214LLLLLLLLnullL\214\214nullL\214\214!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!" + "'", str2, "!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!!!!!LL!!!!!LL!!!!LL!!LL!!!LL!!!!!LL!!!!LL!!LL!");
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("ULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLULLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL!", "\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320\u031d\u031e\u0320\u0320!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!" + "'", str2, "]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]!");
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200\200!", "!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!]\223\223]]\223\223]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200!" + "'", str2, "\200\200!");
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("wxzzwxzz!!wxzzwxzz!!wxzzwxzzwxzzwxzz!!wxzzwxzz!!wxzzwxzz!", "UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348\u0348\276\u0348\276\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0107\u0105\u0109\u0109\u0107\u0105\u0109\u0109!", "NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!!NLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnnNLLLNLLLnn!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!!!!!!!!]]!!!!!!!!]]!!!!!!!!nullnull!!!!!!!!nullnull!", "\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\200}}`\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312\314\312\312\312]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!" + "'", str2, "!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!]]!!!!!!!!]]!!!!!!!!\312\314\312\312\312\314\312\312!!!!!!!!\312\314\312\312\312\314\312\312!");
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\200\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230\u017d\u017d\u017d\u017d\260\255\255\225\230\230]]!", "nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]nullnullnullnull!]]]]]]]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230\200}}`!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230]]!" + "'", str2, "!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230\200}}`!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230!!!!\260\255\255\225\230\230]]!");
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!uunnuunnuunnnn!!nn!!nn!!nn!!nn!!nn!!nn!!nn!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215}~\200\200}~\200\200NN\215\215LNN\215\215NN\215\215NN\215\215LNN\215\215NN\215\215\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!!" + "'", str2, "\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!NN\200\200NN\200\200NN\200\200\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!\200\200!!!");
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!" + "'", str2, "!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!!\256nullnullnullnull\254\254\256nullnullnullnull\254\254!");
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336\276\276null\276\336\336null\276\336\336!", "]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!]AAAnullnullnull\256\254\254]AAAnullnullnull\256\254\254!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull!" + "'", str2, "\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull\276\276\u0198\u0199\u019b\u019b\276\u0198\u0199\u019b\u019b\276nullnull!");
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnulljjnullnulljj!!nullnulljjnullnulljj!!nullnulljjnullnulljjnullnulljjnullnulljj!!nullnulljjnullnulljj!!nullnulljjnullnulljj!", "\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!" + "'", str2, "\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!!\266null\271\271\266null\271\271nullnull\266null\271\271\266null\271\271nullnull!");
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]nullnullnullnullnullnullnullnullLN]]LN]]!", "!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]!" + "'", str2, "LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]LL!!LL!!LL!!LL!!LL!!LL!!LL!!LL!!L!]]L!]]!");
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225!", "\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8\u02d5\u02d6\u02d8\u02d8ULLLULLLULLLULLLULLLULLLULLLULLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225!" + "'", str2, "\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\275\276\u02d8\u02d8\u02d8\u02d8\u02d8\u02d8!UU\225\225!");
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!", "!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368!!]]!!]]\200\200\u0346\u0348\u0348!");
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220\200nullnullnullnull\220\220!", "nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!nullnull!!nullnullnull\256\254\254nullnull!!nullnullnull\256\254\254!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220!" + "'", str2, "\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220\200\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\u01f8\u01f9\u01fb\u01fb\220\220!");
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!!~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200~UUU~UUU~UUU~UUU~UUU~UUU~UUU~UUU\200\200\200\200\200\200\200\200!", "L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!L!NNL!NN!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!" + "'", str2, "~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!!~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200~LLL~LLL~LLL~LLL~LLL~LLL~LLL~LLL\200\200\200\200\200\200\200\200!");
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336~}\200\200~}\200\200nullnull\336\336nullnull\336\336!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull!" + "'", str2, "~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull~}\200\200~}\200\200null\200nullnullnull\200nullnullnullnullnull\200nullnullnull\200nullnullnullnull!");
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!", "\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128\275\200\u0128\u0128!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!" + "'", str2, "]!!!]!!!]!!!]!!!]!!!]!!!]!!!]!!!!");
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!\254nullnull!\254nullnull!!!!!!!!!", "LLLLLLLLLLLLLLLLLLLLLLLLLLLL\200}}`LLLLLLLLLLLLLLLLLLLLLLLLLLLL]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!" + "'", str2, "!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!\254LLLLLLLL!\254LLLLLLLL!!!!!!!!!");
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\335LLL\335nullLL\335nullLL\335nullLL\335nullLL\335LLL\335nullLL\335nullLL!", "^^^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^^^^^]nullnullnullnullnullnullnullnullnullnull^^]nullnullnullnullnullnullnullnullnullnull^^!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148!" + "'", str2, "\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0148\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148\u0165\u0166\u0168\u0168\u0148\u0148!");
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245!" + "'", str2, "\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245\250\245\246\246\250\245\246\246\245\245!");
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("XX!!XX!!XX!!XX!!XX!!XX!!XX!!XX!!!", "ULLL!LLL!LLL!LLL!LLLULLL!LLL!LLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!" + "'", str2, "nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!");
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!", "\u0346\u0348\u0348\u0348}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214rrrrrrrr}~\200\200}~\200\200rrrr\214rrrrrrrrrrrr\214\u0348\u0346\u0346!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200\200!!\200\200!!\200\200!!\200\200!!!");
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0\u02ed\u02ee\u02f0\u02f0!", "null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!!null~\210null\212\212\210null\212\212null~\210null\212\212\210null\212\212!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0!" + "'", str2, "\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210LL\210\210\u02ed\u02f0\u02f0\u02ed\u02f0\u02f0!");
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!!!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!null!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!!!!!!!!!null!!!null!!!", "\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126\u0127\u0126``]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!" + "'", str2, "!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!nullnullnullnull!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!!!!!!!!!nullnullnullnull!!!nullnullnullnull!!!");
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244\u0244!!!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM^```^```^```^```^```^```^```^```^```^```MMMMMMMM^```^```MMMMMMMM!", "\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!\275\275\275\275\275\275\275\275!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull!" + "'", str2, "^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull^```^```^```^```^```^```^```^```^```^```nullnullnullnullnullnullnullnull^```^```nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128\u0128nullnullnull!", "!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!!nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUU!" + "'", str2, "LNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUULNUULNUUUULNUULNUULNUU!");
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e\u019b\u019c\u019e\u019e!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!", "\240\240\236\236]]]\240\240\236\236]]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0346\u0348\u0348!");
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!\216\254\254\u02be!!\216\254\254\u02be\u02be\u02be\u02be\u02be\u02be\u02be\u02be!!!", "rrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPPrrpprrppRRPPRRPP!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!" + "'", str2, "!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!\216\254\254!null!!\216\254\254!null!!!null!!!null!!!null!!!null!!!null!!!null!!!null!!!");
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\336\335\340\340\336\335\340\340!", "\275``nullnull!!nullnull!!``nullnull!!nullnull!!``nullnull!!nullnull!!\276``nullnull!!nullnull!!\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!" + "'", str2, "nullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043b\u043c\u043e\u043b\u043bnullnull!", "]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]LNLLLNLL]]LNLLLNLL]]]LNLLLNLLLNLLLNLLLNLL]]LNLLLNLL]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!" + "'", str2, "\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!!\262null\264\264nullnullnullnull\262null\264\264\262null\264\264\262null\264\264nullnullnullnull\262null\264\264\262null\264\264!");
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!\200}}`!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!!U!!]]!", "\u0346\u0348\u0348\u0348\u037e\u037e\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\200}}`!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!]]!" + "'", str2, "!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!\200}}`!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!!^!!]]!");
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226!!null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226null\230\226\226!!!", "}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338}~\200\200}~\200\200\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338\u0335\u0336\u0338\u0338!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226!!!" + "'", str2, "\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226\u01b5\u01b6\u01b8\u01b8\230\226\226!!!");
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225^```^```^```^```^```^```^```^```^```^```U\331\225\225U\331\225\225^```^```U\331\225\225U\331\225\225!", "UULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLLUULLUULLLL!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225!" + "'", str2, "\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225\u017cnull\225\225!");
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\275NULLNULLNULL\276NULL\275\275!", "ppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnnppnn!ppnnppnnppnnppnnppnnppnnppnnppnn!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\u01c8\u01c8\u01c8nullnullnull\276\u01c8nullnullnull\275\275!" + "'", str2, "\275\u01c8\u01c8\u01c8nullnullnull\276\u01c8nullnullnull\275\275!");
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260\u0260nullnull!!!", "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!!!");
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!", "!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!NNLLNNLLNNLLNNLL!!!NNLLNNLLNNLLNNLL!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!" + "'", str2, "\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253\260\256\253\253\260\256\253\253\260\256\253\253\260\256\253\253`]```]``!!`]```]``!!\253\253`]```]``!!`]```]``!!\253\253!");
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nulluuu\225\230nullnull!!nulluuu\225\230nullnull!!!", "!\253\256\256\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271\266!!!!\271\271!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!\253\256\256!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!!" + "'", str2, "\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!\271\271!!\271\271\271\225\230\271\271!!\271\271!!!!!");
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u023e\u023e\u023e\200\u023e\u023e\u023e]]!", "null!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LLUUnullnullnull\200}}`LLUUnullnullnull]]!" + "'", str2, "LLUUnullnullnull\200}}`LLUUnullnullnull]]!");
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("", "LLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!!LLL!!LLLLL!!LLLLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!!LLL!!LLLLL!!LL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!", "}L\200\200}L\200\200}L\200\200}L\200\200LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL}L\200\200}L\200\200}L\200\200}L\200\200LNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!" + "'", str2, "\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276\300\300\276\276~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!~\225!!!");
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226!!nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226nullnull!!\230\226\226!!!", "FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!!FFHHFFHHFFHHFFHHFFHHFFHHFFHHFFHH!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!!" + "'", str2, "nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226nullnullnullnullnullnullnullnull!!\230\226\226!!!");
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248\u0245\u0246\u0248\u0248!", "\246\250\250\250\246\250\250\250!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!" + "'", str2, "!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!!!nullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!!L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^L]^^!", "\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014eLL!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226!!LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226LLLL\230\226\226!!!", "\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u0317\u0318\u031a\u031a\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e\u010b\u010c\u010e\u010e!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226!!!" + "'", str2, "\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226\u031a\u031a\u031a\u031a\230\226\226!!!");
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!", "U!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLLU!VVU!VVLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!" + "'", str2, "!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~!U~~~~!U~~!U~~~~!");
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336\335\300\336\336!", "UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnull!" + "'", str2, "nulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnullnulllnullnull!");
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275LLL\275LLL!", "!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!!!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!!]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275]]]\275]]]!" + "'", str2, "\275]]]\275]]]!");
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull\276\276nullnullnullnull\276nullnullnullnullnullnull\276nullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!", "null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!!null!\272\272null!\272\272!\272\272\272!\272\272\272null!\272\272null!\272\272!\272\272\272!\272\272\272!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!" + "'", str2, "````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````!");
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\200\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7\u03a7]]!", "");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!" + "'", str2, "!nullnullnull!nullnullnull!nullnullnull!nullnullnull\200}}`!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!");
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\335\300\300\300\335\300\300\300\335\300\300\300\335\300\300\300\200}}`\335\300\300\300\335\300\300\300\335\300\300\300\335\300\300\300]]!", "\u01d4\u01d4\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\220\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220\u01d4\u01d4\u01d4\u01d4\220\220!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!" + "'", str2, "nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull\200}}`nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull]]!");
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!", "NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230\200}}`NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230NLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLLNLLL\225\230\230]]!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!" + "'", str2, "\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220\200\276\256\266\266\220\220!");
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226UNLL\230\226\226!!!", "N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!!N!NNN!NNN!NNN!NNN!NNN!NNN!NNN!NN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!!" + "'", str2, "N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226N!NN\230\226\226!!!");
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0248\u0246\u0246\u0246\u0348\u0346\u0346!", "!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!\253!!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("", "\u0366\u0365\u0368\u0368\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0101\u0102\u0104\u0104\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!!UUUU\236\276\276UUUU\236\276\276!", "!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!!!~\200FFFF~~\200FFFF~~!~\200FFFF~~\200FFFF~~!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!" + "'", str2, "nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!!nullnullnullnull\236\276\276nullnullnullnull\236\276\276!");
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u014e\u014e\u014e\u014e\u014e\u014e\u014e\u014e}}!", "!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!nullnullnullnullnullnullnullnull\275null!!\275null!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "LL!!LL!!}}LL!!LL!!}}!" + "'", str2, "LL!!LL!!}}LL!!LL!!}}!");
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u0366\u0365\u0368\u0368\u0346\u0348\u0348!", "UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!" + "'", str2, "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214ijllijllijllijllijllijllijllijll\214\214!", "Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226Lnullnullnull\230\226\226!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214!" + "'", str2, "\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\u015f\214\214!");
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!" + "'", str2, "!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!\216\254\254!\273!!\216\254\254!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!\273!!!");
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!", "\u0366\u0365\u0368\u0368UNLL\213\213\213\u0346\u0348\u0348!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!" + "'", str2, "\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!!\200~\200\200\200~\200\200!");
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("f]fff]ff!!f]fff]ff!!f]fff]fff]fff]ff!!f]fff]ff!!f]fff]ff!", "\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!!\215\215\215\215\215\215\215\215!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!" + "'", str2, "!]!!!]!!!!!]!!!]!!!!!]!!!]!!!]!!!]!!!!!]!!!]!!!!!]!!!]!!!");
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!]null!!\254\253\256\256\254\253\256\256\254\253\256\256]null!!\254\253\256\256\254\253\256\256\254\253\256\256!!!", "\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120\u0120!nullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403\u0403!", "}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull}~\200\200}~\200\200\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010b\u010c\u010bnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!" + "'", str2, "null!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!nullnullnull!");
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```UNLLUNLLUNLLUNLL```!", "URRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRRURRR!LLRRLLRR!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```!" + "'", str2, "RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```RURRRURRRURRRURR```!");
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180\u017e\u0180\u0180\u0180!", "null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!null}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnullnull}nullnull!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!" + "'", str2, "!UUU!UUU!UUU!UUU!UUU!UUU!UUU!UUU!");
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!~n!nnn!nn!!!", "!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!nullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnullnull!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!" + "'", str2, "!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!~N!NNN!NN!!!");
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220\200null!nullnull\220\220!", "\u0366\u0365\u0368\u0368\u0346\u0348\u0348!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220!" + "'", str2, "\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220\200nullhnullnull!nullhnullnullnullhnullnull\220\220!");
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decodenullnullnull!nullnullnull!nullnullnull!nullnullnull~}}^!nullnullnull!nullnullnull!nullnullnull!nullnullnull]]!");
        org.junit.Assert.assertEquals("'" + strstr
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("LLLLLLLL!", "\275\276null\225\225\276null\225\225\200\200\276null\225\225\276null\225\225\200\200\276null\225\225\276null\225\225\200\200\276\276null\225\225\276null\225\225\200\200\275\275!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~~~~~~~~!" + "'", str2, "~~~~~~~~!");
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0\u0317\u031a\u03de\u03dd\u03e0\u03e0\u03de\u03dd\u03e0\u03e0!", "~~\200\200!~~\200\200~~\200\200~~\200\200!~~\200\200~~\200\200!!~~\200\200!~~\200\200~~\200\200~~\200\200!~~\200\200~~\200\200!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!" + "'", str2, "\u0317\u031a\u0317\u031a\u0317\u031a\u0317\u031anullnullnullnullnullnullnullnull!");
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!nullnullllnullnullll!!!", "\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d\u013a\u013b\u013d\u013d]!]]]!]]]!]]!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d!!!" + "'", str2, "\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d\u013b\u0139\u013d\u013d\u013b\u0139\u013d\u013d\u013d\u013d!!!");
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("null\340\336\336nullnullnullnull\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336nullnullnullnull\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336null\340\336\336!", "\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198\u0195\u0196\u0198\u0198nullnullnullnullnullnullnullnull!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "UNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluu!" + "'", str2, "UNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLUNLLUNLLUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluuUNLLluu!");
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("U!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UUU!\275\275U!\275\275UU!", "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "L!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LL!" + "'", str2, "L!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LLL!\275\275L!\275\275LL!");
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\u01ac\u01ac\u01ac\u01ac\u01ac\u01ac^^!", "~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````~}\200\200~}\200\200````````````````````!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!" + "'", str2, "^^^^]null^^]null^^]null^^]null^^^^^^]null^^]null^^!");
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!!!!!\230nullnullnull\230nullnullnull\230nullnullnull!\230nullnullnull\230nullnullnull\230nullnullnull!", "LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!LLUULLUU!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!" + "'", str2, "!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!!!!!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!\230LUUULUUULUUU\230LUUULUUULUUU\230LUUULUUULUUU!");
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!!LL!!LL!!LL!!LL\256\254\254!!LL!!LL!!LL!!LL\256\254\254!!!", "NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!NLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNNNLNN!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!" + "'", str2, "!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!!NN!!NN!!NN!!NN\256\254\254!!NN!!NN!!NN!!NN\256\254\254!!!");
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("\275\275\275\275\275\275\275\275!", "!!!ULLLULLLULLLULLLULLLULLLULLLULLL!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\275\275\275\275\275\275\275\275!" + "'", str2, "\275\275\275\275\275\275\275\275!");
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225U~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!", "RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR!!!!!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!" + "'", str2, "null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225null~\225\225\230\230\225\225\230\230\225\225\230\230\225\225!");
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("nullsvv!!!nullsvv!!!!", "\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225\275\276``MM``MM``MM``MM``MM``MM``MM``MM\275\276``MM``MM``MM``MM``MM``MM``MM``MM\225\225!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "``MMM``!!!``MMM``!!!!" + "'", str2, "``MMM``!!!``MMM``!!!!");
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL~}\200\200~}\200\200NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULLNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNULLNULL!", "LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!!LLNNLLNNLLNNLLNNLLNNLLNNLLNNLLNN!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN!" + "'", str2, "~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN~}\200\200~}\200\200LLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLNNLLNN!");
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```LNNNLNNNLNNNLNNN!!!```!", "\u0256\u0256!!!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189!!!!!!```!" + "'", str2, "\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189\u0189!!!!!!```!");
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\u0348\u0346\u
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("EHHH\200}}`EHHH]]!", "U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!U\220!!\200~~U\220!!\200~~U\220!!U\220!!!");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\200UUU\200}}`\200UUU]]!" + "'", str2, "\200UUU\200}}`\200UUU]]!");
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.decode("\u0346\u0348\u0348\u0348\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\377\u0100\u0102\u0102\u0348\u0346\u0346!", "\275\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276U\225\225\276U\225\225\200\200\276\276U\225\225\276U\225\225\200\200\275\275!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!" + "'", str2, "\u0346\u0348\u0348\u0348\u0348\u0346\u0346!");
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        java.lang.String str2 = com.thealgorithms.ciphers.SimpleSubstitutionCipher.encode("}~\200\200}~\200\200\u0170\u0170\u0170\u0170\u0170\u0170nullnullnull}~\200\200}~\200\200\u0170\u0170\u0170\u0170\u0170\u0170nullnullnull!", "\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\275\276L!UU!L!UUL!UUL!UU!L!UUL!UU\225\225!");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL!" + "'", str2, "}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL}~\200\200}~\200\200UULLLULLLULLL^UULLLULLLULLLUULLLULLLULLLUULLLULLLULLL^UULLLULLLULLLUULLLULLLULLL!");
    }
}

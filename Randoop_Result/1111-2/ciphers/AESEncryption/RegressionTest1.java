package ciphers.AESEncryption;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[105, -109, -39, -126, -64, 74, 81, 41, -60, 30, 16, 38, 116, -109, -23, -90]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-115, 55, 38, 6, -65, -1, 86, -94, 75, -55, 121, 111, -127, 23, 124, -61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[13, 39, -40, -105, 11, -118, 9, -115, 6, 113, 125, 51, -89, -6, -10, -63]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[105, -109, -39, -126, -64, 74, 81, 41, -60, 30, 16, 38, 116, -109, -23, -90]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-54, -114, -122, -27, 2, -44, -116, 55, 118, 109, -8, 11, -108, 18, -71, -39, 66, -105, 29, 83, -36, 40, -91, -11, 20, -77, -95, -16, 64, 37, 80, -100, 0, -68, -78, -26, -112, 52, -73, -50, 23, -69, 74, -24, 52, -58, -50, 31, -10, -118, 56, -106, 115, -43, -114, -84, -32, 25, 30, 119, -19, -3, 126, 102, 43, 110, 125, 98, 52, 61, -106, 36, 8, 14, -90, 78, -31, 68, 51, 126, -48, 97, -110, 86, 32, 67, -105, -76, 18, -2, -9, 0, -118, -18, 100, 33, 105, -109, -39, -126, -64, 74, 81, 41, -60, 30, 16, 38, 116, -109, -23, -90]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[96, -5, 92, 2, 82, 113, -29, 33, 58, -6, 68, -10, -112, -84, 31, 54, 113, 104, 127, 118, 94, 0, -86, -91, -64, 121, 73, -21, 96, -59, 105, 28, -62, 39, -18, -73, 87, 101, -54, -74, -7, 81, 30, -44, -83, 34, 76, -46, -69, 9, -106, 98, -56, -88, 31, 12, -7, -86, -5, 44, -114, -10, -98, 14, -98, 117, -93, 124, 88, -78, -125, -91, -128, -61, -90, -108, -42, 67, -38, -74, 42, 25, -55, 52, -3, -15, 15, 42, 99, 57, 90, 51, -56, -36, 42, 91, 105, -109, -39, -126, -64, 74, 81, 41, -60, 30, 16, 38, 116, -109, -23, -90]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-24, 40, 94, 119, 26, -91, 91, -23, -54, 77, -5, -58, 48, 35, 100, -57, 104, 8, -123, -39, 7, 24, 113, -56, -2, -115, -104, -60, 43, 46, -52, -30, 107, 14, 22, -53, -68, -94, -57, 118, 92, -7, -118, -6, 51, -18, -23, -83, 49, 81, 17, -68, 57, 43, -74, 75, 73, -7, 71, 111, 85, 87, -126, -112, -76, 127, -41, -81, 66, -84, 101, -42, -16, -62, 2, -20, 25, -104, -82, 84, 43, 67, 0, 67, -54, 16, 80, 30, -9, -106, -47, -12, 30, -68, 97, -110, 105, -109, -39, -126, -64, 74, 81, 41, -60, 30, 16, 38, 116, -109, -23, -90]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "E8285E771AA55BE9CA4DFBC6302364C7680885D9071871C8FE8D98C42B2ECCE26B0E16CBBCA2C7765CF98AFA33EEE9AD315111BC392BB64B49F9476F55578290B47FD7AF42AC65D6F0C202EC1998AE542B430043CA10501EF796D1F41EBC61926993D982C04A5129C41E10267493E9A6" + "'", str15, "E8285E771AA55BE9CA4DFBC6302364C7680885D9071871C8FE8D98C42B2ECCE26B0E16CBBCA2C7765CF98AFA33EEE9AD315111BC392BB64B49F9476F55578290B47FD7AF42AC65D6F0C202EC1998AE542B430043CA10501EF796D1F41EBC61926993D982C04A5129C41E10267493E9A6");
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-86, -18, -31, -11, 116, -59, 77, -123, -84, 109, 115, 101, -107, 126, -35, 6]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[0, -119, -18, -37, 32, 44, -65, -53, 54, 15, 52, -103, -100, -126, -99, -34]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[0, -119, -18, -37, 32, 44, -65, -53, 54, 15, 52, -103, -100, -126, -99, -34]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey21);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
        java.lang.Class<?> wildcardClass29 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-80, -44, 92, -35, 106, 110, -57, -73, 23, 82, 97, -106, 8, -119, 34, 99]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[15, 59, -13, -98, 13, -19, 0, 126, 28, 2, 112, -107, -70, 62, 104, -82]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[103, -122, -102, -92, -80, 59, -87, -3, -3, 8, -19, -98, 48, 11, -99, -82]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[80, 51, 63, -106, 90, -74, 97, -7, 126, -77, -39, -46, -7, 102, -9, 65]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[57, -60, 103, -52, -35, 123, -92, 104, 16, -83, -116, -73, 112, 29, -112, 124, 62, 16, -109, 15, -28, 66, -13, -48, 66, 79, -104, -27, -4, -57, -89, 46, 92, 87, 46, 102, -128, -96, -107, -32, -24, 93, 15, -76, 92, -76, 34, 29, 122, -52, 120, -105, 57, -36, -54, 126, -30, 33, -92, -1, -106, -33, -41, 112, -26, -70, -90, -14, -111, 28, 127, -119, 76, -43, 86, -42, -88, 47, 118, 5, 21, -126, -29, -89, 88, 70, -109, -45, 114, 104, -50, 34, -32, 18, 46, 74, 103, -122, -102, -92, -80, 59, -87, -3, -3, 8, -19, -98, 48, 11, -99, -82]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[14, -42, -49, 18, -37, 119, 64, -82, -14, 49, -31, 34, -9, 67, -78, -14, -75, -86, 9, -6, 23, -110, 70, 37, 98, -107, 80, -98, -69, 61, -14, 99, 126, 61, 60, -35, -73, -3, -19, -61, -110, -97, -120, -101, -77, -70, -39, -38, 34, -83, 6, -66, 34, -17, 0, -74, 48, -55, -40, 112, -28, 24, 114, -109, 118, -48, -88, -10, -95, -108, -13, -56, -31, 15, 81, -106, -55, 111, 126, -103, 68, 1, -48, 31, -45, 70, 63, 125, 90, 101, 121, -117, 110, -12, -105, -60, 103, -122, -102, -92, -80, 59, -87, -3, -3, 8, -19, -98, 48, 11, -99, -82]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F71210B7E2A15D14FC479D177EDC91BACE1B490C25A022F3EDCB69AB0A719D274C8DFB92A67A7A3BFB6D9B33A61940A", secretKey21);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[94, -12, -30, 88, 103, 77, -125, 52, -88, -68, 53, -102, 93, -112, 25, -65]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[58, -80, 27, -77, 85, 13, 124, 64, 18, 8, -125, -121, 66, 76, 43, -2]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[54, 5, -93, -25, 100, -52, 0, 98, 121, 102, 65, -38, -35, -56, 34, 89]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[120, 99, 75, -26, -39, 26, 106, -60, -104, 14, -45, 100, 59, -114, 55, -25, 38, -11, 29, 119, 81, 32, 63, 5, -111, -23, 67, 98, 42, -6, -9, -48, 64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-78, -5, -57, 62, -98, 63, -116, -89, 7, -41, -119, -55, -30, -51, 122, -24, 91, 65, 101, 10, 54, 123, -92, -13, -105, 72, 63, -80, 1, -69, -102, 99, 64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[11, -70, 65, 74, 21, 106, -92, -118, -117, -94, 16, -40, 84, -78, 77, -122, -101, -9, -79, -98, -125, -38, -13, -106, -124, 113, 68, -23, -97, 37, 1, -98, 64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-63, 114, 113, -27, -58, -109, 6, 54, 37, 55, 64, 30, -6, 34, 30, 66, 83, 12, 31, 5, 9, 37, -99, -95, -28, 6, -17, -30, 107, 83, 95, 44, 64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-88, 9, 113, -19, 21, -32, 53, 7, 75, -22, 2, 14, 83, -11, 101, -21, -33, 51, -119, 2, 110, -107, -105, 68, -8, 55, -102, -108, -77, 99, -50, 26, 86, 110, -77, -83, 32, 87, -45, -41, -65, 85, 99, 29, 103, 28, -66, -107, 91, -77, 54, 71, -126, -124, -7, -105, 59, -50, 111, 40, -58, -127, -15, 119, -125, 52, -22, 96, 44, -90, -112, 87, 15, 117, -52, -24, -127, -73, 31, -62, 10, 95, 13, -89, -93, 43, 31, 64, -6, 92, -23, 122, 96, 100, 7, -119, 64, -42, 84, -97, 6, -25, -106, -37, 32, 93, 4, 113, 79, 2, 57, 95]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("F93FD573E44C5EEFEE4BE8F0ED9A177F88AA88DCA97E8DF401B7E7236C351A7B4E9CA4DC6AF3BD2DD16B6DA5BF730BE2E653C2FA0039393E992EA6BC14BC905BB90407E56B32C8E521F3E912C5D8D2607EA52D46D2D5815D65250B4D8F07320A1528D6FC63507BBA30E55751734D9CBD", secretKey3);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey23);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[56, 12, -124, -14, -78, -101, -23, 117, -63, 108, 2, 116, -82, -81, -17, -39]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-128, -13, 23, 33, -127, 103, -1, 53, 24, 61, -40, -14, -84, 64, -69, 34, -107, -99, -73, -54, -29, 16, 70, 6, 22, 33, 117, 30, -3, 92, -109, -22, 108, -2, 24, -26, -114, -52, 56, -67, 11, -110, -98, -48, 26, -112, -123, 20]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-59, -101, -24, 123, 49, -68, -19, 88, 115, 106, -47, -78, -27, 36, -36, -62]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[66, -122, 44, -4, 94, -47, 113, -66, -63, 33, 68, 84, 39, -78, 46, 13]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-101, 58, 39, 58, 22, -24, -97, -24, -30, 14, 37, -47, -5, -76, -52, 81]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[81, -30, 94, 104, 37, -121, 105, 91, 42, -28, -99, -96, 87, 19, -46, 45]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey21);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey67);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey80);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey80);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey80);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey80);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[71, 76, 41, -36, -15, -22, -82, 19, 104, -40, -14, -31, 77, 116, -8, -37]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-91, 38, -63, 78, 51, 84, 115, -95, -110, 51, 3, -114, 84, 17, -46, 71]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[24, -44, 86, 76, -104, -61, 63, 28, 116, -9, -95, -118, 62, 33, -35, 95]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-4, -56, 67, -36, 117, -60, -102, 95, -8, -15, 86, 115, 118, -122, -7, 124]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-59, -12, -9, 4, -123, -6, 64, 75, -29, -75, -9, 90, -83, 14, 79, 1, -70, -56, -49, -24, -27, -31, 21, 45, -25, 120, 104, 85, -26, 86, -89, -117, -115, -67, 56, -122, -16, -49, -62, 84, -24, -10, -10, 96, 89, 62, -54, 47, 126, 109, -117, 21, 126, -32, -70, 16, -52, -102, -83, 87, -10, 105, 31, 39, -112, -22, -10, -106, -83, -13, 13, -11, 59, -73, 69, -56, 94, 75, -64, 56, 8, -57, -55, -65, 23, -44, 3, -121, 85, 10, 87, 37, 104, -79, 55, 28, 24, -44, 86, 76, -104, -61, 63, 28, 116, -9, -95, -118, 62, 33, -35, 95]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[98, -95, -39, 24, -43, -14, -30, -49, 47, -128, 78, -77, 109, -62, -77, 65, -47, 84, -33, -116, -99, -47, -75, -98, -114, -51, 99, 47, 40, -92, 94, 13, 78, -11, 41, -64, 31, -44, -85, 45, 64, 41, -44, 55, 46, 19, 36, 68, 117, 100, -88, -24, -100, 103, -95, -95, -23, -75, -123, 33, 116, 110, 102, -36, 89, -14, 104, 81, -46, 42, 50, 46, 2, 67, -32, 64, 113, -127, -76, 35, 15, 44, 74, 84, -15, -48, 81, -100, -21, -47, 69, 9, -35, 55, -66, 78, 24, -44, 86, 76, -104, -61, 63, 28, 116, -9, -95, -118, 62, 33, -35, 95]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[94, -124, -41, -31, 29, 66, -119, 103, 18, -124, -38, -60, 116, -74, -96, 80]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[14, -99, -51, -39, -29, -47, 13, 111, -95, -90, -109, 123, -12, 108, -31, 89]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-24, -120, -29, 124, -107, 86, 114, 82, -38, 27, 107, 87, 2, 62, 76, -45]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[58, 102, -28, -123, -100, -54, 65, -43, 124, -31, 109, 47, -76, -80, -42, -72]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-108, -41, 19, 18, 68, 2, -93, 122, 20, 76, -115, 107, 43, -65, -22, 77]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[0, -100, -38, 65, -113, -84, -58, -56, -38, -15, -62, 68, -30, 103, -113, -44]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[57, 2, -30, -128, -94, -62, 102, 120, 52, -59, -115, -96, 97, -102, 60, -98]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-28, -28, 8, -3, 13, -102, 85, -58, 33, 122, -19, -25, 125, 100, -111, 104]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[93, 93, 42, 66, 118, -34, -32, -122, 19, -17, 17, 23, -75, -1, -83, 14, 64, -33, -12, -99, -100, 111, 79, -89, 41, 86, 49, 45, -77, -32, -81, 38, 57, 2, -30, -128, -94, -62, 102, 120, 52, -59, -115, -96, 97, -102, 60, -98]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-67, 89, 23, -17, -57, 18, -100, 119, 90, 78, -31, -81, -48, 65, -80, -36]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[81, 98, -70, 38, 16, -90, 24, -8, 71, -127, 78, 19, -111, 53, 52, 115]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[81, 98, -70, 38, 16, -90, 24, -8, 71, -127, 78, 19, -111, 53, 52, 115]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-127, 34, -127, 45, -103, 90, 42, 29, 57, -29, 9, -119, 33, 36, 59, -48]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("ECA77B74C3718EB8A1CFDE4EF6716955", secretKey8);
        java.lang.Class<?> wildcardClass15 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[41, -78, 15, -48, -106, 30, -21, 54, -59, -6, -44, -95, -83, -8, 62, 9]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[11, -94, 86, -51, -74, 91, -23, -55, 72, -46, -37, 23, 45, 84, -71, 44]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[11, -94, 86, -51, -74, 91, -23, -55, 72, -46, -37, 23, 45, 84, -71, 44]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[33, 5, 23, -26, 58, 21, 50, 13, -21, -21, 40, -36, 15, 52, -65, -113, -38, -85, -122, -6, -9, 14, 38, 53, 114, 94, 9, -22, -113, 22, 56, -113, 8, 9, -53, 56, -12, 81, 76, 43, -27, -32, 58, -118, -91, -84, 99, -65, -5, -113, -13, 59, -9, -24, -19, 62, -126, -12, 36, -57, -45, -93, 92, 2, 115, 4, 8, -49, -84, 74, 85, 55, -14, -101, -117, 93, -79, 110, 56, 11, -100, -18, -65, -115, -50, 77, -29, -58, 39, 83, 85, -16, -55, 48, 92, -108, 41, -78, 15, -48, -106, 30, -21, 54, -59, -6, -44, -95, -83, -8, 62, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-78, -13, 20, -55, -40, 49, -12, 96, 16, 55, -38, -61, 123, 121, -74, -5, 10, 114, -57, 2, -106, 66, -84, -110, 49, -101, 79, -43, -60, 77, -44, 92, 41, -78, 15, -48, -106, 30, -21, 54, -59, -6, -44, -95, -83, -8, 62, 9]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey48);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey48);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray60 = new byte[] {};
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray60);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey62);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey66);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey66);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey66);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray60, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey76);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey76);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey76);
        java.lang.Class<?> wildcardClass85 = secretKey76.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-107, 109, 38, -83, 101, -122, 122, -68, -8, 24, -73, 98, 50, 28, 18, 37]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, -19, -90, -40, 35, 48, 94, -87, -36, 56, 5, 35, -65, -110, -106, -89]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[5, 59, 102, -60, 83, -34, 126, -26, 63, -41, 7, -75, -2, -47, -67, -13]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-57, -83, 47, -45, -2, 80, -69, 8, -27, 122, -84, -2, -80, -38, 47, -24]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[52, -80, -10, 11, -11, 89, 91, 35, 28, -107, 95, -99, -116, 6, -96, -83]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-86, 104, -8, 77, -119, 97, -54, 14, 74, 80, -116, 74, 100, -38, -63, -125]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-86, 104, -8, 77, -119, 97, -54, 14, 74, 80, -116, 74, 100, -38, -63, -125]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-33, 24, 19, -127, 96, -10, 32, -123, -51, -17, -100, -102, -113, -102, -34, 21]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[107, 0, 67, -71, 87, 62, -93, -48, 75, -95, 43, -116, 28, -29, 38, 24]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[30, 19, -10, -109, 68, -34, -24, 72, 81, 85, 60, -90, -24, -28, -75, -56]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[48, 39, 81, -31, 81, -17, 69, 48, 117, 32, -73, -12, 26, -100, -3, 69]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[126, 82, 126, -10, 39, 43, 70, 66, -124, 48, 70, -5, -18, 95, -33, -82, 84, 32, 39, 76, 87, 91, 43, -125, 2, 123, -14, 0, -54, 93, 90, -114, 30, 19, -10, -109, 68, -34, -24, 72, 81, 85, 60, -90, -24, -28, -75, -56]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[98, 80, 47, 126, -30, 33, 88, 121, -53, 95, -114, -8, 6, -84, 61, -105, 114, -39, -58, 75, -126, -60, -7, 16, 60, -47, -36, -29, -56, 33, 28, 99, 30, 19, -10, -109, 68, -34, -24, 72, 81, 85, 60, -90, -24, -28, -75, -56]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-126, 59, -121, 106, 34, 125, -63, -97, -95, -95, 93, 39, -106, -20, -87, -22]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-44, -33, 0, -7, -77, -95, -102, 51, 123, -109, -23, -1, -21, 89, 76, -90]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-100, 8, 125, 122, 61, -43, 94, 66, 93, 127, -31, -11, 104, -61, 65, -125]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[30, -63, -77, -87, -111, -17, -64, -30, -13, -36, 85, 8, -23, 29, 6, -27]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[11, -126, -29, -64, -105, 117, 85, -85, -126, 85, -88, -124, 3, -62, -75, 101, -10, -9, -62, -113, -54, -67, -80, -65, 40, -91, 91, -39, -92, 73, -71, 51, -100, 8, 125, 122, 61, -43, 94, 66, 93, 127, -31, -11, 104, -61, 65, -125]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[120, -64, -37, -113, -119, -6, 84, 99, -79, -34, 14, 50, 83, 116, -41, -122, -72, -82, -49, 95, -111, 100, 101, -114, -17, -38, -2, -75, 7, 93, -36, -9, -100, 8, 125, 122, 61, -43, 94, 66, 93, 127, -31, -11, 104, -61, 65, -125]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-111, 45, -21, -26, 43, 82, 84, 39, 31, -106, -122, 94, -32, -11, 65, -123, -116, 33, 9, -82, -15, -97, 89, 120, 36, 38, 15, -49, -56, 69, 23, -83, 85, 97, -98, 93, 69, -10, 127, 115, -93, -35, -57, 11, -63, 24, 36, -63, 42, 105, 47, -67, -103, 9, 4, -57, -2, -80, -7, 11, -21, 82, -112, 90, -115, -62, 62, -25, 92, -96, 60, 92, 65, -112, 7, 100, 104, -47, 37, 104, 8, 69, 110, 56, -27, -108, -39, 106, 41, 33, 16, 71, 122, 69, 64, 69, -100, 8, 125, 122, 61, -43, 94, 66, 93, 127, -31, -11, 104, -61, 65, -125]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-21, 76, 127, 45, -108, 88, 37, -81, -18, -13, 49, -18, -90, -50, -76, 11]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-44, -53, -102, 4, -8, -20, -97, 38, 40, 25, -88, 88, 101, 70, 13, 10]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[58, -117, -17, 77, -34, 35, -45, 123, 93, 74, 43, -25, -37, 105, -60, 81]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-21, 76, 127, 45, -108, 88, 37, -81, -18, -13, 49, -18, -90, -50, -76, 11]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "EB4C7F2D945825AFEEF331EEA6CEB40B" + "'", str9, "EB4C7F2D945825AFEEF331EEA6CEB40B");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "EB4C7F2D945825AFEEF331EEA6CEB40B" + "'", str10, "EB4C7F2D945825AFEEF331EEA6CEB40B");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "EB4C7F2D945825AFEEF331EEA6CEB40B" + "'", str11, "EB4C7F2D945825AFEEF331EEA6CEB40B");
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.Class<?> wildcardClass33 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-19, -111, -128, -97, 85, 13, -1, -29, -2, 45, -125, -106, 32, -84, 38, 101]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[43, 126, -88, 26, 65, 5, 29, 18, 102, 52, 42, -58, 30, -11, 15, -96]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-96, 89, -91, -99, 86, -95, 40, 81, -105, 47, -113, -88, -29, -33, 21, 45]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-39, -93, 68, 14, 55, -107, -113, -83, -39, -78, -34, -34, -106, -96, -1, 39]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[32, -95, 2, -54, -46, 77, -71, 3, -80, 41, -75, 10, -125, 93, 87, 7]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-118, 65, -16, 69, -45, 42, 112, -33, 69, 15, -4, -91, -87, -43, -9, 109, 5, -44, -87, -86, 82, -69, 14, 110, 69, 81, -32, 83, 98, 114, 100, -113, -3, -32, 103, -65, 25, 123, 29, 94, -91, 121, 83, 104, -122, 89, -31, 67]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-3, -32, 103, -65, 25, 123, 29, 94, -91, 121, 83, 104, -122, 89, -31, 67]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[48, -57, 110, -108, -23, 69, 107, -76, 99, -15, -26, 22, -57, -124, -1, -106, -63, 92, 99, 46, -67, 105, 125, -66, -64, 78, -17, -38, -32, -68, -111, -99, -3, -32, 103, -65, 25, 123, 29, 94, -91, 121, 83, 104, -122, 89, -31, 67]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[114, 69, -115, 67, -83, 32, -108, 84, 120, 95, -28, -88, 96, -90, 116, -14]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, -26, -121, 74, 5, -97, -24, 80, 96, 73, -65, 119, -77, 36, 75, -98]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-100, 7, -63, 52, -66, 65, 111, 66, -18, 100, 100, 104, -58, -46, -72, -19]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-9, 2, -34, -21, 114, -74, 51, 100, -11, 108, 116, -30, -58, 114, -23, -23]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[97, -96, 36, 83, -7, 95, 97, 50, -25, 85, 19, 51, 44, 88, 105, 95, -104, -83, 93, 44, 122, 88, 111, -79, -105, 55, -116, -23, 109, 84, -108, 47, -100, 7, -63, 52, -66, 65, 111, 66, -18, 100, 100, 104, -58, -46, -72, -19]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "61A02453F95F6132E75513332C58695F98AD5D2C7A586FB197378CE96D54942F9C07C134BE416F42EE646468C6D2B8ED" + "'", str23, "61A02453F95F6132E75513332C58695F98AD5D2C7A586FB197378CE96D54942F9C07C134BE416F42EE646468C6D2B8ED");
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey50);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey50);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey50);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey78);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey78);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey78);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey78);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray88);
        java.lang.Class<?> wildcardClass90 = byteArray88.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[28, -19, 16, 38, 116, 31, -93, -49, 90, 22, -41, -86, -63, -118, 76, 90]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-52, -103, -53, 123, -39, -20, 25, 69, 12, -98, -57, -77, 93, -48, 76, -109]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[81, -15, -39, -21, -92, 100, 120, 69, -13, 16, 65, -103, 11, 7, -105, 6]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[111, 109, 112, 60, -79, 12, -18, 115, 20, -30, -72, 68, 59, -39, -96, 17]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[90, -55, 110, -122, -3, 91, 123, 77, 96, 72, 52, 127, 126, 2, 19, 21]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-48, -44, 13, -123, -4, -31, 1, -69, -36, -32, -123, -80, -70, -18, 84, -77]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-48, -44, 13, -123, -4, -31, 1, -69, -36, -32, -123, -80, -70, -18, 84, -77]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[24, 32, -103, -86, 97, 7, 108, -37, -66, -113, -116, 91, -37, 63, 106, -55]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-20, 97, -87, 71, -92, 63, 37, -28, 2, 37, 15, -21, 60, -39, -47, -88]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-70, -35, -20, 6, -30, -25, -123, -59, -10, 68, 68, -116, 74, 19, -18, 40]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-24, 16, 12, 103, -8, -40, -55, 4, -30, 33, -39, -3, -88, -81, -65, -90]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[2, -86, -54, 56, 12, 1, 32, 12, -29, -122, 71, -36, 75, 98, -79, 79, 55, 23, 99, -108, 8, 43, 87, -62, -78, -101, -50, 3, 38, 77, -17, 29, -70, -35, -20, 6, -30, -25, -123, -59, -10, 68, 68, -116, 74, 19, -18, 40]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[79, 0, 43, 44, -99, -127, 74, -76, -10, -16, 99, 89, -13, -116, -12, -31, -45, -17, -41, 29, -77, -25, -42, 32, 83, -94, -113, -102, -74, -95, 22, 51, -70, -35, -20, 6, -30, -25, -123, -59, -10, 68, 68, -116, 74, 19, -18, 40]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-111, -52, -62, -22, -112, -39, -122, -21, 23, -48, -90, 13, 100, 60, 71, 20]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-30, 124, 94, 119, 79, 13, -125, -11, 53, 47, -22, 7, 91, 46, 118, -112]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-64, -97, 25, 103, -92, 62, -116, -94, 39, 38, -69, 99, -62, -115, 125, -82]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[83, -106, 118, -37, 35, 33, -93, -25, 3, 89, 125, -123, -44, 120, -14, 0, -34, 20, 22, -73, -119, -72, -23, -110, 31, -121, 116, -68, 79, -90, -43, 76, -108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-124, 48, -26, -71, -109, 22, -4, -61, -114, -127, -60, 23, -28, -99, 15, -4, 105, 88, -67, 94, 96, 16, 89, -53, -93, -113, -44, -5, 52, 112, -42, -66, -108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[112, 18, -80, -105, -58, -88, -26, -19, -49, -76, 61, 79, -41, 52, 45, 17, -3, 33, 30, 4, -75, 14, 100, -111, 46, 85, 15, -22, 124, -72, 56, -52, 126, 45, -55, -58, -35, -122, 105, 99, -104, 94, -96, -98, -33, 2, 59, 108, -116, 117, 41, -82, -103, -19, -87, -64, 107, 122, -119, -108, -60, 11, 1, 20, -104, 81, -75, -7, 73, -55, 14, 42, -66, 126, 100, 70, 5, -29, 80, 61, 29, 7, -111, -7, -72, -9, 47, 96, 27, 45, -25, 96, -85, 124, -30, -94, -108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-95, 15, 46, 43, 112, 89, -111, 95, -75, -13, -92, -22, 5, 125, 20, -47, -19, -112, -105, -4, -38, -24, 98, -115, 47, -40, 28, 77, 46, -35, -43, 38, -108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-78, 86, 24, -111, 122, -64, 100, -102, -124, -12, -62, -30, -7, 58, 118, -36, -116, 88, -86, -76, 13, -73, 2, -69, 38, -90, -31, 65, -51, 121, -103, 86, 36, 26, 46, 65, -85, -100, 23, 1, -92, -61, -35, 61, 106, -24, -59, -96, 79, 34, -128, -59, -84, 54, 36, -107, -29, 11, -54, 120, 114, 45, 23, -13, -44, -65, -82, -4, 50, 120, -17, 18, -76, 85, -96, -14, -100, 24, 32, -58, 109, -97, 97, 15, 31, -49, 12, 62, 90, 41, -119, 33, 67, -107, 87, 27, -108, 95, -107, 115, -111, 107, -27, -74, 75, 102, 79, 33, -15, 18, -7, 15]");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "B25618917AC0649A84F4C2E2F93A76DC8C58AAB40DB702BB26A6E141CD799956241A2E41AB9C1701A4C3DD3D6AE8C5A04F2280C5AC362495E30BCA78722D17F3D4BFAEFC3278EF12B455A0F29C1820C66D9F610F1FCF0C3E5A2989214395571B945F9573916BE5B64B664F21F112F90F" + "'", str89, "B25618917AC0649A84F4C2E2F93A76DC8C58AAB40DB702BB26A6E141CD799956241A2E41AB9C1701A4C3DD3D6AE8C5A04F2280C5AC362495E30BCA78722D17F3D4BFAEFC3278EF12B455A0F29C1820C66D9F610F1FCF0C3E5A2989214395571B945F9573916BE5B64B664F21F112F90F");
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-24, 40, -117, -21, 7, -50, -6, -124, 121, -123, 40, -71, 105, 32, 93, -103]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[99, 10, 13, -104, -104, -87, 10, 37, 48, 42, 2, 44, -119, -14, 6, 12]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[99, 10, 13, -104, -104, -87, 10, 37, 48, 42, 2, 44, -119, -14, 6, 12]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[4, -97, 103, 73, 103, -75, -1, 1, 46, -114, 2, 93, -113, -49, 0, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[99, 10, 13, -104, -104, -87, 10, 37, 48, 42, 2, 44, -119, -14, 6, 12]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-91, 67, -27, -93, 27, -109, 68, 54, -46, 78, -9, 100, 73, 76, 37, 0, 120, 19, 2, -18, -56, 104, -84, 36, 32, 7, 104, -122, 60, 17, 105, 100, 28, -81, -49, -28, -36, 70, 103, 40, -48, -126, -122, 121, 15, -28, -10, -74, -126, 91, -103, -90, 126, 72, 45, 62, -4, 79, -17, -101, -43, -80, -19, -105, 3, 20, 98, 66, 96, -57, 68, 31, -74, 0, 105, -67, 35, 81, 50, -113, 37, -51, -53, -21, 19, -19, -42, 102, 74, -105, -5, -43, -59, 19, -46, 42, -24, 40, -117, -21, 7, -50, -6, -124, 121, -123, 40, -71, 105, 32, 93, -103]");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey26);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.Class<?> wildcardClass33 = byteArray31.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[104, 96, -72, -107, -102, -1, -122, 0, 1, 49, -36, -125, -5, 112, 12, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[29, -84, 53, -83, -57, 76, -116, -64, -85, -83, 27, 109, -25, -87, 37, 31]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[54, -91, -22, -85, -87, 125, -48, -68, -26, 44, -118, -4, 49, -95, 38, -5]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[43, 76, -50, -49, -99, -40, -74, 70, -83, 98, -89, 123, -31, -37, 85, -127]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-121, -52, -98, -12, -101, -38, -16, -90, -124, -33, 21, 115, 122, 108, 33, 77]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-35, 64, 118, -117, -58, 50, 20, -37, -69, 5, 56, 105, 17, -31, 113, -36]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-35, 64, 118, -117, -58, 50, 20, -37, -69, 5, 56, 105, 17, -31, 113, -36]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2392E1DD8D2AAE89B8B2107AA3E385EE5B22615F9947E665565825559B06C3EB3F7C2EC093554E5DB75A43B29140F8DB2D5390CE6E4035A14F74EC145A8BCA9F8921BDD3CFD1E0E9526D13FF6015399BF69AD3EFB98C3C8E77863C7BB13121E09118FA07A17240C30A1D7ED2A170352667C47B2B28423B6EFDD8EE5B239A59710E1B7E78852D2BB65CAFBBE0998D71ADE4D4E6051D35A3097B35EC5A921AE98496577CFCA1007C05A814820FC97938E320FD25F25E59F8780E9BA3F9237827EC4541B8B5A5B24C8AC259E723691AEB4C979BF9C47647EC9EEEC6E4323727DE2687CC9EF49BDAF0A684DF15737A6C214D" + "'", str32, "2392E1DD8D2AAE89B8B2107AA3E385EE5B22615F9947E665565825559B06C3EB3F7C2EC093554E5DB75A43B29140F8DB2D5390CE6E4035A14F74EC145A8BCA9F8921BDD3CFD1E0E9526D13FF6015399BF69AD3EFB98C3C8E77863C7BB13121E09118FA07A17240C30A1D7ED2A170352667C47B2B28423B6EFDD8EE5B239A59710E1B7E78852D2BB65CAFBBE0998D71ADE4D4E6051D35A3097B35EC5A921AE98496577CFCA1007C05A814820FC97938E320FD25F25E59F8780E9BA3F9237827EC4541B8B5A5B24C8AC259E723691AEB4C979BF9C47647EC9EEEC6E4323727DE2687CC9EF49BDAF0A684DF15737A6C214D");
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("AF95819EC94A1C4FD01986D2BD1962EEDEAAE2AB37C8019EEACC57BB70BA70541B5D39E57EE221758AED6DE3C83EF16F", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[44, -23, -64, -35, -16, -12, -16, 32, 88, -67, -94, -86, -41, 2, -34, 100]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-75, -63, 124, -75, -88, -37, -36, 9, -47, -104, 4, 6, 85, -45, 118, -59]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-75, -63, 124, -75, -88, -37, -36, 9, -47, -104, 4, 6, 85, -45, 118, -59]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-47, -64, -46, 122, -100, 35, -11, 81, -124, 0, -114, 110, 89, 87, -64, 103]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-35, 124, -46, 47, -67, 42, -10, -89, 101, 8, -93, -123, 36, 36, 18, 45, 5, -80, -111, 48, -123, -120, 73, -58, -71, 115, -48, 23, 12, -14, 70, -99, 44, -23, -64, -35, -16, -12, -16, 32, 88, -67, -94, -86, -41, 2, -34, 100]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[44, -23, -64, -35, -16, -12, -16, 32, 88, -67, -94, -86, -41, 2, -34, 100]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2CE9C0DDF0F4F02058BDA2AAD702DE64" + "'", str13, "2CE9C0DDF0F4F02058BDA2AAD702DE64");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2CE9C0DDF0F4F02058BDA2AAD702DE64" + "'", str14, "2CE9C0DDF0F4F02058BDA2AAD702DE64");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[118, 96, 35, 22, 94, 48, 73, -113, -22, -36, 5, -47, 7, -2, -73, -76]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-36, 118, -8, 14, 7, -109, -104, 38, 43, -57, 125, -117, -49, -101, 20, -44, -18, 14, 52, 84, -97, -123, 122, -20, -42, -48, 98, -33, -97, 76, 86, -65, 88, 113, 70, 55, 119, -111, 20, 38, 83, -27, 91, -28, 63, 81, 20, -56, 103, 16, -128, -78, 12, -56, 31, 115, -50, 71, -50, -100, 25, 91, 102, 22, -46, -54, 96, -42, 25, -65, -42, 41, 58, 65, 54, -73, 123, 68, -19, -125, -62, 88, 92, 0, 34, 1, 2, -79, -58, -121, 92, 12, -75, 77, 20, 3, 118, 96, 35, 22, 94, 48, 73, -113, -22, -36, 5, -47, 7, -2, -73, -76]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[91, -96, -33, -78, -34, 47, 119, -68, -38, 66, 2, 116, 31, 127, -45, -26, -102, 124, -113, 93, 90, 93, 92, -14, -35, -29, 119, 80, 85, 19, 22, 116, -46, -36, 12, 3, -41, -92, -121, -86, -115, -28, 34, 5, -111, -88, -65, 86, -124, 92, -33, -88, 40, 62, -31, -115, -111, 116, -104, 122, 77, -61, -100, -104, -38, 52, -40, -16, -63, -104, -38, 16, 1, 105, 75, 112, 88, -113, 57, 47, 31, -24, 101, -37, 29, 73, -110, -38, 90, 110, -70, 14, 34, -37, 97, -57, 118, 96, 35, 22, 94, 48, 73, -113, -22, -36, 5, -47, 7, -2, -73, -76]");
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-105, -74, 2, 27, 12, 91, -41, 91, -111, 85, -41, -90, -70, -70, 89, -106]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[92, 48, 125, 72, 13, 76, -126, -86, 29, 118, 34, 112, 57, -69, -33, 66]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[40, 78, -39, 5, 67, -10, 101, 34, 40, -80, -123, -21, -40, -82, -99, 110]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-35, 91, -30, 115, 118, 51, -45, 29, 17, 86, 116, -38, -76, 100, -25, -93]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-73, 111, 105, -16, 102, -28, -110, -28, 32, -101, -119, 101, -110, -93, 93, 8, -107, 12, -65, 27, 23, -98, 37, 118, 84, 115, 13, -94, -57, -96, -79, 37, 40, 78, -39, 5, 67, -10, 101, 34, 40, -80, -123, -21, -40, -82, -99, 110]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "B76F69F066E492E4209B896592A35D08950CBF1B179E257654730DA2C7A0B125284ED90543F6652228B085EBD8AE9D6E" + "'", str23, "B76F69F066E492E4209B896592A35D08950CBF1B179E257654730DA2C7A0B125284ED90543F6652228B085EBD8AE9D6E");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "B76F69F066E492E4209B896592A35D08950CBF1B179E257654730DA2C7A0B125284ED90543F6652228B085EBD8AE9D6E" + "'", str24, "B76F69F066E492E4209B896592A35D08950CBF1B179E257654730DA2C7A0B125284ED90543F6652228B085EBD8AE9D6E");
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey39);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey76);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey76);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey76);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey76);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey76);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey76);
        java.lang.Class<?> wildcardClass86 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-103, -27, 106, -60, -43, 3, -101, 45, -36, 76, -6, -46, 55, -94, 51, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-88, 64, -74, 13, -36, 127, 2, -4, 60, -16, -122, -41, -11, 83, -44, 49]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[81, 33, 78, -119, -14, 14, 30, 61, 70, 42, 77, 103, 13, 53, 105, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[19, -119, -68, 116, 2, 116, -69, -58, -33, -96, 64, 90, -98, 44, -128, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[106, -76, -77, 56, -58, 5, -40, -96, 108, -96, 72, 25, -84, 50, -121, 32]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[57, 92, -43, 63, 86, 40, 60, 88, 109, -74, 34, 23, 26, 28, 34, 107]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-44, -44, 104, -72, -9, -128, 63, 123, 67, -121, -88, 100, 126, 36, 28, 33]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-79, -52, 14, 9, -72, -29, 2, 85, 103, 22, -70, 28, 38, -68, 29, -123, -14, 28, -35, 9, -67, -90, -89, 91, -44, 72, -32, 85, -27, -103, 95, -11, -122, 125, 100, -59, -56, 123, 58, -105, 62, 127, -79, -7, 105, 31, -74, 82]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-122, 125, 100, -59, -56, 123, 58, -105, 62, 127, -79, -7, 105, 31, -74, 82]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-49, 32, 49, 123, -3, -45, 61, 32, 64, -100, 8, 114, -101, -62, 126, 45, -81, 2, -93, -55, -99, -34, 89, 14, 103, -10, 39, -31, 48, -47, 25, -64, -122, 125, 100, -59, -56, 123, 58, -105, 62, 127, -79, -7, 105, 31, -74, 82]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-60, -71, 15, 105, 17, -62, -87, 28, -3, 20, -11, 65, -93, 81, 19, -60]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-57, 86, 77, 53, 123, 71, -94, 57, 65, -60, -79, -109, 17, 78, 19, -64]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[40, -100, -59, 59, -105, 92, -32, -43, -26, -27, -13, -108, -50, -96, 62, 83]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[56, -115, -86, -73, 100, 59, 42, 96, -57, 18, 67, -91, -71, 111, 122, 104]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-111, -46, 53, 98, 98, -45, -126, -93, -36, -106, -23, 45, 103, 70, -2, -20]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-95, 90, -72, 67, 49, -46, 89, -23, -82, 67, -108, -118, -117, -97, 54, 118]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-95, 90, -72, 67, 49, -46, 89, -23, -82, 67, -108, -118, -117, -97, 54, 118]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[87, -124, -13, -55, -54, -59, -107, -5, 36, -9, -24, 124, 122, 20, 46, -82, -82, 50, -79, 64, -56, 67, -91, -78, 113, -119, 54, -93, -17, -83, -96, -119, -15, 72, 35, 28, 19, -14, -119, 101, -63, 44, 96, 52, -12, 63, 124, 104, 118, 65, 33, 73, -117, 115, -113, -1, 63, -74, -2, 93, -64, 121, -128, -79, 68, -44, -29, 17, -127, -56, -92, 66, 103, -19, 80, 78, -69, 49, -23, -14, 22, -43, 23, -90, -31, 28, -113, -65, 117, 86, -73, -111, 58, -89, -83, 123, -111, -46, 53, 98, 98, -45, -126, -93, -36, -106, -23, 45, 103, 70, -2, -20]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-84, -88, 30, 118, 50, -2, 58, -123, 92, -12, -96, -121, -117, 42, 121, -108, -17, 62, -46, -59, 93, 12, 24, 72, -74, -31, 91, 68, 118, 62, -81, 43, -111, -46, 53, 98, 98, -45, -126, -93, -36, -106, -23, 45, 103, 70, -2, -20]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-17, 88, 86, 105, -120, -43, -122, -91, -92, 7, 75, 103, -39, -121, 90, -83, -83, 81, -98, 67, 118, 2, 49, -128, -120, -98, -35, 93, 33, 77, -127, 35, -79, -33, 34, 39, 79, 53, 117, -98, -39, 18, 53, 35, -22, -35, -66, 28, 104, 79, 13, 20, -104, -42, -87, 60, -39, 105, 116, -46, 108, 109, -127, 79, 117, -99, 70, -59, 109, 91, -40, -59, 33, 40, -64, -1, -48, -41, 123, -37, 2, 41, 105, 29, 117, -45, -43, 79, -69, -67, 102, -29, -128, 2, -8, -120, -111, -46, 53, 98, 98, -45, -126, -93, -36, -106, -23, 45, 103, 70, -2, -20]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[21, 48, -59, -127, -92, 80, -103, -28, 55, -27, 109, -80, 86, -24, -79, 113, 53, -86, -44, 81, -12, -84, 102, -123, 16, 9, -103, -11, 11, -86, -87, 75, 48, 28, -94, 110, 58, -89, -107, -2, 104, -50, -40, -122, 21, -22, 77, 84, 51, -49, -120, -96, 117, -72, 120, -90, 54, 122, 42, 18, 69, -75, 103, 115, 71, -49, 71, 14, -36, 75, 33, -83, -5, -92, 63, -42, -13, 38, -101, -80, -41, 26, 52, -106, -23, -35, -31, 64, -79, 70, -125, 65, 1, -10, 113, 42, -111, -46, 53, 98, 98, -45, -126, -93, -36, -106, -23, 45, 103, 70, -2, -20]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("4DAA99FF9332AF791CE6917EF9ECD9D880F5B35C9D718FD345FAB0E534407B526CA7DF4EF67B53D8C5C5A4B5A69743A1", secretKey6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-64, 49, 103, 103, -15, -48, -27, -21, 104, -30, -109, 104, 126, -51, -59, 105]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[103, 30, 94, -48, 119, -116, 108, 19, 20, 40, -46, -102, 3, -87, -4, -83, -10, 57, -75, -68, -68, -103, 29, -17, 65, -12, -20, -112, 54, 28, 86, -36, 118, -72, 77, -36, -44, 50, 123, -37, -60, 93, 110, -99, -95, -75, -75, 71, 24, -117, -18, -17, 63, 100, 23, -90, 20, 53, 11, -44, -59, 50, -36, -49, -9, -126, 63, 66, 86, 69, -27, -104, -15, -72, 15, -120, 5, 120, -29, 127, 47, 14, -117, -18, -84, 105, 88, 79, 63, 85, -68, 77, 29, -120, 112, 18, -64, 49, 103, 103, -15, -48, -27, -21, 104, -30, -109, 104, 126, -51, -59, 105]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-30, 73, 127, 100, 17, 102, 55, -14, 24, -85, -60, 19, 111, -106, 7, -90, 107, -15, -36, 49, 65, -106, -110, -72, 22, -78, 123, 70, 67, 76, 44, 99, -64, 49, 103, 103, -15, -48, -27, -21, 104, -30, -109, 104, 126, -51, -59, 105]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[11, 112, -98, -59, -11, -16, 87, -19, 12, -90, -50, -52, 24, 96, 77, 124, -61, -51, -14, 14, 115, -2, 10, 65, -57, 71, 87, 111, 16, 60, -85, 123, -41, -60, -50, -26, 24, 78, 37, 62, 52, 81, -62, -17, 48, -42, -114, 59, -47, 20, 1, 127, 54, 11, 115, -20, 72, 10, -14, 8, 122, 42, -94, -49, -59, -43, 123, -18, 10, 116, -14, 71, 48, -80, -103, 113, -19, -41, -19, 98, -86, 20, 19, -85, -88, 97, -69, -3, 6, -72, 106, -116, -109, -13, -126, -66, -64, 49, 103, 103, -15, -48, -27, -21, 104, -30, -109, 104, 126, -51, -59, 105]");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey5);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey34);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey34);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey34);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey72);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey72);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey72);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey72);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey72);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey72);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey72);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey72);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("96A2A04D1B84009DBFC722FC08404202556D0443F1622B551E33EC6AEC926AB6220C5A1E905F2CDFB8D5AFC9473CC961", secretKey72);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("CE223CF68EB6FEC359BAEBD15B5C20BFF08B501E10FEA3BCE54D5983D7684D38E2F42735676D95E8E2E342D32712A46F", secretKey72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey72);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[71, -75, -97, 15, 64, -83, -65, -8, -77, 18, -82, 65, -92, -77, -10, 21]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[23, -64, 5, 68, 70, -90, -116, 98, 115, -26, 77, -23, -56, -80, -118, -67]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[23, -34, -17, -13, -121, 117, -97, 108, -84, -126, 59, 39, 116, -8, -75, -6]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[71, -75, -97, 15, 64, -83, -65, -8, -77, 18, -82, 65, -92, -77, -10, 21]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-95, 39, -79, -20, -55, 15, -27, 75, 116, -81, 40, -79, 35, -92, -21, 39, 102, 84, 26, -2, 48, -53, -44, 122, -85, -117, 64, -62, 41, 37, -26, -6, -63, -32, -22, -98, -11, -97, 37, 75, -114, -47, 115, 87, 63, -46, -5, -23, -3, -6, -36, -98, -41, 100, 64, 42, 58, 56, 75, 7, -1, 100, 31, 75, 95, -26, 122, 29, 123, -63, 49, -1, 79, -83, 120, -8, 113, 10, -28, -100, 68, 74, 38, 95, 86, 98, 75, -56, -102, 73, -38, 56, -42, -114, -82, -27, 71, -75, -97, 15, 64, -83, -65, -8, -77, 18, -82, 65, -92, -77, -10, 21]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-34, -123, -70, -85, -57, 17, -111, -90, 119, -54, -40, -108, -12, 121, 39, 87]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-11, -13, 38, -10, 51, 1, -72, 11, 36, -57, 25, 127, 101, 116, -96, 85]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-101, -44, 114, 23, 94, -109, -31, 15, 35, 106, 124, -22, 38, 63, 31, -54]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[72, 77, 53, -100, -79, -69, -30, -98, 14, -98, 105, -10, 91, 103, 53, 75]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-117, -9, 61, -8, -14, -47, 18, -98, -40, 92, 50, 47, 62, 99, -110, 97, 102, -84, -104, 57, 56, -21, -55, -36, -24, 110, -54, -5, 102, 28, -52, 23, -101, -44, 114, 23, 94, -109, -31, 15, 35, 106, 124, -22, 38, 63, 31, -54]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-115, -30, -101, -112, 96, -20, 7, 95, -33, -100, 122, 102, -73, 114, -82, 105, 18, -91, -55, 113, 24, -18, 32, 5, -13, -74, -105, 70, -115, -43, -85, 114, 119, 66, 48, -121, 73, 6, 123, 75, -19, -49, 71, -119, -60, -47, -99, 34, -8, 101, 55, 63, -87, 107, -8, 19, 72, 95, 87, 98, -46, -6, 21, 87, -52, 113, -43, -91, -57, -119, 56, -64, 115, -32, -4, -44, -95, 19, -33, 12, -41, 65, -55, -19, 101, -101, -88, -18, 108, 66, -24, 18, -76, 11, -32, -8, -101, -44, 114, 23, 94, -109, -31, 15, 35, 106, 124, -22, 38, 63, 31, -54]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[120, 42, 67, -113, -13, 21, -71, -100, -34, 113, -19, 34, -58, -35, 62, -40]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[45, -20, 101, -119, 50, 109, 7, 96, 17, -80, -21, -5, -42, -110, -22, 62]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-79, -86, -32, -86, -89, 59, -23, -95, 83, 78, 79, 11, -43, 80, 36, 30]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-101, -41, 98, 57, 32, -75, -11, 109, -43, -32, 20, -127, -118, -32, -51, 66]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[43, 42, 47, -15, 103, -82, 65, 30, -77, -112, 127, 1, 104, 42, -59, -98]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[43, 42, 47, -15, 103, -82, 65, 30, -77, -112, 127, 1, 104, 42, -59, -98]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-50, -95, 9, -8, -125, 80, -36, 95, 83, -1, 103, -90, -112, -37, 93, -50, 124, -5, 117, -56, 98, -12, -107, 69, -27, 78, 106, 20, 107, 37, -76, 104, 52, -3, 11, 117, 20, 118, 26, 55, 50, 68, -62, -1, 48, 75, -86, -85, 71, -34, -33, 117, 84, -105, -12, -108, 71, -122, 17, -51, -109, 77, 92, -26, 101, 109, 121, -98, 104, 34, 27, -122, -42, -116, 55, -66, -74, -86, 30, -56, 34, 22, -46, -100, 43, 81, -39, 32, 29, -43, -118, -98, -2, -116, 90, -49, -107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-87, 113, 71, -43, -64, -84, 107, 50, -95, 24, 62, -83, -60, 77, -89, -124, 2, -121, 24, 121, 100, -85, 42, -77, -2, 0, 18, 114, 27, 93, -16, -64, -107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[60, 111, 39, -34, 9, -39, -109, -12, 52, -15, 104, 91, 71, -43, -9, 58, 59, 88, -38, -28, 66, 117, -65, 33, -96, 12, 39, -128, -39, 45, -19, -125, -107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-18, -54, -27, 76, -12, -13, 75, -106, -62, -57, 102, -35, 34, 42, 56, 77]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[73, 80, 17, -121, 24, 29, -123, 87, 80, -47, 96, 71, -38, -123, 127, -23, -49, -96, -43, 34, -126, 70, -126, 70, -70, -94, 22, 94, 0, 3, 122, -127, -127, -101, 22, 111, 66, -66, -51, 25, -127, -14, 2, 24, -38, -81, 83, 25, -106, -37, -78, -62, -63, 4, -110, 95, 105, 90, -53, 82, -80, -98, 29, -40, -75, -53, -76, -49, 85, 115, 1, 111, -94, 68, -64, 120, -121, -3, 73, -57, 97, -18, 96, 127, 15, 123, 70, 33, 2, 119, -11, 97, 56, 119, 67, -69, -107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-111, -7, -29, -45, 114, 69, 12, -56, 18, 43, 89, -106, 24, 72, -72, -96, 63, -15, -62, -20, 31, -33, 115, 102, 85, 120, -39, -76, 63, -99, 65, 38, -102, 33, -109, 72, -85, 75, -1, 93, -120, 28, 65, 84, 64, -32, -20, -114, 63, -66, 96, -39, -59, -87, 96, 1, 71, 39, 26, -42, -123, -101, -56, -92, 62, -74, -68, 111, -57, -121, -44, -108, 9, -128, -61, 95, -69, 3, 66, -25, -82, -100, 69, 29, -48, -81, 6, 91, 94, 84, 6, -94, -57, -27, -19, 61, -107, 76, -36, -41, 119, -47, -50, 95, 19, 89, 77, -29, -77, 108, -86, -49]");
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("6566D0469D4956CB5AB75EF7230BC4F5", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-56, -28, -17, 66, -28, 73, 103, 50, 26, 95, 126, 59, 54, 22, 91, 41]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[69, 122, 104, 42, 53, 78, 12, 73, 67, -100, 38, -36, -54, 71, -97, 72]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[15, -120, -47, -56, 126, 13, 21, 40, -16, -13, -90, -89, 53, 36, -117, -113, -11, -38, 59, -87, 69, 81, 69, 79, -51, -116, 71, -43, -75, -50, 94, -28, -56, -28, -17, 66, -28, 73, 103, 50, 26, 95, 126, 59, 54, 22, 91, 41]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-11, 75, 124, 110, 82, -99, 116, 107, -85, -14, 54, -37, -73, 102, 59, 43, -64, -38, 80, -61, -88, 29, -89, 108, -82, -24, -57, -120, 86, -66, -115, -121, -56, -28, -17, 66, -28, 73, 103, 50, 26, 95, 126, 59, 54, 22, 91, 41]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey5);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey17);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("1FE9CDFB68A6E115AFFC272D390A8106F61DF2A13E15879CD7CF74DF7E07438DBA95AF370A18E180E8BC927338787814", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-104, 38, -24, -124, -22, 108, -74, -80, -54, -7, 76, -63, 3, -101, 99, -79]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[52, 5, -127, 64, 23, -27, 4, -59, -73, -6, -9, 70, -59, 60, -88, 109]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[101, -51, 115, -23, -75, 7, -126, 98, -104, -46, -87, -76, -32, 11, 4, -32, 60, 124, 47, -59, -71, 31, 77, 43, -4, 15, 38, -115, 7, -110, -126, 88, -104, 38, -24, -124, -22, 108, -74, -80, -54, -7, 76, -63, 3, -101, 99, -79]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-56, -114, 37, 42, 106, 118, -106, -6, 7, 97, 44, 97, 77, -46, -97, -122, -44, -74, -45, 60, 92, 16, 35, 25, -49, 55, 39, -23, -53, -99, 97, 60, -107, 9, 69, 57, 119, 5, -18, -25, -34, -37, -47, 34, 6, 48, -42, -90, 42, -18, 27, -97, -88, -5, 43, 118, 80, 42, 47, 36, -76, 122, 48, 92, -104, 38, -24, -124, -22, 108, -74, -80, -54, -7, 76, -63, 3, -101, 99, -79]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-11, -47, -115, 88, -70, 102, 80, 60, -57, 91, 18, -78, 109, -30, 67, 14, 26, 36, -12, 85, 48, -112, -119, -57, 79, -5, -75, 47, -12, 54, 126, -38, -104, 38, -24, -124, -22, 108, -74, -80, -54, -7, 76, -63, 3, -101, 99, -79]");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[69, -80, -22, 110, 22, -51, 14, 68, -124, 115, -95, 44, 96, 79, 110, -39]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-121, -59, 106, -42, 126, 70, -67, 102, -105, -82, -37, 11, -60, -3, -6, -9]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-121, -59, 106, -42, 126, 70, -67, 102, -105, -82, -37, 11, -60, -3, -6, -9]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-105, 28, -56, -5, -108, -61, 93, -30, -109, -118, -34, -125, 58, -66, -30, 64, 47, 103, 75, 94, 34, 59, 119, -35, 31, -14, 126, 106, -112, -51, 1, -110, 120, 127, -88, -120, -120, 14, -47, 17, 26, -43, 67, 31, 34, 71, -112, 89, 116, -91, 85, 39, -23, -49, 90, 35, 46, -110, -83, 36, -102, 52, -75, -24, 34, 29, -123, -52, -120, -1, 93, 8, -12, 74, -105, -10, 80, -60, -56, -37, -52, 28, 42, -88, 83, -38, -24, -110, -57, 38, 23, -23, -25, 24, -32, 77, 69, -80, -22, 110, 22, -51, 14, 68, -124, 115, -95, 44, 96, 79, 110, -39]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-6, 93, -66, -39, 78, 31, 9, -91, -115, 85, -62, -12, -107, 35, -117, 115, 91, 109, -119, 87, 32, 77, -23, -73, 36, 96, -82, -66, -57, -14, -79, 84, 69, -80, -22, 110, 22, -51, 14, 68, -124, 115, -95, 44, 96, 79, 110, -39]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-5, -39, 11, -116, 99, 42, 26, 118, -23, 37, -6, 27, -28, 18, 116, 72, -49, 92, 90, -74, 15, 18, 119, 87, -13, 63, -28, -113, -57, -6, 0, -23, 6, 12, 4, 97, -92, 82, 52, -45, 86, -40, 91, 43, 21, -79, -92, 55, -86, -46, -101, 36, 93, -68, 116, -101, 125, 74, -127, 63, 92, 32, -52, 76, 99, 3, -119, 99, -83, -34, -96, 23, -92, -24, -104, 42, -49, -102, -59, 105, -56, -125, -4, -14, -12, -54, -35, -65, -14, 59, 120, -36, 6, 65, -61, -105, 69, -80, -22, 110, 22, -51, 14, 68, -124, 115, -95, 44, 96, 79, 110, -39]");
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("121265FC61C266F2C74D29FC1595D7FC6A35920F065FDE047C97E4E66BE86FAB5245EF1941544FCB387EBAB186BA8DFE", secretKey31);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray41);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[63, 63, 118, -61, 104, -21, -100, -128, 53, -73, -84, -27, 97, -9, -62, -9]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-80, 119, -122, -86, -15, 87, -69, 63, -114, -75, 79, 57, -102, 108, 79, -4]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-121, 56, 83, -101, 124, -126, -77, -38, 10, -89, 90, 126, -100, 71, 57, -29]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[18, 34, 79, 53, -7, 52, -55, -121, -93, 86, 77, 48, -112, -6, -7, 114]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[94, 96, 109, -27, 65, -116, -79, -4, 16, 56, 121, 62, -49, -89, 51, 23]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[94, 96, 109, -27, 65, -116, -79, -4, 16, 56, 121, 62, -49, -89, 51, 23]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[92, 20, -15, -114, 25, -124, 96, -10, -16, 67, -102, -89, 61, 8, -8, 69, 98, -45, 31, -12, 23, -3, -84, 125, -83, -52, 68, -51, 49, -115, -73, -53, -34, 92, -12, -46, -126, 80, -85, 63, 20, -127, -55, 56, 47, 2, -104, -114, -39, -8, 66, 54, -86, 30, -9, -41, -88, 102, 116, -110, 53, 124, -75, -91, 7, 9, -101, -6, -115, -122, 44, 20, -59, 116, -69, -118, -43, -52, 14, 31, 52, -101, 5, -50, 44, 83, -67, -111, 71, 27, 57, -45, -76, -88, 126, 103, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[54, -80, -98, 2, -122, -85, 116, 89, -57, -103, -83, -31, 41, -2, 103, 82, 11, 74, 11, -92, 65, 84, -34, 66, -30, -91, -44, -32, -71, 30, 110, -128, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-59, 51, 41, -63, 78, 59, 55, -106, -39, 64, -32, -21, -82, -63, -93, -10, -75, 7, -3, -35, 9, -25, 11, -125, -81, -9, 39, 23, 126, -6, -93, -6, 50, -113, 91, 6, -99, 72, 121, -109, -94, -81, -54, 108, 32, 35, 1, -105, 50, 98, -76, -5, 59, -86, -47, -11, -107, 14, -2, 51, 92, 32, 119, 57, -97, -33, 57, 87, 0, 79, 36, -73, -115, 34, 22, 108, 98, 44, 92, -85, -19, 24, 21, 16, 77, -16, -76, 44, 86, -45, -46, 69, 89, 27, -104, 72, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[50, -61, -1, 83, -117, 103, -127, 71, -34, 94, -10, 65, -8, 1, -46, -55, 92, -14, -50, -123, -23, 16, 119, -53, -19, -31, -36, -21, 46, 17, -8, 14, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[7, 14, 24, 125, 118, -65, -43, 65, 58, 69, 92, -107, -48, -87, 117, -106, 113, 35, -52, 37, 54, 118, 3, -107, -119, -25, -3, -67, -45, 89, 31, -24, -47, -99, -16, 104, -8, 14, -72, 9, -4, 119, 112, 40, -128, 106, -66, -11, 18, -43, 46, 86, 71, 73, 10, -39, 64, 76, -16, 23, 100, 60, -34, -1, 21, 51, 96, 74, -90, -128, -26, 48, -6, 122, 93, 73, 110, -4, -71, 16, -78, -128, 88, 77, 43, -96, -119, -122, 55, -116, -6, -114, -54, 76, -17, -81, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[51, 22, -75, -103, -21, 64, 47, 26, 82, -72, 89, -29, -9, -110, 23, -91, 4, 56, 81, 68, -64, -10, 53, -87, 107, -39, 107, 31, -106, 67, -12, -11, 40, -57, 62, -65, 93, -25, 41, 24, -7, -60, -110, 8, 118, 31, 4, -104, 34, -105, 43, -36, 37, 119, -101, 124, -11, -95, -19, 95, -105, -34, 127, -115, -107, 34, 102, 110, -66, -80, 64, -115, -22, -68, -75, 113, 86, -35, -3, -113, 65, -60, 123, -58, -105, -55, 21, -54, 7, 57, -34, 93, -89, -5, 49, 107, 33, -6, -6, -94, 26, -121, -85, -31, 116, -51, -32, 73, 127, 63, 120, 47]");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "3316B599EB402F1A52B859E3F79217A504385144C0F635A96BD96B1F9643F4F528C73EBF5DE72918F9C49208761F049822972BDC25779B7CF5A1ED5F97DE7F8D9522666EBEB0408DEABCB57156DDFD8F41C47BC697C915CA0739DE5DA7FB316B21FAFAA21A87ABE174CDE0497F3F782F" + "'", str42, "3316B599EB402F1A52B859E3F79217A504385144C0F635A96BD96B1F9643F4F528C73EBF5DE72918F9C49208761F049822972BDC25779B7CF5A1ED5F97DE7F8D9522666EBEB0408DEABCB57156DDFD8F41C47BC697C915CA0739DE5DA7FB316B21FAFAA21A87ABE174CDE0497F3F782F");
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey50);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey50);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey50);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey78);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey78);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey78);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("D35960F848132D8F8E9DD1FCF1CBD521", secretKey78);
        java.lang.Class<?> wildcardClass89 = byteArray88.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-124, -81, 117, -63, -61, -94, 124, -95, 126, -82, -108, 69, 47, -114, -36, 56]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-60, 33, 106, -93, 56, 68, -25, 114, -69, -76, -61, 26, 56, 88, -128, 31]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-8, -55, 122, 81, -75, 91, 77, 80, 77, -26, -19, -69, -29, -73, 45, -79]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-50, -101, -50, -67, -118, 5, 92, -94, 124, -45, 33, -42, 41, -98, -98, -58]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[14, -51, 12, 76, 64, -29, -16, 4, -13, -61, 119, -82, 76, 84, 106, -79]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[55, -84, 43, 58, 64, 112, -66, 125, 119, -69, 65, 71, 42, -21, 39, 86]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[55, -84, 43, 58, 64, 112, -66, 125, 119, -69, 65, 71, 42, -21, 39, 86]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-86, 22, 97, -49, 97, 1, -7, -99, 77, 21, 71, 100, 87, 114, -8, -9]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[120, -50, -44, 62, -81, 93, 49, 39, 123, -108, -14, -7, 56, -101, 111, 81]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[68, -80, 73, -31, 113, 97, 104, 98, 124, -2, -52, 49, -104, 120, -26, 3]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[22, 40, -60, -67, -40, -46, -4, 115, -122, 121, 10, -15, 22, 34, 12, 100]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[121, 126, -2, 40, 53, -91, 115, -35, -120, 56, -23, -44, 116, 117, -122, 46, 27, 5, 43, 60, -19, 68, 4, -105, 37, 22, 33, -124, 85, -35, -122, -68, 68, -80, 73, -31, 113, 97, 104, 98, 124, -2, -52, 49, -104, 120, -26, 3]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[30, 37, 69, 38, -53, 22, 65, -77, -76, -60, 39, 24, 121, 27, -73, 83, -101, -55, -84, 86, -27, 120, -42, -76, 66, -42, 48, 90, -10, -106, -96, 97, 68, -80, 73, -31, 113, 97, 104, 98, 124, -2, -52, 49, -104, 120, -26, 3]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-101, 40, 49, 12, 55, 76, 36, 126, 6, -50, 124, 102, 120, 31, 102, -128]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[12, -127, 123, 116, 64, -29, -39, 125, -21, -105, -8, 14, 15, 30, -6, 46]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-88, 29, 76, -35, -79, 119, 103, 30, 59, -35, -95, 117, -105, 81, -81, 39]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[67, -71, -20, -22, -125, -117, -118, 118, 69, -73, -70, 107, 127, -38, 3, -14, 85, -104, -27, 60, -106, 26, 126, 15, -101, -123, -36, 42, -120, -69, -46, 0, 69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-128, -77, -33, 127, -83, -124, 86, -120, -27, 8, 114, 24, -45, -76, -66, -62, -8, -58, -82, 66, 110, 29, 35, 122, 59, 97, 24, 65, -95, -11, -78, 25, 69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-126, -22, -113, 37, -23, -19, 14, -15, -17, -25, 125, -121, -90, 88, 73, 76, -44, 117, -70, -38, -1, -103, 53, -103, 8, -38, -27, 60, -117, -15, -69, -5, 56, 75, 70, 3, -5, 121, -121, -99, 104, 22, 77, -61, 89, 92, -114, 56, 63, 28, 57, 26, 114, 60, 124, 93, -36, 97, 58, 102, -17, 25, -97, -42, -126, 51, 22, -11, 83, 104, -13, 71, 108, -96, -128, -67, -17, -92, -49, 126, -75, 78, -39, 21, -66, -95, -56, -108, -57, 25, -5, -38, 110, -120, 48, 104, 69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[106, -62, 12, 79, 64, -60, -92, -73, -93, -76, 14, 119, 127, -105, 59, 34, -69, -66, 125, -11, -70, 75, 59, 3, -36, -98, -108, 88, 73, 42, -30, -27, 69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-59, -73, -117, -25, 64, 97, -95, -89, -76, -36, 40, 26, -10, -21, -22, -126, -115, 15, 75, 126, 48, -80, -112, 127, 93, 13, -100, -43, -120, -109, -57, -92, 69, 38, 0, -11, 69, -97, -116, 101, 113, 30, 90, 60, 16, -76, 122, -91]");
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey65);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey65);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey65);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("F458680343CB11DD28EBCC4046A8939D4ECF5FCD1B6348A9E0E29A53DFE889BD08E38E468AC5DEF5BA3ED3D3907164CD", secretKey65);
        java.lang.Class<?> wildcardClass74 = byteArray73.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-108, -81, -87, 62, -40, 93, -33, -60, -60, 44, -34, -10, 116, 12, 68, 27]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[87, -16, -11, 124, 1, -90, -19, -76, 12, -105, -52, -104, 78, 28, 62, 93]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[8, -94, -60, -98, -9, -19, 43, -120, -14, -5, -55, 115, 84, 77, 97, 102]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[15, 76, -94, -119, -39, -30, 76, 21, 99, 11, -70, 103, 101, 114, 34, 116]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[87, 74, 59, -34, 37, -8, -8, -95, -9, 26, 50, -44, 55, 52, 36, 56]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[126, -38, 87, 40, -90, 13, 126, -116, -51, -92, 93, -77, -78, 103, -125, 27]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[71, 59, -91, 26, 103, -99, 7, 26, -98, 43, 46, 68, 75, -72, -91, 109]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[69, 79, 37, -36, -114, 0, -76, 45, -34, 12, 14, 108, -91, -63, 100, 43]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-115, -58, 24, 85, 104, -3, -3, 110, 19, -39, -102, 108, -103, 54, 4, 54, -119, 86, 28, -35, -33, -38, 96, 28, -38, -115, -31, -122, -50, 9, 34, -41, 71, 59, -91, 26, 103, -99, 7, 26, -98, 43, 46, 68, 75, -72, -91, 109]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[3, -116, -25, 7, -39, 23, -102, -38, 45, 101, 116, 111, 29, -76, 113, -107]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[90, 11, -21, 97, -82, 117, 63, 92, 62, -30, 17, -87, -47, 27, -59, -77]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[63, 65, 72, -38, -54, -121, 60, -97, 81, -104, 34, -52, 9, 99, -68, 16]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-89, 122, -12, 58, -86, -98, -30, 32, -8, -115, -49, -82, -39, -107, 97, 9]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-120, -104, -8, 74, 48, -29, -117, 89, -87, 19, -118, -97, -89, -16, 48, -79, 125, -32, 95, 106, -125, 110, -122, 26, -59, -3, 98, 95, 109, -51, -11, 56, 63, 65, 72, -38, -54, -121, 60, -97, 81, -104, 34, -52, 9, 99, -68, 16]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[101, -68, -5, -66, -47, 32, -86, -19, 46, -56, 97, -12, 111, -26, -37, 8, 4, -123, 24, -105, 105, -76, 54, -43, -58, -79, -104, -64, -107, 14, -48, -115, 63, 65, 72, -38, -54, -121, 60, -97, 81, -104, 34, -52, 9, 99, -68, 16]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-81, -117, 106, -71, 6, 43, -76, 88, 16, -91, -114, -1, 10, -13, 85, 107, 122, 50, 102, -102, -69, -62, -91, -43, -61, 76, -31, 41, 8, -60, -94, -44, -69, 78, -8, 59, -99, 100, 82, 47, -4, 59, 44, -59, 34, -55, -87, -49, -102, 47, -106, -94, -102, -109, -66, 88, -20, 122, -43, 14, -34, -108, 33, 63, -104, 19, 90, -73, 101, 126, 54, 69, -113, -109, 119, -105, -117, -86, 34, -92, -70, 53, 123, -48, 4, -123, -125, 28, 78, -17, 59, 21, 79, 20, -73, 87, 63, 65, 72, -38, -54, -121, 60, -97, 81, -104, 34, -52, 9, 99, -68, 16]");
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("AF95819EC94A1C4FD01986D2BD1962EEDEAAE2AB37C8019EEACC57BB70BA70541B5D39E57EE221758AED6DE3C83EF16F", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("A61D45E68C67F99B87B206832F45B8F1", secretKey6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-41, 9, -14, -8, 84, -26, -50, -78, -58, 49, -60, -120, 41, 68, -24, -88]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-68, -39, 91, 49, -4, 80, 72, -27, -83, -19, -21, -110, 15, -18, 35, 99, -47, -122, 107, -108, -96, -55, 93, 9, 124, -112, -97, 41, -42, 22, 84, 81, 20, -26, -55, 1, 126, -46, 73, 77, 90, 78, 122, -110, 61, 90, 35, -25, -46, -35, -114, -73, -22, 88, 9, -67, 119, 43, -128, 21, 17, 103, 33, 56, -48, -62, 40, 75, -116, 100, 123, 62, 80, -20, 60, 123, 102, 15, 6, 106, 42, 97, -42, 104, -2, -76, -83, 99, 51, 54, -63, -18, 108, 47, -4, -90, -41, 9, -14, -8, 84, -26, -50, -78, -58, 49, -60, -120, 41, 68, -24, -88]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-125, -32, 30, 117, 51, 22, -101, -95, -35, -110, 9, 2, 103, -36, 27, -65, -26, 114, 21, 10, 124, 119, 71, 123, -17, -123, -35, -110, 90, 99, -74, 96, 39, -84, -19, 27, 22, -84, 52, -77, 35, 30, 126, 85, 38, -68, 126, -21, 99, 64, 48, 79, 8, 41, 9, -120, -4, -104, -99, -113, 39, 67, 30, 73, 1, 118, 57, -117, -119, 35, 19, 44, 62, -56, 51, 126, -78, -27, 49, 48, 124, 9, -38, -91, -117, -81, 6, 79, 29, 15, -59, 1, -42, 101, -128, 83, -41, 9, -14, -8, 84, -26, -50, -78, -58, 49, -60, -120, 41, 68, -24, -88]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[15, -20, -36, -27, -41, 59, 81, -88, 125, 100, -45, 21, 38, -98, -120, -36, 118, 121, -121, 67, 118, -105, 120, -39, 7, -59, 94, -33, -43, -46, -14, -61, -41, 9, -14, -8, 84, -26, -50, -78, -58, 49, -60, -120, 41, 68, -24, -88]");
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6BBEA07288CF3BE9E1DE322DA09FD7F6", secretKey7);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("859B3FA722C372255FE30D8C636CD8405F9F730B2F82910FBDE3CFDC474CF456F33A22EDB46C16DB9298451E252DC0F7", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey22);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey22);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[106, 20, -53, 50, 10, 68, -12, -99, -125, -66, 78, 79, -87, -67, 22, 78]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[101, -119, -123, 32, 61, -53, 80, -49, 13, -109, 103, -84, -11, -84, -12, 30]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[101, -119, -123, 32, 61, -53, 80, -49, 13, -109, 103, -84, -11, -84, -12, 30]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[30, 109, -73, -49, -3, 33, -48, -100, -45, 89, 20, -52, 113, -48, -125, 30]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-119, 106, 32, -44, -42, 112, 40, 28, 7, 77, -98, -114, 65, -118, -52, -115, 65, -110, 45, 37, 59, -2, 110, -102, -62, 98, 113, 13, -15, -92, 108, 105, 106, 20, -53, 50, 10, 68, -12, -99, -125, -66, 78, 79, -87, -67, 22, 78]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-119, 106, 32, -44, -42, 112, 40, 28, 7, 77, -98, -114, 65, -118, -52, -115, 65, -110, 45, 37, 59, -2, 110, -102, -62, 98, 113, 13, -15, -92, 108, 105, 106, 20, -53, 50, 10, 68, -12, -99, -125, -66, 78, 79, -87, -67, 22, 78]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[39, -46, -82, 107, 9, -9, -102, 57, 100, -6, -92, 92, -77, -8, -34, 71, 48, 7, -29, -90, -92, -7, 100, -72, -3, -103, -121, -68, 57, -87, -66, 33, 106, 20, -53, 50, 10, 68, -12, -99, -125, -66, 78, 79, -87, -67, 22, 78]");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, -107, 116, -99, 74, 87, 34, -83, -104, -96, -96, -118, 101, 95, 13, -30]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-106, -120, 97, 117, -113, 63, -11, -49, 50, 50, -95, -92, 56, 113, -63, 46]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-106, -120, 97, 117, -113, 63, -11, -49, 50, 50, -95, -92, 56, 113, -63, 46]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[22, -44, -81, 95, -29, 123, 65, 125, 12, -63, -101, -67, 91, 71, 81, -79]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-46, -95, 61, -96, -104, 124, -28, -35, -37, 45, -91, 119, -100, -68, -7, 12, -87, -40, -108, 34, 127, -22, 2, -110, -50, -24, -112, -89, 35, 33, -93, -3, 1, -107, 116, -99, 74, 87, 34, -83, -104, -96, -96, -118, 101, 95, 13, -30]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-50, 24, -114, 109, -67, 24, -2, 59, 20, 11, -91, 56, -6, -35, -33, -123, 16, -55, 14, 23, -25, 30, 116, 100, 55, -86, -46, -36, 92, -35, -82, -75, -78, -92, -64, -80, -111, 89, 109, 70, -35, 122, 101, 69, -4, -95, 21, -86, -10, 123, -1, -106, -85, 98, 107, -54, -41, -109, -117, 1, 7, 65, 6, -70, -5, -113, -98, 68, -14, 97, 127, -41, 98, 61, -66, 105, 115, 8, 30, 108, 38, 79, 88, -52, -63, -42, 15, 35, -48, 78, -70, 10, -44, -34, -62, 86, 1, -107, 116, -99, 74, 87, 34, -83, -104, -96, -96, -118, 101, 95, 13, -30]");
        org.junit.Assert.assertNotNull(byteArray29);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("499A649939B69AEE2BF40C1B2CC102D70E9E14850794C2EEB8B8B7D89FC0E76F062C6805D6B8C8CB188D2FDC529867715B316CAAAC78F51F2D4EE92565B8EEFC31017F193928D604255756F7FBAAB3A0D702277F7813C1A6205771EDF53A390E397BF47798FDF682A25549800C3FFF12", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.Class<?> wildcardClass10 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-121, -117, -126, -97, 17, -54, 36, -49, 70, -91, 121, -109, 64, -51, -91, 45]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[51, 108, -84, 73, 52, -84, -26, 87, 98, 22, 125, -115, 3, -60, -48, 42]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[7, 93, -107, 59, -33, 4, -31, 60, 44, -121, 116, 9, -36, 108, -103, -128, -49, 108, -59, -79, -19, -30, 56, -3, 82, -21, 57, -14, -22, 101, -19, 73, -127, -103, -47, 53, -95, 97, 59, 104, -82, 85, -86, -93, -96, -107, 111, -124, 31, 50, 90, 116, -5, 80, 79, 30, -113, -37, 83, -55, -69, 2, -66, 32, 124, -124, 73, -53, 71, 103, 52, 42, -43, 46, -50, 35, 91, -7, 24, -10, -120, -61, 126, -34, -67, -124, 67, -14, -79, -98, -76, 80, 44, 74, -13, 105, -121, -117, -126, -97, 17, -54, 36, -49, 70, -91, 121, -109, 64, -51, -91, 45]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7F2F62DF99E373177A682CCD0D3C838DE16BA49A5B87BC1E3732F3C49C1C697D0B75070D5AAF8C3F38744E1F35907DEB5ABCD8D9FC59E59E04EC69385DA793C539D6323C6A2E989673588A865EC552607AB201FE84AF72CABF2F9E7076591799E5906B3E733F6401825D56E5D646DA77153F4323506311D44F637576753CD645E7B464D58D27591FB60D208C19C6FBA8807887C7597B592326435DBEE48C202625FAAB563FE1778D3989211B39D9EFEFF75CF03CACC36C7111704FFC67B360CA70279AE9F0AAD61A9AC6C972A5DA27C78808909C4EC89E4CA132AF46D97F8230878B829F11CA24CF46A5799340CDA52D" + "'", str9, "7F2F62DF99E373177A682CCD0D3C838DE16BA49A5B87BC1E3732F3C49C1C697D0B75070D5AAF8C3F38744E1F35907DEB5ABCD8D9FC59E59E04EC69385DA793C539D6323C6A2E989673588A865EC552607AB201FE84AF72CABF2F9E7076591799E5906B3E733F6401825D56E5D646DA77153F4323506311D44F637576753CD645E7B464D58D27591FB60D208C19C6FBA8807887C7597B592326435DBEE48C202625FAAB563FE1778D3989211B39D9EFEFF75CF03CACC36C7111704FFC67B360CA70279AE9F0AAD61A9AC6C972A5DA27C78808909C4EC89E4CA132AF46D97F8230878B829F11CA24CF46A5799340CDA52D");
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("649A0B31811C16EA1DD354E91C799D674A01F117A63128F5748C1E7B59504A0FFF58A48EACF9243FBE89ED95ACB6152E", secretKey52);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-57, 92, 22, 33, 119, 0, 100, 77, 90, -120, 16, 75, -50, -63, 93, -27]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, -43, -85, -8, 76, -92, -100, -93, -89, 38, -119, 96, 90, -80, -103, 18]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[80, -39, 53, -55, 78, -101, -72, -30, -81, -45, -32, 72, 5, 115, 102, 118]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-117, -82, -36, 76, -52, -31, -73, -59, -17, 116, 33, 103, -31, -55, 31, -54]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[27, 81, -128, 40, 30, 66, -2, -91, -76, 3, -74, 102, 25, 31, -118, -105]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-50, -37, 4, -39, 86, -72, -70, 3, 66, 13, 7, -60, -22, -29, 68, 55]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-35, 45, 107, -46, -43, -90, -34, 118, -20, -43, 4, -36, -1, -31, 23, 45]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[106, -2, 85, -14, -28, 83, 76, 108, 55, -5, -1, -120, -2, -86, -104, -71]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[59, 68, 42, 39, -101, -17, 97, 4, -103, -79, 2, 84, -23, 67, 47, -116, -79, 124, 126, -23, -82, 121, 73, -73, -64, -124, 73, 86, -124, 8, 120, -2, -35, 45, 107, -46, -43, -90, -34, 118, -20, -43, 4, -36, -1, -31, 23, 45]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-114, -66, -21, 81, -43, -121, -57, -54, 82, 67, -16, 74, -64, -5, -125, 55]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[69, 92, -81, 107, -97, 124, -93, 68, 53, -37, 91, 88, 121, -91, -62, -55]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[69, 92, -81, 107, -97, 124, -93, 68, 53, -37, 91, 88, 121, -91, -62, -55]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[71, -19, 114, -124, 44, -116, -95, -79, 118, 27, -78, 116, 47, -119, 5, -41]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[56, -116, 7, -95, -41, 44, 3, 114, 27, 60, -31, -101, -1, -43, -51, -36, 75, -56, -114, -52, 90, -59, 19, -57, 85, -73, -20, -18, -118, 124, -13, 114, -8, 23, -101, 119, -115, 117, -14, 122, 81, -89, 122, 14, 61, 53, -64, 113, 100, -67, -60, 93, -90, 118, -80, 75, 77, 5, 71, 31, 51, 83, -74, 81, -124, 84, 117, -36, 53, 50, -21, 100, -96, 58, -59, 75, -41, 123, 30, -18, 73, 33, -35, -76, -13, -45, 85, -28, -95, 12, -13, 31, -88, -39, 56, -99, -114, -66, -21, 81, -43, -121, -57, -54, 82, 67, -16, 74, -64, -5, -125, 55]");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "388C07A1D72C03721B3CE19BFFD5CDDC4BC88ECC5AC513C755B7ECEE8A7CF372F8179B778D75F27A51A77A0E3D35C07164BDC45DA676B04B4D05471F3353B651845475DC3532EB64A03AC54BD77B1EEE4921DDB4F3D355E4A10CF31FA8D9389D8EBEEB51D587C7CA5243F04AC0FB8337" + "'", str60, "388C07A1D72C03721B3CE19BFFD5CDDC4BC88ECC5AC513C755B7ECEE8A7CF372F8179B778D75F27A51A77A0E3D35C07164BDC45DA676B04B4D05471F3353B651845475DC3532EB64A03AC54BD77B1EEE4921DDB4F3D355E4A10CF31FA8D9389D8EBEEB51D587C7CA5243F04AC0FB8337");
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("2733CF51A4C2AD7AE1784E8370333630E75EFEB46B4ABCAE4F4E79D5FC0C949E75086B52493DE875A718A56003C40796", secretKey31);
        java.lang.Class<?> wildcardClass41 = secretKey31.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-13, -39, 71, -66, -49, -39, -76, -70, -36, -116, 112, 89, 67, 117, -92, -96]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[59, -65, 41, -8, 11, -51, -94, 126, -13, 115, 108, -6, 112, -43, 21, -52]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[94, 69, -92, -44, -109, -124, -100, 80, 74, -72, 92, 8, -63, 105, -33, -122]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-42, -41, 37, -61, -77, 37, 34, 70, -60, -81, 119, 125, -13, 45, -128, -71]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-78, -84, -16, -42, 119, 86, -71, -90, -90, -126, 91, 119, 68, 16, 64, -95]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-9, -12, 9, 51, -118, -23, 118, 59, -94, 21, -42, -23, 124, -38, -5, -31, -55, 71, -106, 119, -90, 99, -53, 13, 38, -68, 23, 57, 17, -39, -66, -120, 112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[3, 112, -89, 49, 76, 43, 89, 61, 42, 13, 39, 4, 59, -81, 120, -80, 88, 92, 11, -58, 67, 29, -77, 88, -37, -43, 62, 123, 125, 59, 6, 107, 112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-121, 31, -72, -56, -117, -78, -20, 51, -66, -72, -121, -5, 58, -7, -10, 73, -74, 98, -28, -53, -111, 39, -17, -117, -124, -98, -37, -69, -122, 30, -89, -79, 59, -99, 123, -75, -5, 67, -52, 111, -32, -80, 120, -118, 52, 76, 103, 37, 59, 19, -118, -76, 126, 45, -24, 50, 12, -46, 67, 9, -43, 11, 41, -48, 51, 75, 79, -55, 45, -79, 51, -1, 50, 29, 95, 38, 29, -82, -43, 100, 42, -8, 18, -114, 54, -108, -15, 11, -39, -106, 69, 60, -16, -13, 85, 101, 112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[121, -37, 123, 48, -126, -42, 112, 74, -82, 34, 15, -18, -36, 52, 71, 11, -80, 2, -31, 57, 87, -90, -12, -96, 30, -51, 86, -35, -39, -81, -60, -27]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-46, 107, -106, -109, 109, 96, 77, -22, -73, 9, -3, -23, -54, 10, 122, -126, -26, -24, -120, -72, -24, -66, 60, -112, -21, -38, -118, -74, 18, 67, 75, 73, 86, -21, 97, 43, -122, 75, 3, 38, 105, -65, -66, -60, -45, -53, 53, 23, 101, -113, -88, -112, -107, 112, -95, 59, 84, 119, -119, 6, 73, -76, -25, 12, -108, 17, 91, -111, -44, -77, -41, 25, 106, -118, -40, -119, -76, -77, 48, -118, 78, 77, 78, 22, -32, 109, 31, 49, -106, 73, 12, 30, 33, -39, 16, 110, 112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[111, 87, -20, 25, -86, -68, -44, 38, -53, -82, 87, -60, 38, 0, -101, -63, 126, -88, -41, -56, 58, -57, -93, -108, -12, -122, 53, 70, -15, -126, 81, -117, -84, 110, -66, 31, -48, -54, -92, -72, -46, 75, 46, -54, -12, 68, 40, 57, 13, -2, -2, 24, -17, -106, 59, 71, -22, -125, -81, -91, -94, -77, -14, 54, -97, -69, -119, 47, 108, -11, -126, -77, -26, -62, 46, 15, 35, -72, -46, 109, 82, 18, 64, -119, -41, -83, 35, -76, 38, 122, 37, 77, 91, 68, 109, -6, 112, 71, 0, 25, -93, 66, 86, 80, -89, 89, 4, 106, 94, 22, 43, 28]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey14);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey24);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("0AF0535C088597FAF65C01D551ABB67D", secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("02C3F2126843143433879BD0F0A2693E42C34F0C5ACD97EA7CC5122709CAF927C4BA03C50EA6FA133A5ABDF4987B3297D2F38DB83D3E8F59E85D8FE3E8C4B9C34B5E0A654C40A7B1329B5FD7F7014F25A5ED634056248C87B377D8DB4CBAB897604AD39A7FAC9D24C3A2C9B0169D8F61C613D537F085DCD4861020B84EEEF59FF64880CFD4DF06C4C3C4722FAAD4B90436F71EC3D3A99352E02AF55544C280C31A4BF5B4B0083CA07C46291E46E7CC07987F877488479B973C51C8A7EB49CF4C3BECC74DF9341D1888328896244AB46D758D9745392DB0C7C03FB90C9C6585D4B2CE56C11365BF419E3F91FE06B4918A", secretKey24);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey24);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[39, -72, -84, -25, -20, -30, -33, -39, -22, 6, 37, 52, -41, -108, 12, -95]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-14, 85, 115, -84, 84, -106, 68, -38, -73, 112, 46, -73, -77, -57, -13, -7]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-14, 85, 115, -84, 84, -106, 68, -38, -73, 112, 46, -73, -77, -57, -13, -7]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[22, -77, 121, -86, -80, 19, 63, -45, 70, 63, -105, -123, 44, 57, 38, -125]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "0190BE2755FE969745743F7397B642D5BDAC79AC72B6E44FB9F2BE10284EB16FAA572726A3C2B33D517B9AA098E6ECFC3D92E8742B572430435BEA52F48E6CE431EF86A071468DD509ABC90A52AFDF496A32CD3DC3989DA9589D85767E2D377D87F23C45C5BEF9AFA158FB15FD59E45670C04FD008BFAE7CE71453A89B70035AE7EF9026C3CC1405A39F4E9E7586A18F6AB9662E380A01E787B8FE8BE1E0A31F092D9A7C3751371CDEA706DAE8E836D1FA54E30024FF2FE9D466F5F78E62C7A51614E8A750FF86707A3ED9A08DF946D84C90E3D8AFD5F1558FF7BD93329E1D83376F35BB4C70F49DCCFF58A9369201CD" + "'", str18, "0190BE2755FE969745743F7397B642D5BDAC79AC72B6E44FB9F2BE10284EB16FAA572726A3C2B33D517B9AA098E6ECFC3D92E8742B572430435BEA52F48E6CE431EF86A071468DD509ABC90A52AFDF496A32CD3DC3989DA9589D85767E2D377D87F23C45C5BEF9AFA158FB15FD59E45670C04FD008BFAE7CE71453A89B70035AE7EF9026C3CC1405A39F4E9E7586A18F6AB9662E380A01E787B8FE8BE1E0A31F092D9A7C3751371CDEA706DAE8E836D1FA54E30024FF2FE9D466F5F78E62C7A51614E8A750FF86707A3ED9A08DF946D84C90E3D8AFD5F1558FF7BD93329E1D83376F35BB4C70F49DCCFF58A9369201CD");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[102, 112, -19, -58, -86, -107, -112, -105, -72, -88, -96, -16, 91, 16, 85, 95]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[20, -41, 107, -128, 75, -58, 123, 17, 28, -23, 72, -81, 10, -17, 95, 35]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[95, -55, -104, 123, -39, 109, -70, 28, 118, 20, -72, 104, -37, -70, 113, 90, 18, -116, -26, 111, 93, -83, 68, 24, -100, -77, -25, -52, 44, -61, 13, -78, 102, 112, -19, -58, -86, -107, -112, -105, -72, -88, -96, -16, 91, 16, 85, 95]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[39, 53, -56, -7, -85, 110, -13, 105, 97, -43, 68, 58, -80, -110, 108, -58, 101, 20, 2, -78, -103, -68, -81, -81, -25, -30, -56, -113, 77, -37, -107, 13, 102, 112, -19, -58, -86, -107, -112, -105, -72, -88, -96, -16, 91, 16, 85, 95]");
        org.junit.Assert.assertNotNull(byteArray29);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey48);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey48);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[16, 126, -69, 125, -89, -100, -62, 11, 91, 117, 20, 51, 55, -126, -59, -12]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[122, -35, 126, 73, 107, 113, 71, 74, -126, 28, -124, -128, 16, 25, 55, 2]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-5, -36, 71, -32, 51, 44, 10, -16, 116, 24, 57, 113, 121, 82, 88, 93]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[39, -102, -42, -114, 99, 91, -74, 44, 32, 34, 118, -75, 77, 51, 48, -96]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[105, 100, -66, -31, -97, 61, 54, -1, 122, 56, 110, -34, -79, -83, 23, -44]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-88, 51, -27, -34, -69, 58, 44, -12, 123, 25, 41, -69, 8, -117, 1, 26]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-88, 51, -27, -34, -69, 58, 44, -12, 123, 25, 41, -69, 8, -117, 1, 26]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[25, -8, 76, -105, 22, -4, 11, 4, -19, -2, -128, 70, 87, 104, -21, 51]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[101, 61, -8, -90, 55, 41, 76, 88, 54, -95, -5, -88, -79, -86, 77, -56]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-113, 104, -57, 63, 71, 82, -1, -19, -16, -77, -54, 42, 44, -112, 13, 96]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-6, 1, -59, -81, -122, -101, -14, -44, 99, 46, -112, 107, -83, 73, 126, -3]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-5, 35, -51, 27, 75, 100, -11, 60, -94, 56, 44, 15, 32, 46, 41, -120, 104, -49, -123, 116, -20, -123, 110, 35, -36, -20, 1, 48, 44, 5, 109, -5, -113, 104, -57, 63, 71, 82, -1, -19, -16, -77, -54, 42, 44, -112, 13, 96]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[31, -86, -56, -66, -92, 91, 8, -22, -123, -16, 20, 19, -19, 112, -14, -7, -94, -47, -34, 50, -96, -20, 90, -98, -70, -56, 16, 66, -69, -50, 87, 47, -113, 104, -57, 63, 71, 82, -1, -19, -16, -77, -54, 42, 44, -112, 13, 96]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass14 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[23, -60, 80, -28, -92, -36, -92, -12, 17, 110, 126, 109, -110, -42, 95, -83]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[89, 83, 96, 96, 8, 78, 32, -109, -55, 80, 125, -113, -28, 98, 5, 119]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[89, 83, 96, 96, 8, 78, 32, -109, -55, 80, 125, -113, -28, 98, 5, 119]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4FED3A0CB7C3A1FC81421E4FE10E8FBC1EBDDA51EFA67CF1019CCF403CFC51FF9D7943D5D36CEBEE7FAB38770547772AED76BB2F953CC89D30115E29D6034DA0E3AC364FF7251B15DC28D0216045F972CABCB5A46767C6FFF0572C0262080636D7921A403680521B569FC6E2F788BF742202CE4954C1F4E6AB21CDCE066915BC75E75EFE50F79ECF7BCA899FC2EE879149D57E6AE44E13DA7A819348AFA9C6871FA8D3B272D41403641E308548F429FFC7EEFCEEA2E961C18A8EC876D7348B9E300428232B40059DE3BE1355F4D5BEBDB8B5C075110EF110C5D76ACADD77881E57A849A5CBFAB520A34251A44BE3DB80", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[53, 116, 80, 56, -115, -113, 3, 51, -91, -40, 53, -45, 23, -113, -98, 5]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[83, -119, 97, 10, -79, 2, -112, -90, -87, 70, 38, 85, 11, 76, -69, 37, 24, 36, -37, -63, 64, -107, -21, 116, -23, 80, 32, 94, -128, -66, -76, -46, -43, -53, 107, -111, 78, 37, 125, -107, 8, 113, -5, 95, -115, 122, -67, 35]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-43, -53, 107, -111, 78, 37, 125, -107, 8, 113, -5, 95, -115, 122, -67, 35]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[75, -23, -105, -91, 15, -71, 7, -88, 36, -49, -90, 34, 2, -6, -79, 100, -53, 36, -81, -13, 12, 19, -17, 2, 67, 115, 8, -41, 84, -7, 89, -92, -43, -53, 107, -111, 78, 37, 125, -107, 8, 113, -5, 95, -115, 122, -67, 35]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[83, -119, 97, 10, -79, 2, -112, -90, -87, 70, 38, 85, 11, 76, -69, 37, 24, 36, -37, -63, 64, -107, -21, 116, -23, 80, 32, 94, -128, -66, -76, -46, -43, -53, 107, -111, 78, 37, 125, -107, 8, 113, -5, 95, -115, 122, -67, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("32AFC3AF352522613622535E2D41EDA06D0D19DAB2A5F4D8826E7703D4225A3BC575E88190213C1FE994C41689EAA77DEE404F0A720295B7B8B358450B601B0DE4E3364834A9D1B5F9BDDEDC357E20BB9DF24FF39908DFBD5D07B491A9410E3253F332E840C969C57850E90AC1899789D2308536BEB63A9514C726BC5163C3A3458DB2E8451F2729826750147FECFD141FADA79E96CE3572F8CBDC1EA19E9386F6204B726D5DE8490EB87D7F66998E8286FC06A1308D76EC73E1BB788E312FFF9702C49A446B79962DFEA8B369DD47D3E399C9A42A0978A1684E3E7D67B032C3C82EFB99617E2DD7DFB09669CB30CC06", secretKey4);
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[19, 124, -86, 5, -89, -46, -52, -54, -40, 53, 37, -108, 25, 54, 46, 45]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[29, 111, 7, -49, -18, 63, 2, 39, -14, -120, 108, 60, -33, -48, -110, -57]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-21, -13, 6, -42, 92, -4, 113, 49, -50, -11, -35, -46, -88, 42, -43, -100, -81, -111, 106, 63, -117, -23, 73, 125, 16, -109, 3, -113, 126, -90, -17, -55, 61, -125, 120, 7, 41, 49, 97, 60, -65, -103, -91, -28, -46, 31, -66, -118, -97, 119, 58, -118, 39, 113, -12, 68, 76, -19, -120, -109, 33, 110, -106, 78, 44, 108, -21, -13, -128, -83, -29, -36, 93, -107, -109, 76, -38, 47, 10, 70, 66, -124, -68, -112, 15, 29, -15, 47, 23, -71, -101, 126, 49, -102, 122, -53, 19, 124, -86, 5, -89, -46, -52, -54, -40, 53, 37, -108, 25, 54, 46, 45]");
        org.junit.Assert.assertNotNull(byteArray8);
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-55, 107, 111, 126, -68, -35, -79, -82, 104, 80, -35, 87, -34, 4, 0, -115]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-27, -91, -78, -106, -89, -116, -3, 78, -39, 51, 108, -102, -1, 4, -101, 116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-27, -91, -78, -106, -89, -116, -3, 78, -39, 51, 108, -102, -1, 4, -101, 116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-1, 67, -26, 8, -50, 34, -100, 64, -28, 91, -127, 107, 121, -26, 36, -116]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[20, -19, -72, -48, -101, -108, 88, -72, -29, -25, -8, -13, -55, -93, -43, -18, -62, 22, -9, 44, 41, -14, 117, -63, 7, 106, 111, -38, 83, 76, 78, 87, -55, 107, 111, 126, -68, -35, -79, -82, 104, 80, -35, 87, -34, 4, 0, -115]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-55, 107, 111, 126, -68, -35, -79, -82, 104, 80, -35, 87, -34, 4, 0, -115]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[63, -63, -81, 8, -101, 77, -72, -122, -6, -1, -106, -44, 115, -79, -43, 15, 107, 115, -91, -23, -85, 57, 21, -83, 36, 47, -39, -53, -32, 100, 46, -41, -76, -63, 90, -38, -117, -101, -29, 57, 61, 42, 53, -21, 71, -9, -89, -76, 56, -124, 88, 84, -113, 97, -31, 48, 84, 86, -95, 119, -66, -69, 66, -101, 114, -107, -74, -81, -94, -100, -94, 74, -51, 102, -104, 13, -123, 127, 5, -97, -24, -13, 108, -52, 105, -89, 2, -39, 110, -79, 43, -98, -103, 16, 38, 40, -55, 107, 111, 126, -68, -35, -79, -82, 104, 80, -35, 87, -34, 4, 0, -115]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "3FC1AF089B4DB886FAFF96D473B1D50F6B73A5E9AB3915AD242FD9CBE0642ED7B4C15ADA8B9BE3393D2A35EB47F7A7B4388458548F61E1305456A177BEBB429B7295B6AFA29CA24ACD66980D857F059FE8F36CCC69A702D96EB12B9E99102628C96B6F7EBCDDB1AE6850DD57DE04008D" + "'", str15, "3FC1AF089B4DB886FAFF96D473B1D50F6B73A5E9AB3915AD242FD9CBE0642ED7B4C15ADA8B9BE3393D2A35EB47F7A7B4388458548F61E1305456A177BEBB429B7295B6AFA29CA24ACD66980D857F059FE8F36CCC69A702D96EB12B9E99102628C96B6F7EBCDDB1AE6850DD57DE04008D");
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("6BBEA07288CF3BE9E1DE322DA09FD7F6", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-66, -35, 106, -117, -27, -52, 96, -104, -122, 56, 41, 19, 89, -45, 9, -13]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[45, 119, -38, 5, -17, 46, 73, 42, 1, 5, 18, 103, 39, 41, 15, -5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[45, 119, -38, 5, -17, 46, 73, 42, 1, 5, 18, 103, 39, 41, 15, -5]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-7, -110, 43, 122, 125, -27, -32, -39, 86, 88, -13, 41, 126, 120, -125, -25]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-18, -90, -122, 82, -74, -42, 85, 41, -93, -79, -11, 9, -7, -113, -126, -4, -42, -29, 99, 72, -90, 29, 79, -111, 123, 41, 90, -111, -43, -127, 109, -100, -66, -35, 106, -117, -27, -52, 96, -104, -122, 56, 41, 19, 89, -45, 9, -13]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-18, -90, -122, 82, -74, -42, 85, 41, -93, -79, -11, 9, -7, -113, -126, -4, -42, -29, 99, 72, -90, 29, 79, -111, 123, 41, 90, -111, -43, -127, 109, -100, -66, -35, 106, -117, -27, -52, 96, -104, -122, 56, 41, 19, 89, -45, 9, -13]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-71, 73, 102, 36, 41, 103, -69, 51, 58, -88, 112, -114, -55, 101, 5, 55, 19, -15, -90, 62, 12, -24, -87, 114, -67, 15, 122, 66, 67, -7, -92, 64, -66, -35, 106, -117, -27, -52, 96, -104, -122, 56, 41, 19, 89, -45, 9, -13]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey61);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey61);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey61);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("96A2A04D1B84009DBFC722FC08404202556D0443F1622B551E33EC6AEC926AB6220C5A1E905F2CDFB8D5AFC9473CC961", secretKey61);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("CE223CF68EB6FEC359BAEBD15B5C20BFF08B501E10FEA3BCE54D5983D7684D38E2F42735676D95E8E2E342D32712A46F", secretKey61);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[101, 99, -111, 15, 56, 69, -103, 8, -37, 37, 91, 59, -115, 3, 3, -44]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-76, -68, 63, -85, 43, 34, -79, 29, 17, -56, 4, 92, 99, -5, -99, 55]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[4, 41, -104, -124, 72, 45, -78, 17, -32, 80, 29, -124, -127, 55, 98, -114]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-105, 40, 2, 35, -63, 49, -112, 85, -72, 56, -5, 25, -64, -42, 5, -95]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-7, 33, 47, 116, 4, 27, -2, -94, -83, -61, -99, -104, -26, 18, 95, -97, -32, 28, 65, -78, 48, 59, 38, -11, 120, -86, 34, 77, -20, 85, -61, 4, 4, 41, -104, -124, 72, 45, -78, 17, -32, 80, 29, -124, -127, 55, 98, -114]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-25, -23, 51, 22, 112, 6, -75, -100, 3, 23, 125, 83, -38, 73, -20, -77, 67, 112, -120, 114, 76, 42, -75, -53, 19, -81, -107, 100, 36, 116, -114, -30, -116, -36, 83, -85, -19, 4, 25, -106, -17, 94, -93, -20, 76, -58, -35, -112, -103, 109, 90, -45, 90, -26, 55, 98, 30, 66, -95, 58, 63, 17, 81, -32, -65, -16, 126, 46, 25, -116, 61, -17, -56, 49, -35, -102, 36, 120, -123, -4, -88, 101, -113, -16, -123, -30, 61, 113, -108, -46, 58, 26, 38, 80, -74, 38, 4, 41, -104, -124, 72, 45, -78, 17, -32, 80, 29, -124, -127, 55, 98, -114]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[103, 48, 110, 30, -37, -103, -65, 102, -89, -29, -21, 30, 60, -5, 111, -103]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-11, -101, -28, -35, 90, -126, -11, 98, 51, -88, -118, -76, 7, -64, 111, 67]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-37, 24, 2, 1, -78, 12, -97, -83, -99, -64, -12, 92, -61, -119, 65, -45]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[72, 121, 2, -27, 117, -90, -106, -37, -98, 37, -38, -49, -45, -83, -50, 113]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-38, -10, -77, 6, -119, -107, 112, 7, 4, 51, -23, -40, 58, -21, 45, 62]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-38, -10, -77, 6, -119, -107, 112, 7, 4, 51, -23, -40, 58, -21, 45, 62]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-37, -73, 109, 106, -108, -79, -104, -128, -54, -29, -98, -58, 15, 48, -67, -30, 39, 43, -70, -80, -46, -66, 74, 111, -37, -92, 85, 45, 93, -128, -14, -88, 96, 122, 22, 46, 74, 9, -37, 123, 16, 71, -109, -67, 80, 77, 40, 1, 43, 103, -42, -37, -78, -88, 76, -14, -19, 97, -87, 84, -19, -46, 120, 34, 80, 9, 80, 90, -14, 118, 40, -94, -55, 59, 54, -6, 42, 11, -117, -78, -66, 95, 20, 71, 21, -11, -115, 12, 44, -90, 104, -123, -128, -78, -68, -10, -100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[55, 119, 117, 53, 13, 17, 94, -111, 100, 53, 116, -112, 109, 93, -7, -66, -2, -41, 65, -26, -125, 60, 6, -96, -116, 53, 57, -77, 36, 25, -110, -18, -100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-81, 85, -113, -104, -41, -12, -49, 3, -43, -52, 23, 3, -101, -61, 98, 109, 41, 12, -99, 50, -96, 87, 1, 0, 86, 36, -55, 72, 84, 46, -121, 108, -100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-46, 23, -15, 16, 6, -32, 44, -29, 20, -10, 69, -66, -6, 91, 87, 118]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-33, 87, -72, -128, 26, 99, -47, -80, 60, -1, 104, -16, -87, -82, -65, 76, 114, 7, 47, -10, 29, -12, 53, -118, -105, -54, -91, 114, 105, 3, -96, 118, 100, -85, -120, 68, 30, 105, -35, 41, 22, -121, 20, -108, -56, 88, -104, 127, 73, 113, 125, 96, -59, 7, -97, -50, 127, 83, -97, -14, -107, 30, 22, -49, -17, -30, -116, 46, -2, 37, 62, -84, -85, -78, -80, -127, 35, -64, -81, -103, 66, 3, -31, -113, 86, 114, -70, -45, 83, 61, 68, 2, -8, 91, -66, -76, -100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[45, 51, -114, -89, -121, 115, 42, -114, -22, 120, -31, 84, -43, -108, 105, 126, -16, 74, -35, -83, 26, 104, 83, -110, -77, -96, 118, -107, 42, 0, -47, -92, -114, 108, -116, 30, -61, 89, -83, 104, -109, -84, 89, 10, 21, -28, -83, 52, -115, 119, 90, -81, -42, 33, 30, -95, -110, 101, 39, 19, -119, 7, 48, 99, -85, 108, -128, -77, 7, 89, -36, 9, 64, 27, 18, 14, -124, 125, 29, 101, 93, -14, -55, 105, 25, -7, 84, -94, -58, 101, -50, 38, 4, 109, -14, 96, -100, 33, 80, 71, -35, 111, 16, -108, 107, -80, 56, 127, 12, -5, -54, -38]");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2D338EA787732A8EEA78E154D594697EF04ADDAD1A685392B3A076952A00D1A48E6C8C1EC359AD6893AC590A15E4AD348D775AAFD6211EA19265271389073063AB6C80B30759DC09401B120E847D1D655DF2C96919F954A2C665CE26046DF2609C215047DD6F10946BB0387F0CFBCADA" + "'", str74, "2D338EA787732A8EEA78E154D594697EF04ADDAD1A685392B3A076952A00D1A48E6C8C1EC359AD6893AC590A15E4AD348D775AAFD6211EA19265271389073063AB6C80B30759DC09401B120E847D1D655DF2C96919F954A2C665CE26046DF2609C215047DD6F10946BB0387F0CFBCADA");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2D338EA787732A8EEA78E154D594697EF04ADDAD1A685392B3A076952A00D1A48E6C8C1EC359AD6893AC590A15E4AD348D775AAFD6211EA19265271389073063AB6C80B30759DC09401B120E847D1D655DF2C96919F954A2C665CE26046DF2609C215047DD6F10946BB0387F0CFBCADA" + "'", str75, "2D338EA787732A8EEA78E154D594697EF04ADDAD1A685392B3A076952A00D1A48E6C8C1EC359AD6893AC590A15E4AD348D775AAFD6211EA19265271389073063AB6C80B30759DC09401B120E847D1D655DF2C96919F954A2C665CE26046DF2609C215047DD6F10946BB0387F0CFBCADA");
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("5BD603B8A6EF60CA335445F55FD492DB7C7E453CC82B3B8ABCA85D0C5B95FB2EB8E4D0FF5E4D82A712F9876C8C6E4B32", secretKey28);
        java.lang.Class<?> wildcardClass35 = byteArray34.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-126, -39, 34, -89, -12, 124, 52, -17, -109, -65, 63, 31, -40, -38, 2, 66]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-116, -36, 10, -123, -78, 97, -107, -46, 55, -1, -37, -92, -3, -57, 15, 67]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[88, -5, -2, 77, 76, -77, -73, 14, 49, -98, 77, -57, 77, 31, 106, -24]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-11, -21, -74, 8, 17, 44, -118, 83, -103, 18, 67, 60, -70, 30, -119, -62]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-46, 108, 1, -81, 71, -24, 82, 8, 39, 119, 91, -33, 121, -117, 30, -34]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-126, -10, -7, 29, 105, 97, 70, 127, 23, 65, 38, 57, -21, -97, -115, -97, 122, -125, 106, -72, -45, 83, 15, -17, 99, 84, -71, 36, -57, -60, -64, -46, 96, 87, 19, 103, -46, -66, 78, -115, -29, -66, 30, 99, -56, -26, -29, -96]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[96, 87, 19, 103, -46, -66, 78, -115, -29, -66, 30, 99, -56, -26, -29, -96]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-5, -57, 28, -39, -86, 63, 109, -93, -98, 101, 96, -88, 8, 104, 54, 34, 82, 11, 95, -78, -71, 100, 125, 35, -19, -56, 84, 68, -46, -25, -99, 3, 96, 87, 19, 103, -46, -66, 78, -115, -29, -66, 30, 99, -56, -26, -29, -96]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[33, 17, 45, 55, -42, 29, 49, 48, 49, 72, 9, 88, -88, -59, 88, -45, 57, 2, -82, -75, 95, -104, -107, -33, -91, 125, 68, 15, 93, -64, -101, 64, 47, -6, -89, -124, -96, 34, 63, -46, 54, 46, -44, -112, 15, -72, -45, 52, -34, 23, -50, -101, 42, -94, -117, -41, -70, 126, -62, 106, 118, -1, 7, -38, -106, 33, -66, 116, 44, -59, -11, 36, -14, -6, -9, -5, -92, -21, -57, 33, -68, -90, -106, -122, 4, -36, -8, 83, 54, -53, -71, 84, -3, -101, 9, 0, 96, 87, 19, 103, -46, -66, 78, -115, -29, -66, 30, 99, -56, -26, -29, -96]");
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("AA31135060C3624234A346501814FC39", secretKey11);
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[74, -51, 45, 78, 83, -83, 6, -74, 111, -86, 18, 17, -80, 3, 4, 51]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[74, -51, 45, 78, 83, -83, 6, -74, 111, -86, 18, 17, -80, 3, 4, 51]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-106, -44, 125, 24, -14, -125, -50, 110, 76, 73, 76, -93, -128, 28, -80, -96]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-123, -28, -100, 51, -25, -43, -119, -19, -48, -77, 34, 79, -93, 63, 101, -74, 8, 64, -102, 40, 30, 68, 32, -118, 6, 28, -92, 117, -41, -125, 15, 67, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-123, -28, -100, 51, -25, -43, -119, -19, -48, -77, 34, 79, -93, 63, 101, -74, 8, 64, -102, 40, 30, 68, 32, -118, 6, 28, -92, 117, -41, -125, 15, 67, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[19, 15, 74, 64, -18, -124, 21, -57, 112, -40, -82, 113, -77, 114, 96, 85, 23, 112, 85, -113, -125, 116, 22, 79, 103, -67, -15, -98, 77, -1, -24, -27, 90, -94, 78, 48, -116, 47, 53, -76, 93, -67, -33, -23, -46, -13, 113, 97, -53, 30, -78, -118, 27, 104, 96, 86, -56, -17, 39, -34, 121, -91, 9, 93, -25, -41, 95, 55, 1, -98, 11, 6, 19, 66, -79, 108, -122, 82, 88, -75, -77, -97, 31, 63, -37, 116, -16, -127, -101, -49, 44, -77, 114, 76, -40, 6, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[105, 51, 37, -26, -81, -3, 28, 1, 0, 20, -67, -114, -52, 44, 13, 96, -45, 126, -17, 81, -50, 76, 106, 85, 44, 63, -60, 26, 58, 12, -2, 34, 119, 5, 102, -123, -115, -111, -66, 22, -18, 115, 82, -24, -8, 85, -38, 105, 83, 34, -13, 109, -106, -56, -80, -35, 6, -50, 35, 105, 75, 16, 79, 101, -3, -74, -6, -38, -16, 57, 5, -83, -53, 59, -65, -49, 86, 116, 99, 89, 124, 36, -110, -99, 108, 66, 124, -124, -82, -12, -104, -107, 108, -73, 53, 30, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[38, -78, 59, 3, 105, -103, 100, -72, -47, -40, -127, 70, -33, 71, -58, -8, 29, 100, 117, -22, -38, -122, 40, -87, 78, 42, 104, -93, 95, 10, -85, 2, 100, 46, -6, -104, 73, -8, 126, -2, 100, -34, 15, 82, -13, -47, -22, 32, 31, 117, 1, -95, 32, -34, -115, 57, 79, -78, -54, -74, -110, -116, -73, -27, 42, -110, 46, 98, 26, 49, -36, -99, 82, -95, -68, 78, 39, 41, 105, 119, -39, 110, 123, -40, 104, 14, -25, -80, 64, 28, -99, 15, 42, -108, -78, -72, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[87, -104, 75, -68, 28, -21, 13, 47, -122, -49, 92, 23, 81, -118, 8, 31, -98, -33, 42, -46, -38, 111, -8, -106, 107, 107, 60, -50, 90, 116, -75, 37, -128, 81, -54, 127, 106, 31, 77, 4, -127, 82, 123, 23, 31, 25, 47, 41]");
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("CBC37C7306B792CEB6CD5C9BEA2C3C11D63487DA28F02BE21012B3ABDA074E3838A5FBE0EF6C311B5CCC6DCEE670E772EEF8FEFCD8725EAA734FD9EF99C7D5042213D83B2FAAA4255BF384960A231DCF7A7B5FB2AEC51871A3F809CAC721A51C09DA3B92ACD99ED5FACB94B6719F4D62", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-19, 7, 76, -38, -27, -85, -108, -100, -101, -53, -70, 116, -47, 94, 0, -72]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ED074CDAE5AB949C9BCBBA74D15E00B8" + "'", str3, "ED074CDAE5AB949C9BCBBA74D15E00B8");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ED074CDAE5AB949C9BCBBA74D15E00B8" + "'", str4, "ED074CDAE5AB949C9BCBBA74D15E00B8");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ED074CDAE5AB949C9BCBBA74D15E00B8" + "'", str5, "ED074CDAE5AB949C9BCBBA74D15E00B8");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ED074CDAE5AB949C9BCBBA74D15E00B8" + "'", str6, "ED074CDAE5AB949C9BCBBA74D15E00B8");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ED074CDAE5AB949C9BCBBA74D15E00B8" + "'", str7, "ED074CDAE5AB949C9BCBBA74D15E00B8");
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("EE0553A9576EAD9AAB2350E88A94B983", secretKey29);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[118, 48, 12, -8, -99, -26, 38, 64, 126, -16, 107, -106, 41, -56, -59, -17]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-42, -17, -103, 84, 117, 67, -128, -59, -124, 28, -84, 99, -24, -58, -59, 6]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-50, -90, -125, -31, 68, -2, -118, 126, 47, -85, -109, 17, -83, 53, 90, -89]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, -49, 106, 30, 53, -127, -126, 5, 118, -1, -125, -45, 86, 9, 43, 86]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[19, 90, 109, 46, -55, 110, 83, -2, 23, 85, 104, 20, -29, -86, -47, -104]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-110, 103, 104, 86, 1, -33, 108, -88, -5, -73, 44, -100, -128, -77, -73, -78, 127, 110, -11, -121, 110, 40, 108, 45, 41, 125, 63, 21, 123, -78, -55, -77, -127, -48, 95, 99, 22, -7, -87, 57, -18, -126, -71, 7, -120, 72, -44, 11]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-127, -48, 95, 99, 22, -7, -87, 57, -18, -126, -71, 7, -120, 72, -44, 11]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[54, 70, -45, 121, 81, -49, 22, -42, -97, 117, 123, 57, -34, 0, -90, 115, 24, 22, -124, 53, 42, -37, -50, -119, 127, -67, -99, -103, 61, 59, 24, -68, -127, -48, 95, 99, 22, -7, -87, 57, -18, -126, -71, 7, -120, 72, -44, 11]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-47, 93, 51, -47, 108, 97, 20, -81, 121, 18, -62, -61, -26, 88, 23, -30, 55, 78, 1, 109, -31, -83, -81, -53, 24, -18, 19, 3, 102, 86, 5, -52, 48, 94, -65, 100, -42, 49, -10, 72, 12, 88, -40, -71, 71, -66, 59, 31, 101, 3, 21, -84, 18, 104, 52, -6, -105, -32, -63, 22, 11, 126, 83, -25, -23, 61, 14, -123, 91, -109, 69, -19, 99, -63, -64, 0, 65, 61, 26, 25, -36, -69, 107, 34, -122, -61, 50, 127, -31, -120, 75, -22, 125, -54, 84, -17, -127, -48, 95, 99, 22, -7, -87, 57, -18, -126, -71, 7, -120, 72, -44, 11]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-108, -113, 85, -72, 101, -19, -50, -81, -84, 53, 47, -59, 63, -74, -35, 99, -59, 126, -64, -128, -77, -67, 28, 62, 56, -21, 121, 3, -23, 2, -45, 55, -127, -48, 95, 99, 22, -7, -87, 57, -18, -126, -71, 7, -120, 72, -44, 11]");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B" + "'", str37, "948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B" + "'", str38, "948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B");
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey5);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey39);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey39);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey39);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-18, -125, 106, -56, 127, 37, -89, -80, -33, -54, 108, -5, 49, -22, -106, 55]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-45, -62, -85, 112, 23, 44, 15, -42, -127, 34, 43, -49, -119, 121, -73, -71]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[4, 9, -76, 46, 22, 39, 82, 105, -15, -119, -3, 17, 16, 14, 81, 68, 46, -4, -56, 79, 123, -42, 86, -75, 66, -1, -87, 46, -97, -84, 98, -2, -18, -125, 106, -56, 127, 37, -89, -80, -33, -54, 108, -5, 49, -22, -106, 55]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-91, -116, -81, -118, -20, -40, -37, 6, 76, 3, 88, 56, -73, -59, -112, -19, 67, 45, 126, -32, 7, -8, 17, 39, -41, 19, 90, -18, -72, -71, -88, -42, 11, 47, -128, -15, 62, 56, -117, -6, 39, 66, -88, 32, 124, -110, -63, -8, 15, 125, -98, 20, 60, -31, -103, -111, 7, 25, 93, 75, 3, 33, 84, -4, -18, -125, 106, -56, 127, 37, -89, -80, -33, -54, 108, -5, 49, -22, -106, 55]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[82, -40, -54, 20, -112, -41, -33, 104, 19, -112, 110, 34, 63, -34, 80, -100, 124, 15, -89, -4, 88, -70, 112, 63, -75, 17, -42, 103, 54, -43, -124, -36, -18, -125, 106, -56, 127, 37, -89, -80, -33, -54, 108, -5, 49, -22, -106, 55]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-116, 5, -99, 68, -41, 90, 102, -98, 107, -114, -80, 122, -126, 116, -125, -9]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[26, -77, 106, 49, 80, 27, -85, -93, -74, -35, -40, 75, 69, 11, 60, -66]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[48, -127, -99, -21, 23, -72, -62, -85, 75, 47, 9, -77, 112, 26, -39, -100]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-50, 36, -58, -18, 112, -7, 125, -72, -97, 1, -34, -1, 71, 121, -48, 72]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[126, -123, -41, -25, 124, -25, -9, 101, 101, -18, 39, -75, -71, -81, 57, 106]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[69, 121, 110, -60, -121, -35, -54, 101, -123, -53, -30, 105, -39, 126, -5, 127]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, 121, 110, -60, -121, -35, -54, 101, -123, -53, -30, 105, -39, 126, -5, 127]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-97, -37, 34, 64, 76, 118, 26, 85, -33, -28, -55, -64, 97, 40, -51, 117, 66, -12, -55, -69, 58, -47, 28, 127, 69, -19, 5, -58, 119, -117, 76, -48, 110, -16, -49, -68, 45, 61, 37, 66, 45, 1, 116, 73, -85, -31, -62, 39, -111, -76, -54, -15, -85, -94, 4, -71, -118, -112, 2, -122, -51, -71, -26, -124, -84, 73, 77, 45, -33, 4, 0, 83, 121, -46, 41, 116, 17, -31, 23, -25, -101, -109, -5, -89, -122, -66, -18, 29, 12, -34, -93, 96, 56, -14, -36, 114, 126, -123, -41, -25, 124, -25, -9, 101, 101, -18, 39, -75, -71, -81, 57, 106]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[110, -22, -2, 98, 61, -45, -102, 60, 118, 13, -3, -128, 47, 13, -49, -86, -118, 0, 56, 28, 0, -115, 49, -102, -122, 77, 22, 51, 26, 73, 5, 3, 126, -123, -41, -25, 124, -25, -9, 101, 101, -18, 39, -75, -71, -81, 57, 106]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[107, 105, 113, 106, -1, 114, -90, -88, 4, -33, 100, -50, -19, 110, -64, 91, -93, 59, 29, 54, -80, -51, 76, 107, 58, 87, -74, -57, -9, 100, 85, 16, 126, -123, -41, -25, 124, -25, -9, 101, 101, -18, 39, -75, -71, -81, 57, 106]");
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[0, 88, 84, 42, 48, -122, -59, 122, -98, 107, 86, -22, 20, 119, -38, -14]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[127, -5, -126, -104, -30, 41, 121, 113, 104, -85, 59, 69, 58, 111, -46, 31]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[127, -5, -126, -104, -30, 41, 121, 113, 104, -85, 59, 69, 58, 111, -46, 31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, 23, 86, 69, 124, 2, -10, -46, 121, 125, 55, 67, -84, 31, -68, 72, 125, -44, 63, -66, 98, -91, 68, 57, -1, 76, 59, 112, 48, -119, 48, -75, -122, 72, 87, 60, -28, -76, 50, 44, -59, -28, -5, -64, -71, -84, -79, -61, 55, 92, -80, 99, 113, 84, -55, -67, -127, -128, -23, 3, -51, -73, -123, 70, 31, -1, -104, 110, 119, -128, 70, -17, 50, -118, -55, 53, -17, 43, 49, 85, 18, -116, -106, -104, 17, -105, -87, -57, -70, 84, 29, -65, -82, -10, 126, -26, 0, 88, 84, 42, 48, -122, -59, 122, -98, 107, 86, -22, 20, 119, -38, -14]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("B92B273E0FF94E11E3262B9A797C606A", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[6, -80, 75, -62, 50, 14, 125, -15, 101, -125, 21, -94, -97, -113, 96, -56]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[78, 26, 119, 126, -6, 47, -119, -48, -96, 29, 93, 96, -124, 122, -88, 58]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-110, 126, -91, 34, 19, -114, -74, 24, 115, 17, 116, -21, -112, -94, 103, 68]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[6, -80, 75, -62, 50, 14, 125, -15, 101, -125, 21, -94, -97, -113, 96, -56]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-122, -99, 48, 16, -85, -94, -101, -48, 82, 21, -59, -68, -41, 86, 8, -22, 22, 93, 24, 108, 52, 124, -102, -61, -44, 37, 28, 73, 36, 10, -27, -41, 6, -80, 75, -62, 50, 14, 125, -15, 101, -125, 21, -94, -97, -113, 96, -56]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("CE223CF68EB6FEC359BAEBD15B5C20BFF08B501E10FEA3BCE54D5983D7684D38E2F42735676D95E8E2E342D32712A46F", secretKey16);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[5, 48, 79, -66, 104, -86, -54, 125, -122, 44, 110, -79, -65, -12, 100, -111]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-43, -27, 106, -79, -61, -91, 106, -1, 88, 34, 76, -88, 104, -48, 109, -89]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-43, -27, 106, -79, -61, -91, 106, -1, 88, 34, 76, -88, 104, -48, 109, -89]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "D5E56AB1C3A56AFF58224CA868D06DA7" + "'", str7, "D5E56AB1C3A56AFF58224CA868D06DA7");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-20, 76, 53, 8, -119, 100, -74, -74, -18, 93, 49, -25, 61, -70, -46, 24]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[67, -19, 24, -52, 127, -71, 84, -2, -44, -127, -75, -89, -46, -124, -99, 124]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-74, -59, 83, 34, 57, 68, 3, 102, 38, -94, -112, 31, 106, -126, 46, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-20, 76, 53, 8, -119, 100, -74, -74, -18, 93, 49, -25, 61, -70, -46, 24]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[93, -5, 25, -17, 91, 39, -123, -106, -50, -99, 108, -90, -76, 50, 91, 62, -74, -20, -65, 17, -33, -23, 19, -55, -97, -5, 31, 109, -64, 15, -105, 93, -20, 76, 53, 8, -119, 100, -74, -74, -18, 93, 49, -25, 61, -70, -46, 24]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[80, 62, 114, 39, -32, -18, -46, -106, -69, 127, 41, 55, 77, -27, 125, -23, 86, 127, 29, 24, 26, 33, 49, -98, 127, 47, -59, 81, -80, 97, 18, 49, -126, -29, -106, -43, -122, -15, 79, -26, 76, -107, -31, 94, -124, -79, 97, -63, -12, 111, -112, 105, -126, -104, 5, -40, -123, -43, 92, -70, 76, 123, -61, -113, 53, -14, -98, -25, 10, -75, 43, -106, 119, 91, -83, 115, 121, -93, -61, -3, -52, 87, -117, -99, 39, 65, 110, -123, 10, 75, 38, -107, 47, 47, -70, -88, -20, 76, 53, 8, -119, 100, -74, -74, -18, 93, 49, -25, 61, -70, -46, 24]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-86, -126, 67, -2, -94, -84, 50, -82, -63, -50, -10, 51, 68, 87, 94, -54, 35, -22, -36, 38, 88, 18, -13, 60, -87, -88, 23, -32, 49, 118, 54, 98, -11, -100, -127, 29, 67, -25, -2, 41, 91, -6, 99, 75, 88, -119, -97, -84, 123, -2, -55, -50, 39, -23, -122, 93, 12, 91, -79, -25, -88, 59, 10, -80, -122, 47, 107, 22, 1, -32, -86, -6, 48, -23, -23, -116, -96, -102, 103, 57, 72, 76, 121, 107, 115, -29, -37, -29, -19, -26, -90, 60, 125, -76, -1, -12, -20, 76, 53, 8, -119, 100, -74, -74, -18, 93, 49, -25, 61, -70, -46, 24]");
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        javax.crypto.SecretKey secretKey13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey13);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-64, 24, 107, -80, 27, 30, 34, -26, -22, 33, 61, 1, -106, -121, -9, 86]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[31, 80, -29, -42, -121, 74, -39, -88, 77, -87, 66, 119, 34, 104, -100, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[31, 80, -29, -42, -121, 74, -39, -88, 77, -87, 66, 119, 34, 104, -100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[57, 67, -13, 96, -15, -55, 90, -37, 110, 66, 28, 54, -2, 85, 14, -83]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-124, -50, 45, 92, -47, -72, 106, 72, 36, 26, -30, -114, -96, -69, 49, 103, -110, -99, -68, -54, -52, -65, -38, 41, 103, 27, 76, -128, -59, 15, -109, 27, -64, 24, 107, -80, 27, 30, 34, -26, -22, 33, 61, 1, -106, -121, -9, 86]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, 87, 85, 77, -76, 122, 23, 102, -116, 13, 99, 16, -42, 70, -107, 4, 42, 82, 83, 43, -11, 63, -89, -67, -75, -26, 39, -78, -49, 32, 41, 35, -64, 24, 107, -80, 27, 30, 34, -26, -22, 33, 61, 1, -106, -121, -9, 86]");
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[47, 21, 105, 29, -38, -57, 103, -92, 20, 104, 1, 14, 35, 113, 74, -88]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[75, 25, -75, -108, -1, -4, 30, -31, -17, 56, -125, -55, 46, -45, 59, -12, -127, -104, -8, 99, -16, -81, 85, 26, -54, 35, 87, -13, -65, 86, 119, 33, 122, 107, 106, -96, 88, -82, -7, -22, 37, -82, 26, 109, -24, -42, 103, 89]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray70 = new byte[] {};
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray70);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey72);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey76);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey76);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey76);
        byte[] byteArray80 = new byte[] {};
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray80);
        javax.crypto.SecretKey secretKey82 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey82);
        javax.crypto.SecretKey secretKey86 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey86);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey86);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray80, secretKey86);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray70, secretKey86);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey86);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey86);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey86);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey86);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey86);
        java.lang.Class<?> wildcardClass96 = byteArray95.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-104, 39, -43, -13, -63, 124, 65, -116, -55, 88, 83, 25, -5, -109, 30, -28]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[27, 24, -65, 63, 22, 75, -97, 5, 118, -109, 127, -20, 108, -17, 55, 27]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[59, -34, 15, 59, 67, 8, -35, 105, 23, -43, 56, -53, -66, -4, -28, -81]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[116, 112, -30, -13, -109, 108, -17, 23, -3, -27, -110, 1, 53, -22, 9, -16]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-7, 11, -48, -63, -64, 2, -94, -6, -26, 36, -48, 77, 104, 80, -72, -53]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-122, -127, 30, 19, 21, -14, -63, 93, 5, 61, 62, -56, -14, -45, -50, 117]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-53, 34, 122, 56, 38, -39, -59, 11, 106, -48, -45, 22, 87, -18, -43, -65]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[32, -9, -85, -41, -66, -45, -106, -65, -47, 23, -125, -32, 65, -100, -110, -103]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-68, -48, 53, 112, 7, -89, 111, -17, -112, -108, -115, 70, 13, -46, 86, -43, -58, 65, 72, 42, 40, 28, -74, -98, 120, -84, 102, -46, -42, 56, 59, -73, -53, 34, 122, 56, 38, -39, -59, 11, 106, -48, -45, 22, 87, -18, -43, -65]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[99, 126, 96, 52, 32, 39, 86, -124, 71, -74, -94, 47, 65, 120, 21, -30]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-116, -5, 93, -107, -44, -72, 95, 98, -45, 64, -89, 43, -24, -120, -50, -33]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-43, 112, 24, 43, 19, 40, -6, -6, -54, 84, 100, -77, 76, 78, 20, -56]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-62, 88, -48, 76, 9, -55, -71, 97, -90, 31, -9, 8, -33, -46, 15, 17]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[30, -45, 80, -70, 118, -64, 122, 43, 72, -47, -88, 95, 56, -119, -6, -98]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[116, -16, 120, 7, -93, 8, 121, -27, -85, 55, 34, -98, 112, -96, 122, -38]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(byteArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(secretKey86);
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[58, -104, -118, -32, -124, -99, -25, -87, -83, -60, -24, -106, -73, 41, -82, -1]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[99, 86, -107, -76, 29, -66, 3, 37, 3, 68, 81, -39, -65, 79, 121, -26]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-98, -19, -52, -26, 107, 98, -90, -82, 29, -121, -31, -73, -109, 102, 103, 102, -120, 34, -82, 56, 22, 60, -106, -101, -62, 25, -27, 75, -30, -28, 57, 64, 58, -104, -118, -32, -124, -99, -25, -87, -83, -60, -24, -106, -73, 41, -82, -1]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-90, 42, 55, -103, -41, -57, 115, 123, -47, 78, -35, -117, -99, -13, -102, -69, -40, 23, 42, 28, 37, -24, 43, -26, 77, -30, -80, 71, -17, -48, -88, -6, 58, -104, -118, -32, -124, -99, -25, -87, -83, -60, -24, -106, -73, 41, -82, -1]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[80, 57, -122, 57, 38, -124, 124, -33, 87, 38, 31, 69, -121, -97, -75, 42, -33, -28, -47, -24, -11, -119, 50, 6, 114, 37, -105, -110, 46, -75, 82, -124, -39, 36, -4, 86, 115, -99, -128, 23, -75, -53, -4, -9, 27, -95, 117, -56, 113, -121, -32, -37, -31, 112, 127, 89, 0, 13, 17, 100, -37, 73, -80, -65, -21, 74, -18, -98, 36, 96, -33, 125, -38, 56, -67, 114, 56, -20, -56, -57, -114, 6, 123, -127, -69, 25, -22, 96, -29, 16, 50, -78, 60, -54, -89, -23, 58, -104, -118, -32, -124, -99, -25, -87, -83, -60, -24, -106, -73, 41, -82, -1]");
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey43);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey52);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey52);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey52);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-19, -38, -101, -23, 114, 116, 31, -15, 17, -103, -52, 59, -58, -117, -96, -65]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-35, 27, -41, 27, 16, 52, -109, -72, -20, 64, -66, 47, -109, -31, 118, -44]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-98, -49, 94, -52, 114, -113, -127, -117, -21, -96, -26, -53, 51, 122, 94, 74]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 23, 86, 101, -126, 125, 126, 9, 0, 0, -63, 93, 125, 111, 72, 62]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-49, 17, 35, -78, -80, -110, 115, 119, -46, -101, 2, -30, 9, -95, -50, 35, 2, 106, -53, -36, -26, 69, -94, 18, 51, 122, -16, 95, -90, -65, -116, 86, -98, -49, 94, -52, 114, -113, -127, -117, -21, -96, -26, -53, 51, 122, 94, 74]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CF1123B2B0927377D29B02E209A1CE23026ACBDCE645A212337AF05FA6BF8C569ECF5ECC728F818BEBA0E6CB337A5E4A" + "'", str23, "CF1123B2B0927377D29B02E209A1CE23026ACBDCE645A212337AF05FA6BF8C569ECF5ECC728F818BEBA0E6CB337A5E4A");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, -45, -104, 127, 100, 110, -60, 67, 71, -128, 100, 97, -2, -96, 79, -38]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-18, -30, 0, 68, 88, -46, 79, 25, -11, -126, -15, 21, 73, -63, 34, -22]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[123, -80, -104, -33, 102, -44, 73, 36, 62, 48, 94, -96, -96, -108, -20, -96]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-40, 97, -12, 53, 35, -18, -80, -77, -55, -103, -4, -17, -7, -3, -57, -92]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[50, -62, -87, -85, -126, -76, 121, 9, 75, 81, -39, -56, -70, -81, 16, 64]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-84, 34, -26, 61, -84, 22, -111, 62, -69, 71, -86, -67, -101, 37, 6, 77]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-84, 34, -26, 61, -84, 22, -111, 62, -69, 71, -86, -67, -101, 37, 6, 77]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-88, -124, 49, -123, -16, 15, -97, -15, 58, -69, 7, 116, -18, 34, 121, -55, 96, -68, 49, -24, -107, 122, -87, 4, -64, 39, 68, -116, -14, -96, 11, -116, -50, 30, -25, 73, 59, 14, -25, -41, -41, 126, -23, -57, 40, -12, -112, 17, 104, 72, -57, 80, 6, -20, 40, -101, -14, -89, -90, 25, -34, 60, -115, 49, -52, 43, -59, -18, 106, -101, -89, -110, -25, 103, 100, 62, 41, 55, -49, -110, -49, 62, 39, -121, 90, -7, -24, 6, -31, 55, -68, -47, -99, -88, 36, 71, 50, -62, -87, -85, -126, -76, 121, 9, 75, 81, -39, -56, -70, -81, 16, 64]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[102, 33, -119, 21, -105, -65, -37, -78, -106, -36, 0, 106, 65, 20, -87, -50, 93, 84, 90, 20, -113, -105, 13, -73, 16, 29, 41, -3, -119, 87, -46, -104, 50, -62, -87, -85, -126, -76, 121, 9, 75, 81, -39, -56, -70, -81, 16, 64]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-34, 41, -3, -31, 47, 47, 55, 57, 26, -77, 100, -3, -63, 39, -111, 79, 18, -23, -39, -106, 67, -77, -117, 112, -39, 97, 91, 4, 95, 99, -80, -73, 50, -62, -87, -85, -126, -76, 121, 9, 75, 81, -39, -56, -70, -81, 16, 64]");
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("73C1C42F39C8E7502704272A7A780F3A51ACAFB15D701A17110DCC8859990B7355424D0A72FE23915A8154C4B9A2E551803E4477380AB40BD9B07E3A0A71CF0116BBC9D5932B04C9D90051A34EDAC29D1688D928131DB179DC5727C1CB109991A25A8A85650A42CCD9B8EC887A30A418", secretKey5);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-70, -66, -60, 23, 78, 104, -104, 28, 83, 115, 22, -2, -44, 1, 79, 59]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[57, 39, -38, -84, 121, 39, 74, 109, -94, -15, 60, 101, 3, 58, 55, -21, -52, 57, 87, -124, 63, -126, 82, 82, -87, -80, -87, 22, -75, -61, -37, -14, 42, 16, -12, 23, 40, -41, 92, 80, 43, 23, -88, -27, -67, -71, -66, -14]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[42, 16, -12, 23, 40, -41, 92, 80, 43, 23, -88, -27, -67, -71, -66, -14]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[92, -64, 23, -61, -4, -105, -27, -91, 108, 122, -69, -43, -63, 77, 55, 47, 94, 85, 106, 20, 2, 13, 122, -5, 110, 118, -110, -121, 47, 110, 87, -68, 42, 16, -12, 23, 40, -41, 92, 80, 43, 23, -88, -27, -67, -71, -66, -14]");
        org.junit.Assert.assertNotNull(byteArray10);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("5CC7D57454209BE8860FE8BBB89A71A1", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[127, 102, -56, 65, 35, 75, 2, -65, -84, 115, -41, -18, -75, 14, -72, 105]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[69, 51, 29, 0, -61, -79, 69, -109, -41, -104, 27, 107, -53, 78, -85, -113]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[69, 51, 29, 0, -61, -79, 69, -109, -41, -104, 27, 107, -53, 78, -85, -113]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-44, -43, -106, 32, -5, 111, 75, 81, -109, 41, -29, -80, -96, 124, 50, 101, -23, 44, -101, 50, 99, -83, 60, 6, 71, 114, 31, 92, -88, -52, 1, -60, 127, 102, -56, 65, 35, 75, 2, -65, -84, 115, -41, -18, -75, 14, -72, 105]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-74, -108, 19, 63, 120, -111, -108, -2, 45, -63, -110, -13, -68, 105, 71, -70, -76, -12, 65, -71, -33, -49, 18, -112, -79, 41, 81, -44, -11, 89, 88, 109, 127, 102, -56, 65, 35, 75, 2, -65, -84, 115, -41, -18, -75, 14, -72, 105]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[61, 2, -59, -36, 91, 105, 69, 83, 114, -89, 114, -90, 123, -8, 108, -83]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[72, -65, -2, -104, -61, 123, -97, -104, -74, -47, 97, 61, -92, 69, -27, -94]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-77, -7, -38, 42, -62, 26, 67, 41, 52, 68, 24, -37, -56, -8, 114, 107, 72, 7, -77, -64, -13, -64, 56, 83, -102, -115, 61, -123, 98, 119, -49, -68, 61, 2, -59, -36, 91, 105, 69, 83, 114, -89, 114, -90, 123, -8, 108, -83]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[0, 95, -60, 60, -82, 103, 87, -57, -75, 37, -37, 113, 121, 96, -101, -87]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[52, -32, -127, -25, 45, -34, -118, -74, 76, 88, 88, -117, -9, -34, 35, -28]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-63, 64, -125, 29, -15, 122, -88, 123, -71, -15, -114, 117, -49, 56, 67, 39]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[107, 41, -13, 125, 49, -103, 106, -114, -43, 2, -127, 46, 10, 35, -103, 0, 47, 81, -53, 121, 60, -15, -68, 23, -111, 84, 96, 66, 120, 58, -43, -56, 52, -32, -127, -25, 45, -34, -118, -74, 76, 88, 88, -117, -9, -34, 35, -28]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey9);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("ECA77B74C3718EB8A1CFDE4EF6716955", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("8DE2D2478B9254DA9F2857FE63F009EF998A83F3CB7DEB4931DD64ECB229D6F42CF335D3DD27F8123BAC8B090886EFAB", secretKey9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[23, -85, 38, 92, 42, 115, -12, -3, -90, 119, 83, 83, -40, -115, 80, 4]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[80, -39, -77, 43, 18, 74, -125, 19, -74, 83, 57, -107, -73, -123, -107, -85]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[80, -39, -77, 43, 18, 74, -125, 19, -74, 83, 57, -107, -73, -123, -107, -85]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-96, 69, 67, 23, 13, 19, 14, 109, 28, 63, 39, 18, 126, 10, 86, 62, -7, 98, 19, -63, 20, -100, -68, 42, -113, 17, -59, 85, -19, -42, 64, -123, -69, -115, -25, 8, -120, -19, 82, 103, -117, 78, -118, -8, 68, -51, -17, -109, -128, -7, -31, -80, 13, -48, 24, 112, -48, -91, 22, 9, -37, -91, -33, -18, 113, -59, 62, -59, -66, 0, -52, 61, 0, -59, 126, 36, -37, -77, 33, 69, 75, -101, 38, 83, 118, -72, -41, 80, -54, 57, 21, 107, -100, 111, 7, 37, 23, -85, 38, 92, 42, 115, -12, -3, -90, 119, 83, 83, -40, -115, 80, 4]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-6, -41, -87, 31, 127, 32, 69, 56, 55, -121, -105, -28, 107, 115, -52, -60, -114, 101, -56, 63, -43, 86, 41, 64, 50, 75, 1, 60, 17, 93, -100, 57, 23, -85, 38, 92, 42, 115, -12, -3, -90, 119, 83, 83, -40, -115, 80, 4]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-119, 95, -37, 63, 97, -54, -21, 23, -6, 74, 6, 11, -25, 87, -114, 99, -65, -122, -30, 12, 73, 11, 85, 27, -3, -11, -72, 109, -69, 14, -53, 45, -54, -60, 33, -60, 94, -110, -21, -108, -67, 50, 24, -102, 57, 8, 6, 53, -118, 102, -96, -85, -59, 95, -96, -4, 52, 100, -71, 84, -126, 57, 89, 14, 75, 109, 56, -25, 26, 84, 75, -41, -126, -12, -95, 109, -18, 35, -116, 111, 60, 95, 60, 40, 110, 84, -1, 62, -112, 43, 62, 123, -112, 25, -64, 36, 23, -85, 38, 92, 42, 115, -12, -3, -90, 119, 83, 83, -40, -115, 80, 4]");
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey29);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey29);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[85, -35, -65, -48, -34, 14, 89, 16, -84, 44, 117, 24, 69, -77, 25, 109]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[79, 111, 111, 33, 16, 98, -98, -119, 81, -93, 111, 53, 69, 26, -47, -88]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[17, -48, -24, 36, -111, -86, -32, 98, -74, -43, 100, -3, 64, 43, 30, -27]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[43, -115, -18, 37, -100, 54, -46, 22, -28, -124, -123, 127, -7, 85, -54, 119]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-111, -114, -117, 120, -110, -31, 22, -36, 21, -44, 37, -92, 2, 126, -105, 96]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-102, -93, -37, 127, 117, -5, -108, 127, -63, -2, 12, 107, -91, 30, -15, -42]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-109, -43, -114, 10, -62, 86, 109, 20, 26, 117, -80, 18, 102, -104, 38, -123, 110, 109, -55, -108, 43, -9, 73, 122, 32, 116, 124, -37, -96, -59, 87, -11, -111, -114, -117, 120, -110, -31, 22, -36, 21, -44, 37, -92, 2, 126, -105, 96]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[17, -123, 79, -28, -39, -102, 97, -15, 1, 91, 10, -74, 76, -74, 76, -53, 61, -73, 20, 119, 122, -104, 66, -108, 127, 110, -80, 75, 41, 14, -46, 21, -52, -80, -116, 56, -30, -116, 86, 27, 43, -3, -45, 115, 18, 17, -47, 126, 77, -9, 91, -40, -120, 40, -53, 121, 34, 61, -59, 100, -95, 22, -66, 53, -101, -83, 102, 70, -7, 30, 100, 65, 29, -107, 107, 1, -50, 65, 111, 85, -97, 102, 66, 15, 68, -67, -25, -13, -95, -49, -55, 97, -69, 22, 114, -50, -111, -114, -117, 120, -110, -31, 22, -36, 21, -44, 37, -92, 2, 126, -105, 96]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-31, -55, 84, -119, -119, -39, -99, 47, 71, 71, 71, 114, 22, 108, -19, 80, 21, -54, 85, -10, 86, 1, 23, 7, -60, -45, -20, 4, -38, 4, 127, 82, 57, -69, 7, -37, -78, -1, 121, -113, 80, -110, 105, 8, -44, -68, -57, -74, -60, -25, 125, -64, -125, -29, -90, -14, 121, -46, 67, 10, -42, 91, 7, -47, -31, 0, 11, -5, 11, 116, -101, 51, -70, -108, 90, -47, -88, 9, -11, -101, -35, 32, -67, 37, 28, 36, -76, -85, -19, -46, -19, -9, -112, 114, -94, -97, -111, -114, -117, 120, -110, -31, 22, -36, 21, -44, 37, -92, 2, 126, -105, 96]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "E1C9548989D99D2F47474772166CED5015CA55F656011707C4D3EC04DA047F5239BB07DBB2FF798F50926908D4BCC7B6C4E77DC083E3A6F279D2430AD65B07D1E1000BFB0B749B33BA945AD1A809F59BDD20BD251C24B4ABEDD2EDF79072A29F918E8B7892E116DC15D425A4027E9760" + "'", str38, "E1C9548989D99D2F47474772166CED5015CA55F656011707C4D3EC04DA047F5239BB07DBB2FF798F50926908D4BCC7B6C4E77DC083E3A6F279D2430AD65B07D1E1000BFB0B749B33BA945AD1A809F59BDD20BD251C24B4ABEDD2EDF79072A29F918E8B7892E116DC15D425A4027E9760");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "E1C9548989D99D2F47474772166CED5015CA55F656011707C4D3EC04DA047F5239BB07DBB2FF798F50926908D4BCC7B6C4E77DC083E3A6F279D2430AD65B07D1E1000BFB0B749B33BA945AD1A809F59BDD20BD251C24B4ABEDD2EDF79072A29F918E8B7892E116DC15D425A4027E9760" + "'", str39, "E1C9548989D99D2F47474772166CED5015CA55F656011707C4D3EC04DA047F5239BB07DBB2FF798F50926908D4BCC7B6C4E77DC083E3A6F279D2430AD65B07D1E1000BFB0B749B33BA945AD1A809F59BDD20BD251C24B4ABEDD2EDF79072A29F918E8B7892E116DC15D425A4027E9760");
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey48);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey48);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey48);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey48);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey59);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey59);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-20, 89, 30, 59, 120, -27, 46, -54, -64, -28, -120, 10, -98, 15, -86, -59]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[1, 126, -41, 57, 38, -4, 1, -33, 53, -3, -37, -53, -83, -94, -45, -108]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-30, 115, -103, 121, 3, 125, 18, -45, -112, 108, -31, 5, 85, 121, 123, -124]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-94, -56, 42, 27, -51, 70, -88, -19, -2, -60, 112, -101, 6, -95, 61, -75]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[23, 126, 34, -29, -87, 20, -69, 23, 81, 120, -11, -47, -8, 46, 9, 76]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-51, 29, 88, 96, 66, -65, 69, 34, 11, 113, 54, -86, 120, -34, -69, 29]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-51, 29, 88, 96, 66, -65, 69, 34, 11, 113, 54, -86, 120, -34, -69, 29]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-48, 22, 74, 79, 109, -56, -109, 81, -46, 113, 91, 108, 81, 2, 48, 80]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-88, 57, -6, 66, -78, 3, 109, 70, -4, 43, 6, -69, 26, 63, -20, 21]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-28, -111, -96, 79, 7, -125, 61, 123, 101, 109, 117, -107, -28, 41, -122, 84]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[108, -26, 35, -31, -91, 94, -45, 81, 36, 126, 126, 44, 95, 83, 79, -120]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-78, -70, -27, -30, -118, -116, 73, 37, 126, -64, 78, -84, 107, 78, 43, -116, 93, -60, -24, -119, 67, -124, 94, 9, -99, -59, -108, -36, -103, 51, -60, 25, -28, -111, -96, 79, 7, -125, 61, 123, 101, 109, 117, -107, -28, 41, -122, 84]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-100, -59, 106, -30, 89, -80, 64, 53, -110, 98, -119, -94, 19, -64, 119, 6, -84, -63, -50, -88, 64, -116, -79, -21, -101, -85, 61, -54, 2, -72, -104, 65, -28, -111, -96, 79, 7, -125, 61, 123, 101, 109, 117, -107, -28, 41, -122, 84]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[106, 104, -84, 9, 66, -60, -7, -61, 68, 34, -120, 20, -21, 63, -44, -126]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey5);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey5);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("911F57119EB24E767E42E4F6B323A1B64ACC59F689B27E8E3BFDDB32C46328E28973E926473BDF881F9F712F06F4821C", secretKey19);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey19);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-55, 44, 6, -112, 39, 18, 43, 117, -6, -4, -52, 73, 38, -92, 106, 66]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[108, -93, -88, -119, 16, -45, -43, 34, -10, -102, -36, -110, 125, -58, 7, -30, 50, -125, -109, -9, 6, -62, -64, 92, 31, 41, -54, -73, 64, 65, -39, 25, 113, 113, -51, -44, 118, -105, -110, 66, 45, -84, 106, -19, 50, -13, -110, -81, 89, 91, 62, 6, 26, 42, 100, -30, 59, -68, 38, -114, -46, 72, -37, 39, -66, 31, -118, -128, 11, -80, -117, 38, -69, 3, 60, -31, 57, -38, -20, 126, 6, -89, 78, 95, -13, 15, 121, 74, 107, -11, -101, 95, -117, 72, 90, 75, -55, 44, 6, -112, 39, 18, 43, 117, -6, -4, -52, 73, 38, -92, 106, 66]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[51, 35, -102, -103, 60, -16, 77, -101, 43, -124, 33, -14, -104, 32, -115, -35, -50, 87, 109, -92, 100, 90, 13, -111, 81, 118, 95, 26, 77, 87, 6, -61, -55, 44, 6, -112, 39, 18, 43, 117, -6, -4, -52, 73, 38, -92, 106, 66]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[103, 82, 16, -3, -90, -90, 37, -115, -80, 18, 117, -91, 36, -77, -78, 125]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[53, -60, -57, -116, 37, 79, -64, 24, 61, -14, 42, -98, -42, 36, 9, -107, 116, 55, 97, -2, 44, -22, -125, 14, -44, 52, 17, 98, 91, -3, 63, -21, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[52, -36, -4, 54, 9, -38, 41, -85, 57, -125, -41, 65, -76, -81, 75, 27, 38, -54, -73, -115, -47, -102, 11, 59, 107, -89, -43, 24, -58, 85, 35, 6, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[53, -60, -57, -116, 37, 79, -64, 24, 61, -14, 42, -98, -42, 36, 9, -107, 116, 55, 97, -2, 44, -22, -125, 14, -44, 52, 17, 98, 91, -3, 63, -21, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-125, 57, 89, 68, 60, -63, 17, 94, 49, -111, 51, -11, -86, 34, -37, 78, -83, -103, -83, -14, 78, -22, -115, -74, 114, -49, 6, 19, 15, -23, 73, 46, -71, -114, 81, 82, -45, -39, -70, -4, 125, -46, 48, 52, -9, 98, -38, 125, 37, -112, -60, -14, -4, 25, -81, -105, 53, -19, -91, -76, -124, 86, 93, -24, -33, -28, 48, -35, -17, 85, -67, -72, 44, 3, 47, -111, 12, -5, -80, -110, 46, 122, -109, -113, 8, 86, -35, -83, 80, 121, 7, -53, -65, 121, -15, -20, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[33, -121, 18, 88, 84, 56, 60, -89, 101, -127, 3, 36, -19, -123, 52, 23, -112, -92, -68, 26, 48, -97, 124, 75, 123, -26, -8, 1, -65, 33, 48, 5, 36, 14, -93, -44, -60, -77, -84, -34, 94, 90, 50, 99, 20, -18, -66, -54, -67, 38, -120, 61, -26, 127, 28, -7, -9, 82, -14, -76, 117, 53, -33, -30, -92, -29, 21, -119, -73, -114, 85, -71, -21, -116, 23, 51, 92, -86, -77, 120, -66, 49, 60, 121, 5, -122, 67, 28, 70, -104, 99, 32, 76, 35, -105, 46, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-116, 62, 46, -115, 96, 91, 106, 117, -27, 108, 97, -61, 45, 0, -103, -69, 31, -11, 62, -85, 104, 51, -34, 93, 1, 39, -110, -52, -122, 13, -123, 101, -25, -105, -22, 40, 11, -34, 112, -118, 29, -40, 46, 72, 92, -80, -66, 27]");
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass4 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey31);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[75, -121, 107, -128, -56, -126, 74, -14, 125, -50, 117, 121, -79, 94, 92, 11]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[37, -115, -34, 122, 110, -59, 60, 95, 41, -3, 124, -86, 54, -127, 111, 80]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-36, -77, 113, -52, -65, 7, -29, 96, -42, 69, 27, 65, 72, 43, 31, -30]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-18, -25, -102, 81, 7, 113, -92, -11, -74, 80, -52, -22, -32, 115, 110, -117]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-75, 36, 120, 92, -22, 106, 7, -118, 27, -44, -9, -50, -81, -106, -71, -106, -35, 109, 100, 91, -106, -20, -116, 70, 113, 27, -8, -67, -108, -107, 88, 121, -36, -77, 113, -52, -65, 7, -29, 96, -42, 69, 27, 65, 72, 43, 31, -30]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[36, -57, -27, 48, -52, 109, 98, -87, -69, 49, 25, 12, -41, 23, -58, 67, -20, 109, 40, 22, -60, 99, 85, 98, -38, -114, 25, 72, -57, -121, 96, -69, -36, -77, 113, -52, -65, 7, -29, 96, -42, 69, 27, 65, 72, 43, 31, -30]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "24C7E530CC6D62A9BB31190CD717C643EC6D2816C4635562DA8E1948C78760BBDCB371CCBF07E360D6451B41482B1FE2" + "'", str25, "24C7E530CC6D62A9BB31190CD717C643EC6D2816C4635562DA8E1948C78760BBDCB371CCBF07E360D6451B41482B1FE2");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[58, -107, 100, -67, -114, 0, -39, 96, 9, 127, 3, 96, -20, -49, -14, 43]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[62, 77, -40, 2, 85, 102, 50, -84, -88, -24, -34, -1, 113, -95, -67, -103]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[62, 77, -40, 2, 85, 102, 50, -84, -88, -24, -34, -1, 113, -95, -67, -103]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-14, -98, -109, 65, 19, 24, -107, 35, 72, -110, 121, 53, 119, -96, -95, -73, -13, -37, -60, -38, -30, -47, 29, 8, -20, 72, -44, -80, -94, 99, -66, 87, -90, 102, 96, -77, 8, -2, 55, 12, 22, 114, -15, 93, -61, -8, -63, 74, 66, 85, -10, -67, 33, 120, -43, 11, -125, 15, -36, -78, 29, 64, -115, 127, 24, -10, -27, -1, 114, -81, -80, 86, -58, -34, 51, 96, -95, 89, 63, 22, -82, 79, 43, -123, 3, -72, 70, -20, -99, 78, 105, -4, 30, -28, -121, 114, 58, -107, 100, -67, -114, 0, -39, 96, 9, 127, 3, 96, -20, -49, -14, 43]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[4, 15, 44, 122, 48, -121, 101, 20, -8, 103, 70, -3, 63, -91, -5, -30, 24, -73, 114, 46, -21, -27, -59, 23, -80, 30, -17, -42, 72, 116, 114, 64, 58, -107, 100, -67, -114, 0, -39, 96, 9, 127, 3, 96, -20, -49, -14, 43]");
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("2490216A5A23648B1D40BD8864CD66B988C12C8F63914359E46667F589C07D19691E2E705B4815D28A7E0C48BCAAB69C", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("E7DAD3D922B892DA3046A8E60865604E", secretKey10);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey26);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[71, 97, 41, -128, 84, 42, -125, -76, 86, -29, 32, -105, 20, 126, -37, -41]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[115, 6, -91, 124, 15, -106, 99, 87, -101, 40, -16, 107, -106, -67, 67, 106, -112, -52, 90, -12, -17, 84, 76, -81, 48, 108, 89, -121, -117, -19, 70, -16, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-116, 39, -126, 87, 51, 15, 100, 67, -12, 76, -44, -56, -41, -124, 81, -124, 123, 2, -32, 15, 114, -1, -36, 34, 45, -114, -60, 108, -102, -126, 3, -44, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[14, -96, -55, 49, 86, 102, -56, 107, -68, -102, 115, 84, 125, -79, -123, 119, -107, -41, 48, -25, -107, 102, -36, 49, -20, 34, -31, 20, -77, -120, -84, -88, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-116, 39, -126, 87, 51, 15, 100, 67, -12, 76, -44, -56, -41, -124, 81, -124, 123, 2, -32, 15, 114, -1, -36, 34, 45, -114, -60, 108, -102, -126, 3, -44, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[121, 88, 0, -92, -6, 0, -114, 91, -112, 101, -28, -43, 41, 80, 120, 57, 18, -69, 47, 30, 62, -18, 28, 111, -111, 90, -41, -86, 103, -119, 87, 43, -127, 13, -99, -89, -81, -7, 119, -44, 118, 118, 93, -88, 43, -14, -9, 50, -26, -70, 43, 45, 87, 95, -59, -31, -30, 95, -5, -106, 5, -11, 59, -44, -113, 20, 14, -12, 39, 78, 75, 49, -104, -31, 57, -122, 30, 120, -73, 38, -80, -74, 100, -119, -62, -46, 9, -97, 8, 66, -116, -66, -31, -67, -93, -95, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-40, 110, 85, 23, -19, 104, 65, -98, 120, -7, -5, -62, 120, 41, -24, 110, -91, -6, 126, 20, -60, -50, 28, -54, 110, -17, 26, -104, 127, -70, 87, 2, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[75, 96, 126, 57, 107, 59, -86, -119, 68, -65, -88, -19, -19, -31, 3, 84, -100, 22, -47, -1, -4, -97, 62, 38, 1, -91, -37, -8, 78, 4, -73, 19, -56, 57, 89, 34, -93, 44, -42, -54, -88, -127, -75, -119, 4, -111, 13, -16, -66, -9, -43, 43, 113, -81, -116, -122, 83, 11, 85, 99, 36, -22, -40, -121, 21, 58, 14, -28, -13, 42, 24, 20, 45, -91, -84, 40, 51, 49, -118, 81, 51, -3, 83, 16, 122, -26, -26, 33, -5, -8, -64, 17, -25, 94, 55, -88, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[29, 76, 23, -92, -32, -38, -44, -96, -48, -39, 109, 102, -24, 18, -94, 92, -93, -71, -41, -35, -101, -52, 68, -10, -23, 115, 8, -32, -58, 120, 126, 72, 114, -98, -63, 56, 102, 56, 59, -34, -83, 91, 65, -113, -26, -57, 109, 73]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[34, -9, -8, -91, -46, 56, -96, 121, -22, 85, -5, -119, -55, 69, 89, -104]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[27, -115, -52, 68, 104, 100, 9, -82, 104, -112, 95, -27, -68, -45, -92, -31, -6, 107, 110, -36, 65, -121, 22, 43, 79, 111, 80, -38, -57, -112, -78, 95, -88, -109, 7, -26, -9, -61, -2, 56, -48, -89, 18, 116, 14, -2, -75, -54, -42, -71, 125, 112, -77, 22, -9, 9, -96, -108, 46, 67, -53, 62, -77, 42, 6, 63, 86, 26, 48, 81, 11, 25, 122, 100, 40, -79, 60, 119, -14, -126, -103, -120, -113, 111, 27, 21, 8, -97, -100, 66, -42, 54, 109, 101, -104, -111, 34, -9, -8, -91, -46, 56, -96, 121, -22, 85, -5, -119, -55, 69, 89, -104]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-61, 47, 86, 69, 12, 109, -23, -12, -78, -127, -70, 123, -94, -12, -12, 118, -90, -121, 83, 116, 122, -103, 58, -97, 115, 49, -87, 37, 125, 91, 42, -127, 62, 120, -25, -72, -39, 78, -97, 124, 34, -50, -121, 60, 125, 95, 56, 81, 11, -66, -81, -56, 90, 103, -103, 46, -93, -76, 17, -11, -4, -74, 70, 42, 34, -9, -8, -91, -46, 56, -96, 121, -22, 85, -5, -119, -55, 69, 89, -104]");
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-128, 36, -100, -2, 40, -38, 11, 17, 89, 102, 42, 10, -84, 110, 45, 106]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-112, 126, -95, 49, 3, -38, -64, -46, 14, 60, 105, 100, 40, -100, -98, 55, 6, 76, 67, 43, 52, 44, 78, 111, 24, 126, 60, -70, -35, 66, 10, -74, -19, 79, 102, 39, 32, 45, -37, -8, -25, 85, 11, 104, 38, -100, -44, -37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-19, 79, 102, 39, 32, 45, -37, -8, -25, 85, 11, 104, 38, -100, -44, -37]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[21, 116, 9, 32, -56, -29, -80, 21, -63, 39, 21, 121, 108, -33, -4, 27, -15, 127, 42, -121, -60, 29, -62, -31, 11, -40, 56, 68, -16, -94, -98, -30, -19, 79, 102, 39, 32, 45, -37, -8, -25, 85, 11, 104, 38, -100, -44, -37]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-53, 122, 6, -65, -59, 16, 19, 27, 16, -32, -77, -121, 67, -28, 84, 78, -34, -62, 2, 68, -67, -97, 119, 124, -124, 27, -110, 124, -5, 82, 0, -82, -19, 79, 102, 39, 32, 45, -37, -8, -25, 85, 11, 104, 38, -100, -44, -37]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 126, -91, 104, 114, -8, -86, 61, 49, -120, 113, 40, 115, 88, -38, -55, 91, 66, 81, -25, -77, 34, -42, 127, 5, 36, 72, 76, -106, 87, 44, -88, -31, -118, 41, 94, -106, 30, 16, -22, -7, 102, -102, 7, 122, 56, -89, -96, -94, -13, -16, 66, -53, -100, -24, 69, -32, -97, 119, -106, 17, 106, -89, -26, -80, -37, 90, -50, -46, -12, -22, 52, -6, 115, 33, 22, 35, -105, -79, 63, -71, -124, 19, 62, 78, 6, 43, -58, 81, 35, 12, 83, -52, -126, 50, -33, -19, 79, 102, 39, 32, 45, -37, -8, -25, 85, 11, 104, 38, -100, -44, -37]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        javax.crypto.SecretKey secretKey27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey27);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-67, 103, -63, -44, 98, 17, 55, -126, 103, 115, -109, -85, 23, -116, 66, -71]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-82, -63, -36, -93, 65, 97, -119, -102, -96, -88, 38, 26, -48, 77, -73, 66]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[125, 7, 94, 26, -37, -97, -111, -59, 97, 105, -64, -117, -46, 86, -93, -58]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[65, -29, -112, -82, 47, 103, 59, 66, 83, 115, -90, 102, -56, 72, -61, 125]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-29, -17, 74, 62, -87, -13, -35, -47, 85, -90, 122, -107, -94, 34, -112, -7, -62, 86, -107, 122, -61, 9, 126, 14, 62, 8, -38, -98, 41, 82, -37, 101, 125, 7, 94, 26, -37, -97, -111, -59, 97, 105, -64, -117, -46, 86, -93, -58]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[125, 7, 94, 26, -37, -97, -111, -59, 97, 105, -64, -117, -46, 86, -93, -58]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-4, 78, 51, -2, 20, 49, -114, -59, 52, 19, -102, 23, 54, -110, -21, 103]");
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey28);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[92, -12, 109, -127, -51, -23, 31, 78, 20, -15, -122, -13, 48, 38, -110, 4]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[69, -84, -73, -53, -78, -122, 97, 36, -42, -85, 95, 70, -117, 61, 57, 56]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[53, 81, 20, 77, 107, -45, -90, 45, 10, 126, -94, -46, 46, -128, -102, -88]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-79, -12, 52, -28, -42, -44, 13, -84, -97, 28, -65, -44, -106, -121, -41, 47]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[95, -54, 64, 86, -77, -121, 104, -12, 54, 46, 44, 88, 40, -52, -125, -81]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[78, -12, 56, -74, 120, -1, -94, 14, 98, -54, 80, -89, -29, 105, 8, 61]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-24, 97, 71, -123, -76, -73, 28, 64, 51, -107, -90, 50, -3, 18, 116, 110, 46, 12, -24, -87, 24, 79, 59, 60, 40, -112, 39, -63, -15, -120, -78, -109, 95, -54, 64, 86, -77, -121, 104, -12, 54, 46, 44, 88, 40, -52, -125, -81]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-102, 124, 105, -58, -67, 34, -125, -70, -22, 56, -63, -9, -101, -44, -124, 73, 118, -122, 36, 24, -78, 119, 98, 53, 40, 110, -24, -106, -37, 21, 116, -119, -19, -79, -119, -17, 16, -109, -108, -72, -56, -29, 84, -79, -60, 23, -119, 114, 3, 14, -11, -52, -33, -118, 32, -89, 57, 68, 56, -100, -4, -83, -14, -83, 45, -60, 82, -92, 0, 20, -57, -5, 55, 111, -85, 99, -33, 121, 99, 119, -16, -3, -105, -128, -67, -97, 105, 23, -89, 40, -30, -21, 17, 36, -41, 124, 95, -54, 64, 86, -77, -121, 104, -12, 54, 46, 44, 88, 40, -52, -125, -81]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        java.lang.Class<?> wildcardClass15 = secretKey7.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-88, 80, -53, 43, -9, -22, -31, -123, -66, -108, -87, 48, -8, -101, -66, -45]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-9, 94, 93, -11, 115, 20, 77, -68, 94, -11, -76, -99, -102, -67, -11, 125]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-116, 58, -103, -96, 111, 8, -101, -13, 34, -77, 42, -71, 36, -96, 30, -111]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-88, 80, -53, 43, -9, -22, -31, -123, -66, -108, -87, 48, -8, -101, -66, -45]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-39, 101, -37, 21, -126, 22, -64, 17, -66, -112, -60, 125, 71, 68, 88, -106, -95, -16, -113, -88, -40, 26, -39, -56, 80, 53, 6, 124, -39, 40, 25, -20, -88, 80, -53, 43, -9, -22, -31, -123, -66, -108, -87, 48, -8, -101, -66, -45]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-88, 80, -53, 43, -9, -22, -31, -123, -66, -108, -87, 48, -8, -101, -66, -45]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey14);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey14);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray42 = new byte[] {};
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray42);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey44);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey48);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey48);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey48);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray42, secretKey58);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey58);
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey58);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        byte[] byteArray68 = new byte[] {};
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray68);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey70);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey74);
        byte[] byteArray78 = new byte[] {};
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray78);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey80);
        javax.crypto.SecretKey secretKey84 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey84);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey84);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray78, secretKey84);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray68, secretKey84);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey84);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey84);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey84);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey84);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-54, -8, 24, 55, 18, 4, -94, -28, 84, 90, 23, -94, 55, 14, 38, -77]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CAF818371204A2E4545A17A2370E26B3" + "'", str3, "CAF818371204A2E4545A17A2370E26B3");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CAF818371204A2E4545A17A2370E26B3" + "'", str4, "CAF818371204A2E4545A17A2370E26B3");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "CAF818371204A2E4545A17A2370E26B3" + "'", str5, "CAF818371204A2E4545A17A2370E26B3");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CAF818371204A2E4545A17A2370E26B3" + "'", str6, "CAF818371204A2E4545A17A2370E26B3");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[112, 16, -32, -58, 16, 78, 67, -121, 78, 29, 84, -95, 81, -84, 40, 37]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-126, -61, -117, -44, -30, -80, -31, -114, 76, 65, -50, -61, -116, -124, -55, -115]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-126, -61, -117, -44, -30, -80, -31, -114, 76, 65, -50, -61, -116, -124, -55, -115]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[16, -37, -103, -108, -67, 78, 65, -36, 16, -26, 83, 115, 94, -101, 0, 106, -90, -115, 43, 74, 98, 13, -1, -50, 113, -98, 61, -104, -16, -18, 33, 111, 80, -94, 6, 120, 33, -16, -28, 71, 43, 125, -105, 96, 7, 25, 15, -95, -82, 107, -49, 5, -7, -123, -74, 55, -64, 14, -104, 108, -2, 7, -128, -40, -27, 51, -94, -18, 20, -71, -11, -115, -3, 31, -18, 56, -102, -2, 16, 38, -118, 27, -120, -24, -27, 104, -79, -32, 30, -30, 45, 34, 72, 82, 113, -29, 112, 16, -32, -58, 16, 78, 67, -121, 78, 29, 84, -95, 81, -84, 40, 37]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[67, 113, -65, 88, 106, 11, -7, -9, 24, -53, -77, -48, -104, 87, 34, -78]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-104, -82, 14, 97, 121, 110, -33, 38, -5, -65, -38, -41, 37, 122, 110, -85]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-103, 9, -3, -108, 78, -55, 40, -105, 80, -99, 69, -99, 85, -72, 25, 16]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[89, -81, -23, 58, 59, -61, 53, -67, -54, 75, 94, 100, -74, 112, 113, 112]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-111, 89, -107, 33, -16, -88, -40, -112, -117, -13, 22, 85, 60, -116, 91, 21]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[23, -104, -70, -75, -124, 70, 95, 105, -56, -93, -46, 19, 93, -32, 100, -128]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[43, -62, 37, -14, 91, -87, 71, 0, -108, 62, -8, -77, -124, -91, 30, 70]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-110, 33, -105, 107, 46, -84, -41, 4, -104, 9, 77, 9, -52, 124, 111, 122]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[54, -3, -109, -13, -41, 117, -60, -26, 113, -57, 108, -23, 40, -59, -19, -67, -11, 82, -60, 23, -117, 78, 31, -46, 53, -110, -98, -99, -89, 123, 96, -39, 43, -62, 37, -14, 91, -87, 71, 0, -108, 62, -8, -77, -124, -91, 30, 70]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[120, -82, -13, -82, -112, 53, 49, -61, -62, 100, -75, 47, -31, -35, 85, 124]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[90, 75, -74, 100, -34, -83, -76, -115, -68, 71, 73, 53, 20, 116, 27, -125]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(secretKey84);
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[66, 96, 71, 12, 63, -124, 0, 56, -26, -45, -20, 73, 89, 117, -44, 88]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-28, 2, 56, -102, -18, 109, -74, -115, -121, 83, -99, 92, -30, 23, -120, -46]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[57, 64, -32, -89, 35, 113, -66, -11, -60, -54, 110, -79, 20, 56, 44, -78, 122, 99, 5, -84, -87, 10, -80, -79, -72, 94, 109, 88, 0, 95, 118, -8, 66, 96, 71, 12, 63, -124, 0, 56, -26, -45, -20, 73, 89, 117, -44, 88]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-67, 15, -6, 88, -18, -19, 98, -120, 13, -8, 15, 4, -128, 52, -22, 108, -30, 124, 49, -64, 123, 44, -70, 51, -72, -25, -17, -74, -107, -27, 114, 13, 66, 96, 71, 12, 63, -124, 0, 56, -26, -45, -20, 73, 89, 117, -44, 88]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        byte[] byteArray0 = null;
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey32);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("8DE2D2478B9254DA9F2857FE63F009EF998A83F3CB7DEB4931DD64ECB229D6F42CF335D3DD27F8123BAC8B090886EFAB", secretKey32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[32, -96, 27, 119, 38, -7, -49, 45, 68, 21, -5, 94, -60, 39, 61, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[72, -122, 96, -25, 67, -31, 1, -101, 5, -81, 47, -15, 42, -58, 76, 71]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-39, 111, -56, -78, -8, 88, 2, -107, 97, 112, -30, -62, -89, -103, -104, 121]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-79, -64, -76, -59, 118, -8, 117, -119, -15, -83, -35, -113, 83, -119, -11, 89]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-35, -73, -56, -55, 27, 33, -44, -84, -112, 14, 11, -29, 100, 120, -82, 106]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-93, -33, -44, -40, 51, 126, -68, -35, 48, 0, 120, -93, 120, 7, -4, -43, 107, 56, -63, -51, -67, 4, 72, -92, -35, -122, 24, 5, 61, 72, 46, 53, 87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-113, -50, 112, -55, 98, -126, -87, 34, 26, -38, -54, 25, -87, -90, 6, -94, 22, -6, 98, -41, 111, 4, -46, 64, -100, 35, -86, -57, -52, 125, -9, 82, 67, 91, 125, 73, -15, -10, -63, -52, -116, -4, 42, -49, 48, 62, -88, 49, 49, 85, 115, -34, 97, -122, -87, -89, 91, -7, -89, -64, -113, -13, -86, 82, -103, 31, -45, -36, 105, 90, -3, 69, -57, 74, 115, 117, 26, 14, -69, -77, 45, 62, 5, -24, 80, -106, 89, -40, 50, -6, 34, 49, 25, -76, 80, 73, 87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[90, -67, -41, 120, -43, -62, 98, 94, 93, 70, 89, 4, -69, 86, 18, 98, -86, 60, -118, 31, -125, -86, -88, 80, -79, -11, 87, 26, 5, 41, 18, 3, 48, 29, -14, 103, 4, 8, -57, -17, -68, 51, -66, -24, 64, 113, -4, -74, -114, 3, -98, -103, 76, 3, 32, 59, -15, -61, -122, 48, 85, -117, -8, -79, 0, -90, 120, 68, 0, 90, 45, -33, -30, -16, 49, -53, 59, 88, -11, 99, 2, -37, -44, 37, -36, -10, -90, 45, -48, -21, 87, 61, 124, -12, -40, 125, 87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[2, -118, 47, 59, -35, -97, -97, 102, 34, 66, 112, -45, 22, -14, 27, -114, 125, -120, -25, 41, 106, -20, -67, 90, 118, -41, -107, 106, -77, -60, -103, 30, -14, 55, 114, -72, 98, -58, 33, 88, 123, 81, 58, 28, 50, 59, -99, 114, -93, -84, -115, 58, 48, -72, 67, -78, 127, 0, 93, 86, 72, 14, 70, 125, -97, -2, 50, -38, 121, 61, -123, -10, 30, -83, 25, -17, 34, -18, -104, 96, -80, -39, 17, -35, 20, -87, 107, -83, -126, 121, 125, -7, 96, 83, -20, 23, 87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-18, -108, 34, -4, -28, -79, 73, -59, 64, -24, 44, 10, -57, 105, -71, -112, 18, -7, -75, 23, 106, -7, -125, 3, 61, 89, 117, 5, -31, 22, -9, -106, -17, -125, -92, -70, -64, 65, -21, -127, -108, -1, 42, 10, -122, 56, 122, 42, -41, 97, 110, 6, 90, -1, -55, 90, 126, -72, 109, 113, 51, 23, -27, -90, 89, -35, 122, -109, -87, 109, -32, 37, -7, 34, 114, 36, -47, 38, -107, 112, -95, 27, 46, -119, 57, 34, 89, -20, 38, -128, 82, 84, -46, 96, 18, 66, 87, -70, -35, 121, 3, -41, -28, -53, -107, 112, -123, -6, -64, -75, 101, 68]");
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("121265FC61C266F2C74D29FC1595D7FC6A35920F065FDE047C97E4E66BE86FAB5245EF1941544FCB387EBAB186BA8DFE", secretKey31);
        java.lang.Class<?> wildcardClass42 = byteArray41.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[34, -16, -17, 125, -95, -122, 120, -27, -60, -36, -118, -78, 56, 4, -83, 98]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[88, -9, 104, 115, -33, 10, 69, -84, 8, 71, -58, 43, -70, -46, -104, -88]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[107, -62, 75, 97, -33, -2, 83, 112, 108, 49, -6, -57, 125, 38, 118, 84]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[3, 105, 85, 3, 7, 57, 20, -39, -105, -92, -93, -71, 27, 12, -85, 71]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[108, -51, 31, 106, 90, 102, -80, 45, -88, 97, -108, -71, 41, -123, 82, -63]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[108, -51, 31, 106, 90, 102, -80, 45, -88, 97, -108, -71, 41, -123, 82, -63]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[86, -82, -52, -4, -101, -96, 86, 88, 74, 79, 106, -110, 101, 39, -111, -21, 120, 56, 105, -65, -47, -126, -85, 105, 7, -59, -58, -85, 72, 32, 34, 1, -69, -9, 31, -92, 15, -121, 22, 56, 63, -127, -122, -95, 121, 45, 7, 46, -57, -61, -106, -88, 4, 72, -115, 89, 101, -73, -40, -124, -65, 75, -85, 21, 73, 29, 11, -97, -89, -9, 61, -55, 125, -87, 81, -48, 30, -9, -54, 22, -116, -120, -90, -82, -18, 90, -4, -54, 25, 67, -56, 119, 101, 13, 100, -99, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-32, 37, -27, -46, 111, 112, 113, -76, -93, 84, 23, -38, -31, 53, 102, -4, 99, -34, -68, 36, -42, 100, 61, -48, -123, 65, 73, -67, -3, -80, -7, -15, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[65, 82, -53, 9, 126, -83, -122, 112, -112, 98, -6, -23, 45, 56, -102, -10, -89, 71, 51, 66, -26, 116, -17, -125, -100, 44, -100, 91, 117, -117, 89, -106, 53, -47, -100, 84, 41, 55, 87, -21, 7, 69, -92, 102, 108, -23, 20, 7, 117, -13, -3, 73, 53, -56, 37, -12, -97, 49, -87, 22, 88, -119, -104, -95, -68, 123, -110, -69, -42, 94, -122, -61, -14, 77, 34, 21, -114, 93, -39, -104, 66, 45, -111, -58, 8, 42, -86, 29, 43, -29, -25, 92, 15, -1, -34, 55, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[103, -108, 116, -122, 39, 55, -123, 31, -27, -44, -77, -48, 99, 102, 22, -56, 100, 125, 67, 68, 96, -96, -80, 109, 54, 118, 98, 101, 63, -16, 120, -33, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[39, 45, -30, -115, -108, 20, 67, -77, -101, -127, -18, -103, -79, -16, -80, -29, -25, -2, 38, -66, -59, 123, 74, 120, 52, -127, -63, -95, -17, 30, -118, 6, 24, 30, -75, 2, -1, -7, -111, -127, -74, -105, 66, 101, 37, 56, 71, 91, -90, 29, 118, 52, 95, 104, -57, 111, 121, -67, -4, 24, -50, -82, -54, -64, -9, 81, -55, 27, -29, -35, 20, -1, -65, 24, -80, -41, -102, 32, -24, 11, -90, -40, -39, -95, 43, 4, -2, -80, 119, -74, -79, -114, 49, -117, 116, 81, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[67, 69, 123, -109, -1, 100, 46, 103, 123, 69, -55, -117, 35, 21, -89, -68, 11, 122, 90, -66, 97, 104, 87, 90, 36, 97, 1, 126, -76, 115, -90, 95, 75, -91, 11, -17, -48, 24, -19, 103, -35, 104, 127, 22, 118, -24, -99, 59, 104, -31, 58, 122, 3, 20, -59, -57, -62, 72, -17, -49, 53, -2, -120, 107, 101, 60, -121, -96, 106, -121, 107, 36, -83, -119, 7, 46, 13, 42, -88, 110, -49, 69, 31, 124, 61, 98, -60, -65, -85, -21, -111, 91, -103, 127, 38, 25, 90, 40, -99, 35, 117, -66, 112, -118, -88, -113, -64, -106, 69, 89, -56, -90]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("5CC7D57454209BE8860FE8BBB89A71A1", secretKey5);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("6089928EF0EC1A52F9E601572DB1E4CB8699A9284FD1C94AE3D3FC6BBF036430D5FCE1DD62A9EEE591BDC6ED60D05B34", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[20, 114, -21, 48, -124, -51, 39, -122, 64, -14, -5, -56, -59, -16, -116, -119]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-103, -41, -38, 90, -5, 69, 72, -31, 54, -110, 46, -24, 58, -3, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-103, -41, -38, 90, -5, 69, 72, -31, 54, -110, 46, -24, 58, -3, 120, 47]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-92, 13, 41, -39, -98, -16, -33, 2, -118, 40, -43, 4, -55, -36, -92, -98, 84, -123, 85, -66, 49, -73, 89, -78, 33, -115, -24, -102, 107, -98, 108, -23, 20, 114, -21, 48, -124, -51, 39, -122, 64, -14, -5, -56, -59, -16, -116, -119]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[8, -20, -72, -97, -43, 10, 77, 11, -52, -103, 69, 43, -121, -89, -20, -9, 60, -45, -18, -56, 16, -91, -127, 34, 41, 35, 38, -116, 15, 57, -126, 48, 20, 114, -21, 48, -124, -51, 39, -122, 64, -14, -5, -56, -59, -16, -116, -119]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-41, 28, -16, -32, 8, 4, -5, -11, 96, -22, 77, -92, 28, -113, -100, 67]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[127, 110, -104, -87, 121, -21, -20, 99, -78, -36, 2, -96, 40, -34, 104, -90]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[127, 110, -104, -87, 121, -21, -20, 99, -78, -36, 2, -96, 40, -34, 104, -90]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-79, -16, -7, 40, 87, -79, -55, 43, -14, 12, 15, -115, -12, -56, 70, -39]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-25, -92, 88, -21, -15, -48, -116, -72, -57, 24, 13, 64, -97, 46, -115, -107, 26, 55, 37, -64, -28, -65, -20, 93, 75, 60, -72, -102, -75, -42, 60, -17, -41, 28, -16, -32, 8, 4, -5, -11, 96, -22, 77, -92, 28, -113, -100, 67]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-25, -92, 88, -21, -15, -48, -116, -72, -57, 24, 13, 64, -97, 46, -115, -107, 26, 55, 37, -64, -28, -65, -20, 93, 75, 60, -72, -102, -75, -42, 60, -17, -41, 28, -16, -32, 8, 4, -5, -11, 96, -22, 77, -92, 28, -113, -100, 67]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-41, 28, -16, -32, 8, 4, -5, -11, 96, -22, 77, -92, 28, -113, -100, 67]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[7, 119, 77, -89, -78, -73, 123, 100, -118, -125, 50, 119, -55, 64, 20, 27, 28, 43, -35, 63, -101, 45, 88, 60, 37, 32, -30, -4, 63, -93, 7, -30, -36, -106, 21, -65, -12, 89, 85, 122, 59, -18, 53, -90, -63, -63, 46, -2, -20, -111, 23, 48, 16, -8, -43, 117, -52, 48, 47, -125, -74, -52, -91, -39, 51, 107, 39, 46, 29, -1, 113, 103, 67, -6, -91, 115, 113, -81, -84, 9, -56, -23, 125, 113, -31, 51, 60, 110, -26, -111, 61, 55, -12, -72, -111, 48, -41, 28, -16, -32, 8, 4, -5, -11, 96, -22, 77, -92, 28, -113, -100, 67]");
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("BE55FE5C8D7360C2299783912CDD239DA219E469338928A86F1FE9932E52A0FEFED03C397FA3542BCD0AF74DC7A9606E", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-70, -89, 111, 12, -56, 118, 119, -115, 72, 10, 62, 36, -100, -59, 5, -8]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[44, -56, 4, 104, 121, 3, 7, 125, 46, 55, -10, -8, 89, -91, 107, 38]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[44, -56, 4, 104, 121, 3, 7, 125, 46, 55, -10, -8, 89, -91, 107, 38]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[5, -107, 12, -99, -102, 79, -106, -11, -80, 93, 42, 116, 33, 8, -112, 38]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[74, 102, -113, -83, -12, 113, 53, -101, 33, -61, -71, -24, 96, -101, -103, -52, -106, 4, 115, 32, 33, 86, 87, -87, -11, 48, 36, 123, -100, -114, -52, -110, -70, -89, 111, 12, -56, 118, 119, -115, 72, 10, 62, 36, -100, -59, 5, -8]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[74, 102, -113, -83, -12, 113, 53, -101, 33, -61, -71, -24, 96, -101, -103, -52, -106, 4, 115, 32, 33, 86, 87, -87, -11, 48, 36, 123, -100, -114, -52, -110, -70, -89, 111, 12, -56, 118, 119, -115, 72, 10, 62, 36, -100, -59, 5, -8]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[14, -18, -22, 7, 66, -21, 11, 30, -124, -7, 91, 119, -58, 57, -58, -56, 88, -75, 108, 93, 8, -122, -33, -73, -20, 51, 69, -122, -42, -116, 13, -58, -59, -67, 126, 99, 125, 36, 41, -76, 72, -28, -65, 54, -65, 49, 4, -19, -119, -19, 91, -105, -56, 20, -103, 113, -70, 82, -7, -52, 32, -76, 39, -48, -38, 101, -71, -67, -59, 18, 30, 119, 11, -66, 88, -6, -104, 73, -18, 21, -102, -15, 111, 19, -46, -22, 114, 48, -116, -3, 106, 17, -72, -87, -9, -90, -70, -89, 111, 12, -56, 118, 119, -115, 72, 10, 62, 36, -100, -59, 5, -8]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[62, -52, 30, 105, 92, -13, 91, -90, 76, 101, 67, 75, 96, 2, 96, -109, -120, 70, -116, 24, -103, 54, 28, -63, 43, 20, 65, 78, -28, -95, 16, 48, 67, 21, -2, 57, 127, 10, -18, -49, 4, -128, -13, 113, -15, 12, 46, 122, 34, -60, -104, -100, 34, 119, -68, 88, 37, -51, -65, -32, -84, 104, 11, 13, -2, 105, -83, -15, 61, 24, -51, -42, 28, -123, 70, 2, 55, 57, -30, -34, -31, -41, 8, -25, 73, 17, 51, 122, 120, 57, 38, 44, 72, 20, -110, -47, -70, -89, 111, 12, -56, 118, 119, -115, 72, 10, 62, 36, -100, -59, 5, -8]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "3ECC1E695CF35BA64C65434B6002609388468C1899361CC12B14414EE4A110304315FE397F0AEECF0480F371F10C2E7A22C4989C2277BC5825CDBFE0AC680B0DFE69ADF13D18CDD61C8546023739E2DEE1D708E74911337A7839262C481492D1BAA76F0CC876778D480A3E249CC505F8" + "'", str17, "3ECC1E695CF35BA64C65434B6002609388468C1899361CC12B14414EE4A110304315FE397F0AEECF0480F371F10C2E7A22C4989C2277BC5825CDBFE0AC680B0DFE69ADF13D18CDD61C8546023739E2DEE1D708E74911337A7839262C481492D1BAA76F0CC876778D480A3E249CC505F8");
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.Class<?> wildcardClass9 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[8, 40, -94, -12, 123, -108, 12, -8, -128, 51, -21, -48, 34, 24, 48, 34]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0828A2F47B940CF88033EBD022183022" + "'", str6, "0828A2F47B940CF88033EBD022183022");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "0828A2F47B940CF88033EBD022183022" + "'", str7, "0828A2F47B940CF88033EBD022183022");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0828A2F47B940CF88033EBD022183022" + "'", str8, "0828A2F47B940CF88033EBD022183022");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey2);
        java.lang.Class<?> wildcardClass5 = secretKey2.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[34, 112, -31, 92, -34, 7, 95, -68, 32, 93, 12, 119, 15, 34, 69, 110]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[47, -1, 88, 26, -11, 16, 27, 104, -110, -124, -15, -36, 43, -96, 62, 23, -40, -33, -75, 56, 120, -71, 26, -95, -75, -20, 104, -24, -103, -100, 120, -87, -44, -28, -111, -97, 125, 109, 110, 105, -90, -82, -35, -120, -106, 39, 47, -25]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey11);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey11);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("47AC066912A6F6E8296222EBDFAF6E362A5D40E90F3A79F57908C672F932089EBCFB9C5341DC0A0391428AA9D0E3537395F21F1C730C87068986B55EA2B1C7C73D0C7DFAA0AA5899F9853EF6CFD3E528D7D4AC2B811AF2D96038DF76367346F100447953067684973336EA1621C90EB5", secretKey11);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-118, -12, -122, -34, -108, -62, 84, -16, -48, 111, -97, 94, 65, -122, 52, -84]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-118, -12, -122, -34, -108, -62, 84, -16, -48, 111, -97, 94, 65, -122, 52, -84]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-19, -113, -67, 122, -13, -98, -35, 103, 92, -76, -20, -26, 4, -40, -18, 109]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[115, 57, -112, -44, 111, 71, -50, -13, -16, 107, 22, 115, -15, 112, 91, -125, 36, -80, 60, -35, -74, -118, -87, -111, -96, -99, 101, -36, 31, -109, -128, 118, -52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[115, 57, -112, -44, 111, 71, -50, -13, -16, 107, 22, 115, -15, 112, 91, -125, 36, -80, 60, -35, -74, -118, -87, -111, -96, -99, 101, -36, 31, -109, -128, 118, -52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, -49, 86, -79, -29, -53, -15, 47, 86, -2, -77, 50, -47, 120, -126, -55, 34, -3, 59, -12, 56, 105, -54, -38, -17, -56, -77, -10, 29, 123, -2, -24, -70, -96, -88, -65, -100, 60, -5, -123, -101, 11, -63, 23, 33, -109, 112, 1, 76, -119, 112, -58, 120, 89, -53, 115, -23, -89, 44, 1, 105, 0, 18, -86, 12, -64, -47, -22, -94, -117, -94, -11, 18, -45, 89, 81, 1, 20, 119, -7, 94, -78, -77, 71, 48, -13, -18, 122, -56, 89, -52, -11, 89, -85, 122, 14, -52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-15, -87, 96, -41, -113, 121, -42, -122, 83, -88, 118, 59, 72, -78, 18, 120, 100, 83, -126, -16, -16, -122, 10, -18, 4, -72, -111, 63, 42, 15, -68, -105, -69, 67, -114, -43, 67, 54, 85, 107, -55, -116, -89, 61, 1, 127, -73, 57, -73, -123, -15, 6, 76, -117, 111, 89, 87, -16, -113, -3, -81, 112, -83, -65, -83, 86, 13, -41, 2, 103, 81, 8, -102, -51, -52, -101, -117, 62, -70, 31, 93, -51, 114, -105, 76, -109, 87, -30, -44, -127, -88, -9, 76, 36, -101, 67, -52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-65, 46, -63, -86, 14, 95, -105, 112, 100, 4, -5, 52, -35, 70, 109, -58, -13, -42, 42, -125, 55, -51, -86, -51, 112, 52, 20, 46, -56, -105, 72, -52, 108, -61, -82, 71, 68, -114, -81, -78, -48, -101, 101, 66, 45, 51, 17, -117, 33, -44, 33, 123, -44, 71, 75, 29, -100, -27, -13, -117, 87, 24, -46, -48, -68, 55, 21, -74, -59, -123, -86, -95, -127, 0, 9, -3, 68, -96, 50, -65, -123, 34, -12, 11, 75, -12, -114, -70, 102, 48, 5, 44, 103, -14, -6, 76, -52, 125, -105, 11, -59, -120, 56, 2, -14, 115, 65, 42, 34, 11, 17, 53]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey77);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey77);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey77);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("DE06AD040A78A74719FC5ED42C354EA1B3ED205D51E251BF910102F7CC95CDFEE68A99ADAB7FDA4580B614922A979BA6", secretKey77);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-95, 60, 7, 0, 124, -9, 99, -44, -72, -72, -49, 9, -115, -64, -68, -11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-121, -26, 92, -123, 37, 27, -91, 111, -2, -120, 41, 7, -73, 57, 123, 126]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 104, 14, 112, -80, 19, -126, 52, 21, -113, -24, 69, -48, 72, 72, 83]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-22, -20, -107, -82, 62, 46, 77, -92, -78, 8, -35, -96, 88, -110, 15, -19]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-44, -39, -40, -25, -85, -28, 25, 71, -77, -92, -17, -10, 106, 80, 23, 24]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[50, -112, 119, -19, 112, -12, -35, 119, -3, -29, 102, 49, 70, -125, 86, -123]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, -103, 89, -127, 10, 120, -91, -34, -77, -122, -13, 102, 125, 54, 74, -58]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-34, 97, -87, -44, -61, 71, -1, -103, 60, -80, 100, 65, -13, -24, 116, -15, -76, 20, -91, 100, 117, 17, 113, -103, -47, -115, -27, -58, 127, -66, 16, -24, -68, 28, 126, -69, 95, -63, -99, 13, -29, 120, -12, -71, 105, -30, 64, -21]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-68, 28, 126, -69, 95, -63, -99, 13, -29, 120, -12, -71, 105, -30, 64, -21]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[122, 94, -14, -33, 123, -111, -61, -63, -30, 23, 63, -66, -54, -91, -97, 85, 11, -95, -101, 2, 79, -107, 67, -50, -17, 127, -122, 49, 107, -101, -102, -35, -68, 28, 126, -69, 95, -63, -99, 13, -29, 120, -12, -71, 105, -30, 64, -21]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-110, 88, 1, 16, -34, 0, -107, 93, 105, 13, -84, 101, 71, -73, -101, 68]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[5, -69, 126, -3, -38, 63, 19, 125, 95, -57, -73, -109, -26, -63, 58, 111]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[1, 36, 102, 35, -41, -76, -83, -66, -17, -12, 64, -116, 94, -74, -98, 114]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-36, 29, 60, -80, -73, -111, 69, -112, -94, -97, -62, 87, 125, -64, 89, 22]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[109, 14, -45, 34, 58, -78, -102, 14, -123, -61, 26, -78, -76, -124, -15, -5]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[109, 14, -45, 34, 58, -78, -102, 14, -123, -61, 26, -78, -76, -124, -15, -5]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[67, 6, -111, 59, 7, 78, 28, 83, 89, 11, -41, 59, -53, 59, -39, -5, 44, 98, 7, -59, 106, 123, -15, -55, -121, -25, -94, 7, -89, 78, -88, 87, -37, -24, -45, 61, 14, 102, 116, 126, -95, -52, 15, 51, 96, 106, 65, 108, 104, 113, 124, 66, -29, 100, 38, 29, 71, -75, 45, -25, -8, -48, -92, -83, 32, 29, -85, -23, 71, -53, -3, 20, 65, -128, 27, -59, -37, 23, -111, -54, 53, -102, -8, 4, 49, -74, -4, 101, 4, -34, 88, -103, 113, -25, -26, -92, -49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-50, 55, 116, -57, 102, 101, 73, -91, -12, 72, 92, 60, 12, -69, 36, 91, 48, 84, -97, -42, 64, 31, 64, 40, 111, 57, -61, -4, -11, -121, -68, -15, -49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-9, 94, -59, 96, -105, -9, -74, -53, 50, -71, -44, 1, -125, 127, -30, -64, -67, -56, -126, -27, 69, -60, -119, 118, 107, -95, -58, -90, -93, -10, 116, -100, 27, 68, -87, 71, 124, 44, -99, 54, -40, -35, -30, 25, -39, 80, 82, 38, 81, 64, 94, -39, -121, 113, 123, -60, 102, 82, 72, -89, 105, 101, 121, 84, -114, 53, -36, 32, -36, 60, -63, 31, -111, -42, 24, -90, 109, 46, 22, -89, 71, -80, -52, 83, -24, 39, 107, 84, -103, 31, 101, 37, -79, 79, -84, -27, -49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[84, -112, -38, 100, -35, 118, -55, 108, 3, -128, -62, 15, -28, 93, -39, -121, 0, 63, 63, -46, 10, 77, 103, -55, 115, 114, -125, -31, -56, 123, -124, -17, 46, -27, -19, 29, 81, 13, 33, 100, -108, -84, -86, 79, 44, 33, 57, -75, -14, -91, -84, -60, 12, -25, 93, -17, -72, -26, 110, -98, 95, -69, 102, 114, -118, -54, -95, -33, -125, 105, -104, 11, 108, -127, 0, -42, -124, -83, 105, -28, 95, 89, -80, 101, -100, -61, 124, -87, 97, -8, -31, 12, -78, 78, -49, 87, -49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-61, 83, 19, 61, 47, 72, -46, -84, -110, -112, 55, 121, -84, -55, -120, -73, -17, 52, 26, 12, 44, 7, -14, -30, 98, 5, 116, -48, 117, -59, 99, 100, -76, -5, -47, -65, -115, -76, -87, 95, -53, -97, -126, 16, -32, -98, -21, 56, 11, 68, -51, 112, -115, -16, 120, -59, 40, 95, 84, -107, 65, 59, 30, 43, 3, -100, -30, 105, -17, 54, -47, -34, -96, 7, 48, -119, -80, 17, -39, 75, -51, 83, -58, -85, 53, 63, -84, -24, -1, 65, 46, 107, 108, -40, 62, 62, -49, 13, 111, 82, 104, -22, 115, 44, -111, 47, -87, -66, 57, 66, -63, -124]");
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey29);
        java.lang.Class<?> wildcardClass37 = secretKey29.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-111, -6, 78, 87, 27, 46, 48, 98, -42, -36, -118, -49, -85, -24, -77, -24]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[72, -83, 118, 76, 86, -10, -9, -64, 17, -90, 6, 108, 52, 95, 85, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[75, 46, -32, 0, 105, -65, -12, 85, 42, 13, 6, 84, 1, 3, 99, -44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[8, 92, 102, -91, -20, 51, -3, 111, 99, 34, -78, 18, -38, 58, 110, -71]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-128, 10, -12, 28, -83, 119, 77, 40, -103, 40, -96, -69, 98, -34, 122, 124]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[40, -13, -61, -60, -111, -14, 94, -116, 42, -93, 95, 116, -109, 123, -24, 60, -80, -109, 78, 79, 93, 25, -16, -126, 41, 10, -87, -6, -79, -94, -99, 46, -87, 57, 103, -37, 81, -90, 104, -55, -112, 80, 112, 44, 16, -5, 122, -32]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-87, 57, 103, -37, 81, -90, 104, -55, -112, 80, 112, 44, 16, -5, 122, -32]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-5, 4, -70, -73, -50, -22, 105, 123, -102, 62, 67, -74, 84, -21, 77, -9, 14, 3, -15, -27, -10, 90, -53, 124, 60, 113, 62, 3, -41, -91, 25, -96, -87, 57, 103, -37, 81, -90, 104, -55, -112, 80, 112, 44, 16, -5, 122, -32]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-63, -26, 123, 93, 79, -120, 89, -2, -32, 40, 89, -20, 116, -128, -15, -79, -119, 91, 84, 126, 125, 104, -38, 108, -73, 69, 46, 127, -25, 29, 36, 57, -108, 99, 90, 119, -50, 124, 110, 90, -2, 60, -112, 61, -26, -114, 42, 91, 77, 73, -104, -42, -40, -94, -110, -31, -23, 50, 19, 54, -22, 35, -39, -81, -75, -44, 126, 119, -22, 44, 125, 15, -66, 34, 81, 93, 127, -72, -122, 19, -63, -114, -107, -116, -84, 33, 124, -24, -120, 96, -82, -42, 83, 91, -69, -66, -87, 57, 103, -37, 81, -90, 104, -55, -112, 80, 112, 44, 16, -5, 122, -32]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[4, 8, -88, -38, -58, 90, 106, -117, -125, 86, 0, 126, -77, -31, -95, -32, -40, 35, 102, 98, 85, 15, -78, 109, -18, -99, 8, 113, -86, -1, 83, -71]");
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E21635610417F287F992626DE383A4C", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[29, 30, -103, 42, 93, -35, -83, 49, 52, 110, 37, -60, 86, -70, 55, -118, -7, -83, -47, -116, 64, 121, -75, -111, -74, 39, 86, 49, -50, 30, -12, -95, -34, -8, 127, 76, 24, 100, 39, -51, 51, -21, 34, -45, 21, 70, -126, -30]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1D1E992A5DDDAD31346E25C456BA378AF9ADD18C4079B591B6275631CE1EF4A1DEF87F4C186427CD33EB22D3154682E2" + "'", str3, "1D1E992A5DDDAD31346E25C456BA378AF9ADD18C4079B591B6275631CE1EF4A1DEF87F4C186427CD33EB22D3154682E2");
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey26);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("6089928EF0EC1A52F9E601572DB1E4CB8699A9284FD1C94AE3D3FC6BBF036430D5FCE1DD62A9EEE591BDC6ED60D05B34", secretKey41);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[50, -27, -71, 74, 72, 93, -22, -99, 89, -15, 83, 26, 82, 105, 33, -62]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[59, 69, -9, 43, -128, -52, 122, 41, 83, -76, -70, -128, 107, 93, -76, 80]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[32, 84, 93, 47, 89, -107, 34, 127, 62, 78, -109, -124, 102, 20, 79, 54]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[79, 127, -32, 5, 82, -9, 9, -119, -64, -98, 33, 91, 23, -5, 46, 61]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-74, 76, -80, -5, -19, 77, -70, 25, -32, -58, 105, -19, -92, 26, 84, -51]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-39, 90, -107, -96, -83, -95, -76, 74, -8, -32, -114, -119, -49, 1, 93, -21]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-39, 90, -107, -96, -83, -95, -76, 74, -8, -32, -114, -119, -49, 1, 93, -21]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[26, 37, 2, -31, 124, -35, 86, -30, -34, 23, 31, -109, 118, 24, 77, -10]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[27, -55, 75, 65, -25, -123, -122, 65, -86, -68, 99, -28, -33, 0, 66, -49]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-74, 120, -64, -28, -5, 46, 92, 85, 89, -117, -101, 67, -29, 29, -13, 72, 69, 113, 42, -94, 26, 40, -59, -37, 62, -14, -69, -108, 1, -77, -51, -89, 8, 12, 6, 2, -23, -83, 126, -112, 65, -85, -86, -2, -113, 6, 60, 74, -120, 101, 96, 2, 36, -64, -31, 42, 6, 40, 114, 114, -83, 1, 82, -47, 63, 67, -24, -122, 57, -75, 67, -23, -104, 93, 100, -1, -73, -24, 61, -24, -60, -104, 110, -60, 116, -113, -95, 94, 20, 99, 22, 27, 64, -12, 37, 35, -82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[70, -37, -6, -42, -73, -27, 97, -99, 44, -57, 42, -119, 47, 61, -34, 41, -45, -52, -15, 53, -71, 55, -112, 117, 36, 58, -116, 127, -105, -126, -85, 75, 84, 59, -127, -91, -26, 78, -48, 99, -74, 4, -82, 30, 33, 11, -75, -23, 96, -34, -76, 117, 115, -107, -4, 36, -106, 108, -14, -14, -69, -19, 97, 125, -75, -20, -11, 50, 18, -112, 115, -44, -69, 120, 59, -112, 127, 5, 1, -66, -59, -120, -5, -47, 40, -92, 90, 16, 118, 28, -87, -38, -61, -96, 98, -23, -82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-110, 70, 28, -82, 115, 116, 30, 60, 3, -128, -69, 121, -3, -63, -126, -11, 32, -69, 84, 99, -87, 70, -94, -35, 54, 92, 59, -78, -3, 61, -93, -110, -82, -74, 122, -34, 61, 74, -86, 27, -107, -16, 60, 102, 32, -80, -12, 79, 86, -116, 86, -47, -70, 41, 42, -26, 16, -5, -65, 70, 46, 33, 0, -63, 126, 3, 94, -95, -91, 61, -66, 13, 86, 40, -125, 121, 44, 97, -119, -19, -67, -31, 16, -127, -93, -90, 2, -84, 85, 104, 47, -103, -21, -75, -117, -75, -82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[-82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-44, -18, 58, -99, 89, 51, -65, 53, -46, -115, -64, 2, -55, 0, -62, -44, 50, 60, -119, -21, -57, 71, 15, -55, -93, 58, 93, -20, 91, -59, -39, 126, -120, 44, -25, 15, 3, -126, 64, 81, -50, -16, 92, -124, 119, -49, 101, 56, -30, -63, -23, 73, -49, 23, -98, -80, -19, 32, 49, -18, 94, -108, -83, 99, 126, 61, 61, 51, -123, 25, 82, -39, -17, -17, 42, -117, -93, -25, -85, 10, 39, -14, 61, 7, 114, -38, 68, -75, -9, -4, 108, 48, -54, -29, 35, -62, -82, -71, 16, 6, -112, -80, -40, 95, -19, -37, 63, 82, -96, 49, 15, 66]");
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey40);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey53);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey53);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("649A0B31811C16EA1DD354E91C799D674A01F117A63128F5748C1E7B59504A0FFF58A48EACF9243FBE89ED95ACB6152E", secretKey53);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("25440C689F3AAFDB9B742DF1EB274637FE5D844A221814EFA4D50703B556CAED26C3213BA7272673FACC1C3EDFECD5D0", secretKey53);
        java.lang.Class<?> wildcardClass62 = secretKey53.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-17, -52, 40, 70, 31, 28, -27, 0, -121, -56, -62, 30, 61, 99, -58, 87]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[65, 55, 122, 95, -55, -31, 95, -115, 15, -104, 108, -9, 34, -89, 11, 56]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[30, 60, -17, 37, -96, 74, 75, 88, -119, -73, 25, 32, 91, 127, 99, -29]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-101, 70, -127, -119, 25, 78, -25, -36, 35, -5, 3, -16, -65, 107, 50, 1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-114, 59, 13, 61, 50, -78, -74, 46, 54, -66, 37, 93, 55, -17, -100, 47]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[37, -31, 62, -116, 97, -115, 13, -114, 92, -41, 25, 1, -81, -108, 115, 29]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[25, 118, -79, -77, 127, -110, -63, 83, -97, 111, -13, -98, -119, -50, 100, -10]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[31, -120, -38, 69, -18, -91, 125, -124, -103, -58, -120, -18, -102, 35, -33, -46]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[21, -15, -82, -27, -57, 33, -103, -14, -28, -36, 53, -30, 90, 21, 85, 112, 37, 79, 13, -65, -54, -81, 42, -5, -89, -80, -59, 105, 91, -46, 127, -2, 25, 118, -79, -77, 127, -110, -63, 83, -97, 111, -13, -98, -119, -50, 100, -10]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[24, 15, -29, -101, -120, 49, 38, -13, 13, 24, -108, 94, -126, -113, -33, 25]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-98, -51, -1, 67, 107, -37, 64, 13, -86, -81, -65, 115, 108, -80, -24, -105]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-98, -51, -1, 67, 107, -37, 64, 13, -86, -81, -65, 115, 108, -80, -24, -105]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[59, -54, -104, 93, -62, -120, 44, -109, -27, 32, 19, 82, 118, 45, -14, -127]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-25, -93, -108, 10, -107, 108, -125, -55, 78, 51, 83, 50, 106, 127, 49, -29, -31, 88, -69, -112, -53, -79, 91, -123, 16, 92, -38, 47, 80, 60, 96, -99, -115, -77, 12, -51, -22, -38, -100, -29, 59, 112, 5, -54, -110, -54, 71, 92, 63, -53, -118, 51, -49, -92, -51, -64, -10, 79, 30, -38, -59, -109, 69, -79, 85, 51, 1, 55, 64, 57, 85, 49, -99, 14, 79, 23, 100, 87, 50, -124, 61, 100, -24, 20, -61, -65, -70, -24, 0, -104, 49, -77, 67, -25, 109, 13, 24, 15, -29, -101, -120, 49, 38, -13, 13, 24, -108, 94, -126, -113, -33, 25]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-45, -85, -92, -67, 65, 44, 122, -72, 4, -25, -89, 121, -56, -60, 71, -81, 74, -26, -115, -84, -76, 90, 106, 17, 71, -76, 108, -46, 25, 73, -85, -9, -33, -27, 100, -125, -58, 105, -74, 28, -22, -10, -46, -117, 65, 28, -80, 58, 103, 125, -76, 75, -17, 118, 61, 16, -26, -108, 61, 45, 81, 114, -8, -11, 26, -62, 35, 82, 38, 29, 96, 82, 74, -66, -101, -28, 52, -128, -83, -109, 49, -26, -109, 13, -29, 5, -89, -55, -64, 61, -119, -126, 83, -12, -104, 16, 24, 15, -29, -101, -120, 49, 38, -13, 13, 24, -108, 94, -126, -113, -33, 25]");
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("973DAD711DBDED294D7B756668A76E985E99E1DAB4BF0B32190F8B244DEEE951CD78BF9EB4AB37299A9BD0400BE104F6ED8DEC32B097BE81235421C56D953C65981A6685D6C7A41067BCF13C225EABB88E43C627DAD3934C7D68C6BCEE69BF9BE42DA8486D680A7F3B18CACE0FC4A0CC08683619B3C090B565955EE036A6C117BDB790C330CE4C3C89C7ED620B12CAAB08C18643FC60FE988E0D6EB82BB92E24532076DA8BEE9D73B3CD5938BB8B20CA76020C7DBC9FD9EB6CF90E769F57B01FFB29C34A10DE9C500FFD36A3F3B6F2AE9B5DE279E1A24A28B6D1AA0EF7132B2D371D56295E54F5D629F6F7FC9189C99B", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey7);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey18);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey18);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-73, 44, 14, 12, -5, -105, 126, 108, -58, -31, -6, -38, 57, -34, -55, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-99, -10, -50, 127, 92, -103, 85, 45, -106, 122, -8, -40, -70, 42, 96, 116]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[110, -32, 87, 110, 70, 77, 29, 72, -1, 127, 118, -6, 46, 92, -88, 93, -35, -122, -83, 121, -1, -44, 120, -125, 15, -107, 40, -49, 39, -16, -72, 127, -73, 44, 14, 12, -5, -105, 126, 108, -58, -31, -6, -38, 57, -34, -55, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[81, -27, 63, -30, -19, -97, 115, -96, 85, -24, -34, 46, -66, 68, -52, 125, -39, 53, -44, 55, -80, -7, 69, 43, -127, -47, 56, 54, 97, -123, -18, -106, 12, -72, 119, -127, 69, 110, -20, -72, -108, 100, -13, 21, -54, 71, 71, -59, 79, 78, -55, 37, 54, -86, -107, 44, -91, -36, -63, 96, -83, 68, 121, -101, -73, 44, 14, 12, -5, -105, 126, 108, -58, -31, -6, -38, 57, -34, -55, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[80, 112, 67, 14, -13, -55, -42, 22, 59, -53, -24, -17, 10, -38, 104, -126, 38, 23, 69, 44, 126, -11, -48, 109, 41, 74, 19, -80, -104, 74, 58, 102, -73, 44, 14, 12, -5, -105, 126, 108, -58, -31, -6, -38, 57, -34, -55, 1]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[84, -113, 87, -39, 0, 100, 39, 65, 37, 94, 66, -41, -96, -29, -90, 93, -105, -76, -84, 113, 8, 63, -50, -34, 122, -5, 62, -110, 39, 83, 69, -42, -73, 44, 14, 12, -5, -105, 126, 108, -58, -31, -6, -38, 57, -34, -55, 1]");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-115, 16, -127, 69, 10, -72, 34, -11, -20, -50, -63, -97, -106, -61, 10, -115]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[81, 97, 92, -14, 11, 48, -94, 55, 8, 47, -99, 38, -97, -8, 124, -114, 96, -102, -61, 20, 102, -87, -4, -106, 32, 14, 34, 1, -55, -103, 44, -38, 74, -78, 115, -8, 0, -100, -83, 113, 58, 121, 31, -108, 80, 89, 64, -98]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[74, -78, 115, -8, 0, -100, -83, 113, 58, 121, 31, -108, 80, 89, 64, -98]");
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("2733CF51A4C2AD7AE1784E8370333630E75EFEB46B4ABCAE4F4E79D5FC0C949E75086B52493DE875A718A56003C40796", secretKey31);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[95, 32, 48, 45, 3, -98, -65, -55, 49, 71, 90, -25, -110, -42, -71, 19]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[3, -91, -91, 71, 80, -53, 89, -57, -18, -121, 42, 33, -54, -92, 93, 9]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-36, 91, -101, -112, -74, -123, 59, -86, -109, -94, 52, 37, 116, -91, 81, -36]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-100, 79, -75, 61, 34, -54, 98, -107, 50, -17, 14, 40, 43, -92, -41, -92]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-88, -56, -19, 98, -20, 77, 26, 123, 90, 106, 48, 9, -47, 101, -105, -93]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-31, 28, 40, -114, -63, -42, 63, 105, -121, 12, -79, 64, 82, 91, 94, -44, -83, -21, 127, 122, 24, -57, -20, 83, 109, -72, -115, 123, 24, -72, -28, 117, 65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[46, 89, 15, 103, -112, 88, 14, 73, -123, 113, 78, -82, -93, 14, 106, -50, -3, -36, -26, -29, 90, -32, -90, 92, 26, -39, -112, 26, 95, 83, -3, 12, 65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-21, -92, -114, 42, 88, 59, 47, 72, -21, 62, -125, -102, -124, 95, 24, -17, 102, -10, 8, -109, 4, -50, 95, -71, -60, 103, -98, 36, -54, -123, -115, -116, 117, 8, -46, 103, 62, -113, 46, -20, 90, -27, -95, 63, 86, 34, 71, -56, -114, 113, -83, 5, -43, 99, -32, -77, 94, -49, 36, -58, 79, -42, 98, -37, -112, -123, -27, 55, 48, -32, 26, -119, 102, -124, 27, -25, -65, -18, -127, -72, -13, 45, 77, 8, -99, 72, 17, -61, 75, 46, -73, -80, -97, -86, -32, 65, 65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[54, 57, -119, 36, -39, -123, -75, -68, -38, -39, 61, 24, -25, 64, -24, -66, -21, 85, -125, 88, -105, -80, -32, -11, -44, -65, -126, 91, 20, -119, 34, 101]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[92, 124, -44, -111, -88, 68, -4, 27, -106, 59, 51, -62, -20, -30, 31, -97, -127, 84, 78, 54, -118, -29, 22, -66, -122, -101, 86, 7, -65, 12, 72, 6, -70, -17, -66, -48, -52, -61, -101, -96, -33, 26, 72, -97, 60, -121, -84, -77, -65, 55, -90, -42, 32, -37, 63, -112, -78, 87, -5, 6, 107, -103, -128, -113, 41, 56, 6, 14, -29, -48, -18, -15, -88, -9, -34, -28, -124, -34, 51, 104, -67, 123, -58, 9, -70, 75, -32, 105, 8, 0, 70, 92, 111, -2, -88, 120, 65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-33, 82, 111, 127, -82, 114, 92, -30, 79, 40, 106, 12, 15, 14, -65, 57, -102, 10, -69, -50, 45, 119, 48, -123, -73, -125, 86, -10, -111, 101, -74, -98, 21, -78, -68, -89, -81, -18, 30, 33, 26, -86, -93, -7, 73, -93, -24, -104, 26, 89, 116, 123, 3, -112, -21, -25, 96, 108, 60, 121, 95, -21, -25, -83, -20, 71, -100, 102, 126, 116, -126, 67, 31, 14, -119, 51, 88, -14, -7, 124, -75, -74, -29, -92, -109, -105, 116, -36, 15, 74, 21, -26, 23, -121, 55, 75, 65, -33, -117, -30, -17, -107, -107, 106, -16, 4, 8, -49, 121, -101, 84, -20]");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DF526F7FAE725CE24F286A0C0F0EBF399A0ABBCE2D773085B78356F69165B69E15B2BCA7AFEE1E211AAAA3F949A3E8981A59747B0390EBE7606C3C795FEBE7ADEC479C667E7482431F0E893358F2F97CB5B6E3A4939774DC0F4A15E61787374B41DF8BE2EF95956AF00408CF799B54EC" + "'", str41, "DF526F7FAE725CE24F286A0C0F0EBF399A0ABBCE2D773085B78356F69165B69E15B2BCA7AFEE1E211AAAA3F949A3E8981A59747B0390EBE7606C3C795FEBE7ADEC479C667E7482431F0E893358F2F97CB5B6E3A4939774DC0F4A15E61787374B41DF8BE2EF95956AF00408CF799B54EC");
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4C7CB59394E72B69F45D1E2AA0FA780F751F16EB8BA56483F94BE11F79E67ECF9F3D63109C0B2FE7578E64352135EA2938A7C6A88E392EEE5475858750DD388554589950EEE0DA54A320B42765ED7287E5C011BDFE31C693EA9C58289A153ED33DE270921AF017460D3499ED48FBE503", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BC56F621DC45FC7D1FDEDD4E498E56D34D7F230DC0E6513A1E8E802ABE835C2B0F9EE57E2E19D764D4335F94137AB4BEE19F8D586276EBC8D9B901ED50CD8BE3CC8DB84CD51730BBA1D34E0DE2CA64CAA3FA81C1A3930109BD10DC23E6003DA1D6D7D2AF02CCD0059606A2F3912D1C5", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("911F57119EB24E767E42E4F6B323A1B64ACC59F689B27E8E3BFDDB32C46328E28973E926473BDF881F9F712F06F4821C", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[19, -100, -61, 118, -17, 94, -36, -51, -122, -90, -86, -88, -2, 46, 113, 117]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-92, 126, 126, -70, -120, -70, -71, -99, 35, -47, -10, -86, -87, -11, -65, -44]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[19, 65, 93, 85, 64, -27, 89, -11, 8, -127, 67, -35, -12, -125, -6, -22]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-7, 93, 30, -121, -101, 25, -7, -118, -110, 112, 114, 15, -12, -89, -86, -7, 3, -108, 13, 19, -66, 42, -96, -81, 99, -121, -21, -118, 78, 4, -24, -23, 70, 92, 44, -3, 89, 42, 57, -127, -37, -62, 8, -25, 70, -110, 102, -21, 51, -12, 10, -6, -27, -112, 58, 125, -52, 64, -127, -53, 39, -114, -21, 63, 39, 47, 117, -74, 126, 11, 120, 108, 48, -43, -122, 36, -84, 5, -42, -88, 10, -77, -9, 43, 93, -55, 48, 44, -89, -67, -105, -109, 93, -17, -53, -8, 19, -100, -61, 118, -17, 94, -36, -51, -122, -90, -86, -88, -2, 46, 113, 117]");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey40);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey40);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey40);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey77);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey77);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey77);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("185A1B767EA35995DE364B2630B730DB41B018654DF53AA7F5A1A88874F62C157937105A1E980287F6177A4D4C7979667B816678CC19EF265A3F40EAD33170E1C8670B99847E197623A4DEB006E28EFBA344D32E2530D3681DA4FA6C86C6912AAAA8E288664F0ADD164D86E03D6E6134", secretKey77);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 16, -48, 40, -119, -8, 90, -72, -40, 103, -70, -108, 17, -59, -97, -80]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-121, -43, 104, 31, 127, 81, -125, 94, -31, 61, -4, -20, 85, 66, 96, 31]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[36, -69, 50, -121, -53, 4, 72, -108, 15, 89, 25, -101, -56, 20, -106, -18]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-9, -117, 85, 26, -12, -58, -124, -59, 4, 105, 6, 20, 29, 101, 89, 121]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-56, -58, -5, -53, -62, -29, 55, 118, 95, 103, 102, -70, 3, 117, -105, -80]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-114, 79, -98, 76, 32, 115, 31, 3, 1, -116, 4, 33, 17, -107, 26, -9]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[16, 95, -25, -81, 27, -104, 26, -77, 69, 42, -64, 86, -8, -65, 22, -53]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[69, 101, 117, 81, -71, -10, -92, -58, -42, -65, 57, 61, -90, 6, 49, 95, 36, -99, -40, -86, -51, 81, -28, -36, 24, 25, 61, -111, -20, -38, -40, 19, -102, 84, -95, -60, -75, -31, -21, -68, 67, 66, 10, 40, 66, 102, 24, -70]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-102, 84, -95, -60, -75, -31, -21, -68, 67, 66, 10, 40, 66, 102, 24, -70]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-29, 82, 54, 75, -18, 103, -16, 106, -29, 76, 32, -65, -40, -11, -102, 14, 75, -23, -126, 90, -92, 82, 111, 16, -116, 32, -97, 21, 60, 81, -12, -106, -102, 84, -95, -60, -75, -31, -21, -68, 67, 66, 10, 40, 66, 102, 24, -70]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[15, 0, -98, -117, -105, 73, -51, 126, -61, -3, 66, 84, 27, -44, 121, 126]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-53, -20, -64, 1, 115, -117, -31, 30, 20, -16, 122, -1, 106, -101, 117, 90]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[79, -66, -56, -4, 83, 85, 124, 41, 14, -46, 103, -111, 124, -37, 95, 68]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-8, -43, -72, 76, -101, 17, -110, 65, -128, 51, 34, 90, 95, -87, -89, -108]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-98, 46, -92, -110, 18, -5, -57, 72, -83, 44, -37, -125, -118, -35, 72, -1]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[8, -61, -91, -35, 27, -98, 29, -67, -81, 93, 72, -111, 127, -42, 42, -103]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[8, -61, -91, -35, 27, -98, 29, -67, -81, 93, 72, -111, 127, -42, 42, -103]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-66, -5, 47, -33, 118, 32, 62, -94, 38, 45, -96, -21, -47, -76, 69, 79, 84, 77, -44, 48, 93, -105, -78, -102, -102, 114, -17, 35, 20, -122, -59, 11, -4, 122, -17, 26, -119, 54, 43, -108, -12, 104, -16, 72, 73, -30, 100, 87, 45, 38, 66, -92, 66, 39, -2, -40, -28, 94, 118, 109, -93, -56, -16, 86, 118, -66, 58, -91, 85, -63, -76, -57, 79, 115, 104, -123, -128, 0, -82, -69, 20, -73, -57, -15, -32, 84, 29, 80, -8, 26, 122, 78, -21, 84, 17, 63, -98, 46, -92, -110, 18, -5, -57, 72, -83, 44, -37, -125, -118, -35, 72, -1]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-25, 27, 1, 6, 89, 43, 33, 81, -75, 61, -65, -34, 84, 9, 26, 127, -41, 43, 52, 24, -94, -38, 124, -93, -9, -69, 116, 105, 81, 13, -25, 6, -98, 46, -92, -110, 18, -5, -57, 72, -83, 44, -37, -125, -118, -35, 72, -1]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[59, 110, -29, -11, 35, -34, -94, -112, 16, -24, 118, -103, 57, -56, -58, -55, -8, -32, 4, 121, -68, 74, 78, 98, -105, -19, 20, 69, -73, 10, -34, -128, 80, -114, -33, -112, 61, 32, -54, 58, 66, 49, -11, -8, 3, -31, -28, -18, -102, 115, -77, -8, 90, 74, 45, 23, 63, 72, 19, 58, 34, 75, 111, -78, -126, 111, 48, 62, -4, 94, -16, -54, 94, -2, -26, 50, 48, 57, -30, -110, -3, -102, 37, 40, -126, -107, -44, -47, -18, 78, -115, 88, -99, 73, -46, -107, -98, 46, -92, -110, 18, -5, -57, 72, -83, 44, -37, -125, -118, -35, 72, -1]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[99, -15, 8, -121, 81, 8, 109, -101, -111, -53, 8, -42, -1, -126, -39, 18, -111, -44, -83, 12, 53, -15, -53, 99, -92, 35, -99, 35, 76, 100, 104, 41, 67, 84, -82, 27, 113, 61, 119, -59, 66, 82, -89, -121, 30, 27, -65, -37, -111, 4, 50, -22, 54, 79, -28, -59, -68, -74, 26, -116, 64, 32, -74, -108, 102, -68, -62, 6, -92, 111, 0, 101, -58, -123, -66, -102, 21, -19, -37, -37, 91, -113, -2, 50, -79, 37, -30, -66, 32, 19, -28, 3, -79, 104, 126, -31, -98, 46, -92, -110, 18, -5, -57, 72, -83, 44, -37, -125, -118, -35, 72, -1]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("2F2860C6FC357E0D6B36B5C115CA66545F03386AD9065AFD258B277E518889BBE499026231269FDA91D029D60DB5E58F", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[97, 10, 38, 28, 60, -27, 41, 111, 66, -13, -105, -73, 42, 33, -29, -50]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[99, -32, 105, 111, 126, -31, 4, -89, 123, 39, -76, -98, -15, 83, 104, 34, -109, -104, 106, 78, 81, 18, -18, 103, 17, 74, 34, 41, 81, -113, 88, -37, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[93, 43, -12, -30, 82, 8, 35, -28, 9, 38, -29, 29, -24, -26, -33, 125, 69, 39, 3, -20, 92, -117, 123, 4, 58, 81, 14, 114, -105, 90, 57, 88, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[39, -121, 49, 68, 0, -72, 78, 92, 32, -69, -112, -128, 106, -69, 37, -82, 13, 62, -8, -91, 7, -89, 74, -72, -59, -24, 50, 76, 112, -41, 29, -7, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[93, 43, -12, -30, 82, 8, 35, -28, 9, 38, -29, 29, -24, -26, -33, 125, 69, 39, 3, -20, 92, -117, 123, 4, 58, 81, 14, 114, -105, 90, 57, 88, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-95, 126, 86, -16, 37, 114, 4, -117, 7, 108, 112, -36, 89, 107, 93, 40, -14, -17, 34, 99, -58, -102, 109, -3, 26, -66, 42, 43, -51, -128, 31, 49, 17, 57, -43, -27, -85, 23, -27, 12, 102, -86, -29, -20, -45, 13, 31, 61, -18, -81, -5, 119, 89, 41, 112, -48, 20, 80, 11, -128, -84, 71, -6, 0, -99, 118, 121, 71, -93, -67, 78, -1, 25, -11, -11, 34, 117, 119, 108, 31, -12, -50, 35, 90, -31, 77, -111, 31, -65, 90, -29, -25, -122, -18, 30, -60, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-60, -45, 83, -16, -40, 51, 101, -38, 82, 66, -81, 32, -113, -106, 98, -13, 33, 69, -51, 108, -85, 119, -90, -126, -97, -88, 106, -99, 79, -59, -65, -101, 24, 44, -106, 31, -37, -5, 60, -106, 118, 111, 54, -61, 122, 97, 60, -56, -92, -128, -128, 70, 121, 51, 83, 64, 28, 43, -49, -30, -125, 55, -93, -74, -67, -1, -73, -100, -16, -19, -59, -64, 38, -60, 47, 1, 26, 43, -118, -28, 84, 48, 101, 93, -114, 10, -96, 120, -45, -25, -77, 126, 85, 41, -24, 68, -67, -64, -92, 46, -38, 76, -88, -25, -30, 13, -98, -16, 62, 41, -119, 120]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "C4D353F0D83365DA5242AF208F9662F32145CD6CAB77A6829FA86A9D4FC5BF9B182C961FDBFB3C96766F36C37A613CC8A4808046793353401C2BCFE28337A3B6BDFFB79CF0EDC5C026C42F011A2B8AE45430655D8E0AA078D3E7B37E5529E844BDC0A42EDA4CA8E7E20D9EF03E298978" + "'", str17, "C4D353F0D83365DA5242AF208F9662F32145CD6CAB77A6829FA86A9D4FC5BF9B182C961FDBFB3C96766F36C37A613CC8A4808046793353401C2BCFE28337A3B6BDFFB79CF0EDC5C026C42F011A2B8AE45430655D8E0AA078D3E7B37E5529E844BDC0A42EDA4CA8E7E20D9EF03E298978");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[117, -63, 106, 95, -33, -119, 104, 121, 14, -117, 71, -52, 9, 5, -74, -17]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[8, 65, 59, -78, -45, 119, -98, -89, 85, -7, -68, 24, 100, -60, -104, 121, -57, -85, -70, -65, 81, -40, 48, -50, 62, 101, -40, -126, -126, 23, -17, -111, -107, 64, 42, -103, -19, -60, 8, -73, 123, -37, 29, -19, -37, -91, -68, 28]");
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[79, -57, 30, 39, -46, -55, -69, 93, 14, 85, 49, 111, 89, 69, -41, -7]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-45, 113, 9, -1, 106, -99, 68, -25, 107, -55, -68, -10, 58, -22, 36, -1]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-45, 113, 9, -1, 106, -99, 68, -25, 107, -55, -68, -10, 58, -22, 36, -1]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[106, 46, 63, 90, -102, -4, 10, -90, -26, 46, -72, -107, -119, -85, -66, -27]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-21, -29, 90, -97, -86, -94, 49, -9, 68, 101, -128, 77, -101, -71, -1, 65, 61, 74, 20, -36, 5, 59, -119, 101, 93, -48, -24, -89, -86, -116, -81, -79, 79, -57, 30, 39, -46, -55, -69, 93, 14, 85, 49, 111, 89, 69, -41, -7]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-21, -29, 90, -97, -86, -94, 49, -9, 68, 101, -128, 77, -101, -71, -1, 65, 61, 74, 20, -36, 5, 59, -119, 101, 93, -48, -24, -89, -86, -116, -81, -79, 79, -57, 30, 39, -46, -55, -69, 93, 14, 85, 49, 111, 89, 69, -41, -7]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[107, -58, -53, 38, 104, -101, 81, 90, -81, -76, 0, -85, 35, 75, 75, 64, 6, -71, -73, 125, 11, 125, -18, -123, -86, 57, -81, -72, -5, -61, -60, 77, 45, 75, -60, -127, -9, 0, -55, -36, 46, 7, 63, -13, -45, 67, 73, 5, 64, 32, 35, 109, -46, -74, -44, 103, -45, -51, 24, -79, -69, 57, -81, 109, -115, -27, -55, -36, 96, -2, 70, -110, -84, 19, -28, 41, -119, -43, -33, -126, 41, 40, -71, -72, 10, -117, 21, -37, -50, 8, 79, 28, -4, 20, -38, -14, 79, -57, 30, 39, -46, -55, -69, 93, 14, 85, 49, 111, 89, 69, -41, -7]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-5, -125, -25, 19, 25, 10, 117, 113, -82, 114, 33, 16, -77, 72, 81, 31, -68, -84, 120, 47, -93, -114, -116, -44, 85, 58, 112, 77, -41, 90, -35, 85, -49, 93, -67, -68, -38, 11, 126, 81, -80, 99, 25, -90, -102, 13, -124, -91, 57, 87, -128, -61, 98, 64, -31, 47, 72, 12, 51, -122, -67, 100, -2, 123, -48, 5, -60, -116, -50, -9, -127, -65, -56, -64, 60, -54, -76, -117, -89, -105, 119, 104, 91, 26, 84, 56, -113, -43, -11, 36, 45, -117, 116, -99, -89, -3, 79, -57, 30, 39, -46, -55, -69, 93, 14, 85, 49, 111, 89, 69, -41, -7]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "FB83E713190A7571AE722110B348511FBCAC782FA38E8CD4553A704DD75ADD55CF5DBDBCDA0B7E51B06319A69A0D84A5395780C36240E12F480C3386BD64FE7BD005C48CCEF781BFC8C03CCAB48BA79777685B1A54388FD5F5242D8B749DA7FD4FC71E27D2C9BB5D0E55316F5945D7F9" + "'", str17, "FB83E713190A7571AE722110B348511FBCAC782FA38E8CD4553A704DD75ADD55CF5DBDBCDA0B7E51B06319A69A0D84A5395780C36240E12F480C3386BD64FE7BD005C48CCEF781BFC8C03CCAB48BA79777685B1A54388FD5F5242D8B749DA7FD4FC71E27D2C9BB5D0E55316F5945D7F9");
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[123, -3, 110, -71, 42, -46, -92, 56, 55, 59, -42, 124, -118, -80, -47, -113]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-122, -1, -13, -56, 34, -14, -81, -118, 0, -65, -113, -63, 51, 0, -75, -29, -26, 24, 4, 127, -49, -28, -20, 13, 76, 57, 56, -70, -29, 110, -102, -56, -28, 35, 99, 4, 50, 17, 102, 73, 17, 32, 75, 41, -88, -47, -63, -94]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "BFCBCB09A2BD2E79200F489640DAF511EFF1FB4F78D63741354C08F349A2D991BE29F19DE59BD0680A111344CEFF048CB780A81BB25597B120DE950C8D6667300F797DE4752C69A34D0D7FCFE95A95802C657B3D8206BBFE43A21778964350C34438ACEC18D7C769F9401FB9942985BA38E08A82B66ED6E1C59139ABB8634A99E0DDA8D389C0F7C7E4F6EAA8B6076D2710EAC2ACD941C001A20D87E19226633CE16EE581F348B327AF943BB42CB15E056F4DB4B698C292CDF600AA15655F34B57580019FAEBEA8F8BC5189F1E1C0FB2217A22244AC9A5D1FE9545A1575E5D4FB2245ADE043C69A2357467391429A6D49CC0310E85C9FF4CC2EA42D5873F746EF49017F3DF51C294C514141E333DC840A38451CBCA6C7287EDAA0987EF7120108DC5C4F7F3E12C3F502D5ABF504DA4C4D99D47BC2CB0991FD4B6A228A06420C6EC2DB5FF956FDDB17F3A5910FD479F187CA6D3A7DA662210C6AE0C5706C351F30D8FF79867C6035C69C74881B97FDBE4AE28BA36069EFCE0AAF7734465755C29353E0BF16732B8C06DACD0CB056D2863B19ACEA9B2183A2B511DCFF9C29F9A531E0E3E48E4C9DC46429CC2D4D67C1C43D46C50F4A9790E0E6CDB20AE653CC7229F3C7D8F694C6139873129E8CCBB9DC6C56B8954762612E57A09B520536841CDBE42363043211664911204B29A8D1C1A2" + "'", str7, "BFCBCB09A2BD2E79200F489640DAF511EFF1FB4F78D63741354C08F349A2D991BE29F19DE59BD0680A111344CEFF048CB780A81BB25597B120DE950C8D6667300F797DE4752C69A34D0D7FCFE95A95802C657B3D8206BBFE43A21778964350C34438ACEC18D7C769F9401FB9942985BA38E08A82B66ED6E1C59139ABB8634A99E0DDA8D389C0F7C7E4F6EAA8B6076D2710EAC2ACD941C001A20D87E19226633CE16EE581F348B327AF943BB42CB15E056F4DB4B698C292CDF600AA15655F34B57580019FAEBEA8F8BC5189F1E1C0FB2217A22244AC9A5D1FE9545A1575E5D4FB2245ADE043C69A2357467391429A6D49CC0310E85C9FF4CC2EA42D5873F746EF49017F3DF51C294C514141E333DC840A38451CBCA6C7287EDAA0987EF7120108DC5C4F7F3E12C3F502D5ABF504DA4C4D99D47BC2CB0991FD4B6A228A06420C6EC2DB5FF956FDDB17F3A5910FD479F187CA6D3A7DA662210C6AE0C5706C351F30D8FF79867C6035C69C74881B97FDBE4AE28BA36069EFCE0AAF7734465755C29353E0BF16732B8C06DACD0CB056D2863B19ACEA9B2183A2B511DCFF9C29F9A531E0E3E48E4C9DC46429CC2D4D67C1C43D46C50F4A9790E0E6CDB20AE653CC7229F3C7D8F694C6139873129E8CCBB9DC6C56B8954762612E57A09B520536841CDBE42363043211664911204B29A8D1C1A2");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-119, -71, -30, -24, 3, 28, -94, 62, 119, 22, 11, -32, -95, 19, 12, 92]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[51, 120, 43, 96, -116, 2, 20, 8, 101, 48, 121, 71, 72, -58, 20, -82, -56, -95, -95, -125, -3, 108, -52, -60, -75, 76, -68, 19, -22, 127, -121, 82, -79, -113, -114, -105, 118, -89, 45, -103, 17, 69, -86, -126, -36, -18, -21, 103]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("2F2860C6FC357E0D6B36B5C115CA66545F03386AD9065AFD258B277E518889BBE499026231269FDA91D029D60DB5E58F", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-15, -47, -26, 123, 50, -21, -52, 107, -122, 113, 116, -8, 109, 58, 86, 68]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, -87, -111, 83, 72, -24, -34, 45, 127, -58, 79, -50, -67, -69, 51, 39, -12, -107, -84, 80, 18, -60, 81, 122, 19, -83, 26, -112, 17, -57, -59, 57, 75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[122, 89, 29, 82, -39, -109, -110, -47, -115, -119, 17, 118, -63, 124, 88, -30, 113, -123, -18, 17, -65, -101, -84, 91, -110, -31, -118, 59, -7, 32, 41, -48, 75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-81, -2, -77, -57, 84, 105, -37, -28, 77, -43, -91, 91, 3, 56, 123, 31, 65, -121, 8, -15, -127, 79, -48, -89, 32, 15, 25, 117, 94, 97, 39, -86, 75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[34, -92, 8, -123, 50, -35, 62, -32, -127, 43, -74, -58, -113, 122, 89, -87, -75, -8, -11, -7, 7, -32, -18, -105, 74, -57, 97, 71, -41, 105, 100, 73, 67, 56, 104, -53, -15, 40, -76, 73, -107, -96, 7, -2, -56, 107, 31, 126, -32, -126, 100, 17, 5, -103, -39, 60, 51, 84, -28, 66, 83, 87, 106, -6, -32, -114, -102, 97, -19, -67, -52, 91, -87, 81, 39, -33, 26, 78, 76, 27, -63, -25, -73, -92, -18, 104, 118, 24, 59, -120, -19, -49, 32, -57, 77, 111, 75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 98, 35, -14, -43, 20, 8, 97, -24, -101, -92, -24, 38, 79, -35, 76, 4, -3, -54, -84, 32, 79, -112, 107, 47, -61, -4, -100, 13, 4, -13, -126, -42, -70, 86, -123, 81, 107, 20, -62, 33, 5, -120, -35, -84, -78, -31, -68, -120, -12, 27, 42, 100, 103, 86, -36, 105, -50, 113, -87, 93, -128, 41, -114, -68, -15, 44, 12, 64, 75, -114, 114, 109, 82, 120, -99, 58, -126, -101, -103, -126, 17, -24, -106, -90, -32, 44, 50, 13, -96, -30, 0, 80, -58, -88, 20, 75, 126, 15, -78, 108, -6, -117, 51, -101, 60, 97, 59, 62, 21, -71, 55]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "526223F2D5140861E89BA4E8264FDD4C04FDCAAC204F906B2FC3FC9C0D04F382D6BA5685516B14C2210588DDACB2E1BC88F41B2A646756DC69CE71A95D80298EBCF12C0C404B8E726D52789D3A829B998211E896A6E02C320DA0E20050C6A8144B7E0FB26CFA8B339B3C613B3E15B937" + "'", str17, "526223F2D5140861E89BA4E8264FDD4C04FDCAAC204F906B2FC3FC9C0D04F382D6BA5685516B14C2210588DDACB2E1BC88F41B2A646756DC69CE71A95D80298EBCF12C0C404B8E726D52789D3A829B998211E896A6E02C320DA0E20050C6A8144B7E0FB26CFA8B339B3C613B3E15B937");
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E21635610417F287F992626DE383A4C", secretKey1);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey15);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey15);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey15);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey15);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey15);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey15);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("47AC066912A6F6E8296222EBDFAF6E362A5D40E90F3A79F57908C672F932089EBCFB9C5341DC0A0391428AA9D0E3537395F21F1C730C87068986B55EA2B1C7C73D0C7DFAA0AA5899F9853EF6CFD3E528D7D4AC2B811AF2D96038DF76367346F100447953067684973336EA1621C90EB5", secretKey15);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("53AE1050E35EDA9A5023D9EE70F014907C95D84435399DE65A8ED10E87E2D98DE826BD34E176B05C95D1E12A3DEA07388F9B5429B03FB811F614219A89B0E7E01D8A41449F82DBFAADB5A7CA36BFD90AA76ACF7137C2C63F5C5B7FFD134E858E6BE4C94B4BE4FED769A070755BB1CBBE", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[-92, -36, 118, 83, 90, -128, -76, 98, -92, 24, -98, 9, 120, -17, 82, 14, -82, -26, -13, -48, 116, -28, 87, -11, 72, -100, -112, 35, -117, 0, 94, -16, -56, -83, 41, -22, -84, 51, -60, -58, 26, -19, 91, 36, 43, -128, 98, -102]");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-14, 64, -118, -109, -8, -111, 79, 49, -68, -41, 113, 40, 100, -62, -64, 101]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-14, 64, -118, -109, -8, -111, 79, 49, -68, -41, 113, 40, 100, -62, -64, 101]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[52, -51, 106, 124, -29, -25, -21, -69, -42, 99, -44, 99, 36, 102, 74, 20]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[94, 8, -77, -126, 127, -88, 16, 52, -3, 30, 45, -118, -80, -83, -93, -111, 21, -56, 49, -46, -22, 105, -103, 36, -100, 3, -29, -95, 71, 54, 33, 43, -80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[94, 8, -77, -126, 127, -88, 16, 52, -3, 30, 45, -118, -80, -83, -93, -111, 21, -56, 49, -46, -22, 105, -103, 36, -100, 3, -29, -95, 71, 54, 33, 43, -80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[74, -33, -49, -120, 72, 58, 94, 64, 90, 80, -17, 5, -93, -21, 85, 52, -28, -21, 83, -124, 77, 103, -96, -85, -83, 92, 31, 66, -10, -26, 56, 75, -81, -42, 74, 14, 13, -32, 6, 35, 121, 28, -26, -88, 49, 37, 0, -84, 94, 34, -113, 12, -81, 37, -65, -8, -121, -35, 78, 36, -114, 43, -63, 82, -81, -128, -62, -98, 0, -117, 7, 51, -51, -31, 63, 58, -42, -70, -118, -55, 52, -32, 36, -124, -20, -90, -41, -49, -106, 22, -108, 24, -94, -29, -73, -33, -80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-69, -81, -127, 90, 78, -14, 28, 39, 30, -125, 18, -108, 52, 91, -82, -39, 10, 92, 107, 5, 57, 39, -17, 91, -124, 92, 89, -78, -9, -30, -15, -26, -80, -106, 69, -30, 120, 60, -70, 122, -64, -5, -125, -75, -88, 26, -87, -60, -113, 123, -89, -109, -119, -69, -113, 74, 19, 63, 1, -79, 43, 80, 51, -23, -67, 52, 11, -100, 13, 63, -74, 100, -25, -11, -45, -11, 12, 103, 31, 50, -127, 4, -88, -21, 111, -36, 47, 22, -107, -16, 22, -5, -122, 97, -116, 79, -80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[0, -28, -32, 41, 0, -17, -121, -53, -125, 112, -111, -52, 106, 55, 6, -96, -85, -56, -45, -22, 92, 83, 23, 29, 95, 24, 50, -96, -96, -61, -115, 103, 68, -55, 64, -94, -59, 31, -31, -116, -76, 118, 35, 2, -44, -15, 47, 93, -54, 24, 112, -100, 57, -33, -66, -80, 79, -42, -72, -96, 125, 71, -51, 3, 28, 3, 108, -72, 62, 52, 78, 86, -97, -27, 57, -63, 63, -128, -85, -33, 66, 57, 121, -43, 5, 73, 102, 19, 44, 35, 33, -72, -106, 88, -11, 112, -80, -67, -44, -17, -120, -34, 64, 84, 106, -25, -21, -25, 28, 29, 91, 96]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey8);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-94, 24, -74, -113, -89, 37, 102, 25, 101, -17, -52, -48, 115, 28, 91, 121]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-90, -14, 94, 112, 105, -15, 14, -95, 38, 116, -110, -106, -117, 75, 33, 67]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-90, -14, 94, 112, 105, -15, 14, -95, 38, 116, -110, -106, -117, 75, 33, 67]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[107, -39, -7, -112, 77, -75, 3, -55, 78, 52, 117, 104, 107, 27, -85, 102]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-110, -80, 101, -48, 100, -34, -3, 72, -113, 34, -91, -19, 28, -66, -104, -128, 76, -27, 86, -3, 51, 90, 114, -109, 31, 125, 20, 20, 1, 70, -29, 93, -94, 24, -74, -113, -89, 37, 102, 25, 101, -17, -52, -48, 115, 28, 91, 121]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-1, 52, -2, 22, 88, -16, -98, -18, 82, 87, -63, -5, -50, 62, 3, 21, -36, -114, -104, -109, -46, -38, -3, 124, 22, 116, -102, -20, -7, 67, 23, 126, -94, 24, -74, -113, -89, 37, 102, 25, 101, -17, -52, -48, 115, 28, 91, 121]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[7, 33, 64, 44, 120, -101, -121, -122, 32, 70, -94, 113, 107, -79, 31, 105, -99, -72, -94, 121, -89, -48, -45, 114, -95, -94, -93, -51, -77, -120, -97, 31, -94, 24, -74, -113, -89, 37, 102, 25, 101, -17, -52, -48, 115, 28, 91, 121]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-43, -49, -43, 102, 57, -61, -109, -95, -95, 35, 30, -109, 88, 89, 53, -59, 63, -27, -13, 92, -111, -124, -104, -96, -16, -122, -103, 44, 25, 26, 102, -37, 113, 126, 125, 104, 55, 61, 8, -27, 48, -14, 28, -65, -19, 64, 69, 118, 55, -54, -101, -86, -34, 88, -125, -18, 10, 67, -73, 125, 114, -94, 60, -2, -94, 24, -74, -113, -89, 37, 102, 25, 101, -17, -52, -48, 115, 28, 91, 121]");
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey37);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -119, 76, -93, 118, -14, 62, -89, -111, 107, 121, -89, -111, 24, 42, -102]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-103, -54, -21, -16, -103, 20, 60, -53, -99, 110, 109, 86, -25, -47, -109, 122]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-106, 119, -72, -62, 38, -24, 122, 3, -30, -54, 94, -95, -18, -37, 26, -87]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, -51, 4, -95, 49, 82, 51, 96, 98, -100, -68, 67, -38, 60, 18, 126]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[58, -119, -11, -68, -1, 0, 27, -35, 79, 42, -61, -95, -55, -125, 88, -95]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-109, -93, 12, 40, -73, 84, 59, 49, 69, 91, 15, 59, -39, 103, -72, 106, 99, 10, -92, 33, 63, 115, 119, -60, -36, 90, 59, -37, 77, 39, -46, -95, -9, -9, 44, 4, -78, -120, -110, -119, -62, -2, 51, -125, 31, -46, 113, -117]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-9, -9, 44, 4, -78, -120, -110, -119, -62, -2, 51, -125, 31, -46, 113, -117]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-22, -55, 62, -82, 24, -51, -52, -47, 98, 74, -93, 22, -45, 82, -66, -67, 89, 19, 104, 49, -49, -62, 88, -62, 60, -90, -75, -6, -102, -89, -40, -80, -9, -9, 44, 4, -78, -120, -110, -119, -62, -2, 51, -125, 31, -46, 113, -117]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, -28, -90, 13, -11, 55, 80, -49, 33, 93, -34, -28, 110, -71, -110, -33]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-112, 37, -43, 76, 123, -119, 90, -68, 93, -79, -61, -33, 56, 17, 13, -7]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-112, 37, -43, 76, 123, -119, 90, -68, 93, -79, -61, -33, 56, 17, 13, -7]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("BE1F3054E9E666FA21C05243046ADBC7", secretKey4);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey33);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("EB838DF9F50578D48FFD772D84A349F9E4DB2F17CB00FAAE2C8D9EEFEF300448BFB8461E95D2CDC21A8A178474848103BE6A371AD2081A16E15B81471BC4F8B82BB8E8812E51A1CC557E64A4190FF374FAE170C5FE7496057D3BCCD5CD200FE0C04A91B1239EE4FDC07096DE95038EB0", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("F2707F7398473F1976955FD048F956E6A46E942EE52CAE1D2839ECCAB0CCEBE8A1D2474ECF79A1D805C0EEB94DA13D6A", secretKey33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-112, 26, 58, -57, -17, -26, 93, -43, -67, -29, -70, -45, 16, 21, 93, 119]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[63, -89, 127, -72, -86, -126, -74, -36, -57, 93, 53, -102, 81, -8, 24, -2, 115, -109, 57, 83, 15, -55, 20, 94, -18, 127, 47, 125, 42, 41, -53, -123, 110, -67, 119, 60, 73, -83, 31, -40, -112, 99, -40, -36, -26, 38, 30, 72]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[110, -67, 119, 60, 73, -83, 31, -40, -112, 99, -40, -36, -26, 38, 30, 72]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-92, 37, -121, 59, 72, -119, -35, 71, -24, -70, -41, -118, 29, -126, 43, -82, -75, 36, 90, -44, 21, 82, -95, 118, -75, -54, 120, 114, 61, -15, 11, -89, 110, -67, 119, 60, 73, -83, 31, -40, -112, 99, -40, -36, -26, 38, 30, 72]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-123, -10, -117, 126, -89, 70, 74, -58, -83, -65, 39, 48, -20, -118, 121, -86]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[29, -66, 28, 65, 18, -92, 115, -70, -95, 76, -16, 6, 34, -85, 83, 49]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[68, 4, -79, -28, 21, 18, 38, 13, 59, -73, -115, -58, 88, 121, 19, 12]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[117, -39, -51, -113, 114, 45, -19, 97, 59, -120, -99, 81, 48, -78, -110, -61]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-47, -1, -115, -92, -17, 39, -64, 60, -126, 106, -1, 35, 21, -43, 15, -71, -72, 81, -8, -12, -79, 69, -1, 54, 32, -89, -45, 95, -122, 86, -108, 43, 68, 4, -79, -28, 21, 18, 38, 13, 59, -73, -115, -58, 88, 121, 19, 12]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[118, -93, -25, 105, -79, 111, 116, -83, 43, -73, 87, 40, 43, -125, 52, -54, 0, -84, -89, 11, -21, 37, 31, 113, 60, 113, 0, -65, 111, 37, -12, -100, -68, -117, -127, -106, -109, 32, -113, -67, 117, -90, -38, 7, -61, -7, 5, 82, 21, -9, 8, 45, -75, 38, -96, 107, -49, -83, 15, 83, -76, -4, -43, 52, 87, 23, 113, 41, -25, -106, -21, -71, 124, 108, -6, 7, -77, -77, -1, -125, 104, -35, 68, 92, -31, -22, 116, 118, -51, 107, 71, 109, 42, -4, 123, 110, 68, 4, -79, -28, 21, 18, 38, 13, 59, -73, -115, -58, 88, 121, 19, 12]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[94, -128, 60, -107, -87, 100, -103, 71, -47, -47, -115, 121, 66, 75, 124, -22, 77, -57, -86, -36, 31, -26, 117, -22, 91, 28, -109, -93, -106, 77, -77, -90, 72, 38, 115, -120, -94, 57, -34, -119, -15, 32, 17, -101, -28, -46, 62, -60, -8, -24, -92, -34, 16, -14, -84, -88, -108, 22, 3, -3, -83, 13, -82, -37, 83, -52, -35, -4, 86, -114, 36, 42, -92, 94, -95, 8, 2, -43, -27, -101, -43, 2, -14, 107, 64, 92, -104, 72, 96, 87, -45, 21, -108, -3, -36, -100, 68, 4, -79, -28, 21, 18, 38, 13, 59, -73, -115, -58, 88, 121, 19, 12]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-29, 21, 57, 38, -69, -106, -54, -12, -25, 86, 14, 24, -79, 51, 22, -13, -120, -24, 24, -86, 2, 73, -109, -96, 14, -6, -80, 113, 80, 31, -91, 73, -11, -22, -80, 58, 82, -122, 25, -75, -125, -59, 8, 49, -72, -61, 29, -82, -60, -41, 65, 105, -84, -9, 6, 72, 29, 4, -54, 31, -71, -68, 63, 39, 99, -6, -57, -79, -63, -13, -91, -45, -35, 64, -4, -34, -50, 13, -23, -101, -18, 28, -43, -33, 0, 0, 108, 13, -35, -54, 94, -76, 113, -28, 16, 65, 68, 4, -79, -28, 21, 18, 38, 13, 59, -73, -115, -58, 88, 121, 19, 12]");
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey29);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey29);
        java.lang.Class<?> wildcardClass38 = secretKey29.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[98, 21, -11, -59, 35, 40, -5, -75, 108, 94, -88, 81, -69, -63, -115, -106]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-6, -77, 11, -94, 27, -46, -75, -99, 82, 23, -27, 113, 0, 49, -6, -24]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-97, -61, -100, 88, 126, 13, 30, -33, 105, -39, -9, 101, -127, 19, 53, -4]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[73, -72, 112, -50, 45, -24, -94, 75, 98, -125, 29, -51, 17, 4, -66, -21]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[113, -1, -21, 108, -24, 58, 108, -6, 108, -68, 18, -90, -78, 51, 90, -109]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-75, 37, -119, -19, 38, -96, -75, -116, 85, 101, 106, 10, 94, -52, -79, -70]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-117, 56, -1, -56, 27, -108, -105, -95, 86, -79, -59, 50, -47, -118, 34, -113, 55, -29, -3, 72, 117, -49, -74, 70, 90, -58, 29, 13, 12, 22, 30, 8, 113, -1, -21, 108, -24, 58, 108, -6, 108, -68, 18, -90, -78, 51, 90, -109]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[37, 55, -30, -78, -72, -80, 30, -29, 90, 68, -41, -73, 19, -5, -90, 121, 123, -119, 42, -95, 113, -22, 13, -120, 48, -8, -30, 31, 60, 84, -79, 3, 3, 94, 126, -21, 86, -22, -41, 66, 38, -115, 127, -35, -89, -43, -54, 72, -88, 94, -35, -64, 124, 120, 45, 105, 113, 11, -119, -106, 36, -17, -26, 114, -24, 53, -53, -104, -103, -36, 112, -108, -111, -98, -62, -106, -1, -71, -119, 91, -105, 121, -5, -16, 36, 126, -87, -56, 58, 15, 12, -98, 21, 115, 54, 74, 113, -1, -21, 108, -24, 58, 108, -6, 108, -68, 18, -90, -78, 51, 90, -109]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey85);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray93);
        java.lang.String str95 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray93);
        java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray93);
        java.lang.Class<?> wildcardClass97 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-77, -53, -67, -59, 91, -72, 104, -8, -100, -21, 8, 88, 74, 108, 4, 58]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-67, 118, -92, 66, -97, -73, -37, -80, -97, 73, -78, -2, -123, 124, -54, -43]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[16, 116, -37, 108, -81, -125, 25, 103, 32, 120, -85, -56, -124, 79, 86, -60]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-105, -124, -56, -63, -124, -103, -79, -15, 62, 98, -17, -94, -2, -93, 45, -62]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 18, 40, 1, -52, 6, 80, -120, 94, -51, 41, 42, 120, 91, 80, -17]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, 121, 66, -29, 1, -46, -46, 96, 56, -24, 11, 4, -27, 99, 87, -107]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[109, -34, 19, 6, 58, -125, 96, -86, -29, 108, -102, 104, -63, 41, -109, 80]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[16, 91, -97, -110, -101, 17, -58, -63, 84, 4, -115, -122, 56, 51, 77, -28]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[116, -111, -2, 79, 124, 121, 78, -52, -12, 85, -16, 58, -124, -95, 90, 70, 11, 93, 74, -55, 103, 127, 113, 60, 6, 85, 84, 7, -84, 26, -12, -69, 109, -34, 19, 6, 58, -125, 96, -86, -29, 108, -102, 104, -63, 41, -109, 80]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-82, 41, -90, -24, 46, 2, -102, 116, 22, 70, 84, 110, 15, -77, -20, -84]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-108, -62, -100, -115, -121, -79, -112, 78, -80, 38, 81, -93, -28, 55, 67, -119]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-39, -120, 98, -35, -21, 33, -113, -56, -74, 62, -76, -82, -23, 20, -83, 80]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-11, -78, 86, 34, -58, -53, -78, 56, -117, 64, 94, -35, 57, 116, 40, -20]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[91, 10, -23, 13, 15, 20, -89, -36, 5, -50, 69, -123, -66, -82, -100, -82]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[119, 47, -108, -79, 21, -42, 97, -23, -78, 26, 94, -55, 86, -33, -96, -70]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-108, -43, 57, 45, 103, 76, 121, 93, 92, 79, 4, 110, 40, 81, 68, 28]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-69, -5, 4, -124, -70, -72, -62, 83, 17, -63, -28, 5, 9, 46, -19, -49]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[8, -31, -37, 85, 62, -72, 82, 120, -9, 100, -76, -18, -15, 77, -26, -83, 103, 55, -107, 95, 104, -104, 24, -63, 94, -29, 8, -113, 122, 82, 17, -52, -108, -43, 57, 45, 103, 76, 121, 93, 92, 79, 4, 110, 40, 81, 68, 28]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-76, 89, 44, 26, -87, -23, 62, 50, 59, -91, -60, 88, 54, 112, 110, 86, 64, -48, 96, -91, -35, 14, -102, -33, 77, -43, -75, 44, -71, -91, -91, 13]");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D" + "'", str94, "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D");
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D" + "'", str95, "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D");
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D" + "'", str96, "B4592C1AA9E93E323BA5C45836706E5640D060A5DD0E9ADF4DD5B52CB9A5A50D");
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("25440C689F3AAFDB9B742DF1EB274637FE5D844A221814EFA4D50703B556CAED26C3213BA7272673FACC1C3EDFECD5D0", secretKey31);
        java.lang.Class<?> wildcardClass41 = secretKey31.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-44, 71, -50, 87, 69, -82, -87, -21, 12, -124, -85, 126, -1, 75, -4, -64]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-87, -76, -9, -47, -118, 60, 8, -103, -11, -82, -127, -20, -86, -97, 95, -108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[126, 43, -108, 37, 46, 121, -6, -13, -1, 9, -94, -63, 43, -127, 120, -92]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-12, -58, 118, 53, -12, -60, -34, -40, -115, 27, -29, -57, 17, 115, -35, 97]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-78, -118, 52, -72, 31, 32, 57, -113, -89, -15, 84, 51, 101, -49, 57, -128]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-17, 58, -16, 40, -71, -113, -5, -114, 55, -9, -2, 62, -13, -4, -58, 68, -50, 30, -117, 2, 8, -120, -125, 23, -114, -54, 42, -48, 109, -29, 79, -23, 99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-43, 121, 4, 104, 62, 26, -50, -109, -15, 113, -76, -114, 27, -18, 79, -105, 83, 119, 86, -65, 66, -1, -69, -126, -94, 121, -41, -13, -46, -118, -64, 122, 99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-30, 1, -63, -12, 70, -8, -98, 101, -87, -104, 96, -118, 102, 96, 115, -125, -122, 79, -11, 76, 62, -74, -66, 124, -53, -128, 122, -64, 33, -63, -48, -8, -97, 17, -125, -17, 29, -86, -110, 57, -10, 103, -112, -15, -97, -105, -113, -127, 39, -119, -3, -74, -83, -101, 57, 82, -76, 44, -69, -36, -8, -97, -87, 25, -96, 126, 90, 105, 6, -9, 26, 2, 94, -74, -107, -45, -29, 30, -34, -99, -78, 81, -97, 80, -79, 7, -36, -58, 124, 96, 68, -67, -43, 55, 107, 62, 99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-32, -49, -13, 52, 60, 98, 104, -102, 104, -8, -124, 4, -43, -56, 45, 4, 107, 105, -48, 92, -91, 18, -61, 14, 34, 55, -92, 61, 37, 109, -39, -117]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-47, 80, -3, 124, -108, 89, -49, -81, -32, 11, -62, 93, 121, 60, -34, 70, -97, -27, 107, 63, -8, -27, -60, 27, -8, -71, 0, 113, 47, -111, 96, -21, 109, -127, -57, -120, 39, -126, -94, -91, 33, 103, 119, -104, 97, 43, -23, -65, 87, 81, -61, -10, 18, -72, 63, -38, -66, -93, -10, 68, -92, -124, 89, 72, -96, 4, -100, 109, -109, 65, -112, -126, -10, 57, 61, -52, -50, -70, -32, -77, 104, 98, -7, -35, -76, 112, -108, -7, -7, -95, 76, 4, 20, -68, 123, 9, 99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 17, -1, 2, -36, 42, 114, -120, -21, -10, 125, -60, 111, 50, 108, 18, -22, 78, 72, 27, 113, 63, 61, 67, 108, -34, -116, -42, -77, -108, -110, -79, -71, -76, 16, 122, -79, 119, -2, 82, -40, -9, 121, 54, -17, 108, -11, -98, 18, -101, 3, -102, -19, -38, -112, 43, 29, 3, -9, -22, 65, -42, 38, -38, 26, 125, 5, 80, -58, 59, -95, 57, -25, 39, 41, -21, 102, 61, -102, 50, -55, -73, 88, -121, 97, -34, 42, 3, 58, 90, -34, 55, 89, -66, -72, -48, 99, -90, -46, 67, 71, 32, -81, 109, 58, -74, -53, -79, 122, -3, -22, -12]");
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.Class<?> wildcardClass7 = byteArray5.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-95, -42, 79, 41, -100, 18, -71, -62, -88, -76, -24, -88, -9, -21, -36, 118]");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "A1D64F299C12B9C2A8B4E8A8F7EBDC76" + "'", str6, "A1D64F299C12B9C2A8B4E8A8F7EBDC76");
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey62);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey62);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey74);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey74);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("4B93528CB4D40368DBBC4EA8E4FF781EDC2DB9D78FBD2033B56BE9404B1870FEF23277FB0A8B5F6045F08FDF4785516B", secretKey74);
        java.lang.String str79 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey74);
        java.lang.Class<?> wildcardClass80 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-68, -16, -93, -19, 28, -50, -3, -71, 101, 111, -124, 95, -83, -95, -12, -3]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, 45, -72, -92, -68, -86, 97, -31, 42, -102, 28, -74, 106, -30, -47, -42]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[80, 30, -22, 106, 53, -105, 9, 111, 51, -84, 79, 125, -59, 101, 50, -93]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[11, -38, 97, 103, 41, 108, 105, 107, -113, -119, 71, 116, 61, -44, 73, 103]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-40, 8, 117, -100, 118, 81, -11, -111, 94, 90, -82, -55, 92, -11, 62, -14]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-38, 61, -98, -30, -58, -127, -105, -78, -64, 111, -50, -56, 57, 53, -96, -69, 86, -10, 11, 50, 54, -60, 103, -28, 19, -25, -124, -35, -13, -120, -36, 106, -107, -46, -102, -14, 110, 10, -95, -96, -99, 51, -47, -87, 123, -119, 77, -28]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-107, -46, -102, -14, 110, 10, -95, -96, -99, 51, -47, -87, 123, -119, 77, -28]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[123, -96, 85, 114, -91, -16, 42, -57, -4, 113, -30, 66, 68, 6, -17, 13, -76, 112, 22, -5, 61, -102, -107, -45, 98, -58, 85, -29, -116, -13, -95, -85, -107, -46, -102, -14, 110, 10, -95, -96, -99, 51, -47, -87, 123, -119, 77, -28]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[102, 93, -91, -92, 110, -43, 101, 50, 91, -121, -7, 69, 57, -76, 109, -54]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-33, -3, 68, 110, 89, -121, -6, -41, 20, -69, 88, 10, -98, -101, -4, -94]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[125, -28, -97, 74, 44, 22, -70, -77, -63, -77, 8, 44, 4, 14, 81, 55]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-116, 97, -88, -113, -65, -127, -94, -99, -120, -104, 96, 89, -88, -111, 103, -114]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[44, -47, -5, -82, 12, 86, -56, -57, -79, -37, -71, 105, -1, -116, -78, -15]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-57, 120, 30, 38, 9, 120, -68, 58, -78, 5, -69, -28, 102, 50, -88, 15, 31, -24, 47, 91, 0, -23, 114, -116, -86, 63, 16, -73, -105, -66, 53, -84, 63, 52, -95, -124, 78, -25, -42, 124, -80, -20, 0, 57, -74, 125, -46, -120]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[63, 52, -95, -124, 78, -25, -42, 124, -80, -20, 0, 57, -74, 125, -46, -120]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-34, -116, -68, -99, 57, -65, 60, 6, -24, 58, 15, 73, 77, 10, -59, -5, 108, 3, 22, 20, -3, 112, -90, -53, 125, 92, -19, -96, 49, -55, -31, 82, 63, 52, -95, -124, 78, -25, -42, 124, -80, -20, 0, 57, -74, 125, -46, -120]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-6, 81, -98, -18, -2, 93, -124, 29, 30, 44, -70, 125, 88, -52, -74, 38, 8, 11, -21, 23, -66, 52, 44, -41, -128, -96, 8, 65, 67, 33, -23, -126, -106, -105, 109, -25, 40, -38, -20, 41, 121, -128, -69, -100, -117, 124, 53, 87, 10, -112, -9, 18, 55, 12, 83, -62, 9, -83, 107, -24, -70, 57, -50, 15, -91, 107, 43, -7, -1, 111, -80, 38, -77, -56, -81, 59, 102, 4, -41, -128, -49, -84, 64, 90, -50, 8, 91, 68, -1, 118, 120, -106, -95, -50, 119, 13, 63, 52, -95, -124, 78, -25, -42, 124, -80, -20, 0, 57, -74, 125, -46, -120]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[63, 105, -44, -20, -29, -128, -124, 67, -45, -27, 17, -37, -80, -121, 21, 29]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[5, 22, 82, 15, -9, 99, -42, -6, 87, 71, -4, -73, 104, -2, -109, -98]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[14, -88, 72, 32, -69, -27, -14, 104, 91, 73, -34, 14, -96, -76, 101, 64, 127, 108, -57, 14, 94, 76, 87, -52, 86, -94, -86, 75, 95, 95, 51, -21, 74, 86, -114, -123, -108, 104, 80, 112, -83, -85, -57, -17, 114, -13, -39, -124, 126, -58, 72, 83, -33, 122, -91, 75, -69, 80, 31, -86, 47, -28, -36, -42, -27, -110, 50, -32, 34, -75, 99, -60, -80, -10, -76, 20, -55, -49, 0, -63, 22, -30, 118, -29, 26, 43, 85, 102, -126, 31, -57, -85, 126, 30, -119, -6, 63, 105, -44, -20, -29, -128, -124, 67, -45, -27, 17, -37, -80, -121, 21, 29]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[15, -4, -60, -86, -79, -38, -31, -16, 106, 127, -63, 13, 127, -97, 107, 62, -47, -104, -31, -118, -116, 112, 7, -63, 47, 14, -9, -103, -40, -89, -33, 21, 9, 103, 39, -103, -8, 57, 113, 108, -104, -115, -69, 32, 69, -94, 48, -103, -96, 43, 126, -57, -67, -3, 8, 45, 82, -101, 112, -8, -84, 118, -6, 106, -106, -127, -42, -124, -94, 100, -94, 16, -31, -94, 24, -49, 19, 116, 85, 17, 53, 120, -42, -113, 32, -101, 75, 105, -14, -89, 39, 10, 34, -72, -64, -43, 63, 105, -44, -20, -29, -128, -124, 67, -45, -27, 17, -37, -80, -121, 21, 29]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey55);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey55);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey55);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        byte[] byteArray67 = new byte[] {};
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray67);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey69);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey73);
        byte[] byteArray77 = new byte[] {};
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray77);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey79);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey83);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey83);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray77, secretKey83);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray67, secretKey83);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey83);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey83);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey83);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey83);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey83);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey83);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[-121, -2, 41, -14, -37, -65, 26, -104, 88, 45, -67, -79, 22, -118, -87, 48]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-47, -36, 113, -12, 38, 57, -2, 10, 85, 97, 49, 114, -26, 65, 42, 40]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "D1DC71F42639FE0A55613172E6412A28" + "'", str5, "D1DC71F42639FE0A55613172E6412A28");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 118, -35, 77, 59, 15, 127, 83, 71, 110, -87, -12, 89, -120, 23, 73]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-12, -7, -102, -103, 72, 71, 113, -72, -128, -91, 75, 78, -96, 8, -72, -107]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-66, -29, -93, 32, -59, 92, -128, 68, 2, 52, 85, -24, 123, 90, 22, -33]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[94, 124, -29, -8, 40, 103, 30, -49, -81, 15, -95, -16, 67, 72, 27, -101]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-92, 31, 25, -112, 79, -25, -75, 120, 107, 40, 101, -49, -126, 61, -40, -122]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[87, 89, 20, 10, -39, -75, -33, -112, 120, 120, 14, 125, -111, 112, 89, 98]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[87, 89, 20, 10, -39, -75, -33, -112, 120, 120, 14, 125, -111, 112, 89, 98]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[56, -52, -38, -4, -100, 69, 52, 44, 15, 51, 100, -77, -126, -33, -89, -77]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[123, 108, -23, 99, 31, -94, 82, 73, -79, 13, 20, -21, -25, -54, 22, -95]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-75, -99, 30, 120, 14, -20, -87, 8, -126, -99, -20, -18, 38, -32, 50, -54]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-15, 83, 25, -82, 88, 21, 73, 3, 76, -77, -32, -73, 62, -122, 115, 76]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-116, 103, -84, 100, 91, -21, -110, -125, 111, -83, 55, -127, -65, -115, 114, 35, -91, 120, 67, 53, 34, -15, 27, 78, -123, -51, 117, 110, 27, -92, 37, -3, -75, -99, 30, 120, 14, -20, -87, 8, -126, -99, -20, -18, 38, -32, 50, -54]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-9, 1, 115, -66, 36, 1, 56, -43, 57, 14, 36, -127, -114, -123, -90, -16, -41, -102, 4, 92, -112, -9, 97, -126, -82, 3, -123, -29, 42, -48, 53, 103, -75, -99, 30, 120, 14, -20, -87, 8, -126, -99, -20, -18, 38, -32, 50, -54]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[50, 94, -60, 34, -111, -110, -119, -4, 49, -24, -3, -94, 51, 116, 79, 50]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-111, -28, 23, 46, -75, 72, -70, 96, 54, -92, -54, -105, -9, 28, -12, 72]");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[74, -111, 43, -118, 4, 124, -36, 52, -96, -12, -116, -12, -7, 5, 57, 107]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[3, -101, -66, 65, 117, -128, -62, -74, -36, -25, 28, -109, -77, 110, -12, -11]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[80, -1, 91, -66, -11, 0, 82, 107, 49, -21, 82, -23, 62, -115, -46, -68, -125, 122, -93, 16, 0, -118, 107, 25, 126, -67, -127, 112, -90, -85, 68, -13, 74, -111, 43, -118, 4, 124, -36, 52, -96, -12, -116, -12, -7, 5, 57, 107]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-60, -35, 5, 85, -124, -44, -113, 121, -92, -118, -104, 10, -21, 90, -117, -41, -78, 123, 58, 34, -36, 14, -71, 51, 75, -14, -61, 15, 107, 126, -57, 122, 74, -111, 43, -118, 4, 124, -36, 52, -96, -12, -116, -12, -7, 5, 57, 107]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-61, 0, 119, 96, 70, -126, 86, -118, 82, 93, -98, -33, -7, 21, 7, -34, -68, 106, -43, 118, -68, -29, -19, -69, 65, 2, -23, 113, 111, -118, -12, 121, 36, 45, 71, 94, -69, -64, -128, -74, 112, 56, 62, -69, -58, 67, 124, 106, 15, -72, -76, 98, -98, -54, -71, 24, 88, 109, 30, 124, 43, 99, 69, 65, 115, 57, 80, 80, -128, -26, 62, -109, -13, -60, 55, 15, 95, -23, 66, -28, -7, 80, 99, -71, 2, 51, -22, -127, 109, 73, -118, 121, -113, -65, 49, 57, 74, -111, 43, -118, 4, 124, -36, 52, -96, -12, -116, -12, -7, 5, 57, 107]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-80, -122, -105, -118, 83, 8, 58, 62, 111, 28, -103, -51, -106, -3, 79, -102, -18, 12, 9, 95, 2, -97, -122, -38, -4, 107, 83, -90, 65, 107, 1, -112, 74, -111, 43, -118, 4, 124, -36, 52, -96, -12, -116, -12, -7, 5, 57, 107]");
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey19);
        javax.crypto.SecretKey secretKey27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey27);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-72, -42, -50, 46, 65, -106, -128, 46, -94, 6, -99, 75, -89, -74, -123, -89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[67, -63, -54, 53, 97, -47, 14, -60, 95, 117, -108, -53, 65, -11, -112, -77]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-89, 38, -1, -86, -3, -37, 27, 83, 64, -47, 29, -78, -70, -95, -112, -30]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-95, -14, -125, 65, -8, -34, 92, -86, -5, 25, -27, 92, -5, 73, -77, 6]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[68, -28, -36, 111, 3, -100, -116, 44, -81, -40, 67, 14, -49, 18, -125, -58, -53, -28, -107, 91, 41, -7, 124, -67, -60, -98, -57, -88, 77, -30, -99, 87, -89, 38, -1, -86, -3, -37, 27, 83, 64, -47, 29, -78, -70, -95, -112, -30]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[75, -45, -63, 66, 88, -61, -82, -80, 62, -84, -22, -120, -109, 3, -3, -67, -97, 35, 67, 59, -11, -114, -36, -35, -88, -87, 64, 23, 86, 106, 69, -105, -89, 38, -1, -86, -3, -37, 27, 83, 64, -47, 29, -78, -70, -95, -112, -30]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-33, -78, -47, -90, 27, 38, -110, -117, -25, -107, -76, 126, 43, -5, -73, 96, 20, -107, 73, -111, -77, 78, 0, 92, 45, 102, -86, -125, -58, -34, 119, -74, 84, -91, -93, 84, -12, 56, 122, 25, -37, -2, -50, -53, 26, -112, -50, -17, 67, -86, 31, 96, 10, 6, -107, 6, -76, 61, -114, -103, 126, 13, -73, 88, 56, -42, -42, -4, 56, 92, -120, 76, -69, 8, -38, -99, 64, -79, -7, 0, -77, 110, -17, -6, 89, -95, 62, -86, -54, 28, -58, 123, -111, 119, 5, 104, -89, 38, -1, -86, -3, -37, 27, 83, 64, -47, 29, -78, -70, -95, -112, -30]");
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("A61D45E68C67F99B87B206832F45B8F1", secretKey4);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey19);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey19);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("EA1D56E4605E5ABE05F8883E0296A54B", secretKey19);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[91, -86, -125, -99, 93, 104, 100, 44, -118, 74, -105, -35, 16, 37, 104, -87]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[37, -51, -32, 125, -118, 44, -113, 101, 17, 38, -3, 44, -99, 84, 55, 85, -34, -92, 111, 116, -17, 116, -47, 89, -42, 37, -24, 13, 65, -55, 98, -1, 77, -65, 89, 101, -61, 105, 52, -44, -118, -125, 10, 81, -68, 74, 17, -68]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-2, -75, 20, 83, 127, 109, -11, 86, 96, 25, 8, 87, -92, 72, 71, 108, 86, -128, 110, 45, 68, -64, 123, -83, 32, 60, 4, -78, -61, -18, -4, -49, 77, -65, 89, 101, -61, 105, 52, -44, -118, -125, 10, 81, -68, 74, 17, -68]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-63, 80, 86, 79, 105, 26, 121, -105, -9, 85, 8, -34, 117, -113, -55, 72]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-63, 80, 86, 79, 105, 26, 121, -105, -9, 85, 8, -34, 117, -113, -55, 72]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 8, -71, -43, -50, -24, -103, -76, 43, -46, -97, -68, 37, 4, -2, -125]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[104, 89, 48, 33, -77, -128, -110, -23, -66, 1, -26, 21, -72, 117, -68, -67, 22, 85, 67, -122, 109, 62, 3, 14, 64, 41, -126, 103, -36, -56, -53, -111, 109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[69, 63, 60, 97, -13, -11, -14, 57, 21, 0, 124, -14, -95, 92, -64, 76, 78, -72, 110, 54, -4, -3, 107, -44, -121, 67, -11, 125, -125, 53, 92, 72, 109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[96, -38, -124, 123, -128, -5, 110, 76, 100, 116, 87, -34, -51, -97, 46, -95, -97, -127, 53, 94, -128, -75, 108, 20, -26, 52, 105, 41, 78, -114, -90, -3, 109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-17, -10, 108, 117, -76, -46, -1, 14, -8, -5, -127, 101, -6, 45, 113, 115, 122, 60, 102, 9, 7, -25, -16, 116, 81, -75, 65, -91, 13, -22, 123, -70, 109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[109, -107, 103, -93, -38, 50, -85, 104, 50, -74, 38, 92, -36, 105, 81, 63]");
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[44, -87, 52, -70, 102, 85, -50, 49, -59, -67, -123, -83, -5, 63, 65, -120]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-97, -98, 108, 101, 12, -117, 103, 19, -29, -111, 14, -62, 40, 72, -31, 103]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-97, -98, 108, 101, 12, -117, 103, 19, -29, -111, 14, -62, 40, 72, -31, 103]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[107, 104, 26, -125, -125, -81, -1, -36, 101, 118, -81, 100, 21, 116, -86, 55]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[105, -115, -45, 113, -23, -120, 99, 99, -3, 68, 22, 17, 29, -125, 24, -10, 22, -73, 52, -108, 52, 3, -80, -64, 62, 102, -55, 97, -38, 87, 11, -103, 44, -87, 52, -70, 102, 85, -50, 49, -59, -67, -123, -83, -5, 63, 65, -120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-44, -61, 44, 65, 63, -10, 6, -17, 88, 37, -14, 127, -11, 36, 127, 43, -1, -28, 87, -28, -89, -101, 7, -12, 118, 11, 5, 109, -119, -71, 39, 81, 58, -128, -12, -43, 0, 11, -56, -59, 84, 111, 40, 3, -124, 24, -54, -8, 83, 44, 24, 28, -72, 114, 92, -10, -69, -83, 77, -43, 0, 105, 102, -90, 16, -2, -75, 38, 107, -94, 66, -32, -83, -83, -92, 65, 59, -83, 89, -49, -46, -20, 86, 77, 77, -126, -85, 89, -94, 78, -8, 105, 82, -111, -100, 71, 44, -87, 52, -70, 102, 85, -50, 49, -59, -67, -123, -83, -5, 63, 65, -120]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "D4C32C413FF606EF5825F27FF5247F2BFFE457E4A79B07F4760B056D89B927513A80F4D5000BC8C5546F28038418CAF8532C181CB8725CF6BBAD4DD5006966A610FEB5266BA242E0ADADA4413BAD59CFD2EC564D4D82AB59A24EF86952919C472CA934BA6655CE31C5BD85ADFB3F4188" + "'", str13, "D4C32C413FF606EF5825F27FF5247F2BFFE457E4A79B07F4760B056D89B927513A80F4D5000BC8C5546F28038418CAF8532C181CB8725CF6BBAD4DD5006966A610FEB5266BA242E0ADADA4413BAD59CFD2EC564D4D82AB59A24EF86952919C472CA934BA6655CE31C5BD85ADFB3F4188");
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey26);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("D35960F848132D8F8E9DD1FCF1CBD521", secretKey61);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey61);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-32, -126, 100, 90, -17, 105, -29, -35, 58, 36, -29, -48, -19, 75, 73, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[74, -11, 71, 20, -121, 79, -113, 90, 34, 19, -59, 109, -18, -83, 109, -115]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[109, 24, 94, 12, 20, 77, 97, -42, 55, 59, -116, 49, -41, 108, 55, -94]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-12, -13, 57, -35, -76, 4, 5, -71, 106, -28, 20, -62, 61, 115, -59, -127]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[54, 72, -118, -119, 106, 84, 89, 64, -23, -29, 104, -23, 112, 51, 126, -118]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-111, -18, 23, 70, 28, 10, -21, -113, 88, 38, -71, 3, 49, 33, -98, 6]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-111, -18, 23, 70, 28, 10, -21, -113, 88, 38, -71, 3, 49, 33, -98, 6]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[9, 123, 71, -66, -80, 120, -28, -43, 102, 117, -1, 61, -1, 29, -114, -73, -49, 18, -4, -113, 84, 16, -40, -104, 87, -7, 98, -127, 118, 54, -104, 10, -23, 9, 0, -114, -121, -39, -11, 77, -99, -3, 67, -91, 115, -125, -96, -58, 0, 19, 19, -94, 107, -112, 82, 51, -49, -7, 4, -17, -22, 33, 121, 71, -16, -49, 12, -65, 78, -127, 107, 61, -4, 85, -29, 48, 2, -36, 90, -6, -74, -4, -19, -126, 62, -71, 19, -105, -109, -39, 94, 81, 104, -97, -98, -10, 54, 72, -118, -119, 106, 84, 89, 64, -23, -29, 104, -23, 112, 51, 126, -118]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-77, 56, -53, 47, -67, -53, -20, -43, 104, -39, -80, -95, -3, 79, -26, 30]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-4, 46, -60, -121, -16, 114, 61, -108, 28, -102, 119, -75, 63, -34, -79, 90]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[121, 95, -12, -16, 81, -31, -60, -48, -69, -22, 49, -82, 40, -67, -108, 4]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-123, -89, -53, -82, 63, -64, -5, -72, 70, -18, -99, 25, -63, 51, 19, -100]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[50, 83, 48, -20, 94, -52, -19, 101, 19, 84, -104, -117, 81, -117, -119, 53]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-125, 28, -69, 74, -13, -73, -18, -106, -106, 70, 59, -25, -123, -116, -110, 62]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-125, 28, -69, 74, -13, -73, -18, -106, -106, 70, 59, -25, -123, -116, -110, 62]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-67, -81, -121, 11, -120, -97, 39, 117, -12, -39, -12, -7, -26, 77, 124, -88, -98, -116, 32, 67, 95, -26, 9, -39, 56, -117, -115, -80, 41, 65, -53, 52, -52, 8, -26, 91, -26, 62, 83, -81, -72, -24, -35, -4, -51, -125, 52, 107, -13, 111, 23, 28, -105, 22, 5, 18, -50, 91, -17, -43, 84, 89, 40, -40, 58, 23, 88, 78, -21, 52, 82, -15, -118, 13, -66, 82, 71, 67, 47, 105, 81, -70, -43, 53, -57, 96, 38, -45, 50, -78, 105, 108, 83, -26, -57, 47, 50, 83, 48, -20, 94, -52, -19, 101, 19, 84, -104, -117, 81, -117, -119, 53]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-53, 92, -86, -69, -94, 36, -30, -67, -38, -73, 14, 5, -43, 10, 117, -93, -73, -123, 101, 53, -33, 67, -54, -8, 49, -29, -124, -99, -73, 124, -79, 126, 50, 83, 48, -20, 94, -52, -19, 101, 19, 84, -104, -117, 81, -117, -119, 53]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[47, 118, -75, 57, 41, -34, 23, 113, 119, 14, -25, 104, -8, -115, 58, -107, -18, -21, 87, 122, 109, 3, 36, -78, 52, -63, 105, -100, -1, 23, 5, -22, -12, -43, -74, 34, 0, 7, -83, 71, -13, 51, 70, -78, 116, 0, -63, 56, -40, -11, -3, 88, 69, 35, 126, -1, 105, -79, -31, -30, -76, -75, -92, -24, -74, 53, -99, -99, 44, 90, -106, 98, 110, -128, -2, -128, 123, -128, 37, -74, 8, 35, -21, 29, -14, -89, 95, -126, 76, 74, -38, 65, -113, -13, -86, 89, 50, 83, 48, -20, 94, -52, -19, 101, 19, 84, -104, -117, 81, -117, -119, 53]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-20, 11, 43, -45, -128, -14, 79, -61, -87, -40, -84, -2, -72, 119, 94, -20, -45, 66, -105, 107, 74, 70, -65, 85, 4, -93, 46, -124, -30, 69, -102, 54, 50, 83, 48, -20, 94, -52, -19, 101, 19, 84, -104, -117, 81, -117, -119, 53]");
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        byte[] byteArray0 = null;
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-104, 114, 106, 50, -112, 16, 81, 66, 100, 54, -97, -31, 37, -37, -76, -110]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-42, -100, 104, 10, -72, 19, -124, 78, -3, 97, 53, -33, -116, -73, 123, -36]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-42, -100, 104, 10, -72, 19, -124, 78, -3, 97, 53, -33, -116, -73, 123, -36]");
        org.junit.Assert.assertNotNull(byteArray9);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey22);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey22);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[20, -70, 61, -4, -19, -121, 70, -60, -117, 102, 12, -127, -77, -24, -92, -91]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-6, 45, -40, -19, -92, 79, -126, 77, -35, -1, 116, -80, -120, -59, -109, 73]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[118, 17, 71, -34, 29, 124, -84, 12, -38, -37, -127, -64, 14, -27, -30, -83]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[20, -121, 80, -104, 32, -110, 34, 73, 92, 52, 61, -58, 64, -119, 2, -110]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-82, 71, -121, 82, -83, -103, 122, -43, -12, 100, 18, 48, 96, 114, 25, -55, 22, -13, 41, 122, 60, 96, 9, -60, 28, 101, 22, -66, 28, 2, -12, 93, 118, 17, 71, -34, 29, 124, -84, 12, -38, -37, -127, -64, 14, -27, -30, -83]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[49, -102, -112, -121, -114, 30, 19, -105, 1, 29, 115, -112, -29, 95, 101, -128, -101, 117, -65, -42, 22, 108, 40, 3, 119, -58, -12, -111, 63, 71, -122, -116, 13, 126, -53, -111, -30, -10, -7, 8, 121, 15, -77, -111, -40, -48, -9, -97, -104, -40, 116, 6, -20, 62, 17, 115, -120, 123, -128, 42, 81, 37, -44, -121, 84, -4, -23, 19, 118, -124, -12, -118, 53, -47, 79, -96, -68, -7, 85, 45, 61, -91, -24, 36, 13, 24, -86, 0, 41, -119, 12, 111, 19, -42, 114, 125, 118, 17, 71, -34, 29, 124, -84, 12, -38, -37, -127, -64, 14, -27, -30, -83]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-79, -92, 101, 56, 40, 62, 115, 124, -55, 123, -128, -62, 49, -119, 51, -114, -114, -105, -35, 118, -10, 100, -106, 17, 66, -52, -57, -124, 126, 90, -72, 2, -47, -123, 59, -117, -60, -10, 116, -18, 115, -42, -97, -61, -12, -46, -22, -128, -96, 10, 96, 88, 103, 33, -59, -33, -56, -29, 32, -24, 127, 75, -37, -96, 66, -42, -65, 17, -29, 55, -54, 67, 109, 52, -115, 74, -27, 121, 124, 107, 124, -108, -67, 87, 48, -120, -28, 124, -56, 95, 5, 39, 81, 76, -3, -59, 118, 17, 71, -34, 29, 124, -84, 12, -38, -37, -127, -64, 14, -27, -30, -83]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-97, 111, -53, 30, -47, 37, 63, 15, 82, 100, 21, 68, 79, 38, 35, -21]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-106, -103, -70, -35, 31, -52, 80, -42, 36, -91, -101, 124, -73, 78, -11, 119]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-80, -101, -4, -55, 64, -1, 120, 9, 50, 110, -82, -79, 20, -35, 39, -3]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[113, 61, 34, -108, 12, 114, 124, -20, 41, 81, 47, -105, -47, -92, -88, -98]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey22);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey22);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey22);
        java.lang.Class<?> wildcardClass31 = byteArray30.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[70, -90, -14, 83, -42, 12, -73, -21, -83, -55, -103, -104, -31, -1, -56, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[121, 75, -3, -117, 83, -127, 74, -35, 14, 126, -61, 25, 45, 118, 15, 52]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-21, -128, -35, -2, 13, -51, 120, 93, 111, -50, -75, 107, 35, 105, -16, -2]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[9, 42, 9, 1, 46, -121, -117, -82, 90, 28, -23, 77, -51, -115, 63, -102]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-60, -124, 41, -89, -48, -116, -26, -12, 21, 120, -8, 109, -98, -47, -58, -70, -36, -68, 114, 78, -46, -108, -32, -121, 50, 90, 63, -85, -27, 52, 14, 0, 4, 22, -100, -116, 119, -37, -82, 110, 56, 109, 64, 102, 64, -24, 12, 108, -9, 96, 90, -101, 10, -102, 41, 22, -50, 60, -21, -106, -127, -1, -53, 0, 112, 19, -86, 45, -56, -93, 88, -121, -53, 109, -64, -33, -104, 114, -86, 84, -104, 109, -79, -92, -101, -106, 60, -84, -85, 91, 14, -19, 31, 96, -17, 63, -21, -128, -35, -2, 13, -51, 120, 93, 111, -50, -75, 107, 35, 105, -16, -2]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-56, -93, -96, 59, 105, -53, -120, -32, -120, -83, -82, -1, -73, -74, 52, -76, -43, -9, 106, 63, -21, 60, 21, -118, -112, -57, 107, -29, 36, -52, -38, -100, 54, 76, -16, -37, 21, -102, -47, 45, 22, -74, -98, -51, -99, 70, -89, 1, -72, 66, -65, 61, 19, -18, -71, -127, 39, -58, -75, -24, 88, -55, 97, -101, 6, -21, -64, 5, -83, 104, 34, 84, -43, 24, 108, 16, -15, 50, 28, -35, -85, -61, -49, 82, -10, -5, 29, 67, 101, 69, 62, 7, -83, -2, -114, -69, -21, -128, -35, -2, 13, -51, 120, 93, 111, -50, -75, 107, 35, 105, -16, -2]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey18);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey18);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("EA1D56E4605E5ABE05F8883E0296A54B", secretKey18);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey18);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-75, 25, 73, -119, 48, -81, 123, -64, -76, 72, -59, 112, -93, 73, -33, 72]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[11, -12, 83, -73, 88, 19, -24, -83, -107, -103, 27, -96, 112, -5, -83, 96, -23, 84, 94, 126, 84, 43, -118, -18, 2, 115, -27, -99, -119, -14, -69, -52, 114, 105, -7, -116, 63, 82, -84, -88, -17, 97, -125, 85, 15, -38, 78, 80]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[114, 105, -7, -116, 63, 82, -84, -88, -17, 97, -125, 85, 15, -38, 78, 80]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7269F98C3F52ACA8EF6183550FDA4E50" + "'", str7, "7269F98C3F52ACA8EF6183550FDA4E50");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-26, 106, -108, -41, -56, 71, 19, 103, -7, -20, -67, 88, 37, -38, 57, -38]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-26, 106, -108, -41, -56, 71, 19, 103, -7, -20, -67, 88, 37, -38, 57, -38]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[125, 120, 103, 43, -99, 41, 102, -54, -31, 115, -22, 9, 46, -86, -12, -105]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-87, -13, 27, -39, -121, -13, 63, -109, -92, -121, 80, 71, 45, 76, -119, -20, -25, 7, -119, 73, 26, 91, -78, -10, 86, -93, -12, 48, 94, -87, 1, 82, 41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-14, 27, 29, 55, 99, 96, 5, 66, 12, -93, 124, 25, -16, -29, -83, -100, 24, 22, -72, 55, 113, 4, 80, 37, -46, 29, 98, 57, -6, -68, -32, -60, 41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, 104, 48, -47, 32, -114, 16, -26, 2, -75, -51, 43, 71, 116, -112, -90, -119, -87, -126, 85, 53, -25, -66, 84, 14, 16, 33, 88, -92, 94, -81, -80, 41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-4, -109, -89, -99, 37, 20, -121, 121, 55, 4, -71, -35, 94, 25, 20, -2, -3, 67, -128, -122, 70, -29, -32, -106, -72, 39, 49, -111, 63, -61, -75, -94, 41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[41, -115, -109, -98, -39, -39, 82, 100, -99, 75, -14, 38, -39, -79, 72, 29]");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-28, -65, 58, 54, -125, 120, 31, -8, 9, 110, -36, -111, 85, -18, -7, 125]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[9, -28, 67, 18, 99, 118, -56, -76, -54, -43, -24, 44, 104, -11, -84, 61]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[9, -28, 67, 18, 99, 118, -56, -76, -54, -43, -24, 44, 104, -11, -84, 61]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[102, -29, 108, -62, -92, 107, -119, 41, -31, -128, -10, 4, -4, 68, 86, 54]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-27, -47, 38, -59, 91, 45, 73, 71, 114, 120, -74, -87, -124, 0, -96, -51, -34, 116, -79, 58, 33, -16, 97, 0, 98, 22, -39, -122, -78, -90, 111, 46, -28, -65, 58, 54, -125, 120, 31, -8, 9, 110, -36, -111, 85, -18, -7, 125]");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "E5D126C55B2D49477278B6A98400A0CDDE74B13A21F061006216D986B2A66F2EE4BF3A3683781FF8096EDC9155EEF97D" + "'", str11, "E5D126C55B2D49477278B6A98400A0CDDE74B13A21F061006216D986B2A66F2EE4BF3A3683781FF8096EDC9155EEF97D");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "E5D126C55B2D49477278B6A98400A0CDDE74B13A21F061006216D986B2A66F2EE4BF3A3683781FF8096EDC9155EEF97D" + "'", str12, "E5D126C55B2D49477278B6A98400A0CDDE74B13A21F061006216D986B2A66F2EE4BF3A3683781FF8096EDC9155EEF97D");
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        byte[] byteArray0 = null;
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey31);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey31);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[66, 111, 90, -40, 48, -77, 35, 31, 55, 112, -3, 107, 92, 120, 113, 34]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-44, -60, -74, -75, 16, -6, -109, 15, -98, 89, -60, 73, 76, -108, -127, 51]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[43, 30, -55, -83, 62, 39, 92, -16, 123, -125, 104, 33, 1, 72, 90, 110]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[119, 46, 67, -114, -61, -73, 16, 76, 96, -10, 120, 38, 24, 35, -94, -117]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[38, -75, 41, 74, 42, 74, -89, 100, -118, -109, 35, -85, 52, 118, -13, -124]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[43, -17, 7, 44, -78, 29, 30, 12, 116, -86, 51, -96, 69, -127, -81, 104]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-116, 41, 115, 21, 65, -5, 31, 75, 65, -3, -33, -111, 127, 51, 91, -88, -87, 76, -13, -103, -67, 106, 68, 50, 89, 96, -16, -6, -124, 40, -98, -82, 38, -75, 41, 74, 42, 74, -89, 100, -118, -109, 35, -85, 52, 118, -13, -124]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[45, -29, 99, -127, -68, 107, 9, 123, -104, -45, 6, -22, 108, -61, 118, -11, 43, -55, -13, -40, 113, 49, 63, -68, -30, -35, -62, 113, 91, -72, 17, 0, 70, -4, -25, 27, 86, 55, -58, -92, 66, 49, 11, -38, -72, 1, 33, 34, -18, -36, 53, 27, 113, 57, 6, 38, 81, 86, -3, -82, 107, 80, -113, -6, 125, 51, 36, -109, -93, 21, 121, -35, 113, 105, 11, 90, 32, -45, 85, -110, -112, 34, -28, 48, 102, 1, 125, -46, 44, -59, 64, -64, -78, 112, -68, -20, 38, -75, 41, 74, 42, 74, -89, 100, -118, -109, 35, -85, 52, 118, -13, -124]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[0, 123, 24, 114, 103, -2, -74, -108, -37, -65, -16, 15, 57, -99, 123, 8, 46, 124, 28, -41, 116, 23, -78, -66, 66, 38, -2, 42, 22, 81, -72, 100, -89, -24, 125, 93, 36, -59, 0, -109, -89, -115, -93, -117, 42, -46, -18, -27, 117, -105, -119, 10, -43, 73, -30, 87, -114, -42, -49, 52, -65, 53, -16, -48, -95, -127, -15, -125, -89, 58, -123, 9, 101, -99, -3, -104, 41, -47, 53, -31, 56, -43, -58, 102, -36, -40, -109, -52, -5, 15, -83, -54, 90, -12, -77, 9, 38, -75, 41, 74, 42, 74, -89, 100, -118, -109, 35, -85, 52, 118, -13, -124]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[87, 0, -15, -20, -125, -89, -113, -91, 64, 55, 34, -53, -115, -79, 12, 119, 127, -48, 72, -47, 35, 9, -2, -55, -82, -41, -106, 79, -122, 121, 16, -127, -73, -92, -40, 114, 107, 53, -27, -79, -109, -1, 106, 0, -52, 57, -8, -92, 37, 51, 10, -71, -66, 123, 110, 24, -20, -97, 87, -6, 112, 98, 48, -59, 3, 11, 119, 122, -101, -124, 101, 112, 101, -108, -79, -64, -93, -1, 16, 88, -87, 118, 19, -13, 90, 3, -61, -106, 115, 13, -72, -117, -100, -122, 14, -102, 38, -75, 41, 74, 42, 74, -89, 100, -118, -109, 35, -85, 52, 118, -13, -124]");
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey19);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey35);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-41, 79, 14, -61, -72, -117, -31, -14, -104, -117, -120, -80, 58, 23, -20, -46]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-81, 34, -67, -98, 107, 120, -10, 88, -118, -88, 64, -109, 59, 57, 95, 89]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-110, 111, -108, -37, -92, 113, -12, 3, -32, -5, -115, 13, -46, 106, 10, 88]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-21, -61, 70, 111, -69, 91, -109, 11, 73, 5, -67, -1, -19, 77, -81, 3]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[17, 91, -59, -35, -87, -54, 75, -127, -84, 20, 96, 12, -25, 109, 44, -66, 40, -123, -65, -77, 30, 24, -56, 104, 104, 89, -59, 54, 124, -105, -81, 27, -110, 111, -108, -37, -92, 113, -12, 3, -32, -5, -115, 13, -46, 106, 10, 88]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[73, -102, 91, -71, -96, 58, -97, 51, -83, -93, -27, 122, 119, 83, -50, -67, 9, -73, 9, -125, 99, 120, 47, 28, 8, 92, 91, -120, 100, -16, -1, -103, -110, 111, -108, -37, -92, 113, -12, 3, -32, -5, -115, 13, -46, 106, 10, 88]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-57, -85, -111, -65, -51, 51, 59, 121, 122, -80, 33, -87, -11, -10, 36, 25, -123, -53, -125, -6, 23, -72, -46, 48, 91, 88, -36, -13, 19, 33, -121, -33, -110, 111, -108, -37, -92, 113, -12, 3, -32, -5, -115, 13, -46, 106, 10, 88]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "C7AB91BFCD333B797AB021A9F5F6241985CB83FA17B8D2305B58DCF3132187DF926F94DBA471F403E0FB8D0DD26A0A58" + "'", str27, "C7AB91BFCD333B797AB021A9F5F6241985CB83FA17B8D2305B58DCF3132187DF926F94DBA471F403E0FB8D0DD26A0A58");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-53, 47, 33, 100, -37, -116, -56, 99, -122, -38, -69, -31, -22, -45, -82, -37]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-59, 15, 63, 21, 2, -12, 66, -110, 77, 108, -45, 36, 11, -70, 33, -85]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-59, 15, 63, 21, 2, -12, 66, -110, 77, 108, -45, 36, 11, -70, 33, -85]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[125, -63, -58, -12, -120, 51, 18, 68, 97, -36, 83, -115, -55, -83, 41, 104]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[122, -98, 17, -55, 85, 17, -67, 9, 68, 120, -57, -126, 84, 10, -30, -127, 83, 50, 93, -51, 22, 68, 71, 6, 21, -15, 111, -42, -89, -99, -54, -111, -53, 47, 33, 100, -37, -116, -56, 99, -122, -38, -69, -31, -22, -45, -82, -37]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-60, 123, 114, 95, -20, 105, 17, 37, -90, 47, 119, 58, -41, 94, -49, -83, -108, -102, -101, 117, 90, -40, 77, -113, -70, 31, 112, 71, -120, 101, -31, -14, -49, -4, 48, 38, 120, 81, 104, 39, 7, -114, 122, -75, 2, 30, -60, 61, 34, 89, -65, -7, -9, 87, 107, -19, -112, 61, 29, 111, -51, -18, -68, -4, 47, -10, -10, 1, 23, 19, -18, -11, -96, 39, -75, -34, -12, -93, -38, 115, -127, 69, -64, -127, 71, 103, -9, -31, -104, 89, 34, 88, -12, 48, 61, -106, -53, 47, 33, 100, -37, -116, -56, 99, -122, -38, -69, -31, -22, -45, -82, -37]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[122, -98, 17, -55, 85, 17, -67, 9, 68, 120, -57, -126, 84, 10, -30, -127, 83, 50, 93, -51, 22, 68, 71, 6, 21, -15, 111, -42, -89, -99, -54, -111, -53, 47, 33, 100, -37, -116, -56, 99, -122, -38, -69, -31, -22, -45, -82, -37]");
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("A7AA7633B416425E062B93EBAFC3E8F101756308309966014899E4F66D0E6FC06B9672B995918912ED8FBEA822A3F72BCA34B52403C7ADE10911410F1AE4DBFB362294A3B5935663881A3BB078393FC11A1FEDC30261D485A164A23F55FBFA3B822465E8211CEB1082C9CD771F644DC53666DB2500D7D50F1D27D031854BA1565A032F2CBC9B24F2580DFAFF7863C62BC91B1332B1759C78379C527C7EEF4C514AA5EB71146E8FEFB8F49B0B2BD4780CAE70D4B246A57B164DE90C05EB9C9766C91A43B3A950F7609639BF23475DF36E5D0A36491A59C81036C86E2F66FA9A505937EA2B82A3A9BD4C4472155AA7749B", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey32);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.Class<?> wildcardClass45 = byteArray43.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[74, 62, 107, -106, 77, -102, -118, 2, 57, -33, -63, -116, -1, -50, 1, 81]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[88, 115, 52, 87, 97, -93, 17, -1, -86, -23, -69, 84, -114, -23, -113, -19]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-29, -1, 37, 9, -4, 45, -70, 104, -9, 70, 121, -121, 39, 43, 50, -77]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[45, -27, -32, -48, -67, -112, -91, -108, 89, 42, 90, -42, 63, -83, -107, -48]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-56, 40, -42, -119, -92, 44, -41, -111, -97, -72, -45, 28, 125, 56, 2, 57]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-56, 40, -42, -119, -92, 44, -41, -111, -97, -72, -45, 28, 125, 56, 2, 57]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[87, 19, 72, -81, -121, 6, -79, 60, 127, 106, 46, -66, -98, -54, -1, 74, -120, -62, 86, -85, -103, 3, 69, -127, 39, 12, -2, -36, 49, 49, 48, -3, 49, 123, -30, 88, 31, 22, 11, -89, 4, -38, -55, -45, -110, 72, -8, 96, -91, -62, 16, -43, -90, 26, 24, 110, 35, 121, 113, 82, 70, 27, 60, 55, 94, 4, 87, 51, -33, -110, 93, -39, 68, -27, 56, -55, -77, -69, 76, -20, 63, -125, 99, -94, -88, -124, -87, -32, 0, 109, -11, 11, -106, -76, -30, -71, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-53, 17, -25, 23, -16, -102, -57, 71, 40, 127, 118, -128, 36, 121, -32, -73, -121, -117, -22, -8, -101, 111, 35, 89, 93, 91, -112, 89, 79, -40, -63, 63, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[20, 49, 6, 115, 67, 65, -88, -8, 105, 113, -90, 97, 127, -96, 126, -91, -8, 92, 120, -60, -123, 109, 43, -52, 95, -24, 18, -59, 7, 125, -84, 62, 6, -55, 53, -25, 19, -108, 54, -53, 109, 27, -26, -32, -77, 19, 73, -63, 17, 85, 25, 63, -29, 18, 68, 56, -108, -100, 23, 113, 9, -99, -45, 123, -82, -100, 127, -30, 50, -102, 125, 109, -54, 120, 108, 33, -7, -74, 78, 64, -78, 67, -14, -93, 73, 97, 37, 10, -93, 58, -25, -51, 120, -89, 102, -19, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[58, -39, 0, 17, -40, 105, 108, -38, -3, 127, 60, 120, 9, -127, -25, 48, -32, 47, 27, -85, 5, 47, -92, 67, 45, -69, -21, 11, 19, -115, -128, 6, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[11, 97, 58, 28, 61, 81, -10, -98, 69, 63, -120, -105, -83, -118, 59, -88, -121, -36, 67, -2, -53, 118, -25, -40, -14, -49, 38, 74, -27, -37, -103, -115, -112, -26, 52, 18, -119, -41, 53, 31, -110, 59, -64, 24, 72, -43, -13, -91, -22, 29, -15, -55, -17, -37, 9, 32, -2, -59, -60, -19, 80, 110, 77, 79, -91, -59, 127, -51, -12, -73, -56, 51, -59, 115, 7, -96, -69, 90, 50, 115, -125, -25, 46, -85, -79, -125, 2, -100, 107, -63, 34, -48, 27, -70, 114, 92, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[6, -76, 35, 96, 51, -126, 122, 10, 93, -21, 22, 1, 112, 27, 2, 105, -9, 85, 118, -52, -104, 126, 103, 69, 33, 44, -42, 70, 127, 17, -19, -80, -36, -42, -37, -94, 50, -18, 107, -10, 58, 101, 119, -119, -48, 100, -81, -3]");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "06B4236033827A0A5DEB1601701B0269F75576CC987E6745212CD6467F11EDB0DCD6DBA232EE6BF63A657789D064AFFD" + "'", str44, "06B4236033827A0A5DEB1601701B0269F75576CC987E6745212CD6467F11EDB0DCD6DBA232EE6BF63A657789D064AFFD");
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("A7C08B90CC57FC6FE6CFE1025F831368C0C10067B9A3DFDA85391B8B7AF0A1B3FB0D89E879D81196DBF190BFFEFC8A0C28191D950E7A7F17FEAB9BADC33406711E375C797382F7E2EA9FD867417A2F73B8C4C641A57A0394295E57BC7EA8D7B82C69AFDDD5F6461443051FE6B6103595", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("F4E3C1547CD3FE78CDBFDBD7174B6A1A989FB86D5ED51FD6E1C85B09D4EFF16C81458E42B254516A1D485C48CDF08BCD", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("469AC6E1DFFA78A2DF4E6B17ABFDACCDB099E1FA863E3BE295DB0C7EE3669A10B5C556A6290CA5CD54C60CC576929C15", secretKey3);
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-10, 99, -4, -29, -7, -66, 99, -58, 109, 89, 74, 4, -11, 68, -73, 109, -21, -57, 106, -66, -22, 33, 105, 110, -39, -55, 61, 82, 58, 98, 65, -24, -116, -111, -45, 60, 22, 80, 52, 110, -84, 115, -27, 63, -31, 101, 75, 115, -118, -92, -29, 57, 38, -94, -124, -106, 23, -57, -108, -36, 123, -40, 107, 122, 54, 72, 13, 96, 116, 121, -2, -67, -27, 93, -13, 17, 92, 5, 29, 39, -17, 110, -49, -19, -13, -55, 126, 125, 53, 77, 2, -103, 119, 71, 31, 73, -88, 76, 108, -104, -31, 35, 89, -76, -78, -76, -20, 13, 81, 109, -6, -11]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-15, 60, 101, -112, 72, -32, 111, -116, 29, 86, 104, -22, 8, -98, -56, -93, -30, 63, 120, 68, 28, -72, 15, -61, -127, 67, -39, -126, -5, -79, 12, 71, 36, 61, 29, 84, 55, -61, 92, 94, -54, -77, 65, -115, -124, 90, 29, 83, -114, 100, -57, -27, 48, 102, 38, 55, -93, 97, 44, -47, -72, 99, -119, 78, -34, 102, 81, 93, -80, 35, -27, 46, 90, 47, -44, 30, 78, -125, -20, 9, 1, 6, -48, 86, -48, -68, 48, 92, -98, 2, 92, -53, -91, -109, 4, -97, -88, 76, 108, -104, -31, 35, 89, -76, -78, -76, -20, 13, 81, 109, -6, -11]");
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("93E856496AB2A11AB44A36FBC8B36255EF986B6AAA7E6506684F69F08DDBAC717A3E807967132C777B05E6CA0673F7BD00455126E4F72F3D293C331C70BC358E9C1E15B06F01FA53020796398DF5CF28172FE57E9FFB4BDF71C3144B5002BDCD49277D4B4143E0964FA60A7BC6FC46F0", secretKey31);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-89, -24, 27, -113, 97, 6, 58, -54, 28, -60, 50, -80, 99, 39, 49, -102]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-111, -91, 120, -119, -78, 49, 79, -113, -28, -94, -92, 123, 112, 0, 76, 87]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[32, -118, 31, 109, -70, 114, -114, 23, -101, 31, -124, 13, 70, 65, -35, 59]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-44, 55, -57, 78, 91, -27, 20, 101, -24, 49, 83, -118, -2, 86, 27, -13]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[107, 46, -104, 58, 21, -26, 24, -1, 37, -74, 54, 81, -19, -89, 34, 41]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[86, 116, 48, 30, -22, -109, -2, 102, -107, 81, 2, 55, 8, 76, -75, 4, -21, 126, -3, -128, -99, -124, -61, -67, -68, -99, -72, -56, 102, -86, -82, -56, 111, 51, -97, 26, -50, -89, 63, -33, -26, -4, 63, -23, 19, -106, -42, -38]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[111, 51, -97, 26, -50, -89, 63, -33, -26, -4, 63, -23, 19, -106, -42, -38]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[111, -69, -22, 105, -55, -1, 69, -27, -72, 79, 10, -70, 33, 115, -107, 33, -25, -26, 71, -115, -48, 44, 121, -5, 70, 19, 122, 8, 9, -19, 20, -47, 111, 51, -97, 26, -50, -89, 63, -33, -26, -4, 63, -23, 19, -106, -42, -38]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-118, -38, 109, -11, -99, -104, 80, -115, -109, 92, 1, -97, -101, 16, -71, -99, 99, 81, -17, 87, -109, 89, -46, 71, 96, 71, 67, -84, -44, -110, -76, -10, -10, -81, -101, 58, 89, -54, 89, -51, 124, -30, -89, 34, 40, 72, 36, 94, -89, -93, -21, -71, 45, 65, 97, -87, -112, -53, 106, 44, -29, -47, -14, -125, -26, 113, 93, 93, -37, 44, 44, 51, -77, -35, 43, -101, 55, 23, -47, 116, -116, 29, -10, 15, -69, -50, 95, -62, 119, 81, 60, 108, 87, -13, 72, -19, 111, 51, -97, 26, -50, -89, 63, -33, -26, -4, 63, -23, 19, -106, -42, -38]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-89, 116, 15, 73, 62, -123, 38, 55, 118, -13, 123, 40, -23, -18, -95, 37, 38, -55, -1, -120, 127, 59, -82, 27, -94, -31, -53, 108, -24, -79, 123, -119]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[34, -80, 114, -16, 17, 72, -84, -115, 95, 24, 29, -30, -9, 63, 6, -109, -125, -10, 94, 4, -21, -98, 30, 48, -46, -81, 122, 74, 88, -88, 53, -126, -64, 4, -114, -44, 91, 119, -55, 73, -27, -102, -30, 11, -100, 4, 91, -56, 85, -94, -70, -115, -35, -49, 6, 67, -102, 20, 92, -14, -40, -3, 10, -103, 79, 103, -2, -111, 124, 114, 81, -105, -62, -40, 9, 60, 23, 50, -93, -16, 78, -103, 24, 113, -50, -113, -6, -8, 1, -109, 52, 77, 63, -85, -125, 35, 111, 51, -97, 26, -50, -89, 63, -33, -26, -4, 63, -23, 19, -106, -42, -38]");
        org.junit.Assert.assertNotNull(byteArray40);
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("CCC9F503BF3A3D79B6E6D439328F452467AC7222EDC62199F18FA42B821FC8EEFB5A3BCFC0E9807600A18DB44BB01E5C", secretKey26);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-31, -75, 89, -73, 68, -91, 1, -84, 34, -22, 105, -77, -55, -96, 5, 83]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-80, 15, 71, -113, -2, -25, -25, 18, 126, -85, 93, 52, -58, -118, -36, -17]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-51, -77, 70, -84, -122, -65, -107, 83, -28, 5, -11, -76, -37, 105, 62, 67]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[28, 34, -11, -128, 4, 33, 111, 5, 37, -67, -101, 10, -70, -116, 2, 20]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-29, -115, 94, -37, 18, 89, -69, -64, -79, 94, -40, -20, -58, 12, -81, -127]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[60, 53, 30, 34, 77, 85, -113, 43, -111, 91, 38, 95, -46, 127, -80, 117]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[60, 53, 30, 34, 77, 85, -113, 43, -111, 91, 38, 95, -46, 127, -80, 117]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[37, 76, -40, 101, 3, -19, -52, -14, -79, -28, 23, -92, 6, -57, 66, -41, -36, -6, -51, -11, -61, -112, -100, -69, 54, 28, 6, 69, -120, -5, 65, -21, -27, -89, -86, -127, -23, -111, -99, -33, 16, 93, 95, -50, -5, -74, 71, -117, -24, 0, -15, -70, -102, -21, -36, 120, -83, -106, -87, -124, 50, 28, 127, 36, -24, 31, 118, 84, -103, -54, 55, 27, 21, -95, -16, 47, 102, -104, -95, -91, 65, 65, -36, 81, -34, 79, 74, -59, 18, 110, 25, -123, -113, -111, -114, -115, -29, -115, 94, -37, 18, 89, -69, -64, -79, 94, -40, -20, -58, 12, -81, -127]");
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey25);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey33);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey49);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey49);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey49);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, -51, -23, 101, -30, 16, -98, -83, 35, -84, -53, -119, -2, -76, -3, 31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-64, -41, -43, 46, -27, 43, 103, 87, -71, -72, 49, -38, 14, 67, 104, -48]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[60, -92, 32, 22, 80, 122, 58, 96, 100, -35, 61, -81, 113, -125, -55, -58]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[70, 18, -108, -44, -59, 9, 78, -38, 31, 23, 103, 8, -21, 28, -50, -42]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-51, 82, -47, 71, -90, 125, 91, 30, 105, 112, -107, 27, -18, -28, 110, -100]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[86, 119, 112, -96, 36, 0, 64, -20, -18, 61, -125, 17, 13, 51, -74, -126]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[86, 119, 112, -96, 36, 0, 64, -20, -18, 61, -125, 17, 13, 51, -74, -126]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-4, -105, -65, -64, 62, -75, -14, 17, 126, 99, 45, 66, -63, -15, -71, -54]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-85, -51, 96, -65, 112, -108, 28, -33, -35, -24, -42, -6, -91, 28, -84, -99, -31, 5, -92, 21, 61, -60, -78, 24, 23, -94, -126, -78, 52, 55, 47, -14, 100, 47, 87, -123, -57, 93, -13, -37, -64, 83, -52, -61, -110, 121, 78, -57]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[65, 83, 108, 19, 39, -104, 42, -33, -56, 124, -77, 39, -126, 0, -116, 47]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-103, -10, 52, -47, -67, 68, -126, 56, 23, 39, -44, -74, -41, -36, 38, -20]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-111, 81, 117, 115, -93, -32, 56, 90, -62, -21, -56, -5, 118, -104, -17, 92, -8, -41, 47, 89, -84, 22, -19, -20, -84, -46, 13, -67, 2, -123, 116, -63, -37, -42, 68, -75, -75, 55, -47, -98, -34, -25, 91, 83, 0, 23, -7, -10, 27, -2, 53, 19, 10, -78, 97, -76, 27, 112, 87, 78, 124, 50, -58, -20, -75, 44, -116, 123, 62, 125, 78, -74, -76, 50, 110, 8, 99, 31, 60, -51, -95, -116, -67, 31, 105, 105, 64, -55, -59, -4, 27, -127, 54, -43, 83, -111, 65, 83, 108, 19, 39, -104, 42, -33, -56, 124, -77, 39, -126, 0, -116, 47]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[33, 45, 35, 17, 27, 18, -115, -39, 56, -47, -69, 69, -84, 85, 38, 86, 12, -69, 46, 43, 102, 52, 1, -25, -66, 93, -8, 30, 12, -128, -123, 56, 16, -106, -71, -93, 61, -69, 15, 117, -109, -13, 0, -92, 63, -120, 33, 120, 22, 61, 124, 92, -96, -6, -4, -2, 49, 56, 58, -89, 113, 87, -52, 54, -75, 38, -121, 91, 13, 101, -15, -19, -87, -80, 35, -49, 41, -28, -19, -54, -113, 98, -34, -107, -9, -65, 7, 41, -44, -50, 69, 127, -54, -76, 65, -88, 65, 83, 108, 19, 39, -104, 42, -33, -56, 124, -77, 39, -126, 0, -116, 47]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, -78, 9, -79, -112, 42, 73, -96, 14, 43, 24, 44, -121, -11, -83, 53, -104, 51, -124, 101, -69, 46, -128, -83, 103, 27, -15, -54, -33, -73, 12, -97, 65, 83, 108, 19, 39, -104, 42, -33, -56, 124, -77, 39, -126, 0, -116, 47]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey35);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey35);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[17, 82, 59, -27, 94, 79, 113, -77, 61, 54, 84, 9, -69, -123, -57, -17]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-59, -28, 9, -24, -92, 113, 57, 13, 56, 40, 26, -2, -43, 104, -26, 108]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-41, -98, -110, 76, -83, -90, -29, -107, -15, -17, -52, 86, 70, -109, -58, -8]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-17, -12, -122, 88, 118, 87, -51, 16, -33, -69, -11, -13, 118, 87, -25, -16]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-27, 15, 126, -36, -85, 122, -97, 29, -125, -55, -63, -13, 68, 43, 86, 115]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[57, 0, -96, 88, -87, 17, -117, -91, 97, -89, 99, 36, 49, 85, 66, -17]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[57, 0, -96, 88, -87, 17, -117, -91, 97, -89, 99, 36, 49, 85, 66, -17]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[105, 36, -82, 89, -127, -126, 90, -70, -60, -102, 10, -11, 112, 52, 117, 122]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[123, -27, 57, -63, -73, -89, -60, -1, -98, -122, 6, 98, 16, 114, 98, 114, -104, -117, -5, -6, -45, 126, 14, -82, -6, 18, 108, 50, -58, -49, -105, -94, 24, 81, -27, 85, -47, -75, 15, 16, 30, 94, -59, -35, 122, 121, 45, 62]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[63, -118, 85, -97, 37, -49, 74, 79, 47, 51, 85, -125, 56, 47, -111, 42, -58, 47, -4, 83, 8, 96, -87, 82, 8, 118, -14, -55, 36, 51, 53, 99, 24, 81, -27, 85, -47, -75, 15, 16, 30, 94, -59, -35, 122, 121, 45, 62]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[119, -112, 71, -70, 105, -112, 27, -64, 1, -106, -115, 123, 107, -33, 57, 39]");
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey38);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        byte[] byteArray53 = new byte[] {};
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey55);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey59);
        byte[] byteArray63 = new byte[] {};
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey65);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey69);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey69);
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray53);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray53, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey78);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey78);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey78);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey78);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("A7AA7633B416425E062B93EBAFC3E8F101756308309966014899E4F66D0E6FC06B9672B995918912ED8FBEA822A3F72BCA34B52403C7ADE10911410F1AE4DBFB362294A3B5935663881A3BB078393FC11A1FEDC30261D485A164A23F55FBFA3B822465E8211CEB1082C9CD771F644DC53666DB2500D7D50F1D27D031854BA1565A032F2CBC9B24F2580DFAFF7863C62BC91B1332B1759C78379C527C7EEF4C514AA5EB71146E8FEFB8F49B0B2BD4780CAE70D4B246A57B164DE90C05EB9C9766C91A43B3A950F7609639BF23475DF36E5D0A36491A59C81036C86E2F66FA9A505937EA2B82A3A9BD4C4472155AA7749B", secretKey78);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey78);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey78);
        javax.crypto.SecretKey secretKey94 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey94);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey94);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("F5772E1F2F2C141F25B851AD64BDFF586FCBF63375490D326AA505330A42ED7E1AB5113D2B21EE9ABB2457867DC9A2214A0123572A605627B178A1C7B864A8F661AEEE9A70822150523E18CB1551D5209301493E9F33F7E170584A6EA1660EE5B67FB651894099C4CEFC4F9D9BC31EF6FFBB3F9900F1EBBA108462863DB79E5258871D6BD2E18A03BFFE65C52DD443A2CD2055D3C03F3FBECCFF67DA84A619BC99F8639EBDDF0EBE211D9C78D00E5E518EFC0C272556FC2723A79D416FDB1D311797A942539312BD5605F96430AEBC36307C0CF5FADCE9AEEE59A23A838E5ACD6F363DE5219E3AE47A80C92435C6FDA1", secretKey94);
        java.lang.String str98 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey94);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-65, -58, -127, 83, -56, -120, -61, 117, 49, 40, -30, -55, 3, -28, 96, 104]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-65, -7, -81, -102, 103, 59, -22, -43, -116, 71, -81, 18, -24, 81, -93, 82]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-65, -7, -81, -102, 103, 59, -22, -43, -116, 71, -81, 18, -24, 81, -93, 82]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[112, 37, -16, -71, -24, -26, -12, -98, -67, 8, -109, -10, 119, -26, -1, -8]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-70, 68, -55, 32, -118, 11, -30, 108, 2, 9, 75, -98, 18, -103, 81, -88]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, -79, 108, 27, 113, 35, -41, 100, -36, -111, 59, -53, -84, -13, 71, -58]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[3, 3, 59, -92, 60, -4, 8, 12, -59, 100, -24, 47, 67, 31, -126, -115]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[60, 110, -52, -44, -85, 46, -26, -78, 121, -40, -101, 5, 119, 29, 89, -4]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-24, -2, 3, 56, -25, 12, -15, 83, -108, -121, 47, 89, -28, 49, 116, 91]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-24, -2, 3, 56, -25, 12, -15, 83, -108, -121, 47, 89, -28, 49, 116, 91]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-99, 41, -32, -48, 17, -72, -16, -65, -36, 92, 67, 113, -71, 62, -116, -42, 59, -39, -59, 61, -95, -33, -78, 34, 92, -34, 80, 90, -35, 70, 13, 89, -88, -41, -115, 78, -74, -22, 51, 109, 42, -91, -31, -127, -57, -51, 62, -56, 124, -20, 122, 70, -113, -65, 10, 28, 97, 44, 8, -14, 112, 39, -96, -35, -15, 42, -18, 123, -42, 46, 110, -57, 21, 83, -74, -101, 127, 41, -77, 15, 102, 38, 44, -17, -12, 44, 91, -114, -100, 20, -101, 84, -38, 32, -5, 24, 60, 110, -52, -44, -85, 46, -26, -78, 121, -40, -101, 5, 119, 29, 89, -4]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[119, -10, 104, 119, -3, -19, 91, -43, -115, 26, 104, -16, 15, -23, 56, -5, 53, 99, 12, 101, 125, -45, 48, -109, 67, 106, 68, 108, -87, 92, 89, -114, 60, 110, -52, -44, -85, 46, -26, -78, 121, -40, -101, 5, 119, 29, 89, -4]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[123, 109, -123, -64, 91, 119, 77, 27, -33, 64, -26, -68, 23, 48, 68, -35]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[44, -126, -17, 25, -10, 82, 32, -19, -45, 86, -46, 6, -61, 72, -49, -20]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-22, 65, -75, -25, -86, 9, -127, 114, -51, -40, 71, -5, 78, 107, 104, -108]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-90, 103, 107, 69, -35, 67, 123, 26, -101, -65, -35, 83, 1, -118, 103, 83]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-1, -82, 118, 23, -120, 38, -127, 54, -105, -58, -94, 27, 42, 6, -112, -49]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, -82, 118, 23, -120, 38, -127, 54, -105, -58, -94, 27, 42, 6, -112, -49]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-67, -18, -60, 7, 14, 80, -93, -1, -92, 115, 29, -17, 44, 79, -31, 73, 43, -6, -108, 104, 111, -15, 92, -51, 11, -101, 50, -101, -73, 23, 92, 15, 19, -50, 103, 16, -90, 72, 24, -11, 94, -74, -41, -113, 70, -128, 36, -73, 38, 21, -118, 104, -25, -52, 81, -87, 36, -96, 76, -52, 62, 121, 98, -122, -77, -113, 31, -40, -93, 27, -36, 14, 70, -120, -93, -126, 69, -2, -2, -71, 15, -20, -21, -2, -76, 65, 5, -69, 43, 0, -94, 40, 52, -97, -43, 69, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[46, 67, 66, -31, -61, -49, -13, -28, 85, -19, 9, 104, 98, -127, 71, -18, 0, -82, 120, -9, 56, 13, 53, 74, -37, 20, -81, -21, 6, -10, 21, -100, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-104, -1, 6, 11, -118, -128, -38, -107, 28, -49, 81, 38, -6, 95, 33, 122, 38, 14, 39, 40, 82, -88, 87, 87, -85, 44, 26, -52, -52, -76, -51, 80, -65, -61, -43, 73, -2, -42, 100, 97, -95, -89, -111, 41, 16, 88, 51, 11, 114, 89, -79, 34, -126, 77, 74, -51, -66, -119, -91, -68, -116, -38, 101, -95, -50, -104, 35, 16, 21, 15, -29, 4, -9, 117, 73, 94, 40, -67, -82, 50, 76, 58, -89, -55, 12, -24, 77, -15, 35, -94, 8, 74, -31, 98, 13, -34, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[78, -103, 76, -17, -116, 105, 7, -110, -106, 82, -8, 57, 126, -43, 54, -86, 74, 6, -112, 115, -92, 78, -32, -104, 47, -122, 49, -112, 100, 51, 86, -32, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[83, -8, 44, 25, -92, 118, -5, -126, -38, 52, -48, 59, 14, 112, 114, -122, 96, 52, 33, 12, -20, -24, -127, -84, -101, -12, -120, 2, -127, 123, 26, 86, 18, -6, -109, -66, -63, 107, -93, -53, 30, 27, 49, -99, 71, 32, -30, -115, 101, 104, -86, -83, -26, -67, 63, 108, 34, -88, 55, -18, 14, 107, 12, 88, -56, -24, -59, -77, -38, 55, -96, 100, 12, 44, 63, 40, 124, 97, 126, -71, 82, 55, -44, -33, -46, 45, -26, -28, 126, 4, 81, 17, 25, 33, 111, 107, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertNotNull(byteArray88);
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-112, -62, -8, 2, -85, 6, 70, -96, 23, 62, -15, -80, -60, 127, -24, -48, 2, 35, 107, 65, -20, -52, 11, -55, 44, 48, -99, -125, 77, -83, -110, 127, 50, 100, -125, -5, 52, -47, -82, 84, -22, 9, 75, -40, -76, 18, -66, -4]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(secretKey94);
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-13, -64, -102, 101, -63, 6, 97, -101, 27, -24, 76, 50, -2, -4, 63, -75]");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[123, 75, 77, -1, -51, -29, -95, 113, -116, 35, -28, -2, -25, -114, -86, -31]");
        org.junit.Assert.assertNotNull(byteArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("84307F73E77F01B6362A876770A1520C", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey10);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[71, -77, -23, 96, 39, -30, -117, 25, 20, 125, 76, -106, 52, 60, 88, -36]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-115, -121, 69, -115, -96, 86, 99, 8, -117, -2, 79, -106, 45, 113, 89, 12]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-115, 7, -79, 113, -102, -90, -28, -73, 13, 94, -23, 20, -75, -74, 51, 74, -59, 112, -28, -29, -55, -66, -12, -127, 110, 58, -47, 47, -100, -118, 47, 123, 100, -5, 99, 31, -89, -76, -107, 127, -114, -10, 64, -62, 81, 75, 49, -74, 8, 108, -36, -28, -34, -92, -88, -25, 62, -98, -17, -41, -2, 10, -75, 99, 115, -109, 119, 15, 110, -96, 30, -27, -97, 53, 80, -87, -1, -43, -12, -36, -16, 61, 24, 30, -38, 75, 6, -24, -110, 101, -38, 65, -29, 44, -124, 108, 71, -77, -23, 96, 39, -30, -117, 25, 20, 125, 76, -106, 52, 60, 88, -36]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[68, 28, -54, 69, 51, -27, -34, -60, -115, 117, 29, 78, -107, 97, -101, -93, 60, -9, -79, -88, -8, -59, 55, -61, 46, 86, -116, 71, -34, 18, -94, 32, 71, -77, -23, 96, 39, -30, -117, 25, 20, 125, 76, -106, 52, 60, 88, -36]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[108, 48, 17, -9, -87, -116, -76, -70, 119, 76, 28, -112, -53, 99, 52, -19, 111, -38, 52, -23, 6, 7, -61, -26, 112, -102, 73, -17, 100, 79, -26, -10, 71, -77, -23, 96, 39, -30, -117, 25, 20, 125, 76, -106, 52, 60, 88, -36]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[16, 80, -95, -39, 39, -107, -90, 2, -65, -29, -4, 75, -67, -105, 58, -118, -38, 109, 68, -59, 48, 56, -54, 122, -33, -5, -2, -67, 11, -89, 69, -17, 71, -77, -23, 96, 39, -30, -117, 25, 20, 125, 76, -106, 52, 60, 88, -36]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[38, -18, 23, 57, -73, 101, 7, 77, 63, 126, 58, 102, 29, -88, -43, -36]");
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("13E1C3A12E3725151210B93CF77EEBE0092B05FAA2B558F8199BA9EB1B821832C1881AB108F54628CC68B377506260206BA8E8F9F82F67AE98754B54F72C6A10072507D603E2574DDF5DCF516A932C067EFA35AEFBB148EB1A38A273B347C7354BCEA32E8C277478ECAA861C2981D893", secretKey9);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[28, -128, -61, 96, -92, -125, -128, 118, -85, -100, -86, -32, -114, 84, -3, -72]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[89, -51, 109, -73, -114, 64, -105, -106, 49, -77, 14, 90, 4, -101, 38, 23]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-76, 52, 24, 5, 25, 78, -44, -85, 3, 109, 70, -75, 5, -105, -117, 3, -7, 114, -92, 117, -108, 13, -123, -123, 87, -92, -111, -35, -89, -41, 30, 21, 28, -128, -61, 96, -92, -125, -128, 118, -85, -100, -86, -32, -114, 84, -3, -72]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[50, -100, -39, 48, -105, -73, -41, -50, 80, -1, 101, -39, 4, 22, 83, -86, 32, -114, 104, 48, 53, 85, -46, -31, -14, 122, -50, -16, 64, -12, -64, -100, 6, 36, 47, -49, -30, 107, -127, -40, 123, -59, -95, -125, -88, -90, -3, -35, 89, 101, 72, -81, -54, 84, 59, 55, -117, -61, 1, -1, -56, -53, 0, 33, 89, -123, -37, -80, -84, -117, -32, -116, 77, 111, -68, -10, -96, 17, -49, -46, 41, -83, -42, 116, 115, 120, 1, 123, -38, 18, -6, 115, -15, -30, 15, 56, 28, -128, -61, 96, -92, -125, -128, 118, -85, -100, -86, -32, -114, 84, -3, -72]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "A4DE0EB72923F71C7DF6A628ED3F8079539F2D60D5251D5BC030AE78C1EC520BE6496DAC4A77F6CB4C3FE5CB4E2C021685F4E3AD7225A95E60F51EC24BFC741B158015CB6927C946FBA6BCC650BEC7E35099BBDF5168C5DD3E3023F58A11252874BC016454FAF86FD34CE47CD5F391207241EDF1F454C03E7439B2E75FFE9C4530F2C4E7B5BE705A65441F574F12B9906F724A8215194F8CA4ADA5DABCAC8FE2919B86776503BD07F2A97FB83E15F2FD4760A208C84D2E95EB737C6B85B06BC1AB1F8BC01A4773EE7AC03851DA96376F07A3D2F08B2230F0E57CE9DD0DA190CA1C80C360A4838076AB9CAAE08E54FDB8" + "'", str16, "A4DE0EB72923F71C7DF6A628ED3F8079539F2D60D5251D5BC030AE78C1EC520BE6496DAC4A77F6CB4C3FE5CB4E2C021685F4E3AD7225A95E60F51EC24BFC741B158015CB6927C946FBA6BCC650BEC7E35099BBDF5168C5DD3E3023F58A11252874BC016454FAF86FD34CE47CD5F391207241EDF1F454C03E7439B2E75FFE9C4530F2C4E7B5BE705A65441F574F12B9906F724A8215194F8CA4ADA5DABCAC8FE2919B86776503BD07F2A97FB83E15F2FD4760A208C84D2E95EB737C6B85B06BC1AB1F8BC01A4773EE7AC03851DA96376F07A3D2F08B2230F0E57CE9DD0DA190CA1C80C360A4838076AB9CAAE08E54FDB8");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[36, -125, -35, -66, -13, 106, -67, -53, 120, 77, 24, 53, 81, -73, -124, -61]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-9, -35, -47, 108, 26, -108, 85, -60, 29, 73, 57, -53, -27, 85, -105, -127]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-111, -58, 83, 97, 19, 108, 52, 114, 71, -65, 26, -28, -59, -85, -115, -66]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[87, -78, -117, -67, -125, -49, -107, 28, -52, 25, 92, -28, -120, -61, 92, 107]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[84, 59, 3, -58, 105, -64, 99, 115, -121, -86, -124, 11, -10, -8, 93, 116]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-5, 16, -90, 98, 15, 16, -70, -29, -6, -54, 58, -53, -97, 13, -44, -107]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-5, 16, -90, 98, 15, 16, -70, -29, -6, -54, 58, -53, -97, 13, -44, -107]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-50, -8, -17, 12, -73, 43, 120, 126, 2, -48, -31, 5, 88, 64, 99, -69, -42, 112, -26, 66, 50, 42, 32, 114, -118, -42, 12, 93, 3, 29, -62, -12, 60, -121, 70, -10, -93, -49, -94, -10, -9, 127, 37, 58, 45, 101, 14, -121, 96, -82, 84, 7, -63, -65, 107, -41, 1, 71, 23, -122, 99, 46, 45, -9, -55, -112, -73, 14, 21, 41, 109, -17, 117, -76, -54, 85, -98, 20, -11, -44, 87, -121, 34, -6, 56, 9, -124, -66, -49, 102, 102, -96, -18, 52, -41, 55, 84, 59, 3, -58, 105, -64, 99, 115, -121, -86, -124, 11, -10, -8, 93, 116]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-54, 81, -94, -45, -37, -72, 3, 66, 108, -88, -109, -17, 100, 41, 5, 78, -48, 57, -58, -48, -101, 89, -23, 102, -109, -73, 87, -54, -53, 86, -6, -110, 84, 59, 3, -58, 105, -64, 99, 115, -121, -86, -124, 11, -10, -8, 93, 116]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[99, -119, 23, -42, -12, -10, -107, 125, 109, -27, 99, 68, -29, 122, -109, 123, 123, 11, 101, 13, 50, -1, 88, 11, -111, 64, -75, -89, -14, 22, -119, 52, 84, 59, 3, -58, 105, -64, 99, 115, -121, -86, -124, 11, -10, -8, 93, 116]");
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey4);
        java.lang.Class<?> wildcardClass9 = secretKey4.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[34, 85, 42, -77, -69, -74, 84, -104, -83, -25, 69, 95, 94, -110, 30, -10]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-113, 15, 3, 37, 43, -13, 54, 63, -1, 51, -40, -14, 80, -39, -124, 17]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-113, 15, 3, 37, 43, -13, 54, 63, -1, 51, -40, -14, 80, -39, -124, 17]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-31, -55, -89, 85, -63, 104, 58, -27, -19, 113, -58, 80, -48, 114, 79, 76, -6, -93, -46, -37, 61, 123, -52, -90, 124, 2, 125, 123, 116, 64, 91, 5, -107, 18, 25, -45, 13, 44, -125, 68, -128, 41, -92, -5, -99, 116, 30, -19, 107, 10, 59, 61, 83, 100, 121, 119, 122, -20, -12, -79, -17, -7, 86, -52, -120, 24, 69, 105, -126, -11, -98, 106, -24, 103, -10, -52, 12, 43, -65, -4, -40, 17, 90, -35, 36, -40, -53, 60, -72, -126, 47, 99, 122, 110, -24, -102, 34, 85, 42, -77, -69, -74, 84, -104, -83, -25, 69, 95, 94, -110, 30, -10]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        javax.crypto.SecretKey secretKey1 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey14);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey14);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("BE1F3054E9E666FA21C05243046ADBC7", secretKey14);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey14);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey1);
        org.junit.Assert.assertNotNull(byteArray2);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[93, -71, 107, -36, 27, -34, 67, 100, 75, 64, -60, -87, -71, 89, -59, 108]");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "5DB96BDC1BDE43644B40C4A9B959C56C" + "'", str3, "5DB96BDC1BDE43644B40C4A9B959C56C");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "5DB96BDC1BDE43644B40C4A9B959C56C" + "'", str4, "5DB96BDC1BDE43644B40C4A9B959C56C");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-77, -100, 26, 34, -88, -106, 115, 93, -76, 10, 113, 102, -93, -73, -9, 5]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-49, -32, -106, -78, 89, 102, 108, -48, -40, -34, 1, 88, -95, 88, 125, 48]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[108, -38, 56, -68, 60, -123, -105, -29, 96, -83, -109, 13, -61, 5, 14, 103, -114, 6, 107, -111, 95, -122, 64, -103, 119, -53, -69, 103, 33, 26, -85, -104, 47, 46, -28, -65, 119, -1, -34, -95, -69, -53, 26, 17, -61, -124, 24, 66, 100, 121, -54, -71, -75, 96, -66, -99, -36, 5, -11, -28, -37, -25, -101, 53, -89, -98, 65, -128, -100, 24, 118, -95, -106, -118, 25, 8, -53, 13, 35, 21, 0, 46, 104, 42, 44, 61, -115, -109, -88, 7, -60, 101, 98, -111, 101, -15, -77, -100, 26, 34, -88, -106, 115, 93, -76, 10, 113, 102, -93, -73, -9, 5]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[108, 18, 100, -76, -111, -87, 106, 57, -78, -33, 69, -26, 23, 121, -100, -85, -42, -97, -35, 126, -20, 43, -4, 85, 22, 110, 123, -91, -85, -17, -125, 15, -40, 64, 46, -128, 28, -42, -56, 123, 127, -92, -43, -88, 24, -101, 0, -5, -89, -85, -19, -125, -114, -21, 32, -28, 90, 117, 105, -10, -5, -54, -1, 21, -31, -128, -84, 26, -84, -71, 68, -127, -120, 77, 10, 10, 83, 98, -19, 52, 71, 126, -82, 107, 78, 104, -50, 12, 103, 51, 6, -45, -83, -98, 52, -91, -77, -100, 26, 34, -88, -106, 115, 93, -76, 10, 113, 102, -93, -73, -9, 5]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-15, -7, -107, -28, 45, -46, -125, 9, 103, 94, -89, -121, -101, 54, 59, -48, -13, -46, -54, -70, 106, 103, 38, -93, 3, 116, -45, -4, 18, -121, 45, 64, -77, -100, 26, 34, -88, -106, 115, 93, -76, 10, 113, 102, -93, -73, -9, 5]");
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4B93528CB4D40368DBBC4EA8E4FF781EDC2DB9D78FBD2033B56BE9404B1870FEF23277FB0A8B5F6045F08FDF4785516B", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1FE9CDFB68A6E115AFFC272D390A8106F61DF2A13E15879CD7CF74DF7E07438DBA95AF370A18E180E8BC927338787814", secretKey6);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey21);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("2F2860C6FC357E0D6B36B5C115CA66545F03386AD9065AFD258B277E518889BBE499026231269FDA91D029D60DB5E58F", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey21);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[31, 109, 68, -13, -82, 86, 41, 123, 113, -34, 51, -14, -70, 3, 118, 89]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[77, -104, 55, -44, -89, 70, -56, -110, 51, 52, -66, -115, -116, -101, -100, -45]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[62, -14, -59, 88, -117, -92, 74, 116, 126, 69, -25, -53, 26, 100, -39, -46, -57, 22, 100, 32, 15, -32, -74, 12, -46, -48, -50, 88, 105, -83, -94, -28, 54, 40, 73, 123, -6, -35, -10, 8, 14, 86, -71, -98, 57, 55, -55, -53, 16, -29, -41, -8, 112, 35, -114, 63, -67, -29, 45, -36, -108, 110, 15, 68, 14, 31, 65, -26, -90, 15, 28, 6, 82, -84, 102, 113, 35, 124, -128, -58, -126, -27, -87, -29, -112, 119, 25, 56, 34, -9, 120, -30, -112, -116, -51, 117, 31, 109, 68, -13, -82, 86, 41, 123, 113, -34, 51, -14, -70, 3, 118, 89]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-124, 76, -97, 31, 124, 21, 20, -34, -77, -34, -95, 22, -80, 102, 59, 7, 48, 55, -77, 4, -70, -124, 70, 48, -128, -126, -91, -10, 33, -19, 17, -117, 112, -73, -93, -7, -96, -16, 51, 98, -109, -21, 64, -33, 38, -75, 0, -89, -95, -9, -95, 88, -103, 40, 127, -95, 34, 113, 115, -107, 105, 109, 5, -33, -94, 32, 80, 125, 118, 69, -2, -112, -101, 19, -46, -1, 1, 108, 107, 64, 4, -83, 28, -117, 26, -66, 36, -93, -56, 15, 84, -18, -9, -110, 64, 5, 31, 109, 68, -13, -82, 86, 41, 123, 113, -34, 51, -14, -70, 3, 118, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[31, 109, 68, -13, -82, 86, 41, 123, 113, -34, 51, -14, -70, 3, 118, 89]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-42, 56, 64, 74, -47, 86, -61, 105, 73, -60, 28, -82, -119, -7, 60, -65, 28, 125, 36, -108, 115, 118, -86, 5, 118, 55, -27, 16, 33, -80, -109, -112, -80, 20, -57, -111, 66, 79, 99, 101, 71, 103, 106, 69, 12, 7, 43, -72, -54, -41, 29, 1, -104, -109, -5, 32, -81, -52, -90, -97, -72, 77, 99, -21, -32, -48, 40, 9, -125, -102, -26, 14, -98, -34, -37, 125, -48, -72, -39, -78, -83, 98, -86, -78, 49, -29, 48, -33, 84, -27, 107, 49, 2, 110, 80, -19, 31, 109, 68, -13, -82, 86, 41, 123, 113, -34, 51, -14, -70, 3, 118, 89]");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, -37, -116, -127, 65, 83, 23, -98, 34, 121, -42, 123, -71, -29, 50, -108]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-89, 25, -90, 45, 4, 30, -109, -62, 115, 94, 110, 15, -42, -96, -88, -100, 64, 52, 7, 21, 26, 33, -26, -46, 112, -116, -11, -57, -46, 17, 73, 123, 49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-63, -2, -44, -10, 10, 91, 22, 62, -30, 41, -65, -74, 19, 32, 54, 113, 108, 93, -113, -58, -27, 55, 26, -4, 15, -13, -71, 66, 101, 3, 4, 117, 49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[127, 123, -71, 121, 91, -45, 31, -53, 14, 110, 6, 59, 89, 78, -8, -83, -34, -89, 11, 66, -36, -17, -114, -42, 118, -9, 96, 31, 17, -60, -112, 102, 49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[29, 18, 90, -87, 9, 84, 16, 115, 127, 91, 109, 62, 126, -110, 93, -48, -124, 69, -63, -117, 76, -74, -120, 6, 97, 8, 49, -15, 66, 46, -87, -105, 51, -63, 22, 7, -99, -6, -39, -30, 126, -16, -60, 67, -97, 25, -40, -55, 81, 122, 69, -91, 119, 93, -58, 116, -83, 73, 105, -106, 35, 76, 74, -121, 66, 25, 37, -45, -74, -96, -89, -50, 5, -116, -24, -97, 103, 23, 14, 29, -126, 57, 78, 1, 74, -48, -19, -92, -96, -30, -17, -16, 91, 87, -119, -123, 49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-103, 13, 85, -30, -57, 84, 55, 61, -30, 101, 104, 38, -76, -77, 109, -26, -22, 24, 60, 78, 69, -91, -119, 87, -117, -40, 85, 2, 13, 6, -121, -11, -9, -97, 54, -4, -102, 56, 124, 126, -63, -46, -87, -44, 111, 60, -121, 69, 84, -7, 64, 98, 51, 33, 106, -22, -49, -16, 115, 113, 12, 13, -111, -18, 57, 81, -14, 64, -6, 69, 105, -59, -26, -34, -70, -123, 89, -60, 87, 53, -31, 25, -35, -109, 34, -10, 5, -47, -93, -16, 24, 88, 88, 9, 49, -107, 49, -46, -86, -70, -80, -122, -126, -18, 6, -87, -58, 34, -18, -108, -128, -127]");
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey22);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey22);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey22);
        java.lang.Class<?> wildcardClass31 = secretKey22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-6, -3, 14, -102, -25, 9, 28, 94, -125, -104, 45, -7, 90, -122, 39, 117]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-30, -113, -49, -84, 123, -35, -28, 43, 36, 58, -63, -70, 54, -10, 67, -10]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-4, 110, -39, 45, 96, -41, -60, -60, 107, -23, -84, -114, 11, 24, -81, -24]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-23, -23, 126, -91, 51, -18, 18, 114, 116, 59, -43, -67, 93, 39, 51, 24]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[121, -49, -100, 0, -5, -104, 11, 47, -126, 15, -113, -30, -109, 89, -68, 18, -108, -96, -42, 38, -81, -87, -128, -115, -2, 110, 71, -27, 21, -58, -83, -124, 123, 40, 20, 86, -110, 126, -66, 95, 39, -81, 51, 68, -118, 55, 127, -65, 4, 26, 65, -45, 51, -73, -17, -125, -18, -86, 116, -79, -90, -12, 64, -10, 8, 102, -114, -29, 60, -120, -72, 44, 43, 49, 60, 119, 63, 88, 23, 114, 52, -89, 86, -32, -31, -99, -95, -16, -36, -28, -61, -49, 39, 21, -92, -60, -4, 110, -39, 45, 96, -41, -60, -60, 107, -23, -84, -114, 11, 24, -81, -24]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-22, -41, 96, 127, 37, 95, 7, 85, -36, 29, 104, 28, 115, 121, 101, -10, 118, 89, -7, -97, -86, -102, 116, -54, -33, 96, 104, 69, 63, -120, -127, -99, 109, -82, 88, -80, -14, 46, -56, 61, -111, -89, -125, -118, 12, 32, 92, 31, 16, 41, -64, -94, 31, -24, 83, -92, 17, -73, 45, -103, 38, 64, 54, -3, 83, -41, 74, -14, -50, -85, 11, 121, 65, -42, 22, 9, -55, -78, -43, 68, 22, 92, -120, 113, 72, 114, -30, -63, 62, -3, 7, 95, -107, 15, -63, 20, -4, 110, -39, 45, 96, -41, -60, -60, 107, -23, -84, -114, 11, 24, -81, -24]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey61);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey61);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey61);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey81);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey81);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey81);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey81);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey81);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey81);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey81);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey81);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("F5772E1F2F2C141F25B851AD64BDFF586FCBF63375490D326AA505330A42ED7E1AB5113D2B21EE9ABB2457867DC9A2214A0123572A605627B178A1C7B864A8F661AEEE9A70822150523E18CB1551D5209301493E9F33F7E170584A6EA1660EE5B67FB651894099C4CEFC4F9D9BC31EF6FFBB3F9900F1EBBA108462863DB79E5258871D6BD2E18A03BFFE65C52DD443A2CD2055D3C03F3FBECCFF67DA84A619BC99F8639EBDDF0EBE211D9C78D00E5E518EFC0C272556FC2723A79D416FDB1D311797A942539312BD5605F96430AEBC36307C0CF5FADCE9AEEE59A23A838E5ACD6F363DE5219E3AE47A80C92435C6FDA1", secretKey81);
        java.lang.Class<?> wildcardClass94 = byteArray93.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[6, 118, 96, 79, -22, 13, 93, -1, -100, -122, 37, 31, 0, -52, 97, 84]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[40, -46, -119, -101, 62, 39, 43, 102, 86, -65, 25, -63, 108, -69, 39, 116]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[1, 45, 47, -11, 40, 23, 111, 29, -66, -34, -91, 69, 6, 79, 61, 90]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-56, 114, 67, 121, 0, -120, 70, -117, 78, -4, -46, -20, 73, -27, -96, -124]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-18, 43, -80, -87, -10, -14, 51, 99, 19, -8, -27, 22, 96, 74, 104, 87, 66, -102, 103, -55, 113, 69, -86, 115, 68, -67, 124, 12, 120, -128, 14, -38, 1, 45, 47, -11, 40, 23, 111, 29, -66, -34, -91, 69, 6, 79, 61, 90]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[80, -22, -60, 101, -104, 60, 87, 124, 28, 117, 23, -28, -103, 46, 44, 64, 3, 26, -98, -70, -24, 69, 1, 65, 27, -24, -24, 5, -48, 48, -31, -3, -67, 18, -53, -18, 118, 92, -127, 28, 63, 57, 26, 103, -90, 19, 62, 13, -63, 66, 17, -83, -32, 26, 30, -76, -30, 60, -99, 35, -2, -57, 33, -27, -53, 14, 87, 114, 18, 46, 44, 113, -119, 65, -46, -107, -40, -109, 118, 57, 35, -51, 120, -128, -106, -4, 93, 100, -56, 21, 3, -89, 96, -110, 124, -14, 1, 45, 47, -11, 40, 23, 111, 29, -66, -34, -91, 69, 6, 79, 61, 90]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[42, 21, -54, -72, -79, 83, 118, 0, 107, -7, -68, -34, 99, 117, 91, -13]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-41, 23, 93, 114, 35, 66, -47, -70, 11, 111, -126, -12, 86, -54, 96, 82]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[3, 125, 94, 86, 5, 27, -30, 14, -64, -24, 37, 4, 63, -65, 19, -77]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[103, 70, -57, 18, 88, 119, 115, -58, 17, -31, -72, 126, -66, -22, -32, 125]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[52, -30, 98, 36, 109, -98, 63, 23, -8, -64, 123, -127, 98, -78, -119, -60]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[11, 15, -67, 19, 16, 89, 112, -92, 103, -82, -40, -53, 43, 89, -87, 92]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[11, 15, -67, 19, 16, 89, 112, -92, 103, -82, -40, -53, 43, 89, -87, 92]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-23, 121, -50, -11, 26, 43, 55, 49, 56, -7, -128, 115, 71, 107, 79, 33, 94, 74, 39, -72, 127, 37, 68, 1, -111, 70, -64, 28, -50, -30, 31, -68, 35, -4, 12, -16, -116, 25, -82, 77, -91, -29, -122, -105, -12, 39, -97, -25, -54, 119, 26, -88, -89, -52, 82, 96, -23, 121, -59, 39, 12, 106, -86, 72, -13, 44, -88, -47, 124, 18, 66, 124, 73, -55, 29, -126, 69, 74, -107, 64, 5, 21, 1, 42, 2, -126, -72, 28, -102, -63, -22, -66, -106, 10, 127, 106, 52, -30, 98, 36, 109, -98, 63, 23, -8, -64, 123, -127, 98, -78, -119, -60]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-121, -108, -50, 21, -51, -95, 120, 93, 60, 71, -113, 118, -18, 99, -15, -12, 0, 109, -56, 112, 46, -31, -115, 35, 70, 86, -38, -39, -95, -74, 9, -57, 52, -30, 98, 36, 109, -98, 63, 23, -8, -64, 123, -127, 98, -78, -119, -60]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[105, 88, -72, -63, -22, 87, -107, -14, 102, 101, 92, -82, -115, 116, -26, 86, -92, -41, 48, 5, -95, 102, 36, 125, -71, 65, -67, -71, 127, -37, -128, 108, 52, -30, 98, 36, 109, -98, 63, 23, -8, -64, 123, -127, 98, -78, -119, -60]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-96, -123, 118, -48, 77, -111, -111, -60, 10, 38, -97, -19, -86, 6, 65, -28]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-41, 1, -121, -79, 14, 98, 15, 104, 125, -101, -59, 105, -65, -91, -102, -53]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-41, 1, -121, -79, 14, 98, 15, 104, 125, -101, -59, 105, -65, -91, -102, -53]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[70, -107, -73, -64, 54, -17, -2, -115, -81, -125, 86, -110, 88, 53, -53, -77]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-33, -1, 50, 123, 121, -116, 43, 90, 27, -27, -41, -95, -74, 70, -26, -89, 16, -69, -118, 17, -94, -38, 125, 32, 117, -47, 16, 109, 66, 96, -78, 88, 84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-33, -1, 50, 123, 121, -116, 43, 90, 27, -27, -41, -95, -74, 70, -26, -89, 16, -69, -118, 17, -94, -38, 125, 32, 117, -47, 16, 109, 66, 96, -78, 88, 84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[44, -19, -118, 47, -31, 68, -10, -41, 24, 124, 78, -17, -116, -68, 49, -128, 61, -54, 127, -35, -65, -91, 90, -7, 15, -83, -87, 29, -18, 38, 84, -20, -71, -27, -21, 47, 23, 19, 88, 114, 82, 2, -65, 32, -48, -2, -70, 54, 27, 0, 108, -108, 32, 89, -35, 97, -6, -107, 70, 31, 29, -50, 96, -70, 36, -34, 111, -52, 83, 101, -31, -12, 94, -126, 28, 70, 1, -49, 3, 29, 69, 59, 64, 75, -87, 37, 49, 54, -22, 29, -7, -124, -105, 85, 15, 50, 84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[80, -89, 48, 48, 29, 109, -41, 18, 0, -3, 45, 0, 7, -89, 68, -74, 51, 5, -87, 43, -85, 14, 122, -54, 14, -15, 102, 43, -96, 120, -34, 36, 86, 79, -38, 44, -44, 89, 121, -30, -27, 127, -106, 96, -68, -103, 70, -100, -78, -50, 93, 75, 18, -112, -25, -51, 82, -63, 83, -33, 0, -94, 76, 66, -88, -124, -8, 11, -74, -38, 3, 115, -68, -48, -57, -128, -122, -90, 108, -110, -10, -39, -6, -114, 19, 42, 55, 36, -83, -32, 50, -22, -111, 51, 66, -92, 84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[84, 55, 18, 120, -106, -46, -66, 5, -89, 106, 109, 0, 85, -72, 63, 64]");
        org.junit.Assert.assertNotNull(byteArray93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-79, -2, -104, -62, 60, -62, -100, 99, 73, 42, -23, -71, -93, -30, -44, -77]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-98, 14, 19, -96, 32, -60, 20, -35, 109, 116, 63, -88, -78, 73, -9, -81]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0656A0EA18FD8C2FFFE23F65013B7020A0A65BA19D7E27CA60EEA30A6D8E7ED8BB0A74BD2F93031F04D3BF2A50719F8B", secretKey6);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-62, 44, 106, 8, 22, 58, 106, 22, 47, -100, 13, -81, 113, -16, 116, -116]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[4, 41, -55, -55, -88, 38, 116, 9, -12, -122, 75, 6, -113, -61, -104, 81, 112, 51, 121, -115, 36, 62, 82, -14, 95, 15, 59, -100, -80, 45, 114, -81, 98, 36, -81, -4, 43, 113, 113, 28, -64, 20, 86, -26, 15, -93, -49, 73, 50, 120, 110, -60, 46, 17, -49, -99, -68, -59, 77, 62, -20, -43, 34, -18, 119, 126, -6, 43, 67, -85, -35, -48, -79, -50, 68, 15, 27, 56, 39, -43, 28, -96, -21, 56, 82, 17, 42, -122, 70, 47, -48, 90, 75, 72, -83, -113, -62, 44, 106, 8, 22, 58, 106, 22, 47, -100, 13, -81, 113, -16, 116, -116]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-8, -111, 52, -106, 54, 123, -106, 117, 26, 123, -40, -122, 96, 57, -46, 117, -11, 20, 7, -18, -60, 0, -44, -14, -96, -11, 6, -96, -25, 35, -80, -67, 56, -11, 35, 81, 58, 101, -87, 43, -61, -10, 15, -76, -43, -101, -103, -43, -33, -42, -14, 21, 49, 111, 69, 58, -104, -72, 75, -95, -44, 96, 63, 106, -62, 44, 106, 8, 22, 58, 106, 22, 47, -100, 13, -81, 113, -16, 116, -116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-49, -4, -67, 126, 61, -33, 117, 69, -9, -89, -110, -121, 1, -54, 44, 47, 29, 64, 9, -11, 50, -97, -81, -36, -7, 97, -59, 99, -95, -25, 112, 17, 16, 97, 78, 103, -42, -16, 96, -7, 72, 114, 97, -49, 60, 40, 105, 54, 97, -65, 10, 79, -9, -11, 111, -89, 118, -126, -67, -2, 100, 91, 24, -88, 106, 87, 57, -60, -57, 65, -5, -23, 63, -113, 32, 112, 41, -30, 127, 73, -13, 122, -36, -114, -26, -53, -37, 117, 90, 74, 66, 31, -4, -88, -58, 63, -62, 44, 106, 8, 22, 58, 106, 22, 47, -100, 13, -81, 113, -16, 116, -116]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CFFCBD7E3DDF7545F7A7928701CA2C2F1D4009F5329FAFDCF961C563A1E7701110614E67D6F060F9487261CF3C28693661BF0A4FF7F56FA77682BDFE645B18A86A5739C4C741FBE93F8F207029E27F49F37ADC8EE6CBDB755A4A421FFCA8C63FC22C6A08163A6A162F9C0DAF71F0748C" + "'", str12, "CFFCBD7E3DDF7545F7A7928701CA2C2F1D4009F5329FAFDCF961C563A1E7701110614E67D6F060F9487261CF3C28693661BF0A4FF7F56FA77682BDFE645B18A86A5739C4C741FBE93F8F207029E27F49F37ADC8EE6CBDB755A4A421FFCA8C63FC22C6A08163A6A162F9C0DAF71F0748C");
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.Class<?> wildcardClass16 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[61, 126, 103, 114, -16, -6, 15, -9, 33, 80, 95, -69, -32, 0, 26, 10]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-44, -101, -112, -1, -15, -88, 127, -110, 25, -85, 16, 38, 73, -51, -43, -122, -102, 61, -87, 83, 1, 69, -4, -55, 79, 50, 6, -4, -67, -98, -125, 43, -93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-26, -112, 79, 124, 99, 77, 87, -2, -12, 5, -116, 57, -121, 53, 5, -1, -12, 48, 98, -72, 95, 78, 16, -95, -97, -70, 99, 89, -54, -15, -47, 10, -93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[43, -79, 57, -42, 34, 95, 90, -23, 113, -76, 110, -99, 50, -123, 51, 26, -116, 35, 72, 80, -111, 14, 116, 61, -41, -54, -28, -34, -73, -107, -90, 75, -93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-26, -112, 79, 124, 99, 77, 87, -2, -12, 5, -116, 57, -121, 53, 5, -1, -12, 48, 98, -72, 95, 78, 16, -95, -97, -70, 99, 89, -54, -15, -47, 10, -93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[66, 17, -19, -98, 30, -40, -119, 46, 44, -28, 29, 70, -25, 91, -9, 65, 16, -28, -88, -71, -73, 98, -103, -38, -15, 85, -59, 95, -25, 44, 81, 42, -24, -116, 110, -86, -44, 101, 66, -107, -85, 114, 1, -117, -102, -69, 121, -100, 90, -48, -64, -78, -49, -85, -118, 121, -109, -108, 9, 113, -36, 62, 98, -38, 44, 103, 14, 77, 102, -65, -84, -7, 63, 84, -67, -34, -87, 122, -83, 119, -89, 83, 96, 52, 87, 72, 61, -68, 53, 118, -52, 73, 74, -46, 109, -46, -93, -7, -20, -109, 27, -9, -29, 114, -46, -127, -59, -12, 108, -24, -103, -106]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "4211ED9E1ED8892E2CE41D46E75BF74110E4A8B9B76299DAF155C55FE72C512AE88C6EAAD4654295AB72018B9ABB799C5AD0C0B2CFAB8A7993940971DC3E62DA2C670E4D66BFACF93F54BDDEA97AAD77A753603457483DBC3576CC494AD26DD2A3F9EC931BF7E372D281C5F46CE89996" + "'", str15, "4211ED9E1ED8892E2CE41D46E75BF74110E4A8B9B76299DAF155C55FE72C512AE88C6EAAD4654295AB72018B9ABB799C5AD0C0B2CFAB8A7993940971DC3E62DA2C670E4D66BFACF93F54BDDEA97AAD77A753603457483DBC3576CC494AD26DD2A3F9EC931BF7E372D281C5F46CE89996");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey29);
        java.lang.Class<?> wildcardClass38 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[28, -55, 58, 104, -26, -3, 112, -29, -83, 8, 51, 29, 20, -54, -61, 17]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-102, 109, -77, 9, 125, -123, 118, -128, 109, 0, -93, -117, -12, -30, 113, -59]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-6, 123, 97, 104, -24, 9, 35, -22, 87, -97, 81, -124, -17, 70, -36, 126]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[77, 6, -1, 9, 116, 35, 102, 33, -77, 11, 12, 52, -106, 120, -85, 9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-81, 52, -105, 114, -82, -64, 114, 4, -68, 122, -50, 64, -111, -118, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[26, -94, -57, 111, -96, 49, 86, -77, -96, -90, 73, -30, 110, -82, 5, 40]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[26, -94, -57, 111, -96, 49, 86, -77, -96, -90, 73, -30, 110, -82, 5, 40]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-11, 111, 67, 3, -44, -52, 64, -38, 69, -118, -124, -62, -84, 88, -41, -28, -41, 15, 21, -99, 75, -106, -18, 34, 4, 5, -1, -34, 19, 33, -75, 70, 10, 28, -125, 45, 113, -120, -33, 80, 8, 95, -87, 121, -48, 92, 73, -9, 100, -11, -116, 91, 57, -31, -93, -117, 59, 41, 86, 65, 61, 59, 71, 9, 5, -111, -30, -104, 98, 60, -80, 53, 19, -24, -104, 115, 110, -81, -42, 35, -80, 89, 35, 34, 62, -42, -28, -49, 33, 80, 19, 123, 122, -67, 69, -108, -81, 52, -105, 114, -82, -64, 114, 4, -68, 122, -50, 64, -111, -118, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-67, 94, -22, -125, 103, -51, -44, -99, 98, 42, 97, -1, -15, -99, -99, 47, 127, -73, -125, 31, -50, -5, 36, 26, -25, -76, -4, -62, -115, 90, 41, 74, -81, 52, -105, 114, -82, -64, 114, 4, -68, 122, -50, 64, -111, -118, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[63, -86, 74, 31, -60, -92, 114, 46, -92, 108, 35, -43, 21, 126, -90, -25, 68, 93, -80, -76, -9, 53, 96, 62, 110, -10, 3, 27, 69, -71, -36, -41, -47, 108, -15, -54, 21, 80, 75, 27, -11, -53, 120, -42, 38, -117, -105, 61, 99, 43, 66, 15, -104, 124, -65, -36, 17, 51, 100, -44, -26, -45, 83, -7, -15, 41, -34, 6, -61, 75, 126, 99, -112, 27, 57, -112, -119, -58, -99, 104, 125, 46, -44, -126, -95, 73, -126, 34, 22, -16, -24, -49, -37, -125, -120, -114, -81, 52, -105, 114, -82, -64, 114, 4, -68, 122, -50, 64, -111, -118, -92, -12]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[51, -105, -53, -11, 8, -36, -10, -6, 114, -123, 51, -15, -80, 31, -127, 93, -10, -42, -5, -36, 108, -14, 118, 42, -120, -44, 119, -93, -87, -69, 5, 26, -59, -62, -107, -109, -17, 126, -41, -13, 53, 23, 79, -15, 27, 39, -91, -41, 85, -37, 51, -43, -62, -52, -52, -5, -62, -128, 12, -78, -116, -22, -92, 98, -97, 6, 84, 62, 47, 43, -22, 20, -57, -94, -46, -67, 106, -9, -49, 111, -73, -97, -95, -88, -3, 31, -16, 95, -18, -6, -119, 26, 99, -79, -3, -27, -81, 52, -105, 114, -82, -64, 114, 4, -68, 122, -50, 64, -111, -118, -92, -12]");
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey30);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[43, -43, -36, -68, 53, -7, 53, 91, -96, -81, 81, -108, -63, -7, 52, 84]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[93, 88, 42, 52, 67, 117, 45, 3, 45, -23, -106, -103, 33, 37, -45, 60]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[106, -128, 48, -53, -111, -91, -122, 102, 14, 41, 36, 8, -57, 25, 18, 80]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[109, 74, 115, -35, -102, 55, -116, -18, 19, -88, 43, 99, 101, -65, 52, -2]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, -26, -94, 12, -25, 29, 121, -76, -109, 4, -22, -71, 110, 95, 16, -75]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[102, 118, 104, -126, 97, -116, 102, -31, -74, 69, 19, 117, 100, 77, -99, -26]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[95, 106, 127, 72, 12, -48, 125, 87, -19, -5, 105, 40, -76, 44, -37, 31, 117, 5, -41, -98, -29, 62, 64, -32, -118, -62, 92, 97, 78, -61, 78, 7, -1, -26, -94, 12, -25, 29, 121, -76, -109, 4, -22, -71, 110, 95, 16, -75]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-77, 121, -124, -75, -28, -117, -51, -71, -35, -25, -41, 18, 110, -40, 46, 85, 125, 46, -124, -116, -32, -64, -7, 82, 48, -33, -32, -116, -61, 58, -18, 39, 111, -9, 70, -8, -106, 75, 101, 123, -49, -23, 45, -78, 82, -100, 21, 67, 116, -56, -25, 61, -71, -29, 79, 70, -118, 32, -57, 1, 58, 65, 25, -33, 88, 35, 117, 89, -15, 115, 12, -88, -105, -35, -38, 115, 105, -22, 18, 125, -90, -92, -63, 27, -39, -8, 25, -36, 51, -65, 58, -25, -72, 56, 20, -42, -1, -26, -94, 12, -25, 29, 121, -76, -109, 4, -22, -71, 110, 95, 16, -75]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[42, 45, -40, 118, 62, 13, -41, -50, 67, 21, 125, -43, 59, 37, 19, 24, 5, -94, -59, 89, 47, -121, -75, -44, 63, 25, -78, -47, 51, -57, 0, 73, 100, 95, -25, -120, 109, 115, -70, 67, 93, 17, -46, -88, -111, -27, 67, 55, 79, -90, -45, -119, -120, 42, -63, 15, 64, 41, 89, -79, 79, 52, 11, 90, 99, -45, 67, -12, 76, 119, -125, -61, 23, -125, -79, -49, -76, 80, -9, 83, 3, -119, 17, -30, -84, 36, -114, -43, 76, -30, -24, 5, -20, -10, -77, -36, -1, -26, -94, 12, -25, 29, 121, -76, -109, 4, -22, -71, 110, 95, 16, -75]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-89, 4, -17, 96, 86, -104, -109, -117, -106, 125, -98, -93, -57, -82, -44, -116, -64, 13, -69, 114, -26, 33, 109, -9, 2, 35, -70, -33, 63, 17, -123, -48, 97, -120, 11, -52, -31, 40, -125, 27, -18, -64, 81, 50, -44, 76, -25, -29, 103, -124, -49, -89, 52, 125, -21, -66, 107, -105, 88, -86, 111, -124, 17, 10, 110, 41, -59, -100, 29, -23, 32, 87, 87, -46, 121, 110, -16, -39, 47, -48, -71, -105, 114, -119, 73, -23, 12, 69, -2, -111, -21, 11, -111, 3, 104, -79, -1, -26, -94, 12, -25, 29, 121, -76, -109, 4, -22, -71, 110, 95, 16, -75]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "A704EF605698938B967D9EA3C7AED48CC00DBB72E6216DF70223BADF3F1185D061880BCCE128831BEEC05132D44CE7E36784CFA7347DEBBE6B9758AA6F84110A6E29C59C1DE9205757D2796EF0D92FD0B997728949E90C45FE91EB0B910368B1FFE6A20CE71D79B49304EAB96E5F10B5" + "'", str40, "A704EF605698938B967D9EA3C7AED48CC00DBB72E6216DF70223BADF3F1185D061880BCCE128831BEEC05132D44CE7E36784CFA7347DEBBE6B9758AA6F84110A6E29C59C1DE9205757D2796EF0D92FD0B997728949E90C45FE91EB0B910368B1FFE6A20CE71D79B49304EAB96E5F10B5");
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey32);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("25440C689F3AAFDB9B742DF1EB274637FE5D844A221814EFA4D50703B556CAED26C3213BA7272673FACC1C3EDFECD5D0", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("D173166EDDD482FE398628FBD3CFEB846FC2F62619BB84365AB4D7B275030FAB8B9BED78294C4D0D6779E2F2248978CD", secretKey32);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[50, -123, -15, -104, -80, -22, 70, 4, -19, 83, -66, 2, 82, 29, -37, 21]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-48, -27, -10, -48, -51, 16, 53, -122, -66, 73, 104, -6, -4, 26, -113, 84]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-4, -50, 29, 8, -49, -86, 16, -71, 126, 57, -83, -29, 77, 78, 43, 117]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[89, 112, 16, 98, -33, -11, -61, 86, 6, 98, 75, -16, 41, -67, 75, -88]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[2, 117, 7, -3, 103, -45, 24, 61, 34, 68, -105, 17, 59, 42, 41, 12]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-122, 105, -46, -62, -57, -96, -29, -5, 8, -83, -44, 71, 11, 73, -94, 23, 57, -53, -25, -48, 66, -41, 109, -23, -86, 120, 40, -101, 81, 106, 75, -80, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[7, -124, -57, 49, 50, -37, -26, 125, -4, -107, -26, -103, -98, 102, -1, 60, -2, -111, 47, -48, 65, 70, 52, -126, -107, -3, 55, -83, -39, 116, -74, -39, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[22, -72, -58, -116, -41, -78, -49, 57, 67, 77, 81, -49, -48, -103, -79, -43, -107, -34, 48, -72, 44, -23, 97, 20, -115, 20, 19, 61, -118, -71, 49, -98, 99, 95, -99, 23, 27, 97, -24, 18, -93, 21, 105, -103, 92, 75, 26, -49, -11, 31, 66, 18, -92, 118, 99, -60, 45, 18, -42, -127, -126, -14, 74, 83, 17, 57, 63, 14, 124, 69, 43, 92, -57, -70, -125, 20, 125, -46, 61, -40, 107, 127, 86, 56, -12, -102, 86, 126, 96, -116, -94, 43, -45, -62, -14, 83, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-116, -89, 74, -71, 86, 9, 21, 101, 58, -55, -16, -69, 22, 8, 65, 120, -128, -121, -79, 115, -68, -94, 18, -7, -67, 3, 17, -24, 42, 107, 22, 27]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[11, -82, 97, -110, -17, 113, 44, -70, 26, -118, -15, -37, 69, 86, -63, 49, -56, 34, 27, 50, -59, -60, 125, -34, -57, -92, -60, -46, -46, -18, -58, 76, 63, -60, 42, -119, -124, 69, 57, -26, -36, 2, 8, -55, -27, 19, -46, 52, 85, -26, 71, -73, 10, 6, 8, 8, -10, 28, -70, -38, -98, 118, -91, -65, 111, 48, -10, 122, -109, -69, -40, 49, -29, -72, -67, -36, 12, -38, -106, 107, -51, -26, -81, 99, 119, 30, 43, 121, 11, 105, 17, 63, -117, 47, -61, 39, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-41, -116, 2, 61, 74, 127, 78, -13, 122, 11, 63, 43, -66, 71, -26, 26, -93, 38, -58, -9, -49, 121, -123, 97, -50, -123, 123, -102, 11, -31, -112, -1, -18, -11, -101, -29, 29, 11, 52, -87, 124, 1, 17, -87, 72, -94, 77, -36, 99, -60, -19, 93, -1, 2, 46, 23, 29, 121, -45, -34, -43, -115, -116, -11, -41, -62, 104, -88, -107, -22, 125, 72, 73, -56, 55, 63, -100, 45, -26, -35, -1, -126, -58, 48, 94, 35, -79, -48, -105, 41, 23, -74, 57, 81, 83, -88, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-56, -98, -21, -55, -35, -7, 24, -94, -115, -14, -64, -59, -6, -79, 94, -63, 89, -128, -2, -72, -64, 120, -27, -44, -123, 112, 84, 67, -127, -108, 1, -79, 115, -83, 76, 105, -69, -73, 86, 46, -111, -69, -49, 12, -112, -58, 34, -26, 62, -57, 97, -28, 48, 70, -28, 38, -100, -14, 15, 93, 61, -60, -107, 76, -127, -87, -58, 94, -76, -7, 86, -106, 7, 9, 15, -123, 45, 125, -86, 85, 60, -48, 20, -39, 56, 85, 54, -124, 117, -92, 40, -100, -32, -42, -62, -73, 40, 40, -123, -113, -115, -74, 95, -69, 116, -126, 114, -126, -25, 123, 90, -19]");
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey21);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey59);
        byte[] byteArray61 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey59);
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey59);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey59);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey59);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey59);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey59);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey59);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey59);
        java.lang.Class<?> wildcardClass70 = secretKey59.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[21, -76, -111, -43, 95, 3, 62, -33, -16, -98, 19, 52, -70, 68, 5, 40]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-91, -81, 16, -3, 93, 62, -62, -90, -120, -27, -65, -120, 88, -80, -71, -62]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[30, 7, 94, -51, 38, 7, 71, 120, -52, 28, 49, -28, 78, 22, -71, 72]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-17, -98, 24, -117, 126, 28, -97, -35, -51, -58, -9, 53, 29, -49, 73, -109]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-36, 57, -54, 120, 63, 93, -92, -81, -25, -39, -54, -110, -109, 12, 29, 95, 73, 38, 121, 39, 6, 34, -108, 58, -2, 124, 96, -58, 119, 27, -80, -3, 30, 7, 94, -51, 38, 7, 71, 120, -52, 28, 49, -28, 78, 22, -71, 72]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-7, -28, -79, 24, -90, 34, 49, -76, 61, 113, -68, 109, 6, 115, 116, -6, -79, 81, 31, 91, -98, 60, -76, -113, -88, 35, -85, 36, 23, 7, 73, 96, -36, 102, -41, -22, -13, 53, -93, -9, -27, -66, -15, 66, -53, -92, -102, 80, 60, 55, 60, -98, 110, 110, 117, -79, 17, 17, -121, -36, -39, -53, 93, -26, 20, 89, 79, 60, -29, 24, 108, 102, -77, -12, 20, -37, -34, 69, -59, -83, 11, 85, 103, -63, -55, -107, -54, -31, 38, 119, 125, -41, -39, 125, -124, -4, 30, 7, 94, -51, 38, 7, 71, 120, -52, 28, 49, -28, 78, 22, -71, 72]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[62, 38, -44, -14, -123, 101, 9, 23, -43, -62, 114, -93, -117, -112, -83, -121]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-13, 84, 111, -80, -20, -54, 81, 88, 124, -95, -1, -44, -2, 18, 89, 114]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[88, -69, 98, 111, 30, 72, -78, -71, -120, 16, -65, -112, -27, -64, -21, 101]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[70, -59, 103, -80, -52, -98, -122, 15, -83, -80, -41, -61, -9, 78, 50, 28]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-107, -5, 64, -42, 123, 61, -57, -100, -3, -42, 104, 69, 46, -113, -80, -16]");
        org.junit.Assert.assertNotNull(byteArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[-101, -3, -86, 53, 42, -110, 126, -65, -18, -90, 125, 3, 104, -48, -93, 99]");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-101, -3, -86, 53, 42, -110, 126, -65, -18, -90, 125, 3, 104, -48, -93, 99]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[109, -109, 118, 126, -72, 95, -107, 105, -107, -61, -8, 5, 125, -32, 104, -83, -27, -113, 7, 26, 44, -62, -80, 8, -119, -41, 118, 86, 30, -109, -72, 68, 123, 31, 44, 73, -79, -57, -119, 92, 18, 123, -113, 124, 11, -80, 44, -73, -61, 62, -67, -50, 44, 103, 4, -53, 27, 120, -83, -110, 119, 79, 3, -33, 112, -61, 83, 45, 13, 107, -7, 34, 87, -7, -46, 35, 83, -122, 58, 58, 13, 98, 78, 114, -108, -101, 122, -57, -76, 81, 73, 2, 35, -52, -15, 72, -107, -5, 64, -42, 123, 61, -57, -100, -3, -42, 104, 69, 46, -113, -80, -16]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[100, -120, -67, -69, -110, -34, 101, -94, -72, 38, -29, 54, -74, -81, 34, 27, -23, 32, -102, 11, -4, -96, 52, 83, -92, 119, -64, -113, -71, -25, -46, -60, -107, -5, 64, -42, 123, 61, -57, -100, -3, -42, 104, 69, 46, -113, -80, -16]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[90, 53, 66, 77, 106, 32, 58, -75, -2, -49, -75, 89, -71, 120, -120, 65, -83, -121, 67, 71, -123, -123, -35, -12, 95, -107, 84, 100, 82, -125, 54, 10, -107, -5, 64, -42, 123, 61, -57, -100, -3, -42, 104, 69, 46, -113, -80, -16]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-28, -9, 33, 67, -20, -82, -14, 50, -125, 54, 97, -80, 45, -52, -114, 57]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB83F328EFDE9D9B3886CB70930AC21C48FDA9DC95096A2295D60D57C78EFD8FFE90887174DD3B7D771EEA3F9DCC0254", secretKey2);
        java.lang.Class<?> wildcardClass5 = byteArray4.getClass();
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[50, 71, -44, -69, 90, 8, -60, -19, 60, 93, -74, 0, 18, 9, 11, -50]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[76, 35, -45, 77, -17, -67, -18, -12, -102, 118, 93, 117, -6, 18, 98, -25, 96, -91, 79, 16, 96, 101, -105, 12, -120, 8, -70, 41, 114, 121, 58, -11, -107, 117, 119, 89, -24, 94, 92, -109, -50, -3, 59, -34, 18, 114, 67, -87, -97, -12, -35, 47, -34, -11, -75, 13, 79, 77, 118, -124, -38, -3, 103, -62, -121, 102, -21, -11, 120, -79, 117, -85, 105, 39, -119, 3, 80, 32, -121, 102, -65, 73, -35, -107, 80, 69, -122, -116, -37, -38, 81, 27, 16, 101, -31, 29, 50, 71, -44, -69, 90, 8, -60, -19, 60, 93, -74, 0, 18, 9, 11, -50]");
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[82, -9, -9, 5, 100, 97, -64, 50, 106, -97, -61, 53, 73, 32, 102, 52]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-93, 82, 126, 114, -15, 79, -91, -6, 96, 49, -31, -27, -64, 127, -98, 102]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-76, -69, 86, -70, -50, -29, -88, -29, 94, -62, 100, 70, 36, 92, 116, 84, -100, 31, -44, 3, -77, -84, 57, 124, -23, -90, 112, 120, 34, -110, -69, -71, 82, -9, -9, 5, 100, 97, -64, 50, 106, -97, -61, 53, 73, 32, 102, 52]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[44, -108, -80, -90, -117, -47, 72, -23, 39, 5, 61, 7, -8, -61, 42, 21, -42, 32, 67, -18, 59, 43, -82, -38, -34, 98, -107, 77, 64, 98, 54, -119, 88, 62, -112, -120, -106, 121, 92, 85, 111, 57, -18, -8, -4, 60, 109, -3, -57, -10, 86, -102, 7, -24, -35, -122, -121, 2, 75, 7, 86, -88, -21, -26, 82, -9, -9, 5, 100, 97, -64, 50, 106, -97, -61, 53, 73, 32, 102, 52]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2C94B0A68BD148E927053D07F8C32A15D62043EE3B2BAEDADE62954D40623689583E908896795C556F39EEF8FC3C6DFDC7F6569A07E8DD8687024B0756A8EBE652F7F7056461C0326A9FC33549206634" + "'", str9, "2C94B0A68BD148E927053D07F8C32A15D62043EE3B2BAEDADE62954D40623689583E908896795C556F39EEF8FC3C6DFDC7F6569A07E8DD8687024B0756A8EBE652F7F7056461C0326A9FC33549206634");
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("84307F73E77F01B6362A876770A1520C", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey10);
        java.lang.Class<?> wildcardClass18 = secretKey10.getClass();
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[96, 81, 2, -21, -89, 120, 8, 17, 47, -90, 4, -103, 88, -17, -5, 76]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[88, 4, -91, -25, -24, -54, -71, 64, -56, 36, -112, -91, -10, -114, -94, 48]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-91, 70, 58, 40, 48, -125, 43, 9, -5, 42, -93, -30, -27, 27, -60, -63, 100, 90, 62, -114, 19, 31, 47, 57, 77, -87, 20, 57, 125, -45, -73, 98, -86, 10, -54, -121, 73, -64, 27, -120, -44, 62, 101, -26, -96, 103, -53, 5, 122, -11, -1, 123, 8, -7, 23, -104, -86, 105, 37, 64, -62, 93, 46, 117, -82, -32, -91, 38, 87, -127, -73, 88, 34, 94, -58, 107, -32, 51, -24, 100, 86, -114, 41, -125, 56, -74, 38, 115, -4, 58, -83, -45, -122, -114, -126, 39, 96, 81, 2, -21, -89, 120, 8, 17, 47, -90, 4, -103, 88, -17, -5, 76]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[118, -106, 82, 119, -32, -99, 66, 21, 95, -21, 121, -34, 47, -126, 43, 114, 55, 61, 68, -126, 39, 98, 125, -66, -35, -10, -72, -85, 65, 92, 110, -80, 96, 81, 2, -21, -89, 120, 8, 17, 47, -90, 4, -103, 88, -17, -5, 76]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-19, 99, -25, -31, -46, -114, 13, 124, -47, -33, -84, -13, 3, 44, 113, -71, -35, -112, 118, -13, -75, 42, 110, 89, -52, 40, -50, 72, 32, 102, -33, -98, 96, 81, 2, -21, -89, 120, 8, 17, 47, -90, 4, -103, 88, -17, -5, 76]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-4, -104, -111, -36, -85, -66, 18, 116, 23, -29, 77, -117, -46, 67, 7, 15, -58, -95, 79, -1, 28, -94, -53, 74, -61, 46, -44, 42, -92, -27, -124, -16, 96, 81, 2, -21, -89, 120, 8, 17, 47, -90, 4, -103, 88, -17, -5, 76]");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("151E246784C29628F4695AB03B1F235562577D5FE3EC39FB32375B2E74C325F73F98634CD583D304E84E0F4F333ADE0E", secretKey17);
        java.lang.Class<?> wildcardClass23 = secretKey17.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[37, 52, 94, 85, -108, 100, -58, -29, -32, -74, -116, -30, 3, 98, -76, 60]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[16, -6, 63, 106, -57, 51, 114, -120, 65, -115, -64, -107, 96, 113, 6, -76]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-71, 121, -84, -76, 42, -45, 32, -8, -88, 4, -43, 35, -115, 108, 79, -97]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-54, 71, -10, -60, 10, -119, 30, -103, -39, -38, -47, 14, 48, -40, -36, -69]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[61, 110, -72, -27, -43, -122, -73, -84, 125, 92, -82, 126, 74, 96, 37, 9, 64, 5, -100, -19, 2, -92, -32, -56, 16, 38, -33, 1, -88, -94, -34, -56, -87, -40, 46, 93, -55, 15, -110, 2, 60, -113, 82, 127, -95, -87, -43, 65, 44, 37, 12, -17, 6, -35, 23, 44, 46, -52, 92, 71, 88, 15, -43, -2, 126, 48, 71, 101, 63, 57, -80, -72, -3, 80, -81, -20, 10, -32, 72, 41, -20, 122, -110, -72, 36, 67, -55, 53, 105, 5, -22, 12, 98, -43, -111, -28, -71, 121, -84, -76, 42, -45, 32, -8, -88, 4, -43, 35, -115, 108, 79, -97]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey5);
        java.lang.Class<?> wildcardClass11 = byteArray10.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-33, -47, 20, 27, -127, -29, -14, -33, -83, 45, -7, 123, -80, 71, -97, 47]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-35, -5, -1, -5, 57, -56, 81, 123, 45, 64, -5, 17, 34, 99, 126, -48]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-64, 59, 91, 115, 120, -110, -20, -58, -68, 28, 110, -124, 81, 63, -52, 55]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-33, -47, 20, 27, -127, -29, -14, -33, -83, 45, -7, 123, -80, 71, -97, 47]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-70, -66, 71, 32, 114, -8, 49, 41, 29, 77, -60, 25, -95, -72, -34, 10, 61, 125, 62, -3, 118, -16, -127, -5, -27, -99, 123, 98, -23, -125, -92, -42, -51, 12, -22, -100, 58, -100, -6, 64, 88, -126, -3, 72, -100, 85, 80, -56, -105, 85, 13, 23, 5, 6, 49, 10, -17, 53, -115, 90, 45, -77, -76, -65, -52, -100, -47, -23, 125, 36, 68, 127, -72, 11, -69, 22, -37, 94, 104, -47, 15, 97, 42, 55, -72, -102, -69, -89, 93, -88, -23, 65, -65, 81, 44, -109, -33, -47, 20, 27, -127, -29, -14, -33, -83, 45, -7, 123, -80, 71, -97, 47]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("AF95819EC94A1C4FD01986D2BD1962EEDEAAE2AB37C8019EEACC57BB70BA70541B5D39E57EE221758AED6DE3C83EF16F", secretKey17);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-120, -113, 42, -24, 127, 115, 41, -112, -35, 42, -31, 117, 121, 14, 49, -91]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-42, 74, 116, -94, 100, -18, -81, -20, -9, 118, -38, 76, 27, 16, -20, -74]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-86, -31, -71, -3, 59, 121, -116, -27, -80, -22, -106, -81, -74, 98, -114, -52]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[45, -56, -79, -81, -70, -2, -62, -87, 74, 106, 73, 35, -39, -34, 39, -106]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[73, 86, 46, 22, -71, -6, 4, -29, -103, 8, 57, -111, 34, 79, -66, 66, 112, -22, -100, 46, -121, 16, -101, -107, 45, 101, 32, 60, -99, 111, -20, 63, -53, 121, 81, 59, -118, 62, 50, -43, 69, -82, -6, 80, 112, -68, 103, 126, -32, 82, -83, 28, -60, 15, 34, 93, -44, -95, 61, -103, -121, -106, 13, 85, -36, -15, -64, -83, -90, -128, 68, 102, -107, -7, -118, -32, -9, 115, 111, -8, 42, -51, -109, 5, -4, 109, -93, -87, 127, 85, 71, -60, -46, -16, 93, -54, -86, -31, -71, -3, 59, 121, -116, -27, -80, -22, -106, -81, -74, 98, -114, -52]");
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey6);
        java.lang.Class<?> wildcardClass12 = byteArray11.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[12, 55, 14, -22, 33, -3, -98, 65, 106, 90, -85, -61, 86, -122, 45, -30]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[74, 39, 64, -7, 87, 20, 74, -84, -63, -2, 1, -54, 56, -13, 107, 66, 32, 119, 86, -30, -101, -121, 88, -19, 49, 91, -41, 46, -97, -75, 38, -47, 53, -20, -20, 98, 31, 88, 86, 53, 23, 47, -52, 106, -90, -14, -39, 125, 108, 81, 100, 13, -76, -11, 4, 106, -106, 126, -36, 65, -109, 36, 114, 68, -88, -103, -93, -128, -76, 20, -86, -100, 7, 122, -10, -121, -55, -105, 116, 5, 80, 115, 58, 27, -79, 46, -62, -108, 97, 93, -10, 106, -21, 106, 3, -39, 12, 55, 14, -22, 33, -3, -98, 65, 106, 90, -85, -61, 86, -122, 45, -30]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[124, 74, -41, -17, -84, -40, -45, -18, 8, 104, -48, 2, 22, 77, 103, 43, 85, 1, -23, -17, 123, 2, 104, -120, 59, -3, -33, 27, -120, 27, -103, 57, -65, 80, -95, -103, 68, -105, -95, -61, -26, -65, 50, -11, 63, 35, 5, -58, -14, -3, -3, -71, 8, -47, 98, 37, 120, 29, 49, -102, -1, 42, -114, 58, 12, 55, 14, -22, 33, -3, -98, 65, 106, 90, -85, -61, 86, -122, 45, -30]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-99, 45, -83, -14, -83, 3, -57, -5, 91, 127, -58, -94, 116, 116, 37, 87, -58, -37, -67, 91, 61, -41, -122, 39, 14, 16, 84, 13, -27, 90, 120, 67, -70, -122, 60, -63, 62, -126, 86, 41, -87, 70, 2, 55, -117, -17, -19, 126, 0, -119, -32, 70, -115, -29, 24, -37, 28, 52, 76, -52, -116, 17, -24, -15, 12, 55, 14, -22, 33, -3, -98, 65, 106, 90, -85, -61, 86, -122, 45, -30]");
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("1FE9CDFB68A6E115AFFC272D390A8106F61DF2A13E15879CD7CF74DF7E07438DBA95AF370A18E180E8BC927338787814", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[92, -56, 119, 76, -109, 127, -11, 74, -36, -32, 40, 15, 45, 115, 104, 55]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-55, 16, -32, -10, -57, 112, 62, -24, -127, 38, 5, -47, -11, -43, -16, -8]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-55, 16, -32, -10, -57, 112, 62, -24, -127, 38, 5, -47, -11, -43, -16, -8]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[102, -41, 32, -86, 75, 65, 73, 127, -67, -119, 108, 70, 41, -51, -52, 113, -114, -12, 107, 107, 104, 103, 2, -76, -27, -2, -125, -67, 73, -124, 21, 62, 118, -54, 112, 1, -123, 95, 108, 39, -97, 26, -23, -58, -61, -51, 104, -7, -16, 87, 86, 46, 98, -44, -120, -19, 111, -108, -100, -28, 21, -37, -78, -76, -65, -47, 99, -6, -96, 74, 107, 37, 121, -86, 87, 36, -101, 104, -44, -66, -21, 107, -78, -41, 29, -32, -106, -118, 19, -53, 123, -35, -7, -7, 78, -54, 92, -56, 119, 76, -109, 127, -11, 74, -36, -32, 40, 15, 45, 115, 104, 55]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[86, -87, 125, -102, 127, 115, 47, 82, -91, -107, 74, 72, 116, 42, 109, -49, 37, -34, -93, 67, 54, -26, 9, 66, 88, -42, 33, -40, 107, -112, -20, -113, 92, -56, 119, 76, -109, 127, -11, 74, -36, -32, 40, 15, 45, 115, 104, 55]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-89, -12, 92, 114, -116, -50, 37, -44, 90, -128, 73, 105, 43, -114, -9, -15, 47, 126, 4, 54, -61, 29, -61, -6, 76, -46, -19, -14, -39, -93, -119, 74, -7, -3, 96, 115, 120, 57, -102, -92, 39, 86, 104, 37, 63, -108, -26, -98, 110, -109, 124, 86, 114, 108, 64, 74, 33, 44, -80, -67, 22, -20, 67, -46, 99, 27, 66, 55, -127, 81, -121, -117, 86, 90, -113, -35, 80, 44, 13, -30, 103, -116, -4, 75, 109, -33, -3, 36, 126, -75, 6, 5, 8, -42, 45, -80, 92, -56, 119, 76, -109, 127, -11, 74, -36, -32, 40, 15, 45, 115, 104, 55]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "A7F45C728CCE25D45A8049692B8EF7F12F7E0436C31DC3FA4CD2EDF2D9A3894AF9FD607378399AA4275668253F94E69E6E937C56726C404A212CB0BD16EC43D2631B42378151878B565A8FDD502C0DE2678CFC4B6DDFFD247EB5060508D62DB05CC8774C937FF54ADCE0280F2D736837" + "'", str13, "A7F45C728CCE25D45A8049692B8EF7F12F7E0436C31DC3FA4CD2EDF2D9A3894AF9FD607378399AA4275668253F94E69E6E937C56726C404A212CB0BD16EC43D2631B42378151878B565A8FDD502C0DE2678CFC4B6DDFFD247EB5060508D62DB05CC8774C937FF54ADCE0280F2D736837");
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("0A39292F16D03B443BA547DD347777DCBB1D9210FD384B9C8D28DAB99828D695B032B5F4E791555D97F0B1D630EE8DBC0C74A3BFF8815971E838F11E93B065A23755540F3426004B78A71FC390215AB7DCF839AC6F68D9031200188C7BD81B0B4C0B458A93FB1BD51A75A779BB092338", secretKey19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-115, -59, 93, -21, 93, 98, -61, -63, 9, -27, -62, 64, 70, -26, 4, -28]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[8, 14, 71, -59, -16, -79, -91, 29, 16, 2, -14, -92, -22, 48, -44, 101]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-73, 86, -29, -69, 53, -102, -94, 99, -60, -22, -71, -103, -6, 34, -21, -119]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[88, -52, 49, -115, 28, -42, -124, 3, -54, 104, -44, 121, 38, -82, 26, -88]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-13, -75, -62, 43, 121, -79, -109, 85, 63, 87, -87, -116, -12, 101, -7, -24, 84, 24, -13, 11, 68, 0, -53, -8, 75, 0, 122, -37, -4, 70, -27, -19, -73, 86, -29, -69, 53, -102, -94, 99, -60, -22, -71, -103, -6, 34, -21, -119]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[6, 26, -46, -21, -9, 28, 100, 79, -23, -106, 41, -21, -22, 101, -2, 8, -111, 83, -108, 32, -76, 48, -116, -62, 104, 43, -123, -124, 54, -5, 44, -123, -73, 86, -29, -69, 53, -102, -94, 99, -60, -22, -71, -103, -6, 34, -21, -119]");
        org.junit.Assert.assertNotNull(byteArray26);
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("EA1D56E4605E5ABE05F8883E0296A54B", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-19, 123, -78, 50, -38, 57, 124, -113, 71, -77, -89, 45, 86, 14, -74, -14]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-19, 123, -78, 50, -38, 57, 124, -113, 71, -77, -89, 45, 86, 14, -74, -14]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[25, -76, -10, 81, -33, 34, 108, 35, 74, 49, 7, 32, -41, -43, 125, 112]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-127, 11, -12, 114, -32, 45, -24, -55, 8, -106, 7, 103, 26, -13, 68, 81, 124, 32, 90, -15, -46, 6, -125, -73, 15, 80, 54, -21, 111, 83, 78, 113, 87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[22, 108, 30, -27, -7, 70, -86, 20, -52, 119, -102, 79, 25, -74, -75, -110, 49, 55, 90, 65, -33, -49, -97, 112, 75, -3, 30, 118, -111, 46, 14, -82, 87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-19, -113, 102, 99, -27, 36, 52, -111, 30, -11, 5, -40, 67, 59, 42, -46, -49, -12, -98, 49, 52, 74, 13, 61, -2, -37, 14, -107, 83, -5, -24, -20, 87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[58, -108, 15, 75, -92, -17, 27, 20, 39, 44, 114, 31, 114, 65, 107, -18, -112, -92, 123, 2, -110, -99, 9, -75, -114, -27, 23, -113, -49, 125, 84, 56, 87, 66, 52, -62, 92, -126, 96, 101, 35, 14, 20, 77, -53, -127, -81, -36]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey34);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey34);
        byte[] byteArray40 = new byte[] {};
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey50);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey50);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray40, secretKey50);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey50);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey50);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("8D9F506B30CCE6B62EBF9B64F0992057C10E407219EEDD70EC49774B7C9F70239C3C95BF74E2A083430F7CB1E3AFDF63E2370AF259FB9C3696A1D737BBDF1FBC0978F1E07852013084FA57EBAA655A30F0FDE5B1BCD3A68FAEB800EDDF90D195C93FD30E114BDA30992D58E97207B914", secretKey50);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[119, -81, 16, 40, 39, 106, 6, -12, -20, -62, -60, 126, 15, -43, 73, 54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[103, -44, 14, 10, -17, -66, 58, 91, 89, -1, -69, 93, -8, -12, 71, -42]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-40, 91, 100, 14, 44, 67, 12, 78, -46, -99, -95, 125, -9, 10, 119, 112]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[50, 70, 5, -46, -43, -58, -8, 99, -56, 19, -110, 6, -77, 32, 67, 27]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-36, 124, 1, 12, 108, -85, -62, 36, 119, -7, -106, 68, -103, -74, 8, -114]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, -34, 8, 69, 44, -49, 33, -92, 43, 71, -35, -50, -120, -17, -63, 34]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[111, -34, 8, 69, 44, -49, 33, -92, 43, 71, -35, -50, -120, -17, -63, 34]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-121, -117, 42, 83, 94, -39, 24, 38, 76, 76, -26, 91, 27, -53, 10, 39]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[66, 4, 54, 31, 122, 11, 53, 40, 51, 98, -73, 73, -35, -13, -3, 51, 3, 52, -51, -59, -43, -45, -73, -40, -79, -112, -109, -101, -51, 92, 36, -104, -91, -30, -109, -96, 47, 70, 103, 35, 95, -20, 71, 37, 64, -47, 41, -74]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-35, -76, -39, 63, -22, 124, 115, 32, -34, 108, 98, 71, 106, -42, 77, -5]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-91, -111, -45, -82, -85, -96, -67, 14, 84, 95, -116, -61, -65, -47, 108, -18]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-82, -65, 121, 105, -126, -74, -33, -62, -22, 54, 86, -37, -48, 0, -81, -23, 126, 69, -114, -120, 75, -20, -18, -124, -88, 12, -70, 5, -96, 94, 23, -10, 3, 39, -112, 42, -72, -60, 23, -57, -13, 33, -22, 76, -41, -126, 115, 116, 7, -78, 10, -127, 121, -41, 30, 122, 108, -24, 70, -63, -23, -73, 50, 110, 94, 119, 37, -1, -83, -122, 78, 59, 80, -1, 98, -12, 45, 116, -78, 2, 114, -101, 111, -16, -2, 88, 108, -9, 72, -67, 84, -119, 55, -9, 34, 41, -35, -76, -39, 63, -22, 124, 115, 32, -34, 108, 98, 71, 106, -42, 77, -5]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-71, -16, 126, 39, -78, 64, -65, -97, -19, 79, 90, 24, -59, 115, -61, 48, 126, 56, 18, 11, 37, 102, 84, 121, -128, 31, 12, 5, 65, -26, 68, 46, -111, -116, 89, 18, 61, 33, 91, -87, -121, -84, -52, 19, 124, -104, 88, 56, -71, -94, -107, 21, -87, 94, -17, -118, -45, 120, -79, -128, -117, 105, -83, 14, -54, -12, 97, -74, 22, -19, -78, 44, -53, -16, 52, -69, 34, 104, -37, 38, 110, 122, 58, -8, 58, 53, 48, -14, 106, 44, 119, -21, -39, 55, 53, 57, -35, -76, -39, 63, -22, 124, 115, 32, -34, 108, 98, 71, 106, -42, 77, -5]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[28, -30, -69, 113, 23, -40, 127, -98, 116, -111, 124, -59, 20, 76, 7, -5, 96, -30, 0, 88, 70, 33, 99, -86, -35, 58, 115, -35, 48, 71, 85, 34, -35, -76, -39, 63, -22, 124, 115, 32, -34, 108, 98, 71, 106, -42, 77, -5]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey23);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("84307F73E77F01B6362A876770A1520C", secretKey23);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[24, -124, -124, -111, -81, -2, -18, -54, 29, 47, -54, 42, -22, -44, 101, -21]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[115, 111, 53, -27, 42, 123, 104, -96, -59, 112, -58, -5, 35, 71, -116, -11]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[35, 78, 74, -3, 0, -102, -47, -51, -29, 3, 67, -121, -101, -125, 26, 47]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[42, -116, 99, 47, -1, 116, -103, 117, 127, 47, -5, 61, -8, 99, 30, -86]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[49, -107, 45, 75, 7, -45, -123, -3, -109, 51, 66, -62, 17, 54, -110, -98, 46, -17, 85, 88, 59, 26, -113, -20, 84, -69, 33, -96, -9, 23, 62, 71, -20, -20, 51, -32, -47, 119, -23, -95, 60, -23, 102, 43, -108, -113, 45, -29, -90, 81, -71, -9, 125, 113, 106, -47, 92, 98, 66, 59, 3, -70, -13, 54, 28, 94, -93, 89, -61, 116, -9, -97, -9, 6, -96, 91, 11, -114, 108, -6, -105, 49, -96, 121, -32, 94, 96, -24, -107, 18, -94, 1, 23, -61, -59, 67, 35, 78, 74, -3, 0, -102, -47, -51, -29, 3, 67, -121, -101, -125, 26, 47]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-31, 88, 61, -125, -4, 40, 49, 66, 127, -24, 103, 92, -79, 1, 31, -30, -26, -127, 43, 122, 60, -66, 112, 63, 34, 70, -33, -94, 54, -28, -108, -104, 23, -42, 32, -73, -88, -2, 111, -113, 90, -59, 106, -87, 28, -34, -93, -128, -51, -106, 18, 101, 28, 8, -72, -72, -45, -108, -6, 39, -78, 16, -77, -88, 32, -17, 5, 115, 66, 96, -112, -102, -108, -34, -36, 102, -19, -35, -57, 28, -117, -14, -56, 41, 68, 12, -77, -17, 2, -14, 98, 101, 87, 84, -109, -38, 35, 78, 74, -3, 0, -102, -47, -51, -29, 3, 67, -121, -101, -125, 26, 47]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[113, 51, -9, -87, -44, -17, -100, 64, 15, -28, 101, -50, -32, -118, -120, -51, -105, -63, -108, 79, 94, -95, -120, -72, 114, -68, 113, -68, 33, 55, 101, 78, 35, 78, 74, -3, 0, -102, -47, -51, -29, 3, 67, -121, -101, -125, 26, 47]");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7133F7A9D4EF9C400FE465CEE08A88CD97C1944F5EA188B872BC71BC2137654E234E4AFD009AD1CDE30343879B831A2F" + "'", str33, "7133F7A9D4EF9C400FE465CEE08A88CD97C1944F5EA188B872BC71BC2137654E234E4AFD009AD1CDE30343879B831A2F");
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[52, -3, 50, -105, 31, 20, -37, -21, 89, 75, -91, -120, 113, -115, -82, -78]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[82, 46, 83, -127, -116, -39, -26, -67, -67, -123, -33, 27, -38, 127, -30, -1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-89, -3, -97, 117, 42, 1, -99, -1, -48, 3, 29, 43, 3, 3, -94, -83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[52, -3, 50, -105, 31, 20, -37, -21, 89, 75, -91, -120, 113, -115, -82, -78]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[9, -21, -77, -17, 13, -85, 102, -114, -77, -33, 98, 78, 115, 98, 13, -54, -24, 17, 57, -36, -96, 120, 47, 41, 125, -21, 53, 53, 113, -18, -102, 53, 52, -3, 50, -105, 31, 20, -37, -21, 89, 75, -91, -120, 113, -115, -82, -78]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[87, 90, -105, -41, -57, -31, -7, -126, -116, -7, -8, -119, -92, 90, -101, -107]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-77, 24, 8, 57, -26, 7, 12, -90, -34, -92, 51, -10, -59, 107, -55, -102]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 113, -45, -46, -121, 63, -57, 27, -72, -111, 43, 80, 91, -116, -93, -87]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[127, -8, -83, 119, 26, -73, 57, -104, 12, -110, -75, 88, -37, 120, -40, -56]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[14, -103, -24, 10, -76, 81, 110, -24, -108, -84, 94, 54, -115, -39, -96, 127, 61, 118, -14, 5, 107, -51, 46, -117, 121, 87, 92, -28, -98, -46, -26, 99, 0, 113, -45, -46, -121, 63, -57, 27, -72, -111, 43, 80, 91, -116, -93, -87]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[38, 110, -83, -122, 16, -123, -15, 34, 111, -78, 112, 7, 32, 4, -79, 32, 48, 29, -95, 41, 11, 43, 98, -90, -90, 98, 40, -61, -68, -124, -9, -53, 0, 113, -45, -46, -121, 63, -57, 27, -72, -111, 43, 80, 91, -116, -93, -87]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9" + "'", str25, "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9" + "'", str26, "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9" + "'", str27, "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9" + "'", str28, "266EAD861085F1226FB270072004B120301DA1290B2B62A6A66228C3BC84F7CB0071D3D2873FC71BB8912B505B8CA3A9");
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey28);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[127, -37, 101, -31, 111, 83, -33, 81, 17, 54, 74, 70, 21, 18, -1, 41]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[40, -23, -27, -32, 121, -74, 3, 52, -84, -50, -21, -29, -88, -102, -108, 126]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-44, 26, 116, 112, 111, -71, -81, 103, 118, -101, -21, 5, 29, -86, -9, -42]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[89, -102, -40, 111, -11, -12, 53, 5, -103, -28, -36, -50, -112, -34, -30, -21]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[95, -78, -25, 12, 17, 77, -33, 114, 81, 7, -116, -117, -3, 58, 76, -45]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-48, 17, 63, -30, 68, -69, 51, 26, 40, 98, 122, -113, -97, -102, 50, 29]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-48, 17, 63, -30, 68, -69, 51, 26, 40, 98, 122, -113, -97, -102, 50, 29]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-17, -121, -39, 47, -124, 126, -104, -19, 23, 69, -118, -5, -33, -114, -9, 50, -31, 109, 7, -77, 84, 39, -99, -85, 104, -104, 64, -98, -128, 80, -101, 30, 98, 90, -17, 122, -78, -43, -10, -86, -93, -20, 80, -104, 84, -116, 105, 110, -61, -39, -73, 76, -103, 8, -62, -120, 78, 124, -10, 111, 71, -119, -15, -10, 116, 33, -97, 41, 78, 32, -71, 118, 64, 93, 48, -94, 28, 8, 49, -63, 60, 82, 15, -74, -51, -19, 111, 107, 46, 42, -71, 54, 119, -128, -80, 120, 95, -78, -25, 12, 17, 77, -33, 114, 81, 7, -116, -117, -3, 58, 76, -45]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[71, 7, -27, 124, -7, -99, 20, -80, 3, -76, 83, -9, -124, 16, 18, -108, -18, 88, -60, 112, -78, -57, 52, -73, -101, -58, 43, 98, -12, 71, 75, 113, 95, -78, -25, 12, 17, 77, -33, 114, 81, 7, -116, -117, -3, 58, 76, -45]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[51, 10, 71, -91, -30, 23, 10, 82, 28, -115, -4, -109, 67, -92, 37, 119, 33, -45, -123, -72, -91, 69, 6, -100, -108, 17, 113, -98, -2, 46, -47, 91, 95, -78, -25, 12, 17, 77, -33, 114, 81, 7, -116, -117, -3, 58, 76, -45]");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-28, 66, 101, 101, 47, -46, 53, 0, -56, 106, 9, 49, -111, -94, 117, -82]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[13, -26, 114, 81, -119, -68, 12, -110, 42, -20, -80, -58, 36, 7, 27, 42]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[13, -26, 114, 81, -119, -68, 12, -110, 42, -20, -80, -58, 36, 7, 27, 42]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[59, 88, 83, 46, -21, 92, 77, 59, -59, -79, -70, -68, 32, -113, 88, 72, -5, 64, 26, 106, -104, -44, 116, -120, -109, 84, 123, -40, 101, 8, 17, 28, -61, -21, -15, -113, 101, 23, -16, 119, 100, -91, -31, -123, 16, 69, -24, 85, 72, 111, 15, -81, 56, -81, 64, 124, -54, 34, -52, -47, 99, 34, 17, 21, -49, -52, -114, 105, 8, 72, -66, -81, 57, -104, -1, 96, 44, -122, -109, -6, 77, 29, 118, -5, -68, -109, 65, 93, 27, -89, 107, 19, 83, 65, -102, -40, -28, 66, 101, 101, 47, -46, 53, 0, -56, 106, 9, 49, -111, -94, 117, -82]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[8, 120, 21, 103, -95, -39, -106, 96, 14, -55, 104, -21, 31, 113, 27, -117, -93, 25, -101, -86, 126, -81, -65, 108, -25, -34, 76, 91, -124, -90, -60, 51, 83, 44, -85, -113, 30, 17, -88, -30, 117, -105, 102, 84, -127, 7, 11, -28, 56, -3, -114, -64, 30, 115, 67, -91, 113, -87, 107, -91, -86, -89, 41, 86, -122, 34, -19, 87, -7, -81, 7, 75, 0, 62, -41, 26, -32, -33, 116, -53, -125, 0, -15, 81, -96, 77, -44, 126, 69, 96, -98, -25, -95, -41, -40, -20, -28, 66, 101, 101, 47, -46, 53, 0, -56, 106, 9, 49, -111, -94, 117, -82]");
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey17);
        java.lang.Class<?> wildcardClass23 = byteArray22.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[56, -15, -54, -50, 1, 90, -2, -82, -39, -6, -18, -34, -93, -23, 43, 7]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-72, 21, 70, -1, 45, 49, 37, 57, 82, 57, -68, 13, -38, -90, -107, -117]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-13, -89, -111, 63, -116, 55, 104, -51, 50, 28, -128, -26, -84, -19, -16, 0]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-93, -17, 44, 34, 4, -63, 69, 23, 5, -76, 22, 10, -73, 83, 115, -74]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-120, -62, 34, -47, -91, 14, -36, -20, -70, -45, -81, -48, 17, -93, -99, -48, 8, -23, -2, -98, -9, -100, -24, 44, 90, -50, -18, 40, 78, 113, 34, 91, -13, -89, -111, 63, -116, 55, 104, -51, 50, 28, -128, -26, -84, -19, -16, 0]");
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("2F2860C6FC357E0D6B36B5C115CA66545F03386AD9065AFD258B277E518889BBE499026231269FDA91D029D60DB5E58F", secretKey7);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey41);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[62, -76, -127, -6, 51, 115, -71, -35, -43, -66, -122, 14, -33, 114, -96, -54]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[4, -108, 71, 13, 103, -14, -122, -95, 72, -115, -71, -26, 73, 71, -106, 78, -112, -58, -43, -9, -56, 115, -43, 42, -46, 53, 115, -84, -61, 20, -29, -8, -115, 87, 72, -90, -27, 122, 40, -73, 80, 61, -109, 96, -79, -26, -113, -61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-115, 87, 72, -90, -27, 122, 40, -73, 80, 61, -109, 96, -79, -26, -113, -61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-110, -43, 121, 53, 6, -14, 53, 105, -1, -31, 118, -54, 32, 126, 66, -76, -22, -6, -17, -85, 19, 127, -112, -114, 79, -58, -57, 77, -5, -108, 111, 39, -115, 87, 72, -90, -27, 122, 40, -73, 80, 61, -109, 96, -79, -26, -113, -61]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-70, 112, 14, 56, -44, 123, 84, -119, 110, -128, 116, 51, 83, 101, 72, 123, 90, 28, -121, 126, -2, 105, -41, 28, -115, -23, -95, 29, -38, -83, -13, -45, -115, 87, 72, -90, -27, 122, 40, -73, 80, 61, -109, 96, -79, -26, -113, -61]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-84, -88, -50, 35, 77, -33, -43, 93, -107, -124, 123, -37, 52, -127, -25, -67, -108, -9, 103, -11, 26, 68, -49, 76, 89, 118, 68, 86, 77, -72, -71, -38, -70, 27, 115, -86, 68, 122, -45, -14, -12, -56, 38, -46, -118, 126, -28, -24, -65, 116, -58, -4, -103, 58, -69, 48, -76, 4, -49, 65, -1, -125, 85, -26, 104, -123, 118, 127, -101, -82, 105, 38, -4, 67, 44, 38, -94, -85, 108, -51, -68, 101, 6, -9, -121, 83, -91, -95, -11, -120, 40, 4, 58, -24, -54, -41, -115, 87, 72, -90, -27, 122, 40, -73, 80, 61, -109, 96, -79, -26, -113, -61]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-121, -48, 58, 94, 115, -62, -117, -95, 124, -18, -56, -91, -67, 27, -79, 57]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[19, -42, -20, 45, -112, 54, -124, -33, -22, 105, 64, -52, 109, -109, -1, -124]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-43, -51, 26, 85, -116, 106, -121, 100, 77, -27, -26, 24, 110, -101, -1, 122]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[23, 19, 108, -100, -105, 42, 32, -19, -25, 43, 13, 95, 118, -115, -3, -62]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-67, 47, -71, 36, 68, 91, -47, 105, 1, -65, 89, 106, 117, -79, 3, 26]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[73, 83, -4, 123, -62, 67, 18, 119, -88, -9, -53, -106, 21, 122, 28, 85]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[73, 83, -4, 123, -62, 67, 18, 119, -88, -9, -53, -106, 21, 122, 28, 85]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-67, 47, -71, 36, 68, 91, -47, 105, 1, -65, 89, 106, 117, -79, 3, 26]");
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[79, 42, -106, -19, -7, 95, -103, 96, 41, 115, 111, 121, -107, -29, -83, -100]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[44, 54, -17, -14, 123, 16, -61, 54, 14, -14, -44, 23, -78, -58, -6, 85]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-59, -111, 21, 69, -111, 23, -82, 96, 49, 115, -102, 20, -66, 43, -112, -46]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-81, 98, 16, 0, -47, -60, -18, -18, -35, 51, 69, 64, 118, -50, 126, -79]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[17, -82, 52, 30, -13, -73, 68, 22, 106, -5, -13, 0, 107, -4, 27, 122]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[86, 51, 10, -72, 3, -111, 15, 5, -109, 78, 43, -34, -33, -21, 0, 65]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[86, 51, 10, -72, 3, -111, 15, 5, -109, 78, 43, -34, -33, -21, 0, 65]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[17, -82, 52, 30, -13, -73, 68, 22, 106, -5, -13, 0, 107, -4, 27, 122]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "11AE341EF3B744166AFBF3006BFC1B7A" + "'", str32, "11AE341EF3B744166AFBF3006BFC1B7A");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11AE341EF3B744166AFBF3006BFC1B7A" + "'", str33, "11AE341EF3B744166AFBF3006BFC1B7A");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "11AE341EF3B744166AFBF3006BFC1B7A" + "'", str34, "11AE341EF3B744166AFBF3006BFC1B7A");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "11AE341EF3B744166AFBF3006BFC1B7A" + "'", str35, "11AE341EF3B744166AFBF3006BFC1B7A");
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("EB838DF9F50578D48FFD772D84A349F9E4DB2F17CB00FAAE2C8D9EEFEF300448BFB8461E95D2CDC21A8A178474848103BE6A371AD2081A16E15B81471BC4F8B82BB8E8812E51A1CC557E64A4190FF374FAE170C5FE7496057D3BCCD5CD200FE0C04A91B1239EE4FDC07096DE95038EB0", secretKey23);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("1E21635610417F287F992626DE383A4C", secretKey35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey35);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-125, -66, -84, 71, -13, -62, -37, -122, -110, 66, -62, -22, -71, -49, 103, -14]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-21, -17, -56, 100, -77, -71, 41, -120, -93, -1, -104, 13, 4, 80, 96, 90]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-25, 59, 40, 0, 48, -78, -124, -7, -128, 86, 39, 91, -127, -75, -22, 83]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-20, 99, -9, -102, -44, -73, 73, -99, 62, 14, 5, 25, 107, 118, 66, 69]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[44, 21, 61, -112, 57, 126, 67, -56, 61, -115, 19, 78, 125, 17, 113, 98, 10, -48, 76, -107, 29, -18, -48, -72, 126, -32, 81, 3, 121, -70, 38, 84, -25, 59, 40, 0, 48, -78, -124, -7, -128, 86, 39, 91, -127, -75, -22, 83]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[96, -52, -66, -115, -105, -107, -104, 51, 56, -49, 81, 21, -29, -26, 48, -50, 74, -89, -3, 104, 30, 39, 91, 125, -124, -62, -92, 121, -113, -8, -127, 23, -77, 63, -52, 102, 80, 37, 102, -20, -13, -82, 92, -36, 60, -79, -31, 116, 14, -11, 83, 35, 84, -84, -58, -68, -16, -91, 26, -32, -69, 3, 20, -65, -102, 14, 41, 33, 2, 52, 101, 82, 115, -70, 57, 57, 44, -96, -55, -50, -109, 122, -97, 106, 77, -92, 1, -18, -3, -51, 91, -23, 55, 18, 3, -64, -25, 59, 40, 0, 48, -78, -124, -7, -128, 86, 39, 91, -127, -75, -22, 83]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-84, -33, -119, 113, -115, -24, 86, -119, 47, 126, -95, 74, -38, -99, -28, 2, 114, -30, -64, 40, 0, 111, 97, -47, -105, -128, 81, -126, -76, -63, 52, 17, -63, 115, 47, 101, -27, 95, -58, -78, 23, 64, -105, 29, 22, 3, 106, 57, 72, 110, -60, -11, -91, 106, -81, 107, 103, 68, -107, -110, 12, 98, -97, 9, -11, 93, -53, -117, -53, -17, -120, 46, -71, 28, 110, 26, 80, 122, 92, -67, 43, 51, 57, -128, 45, 82, 30, -14, -24, 95, 51, 18, -124, 75, 104, -68, -25, 59, 40, 0, 48, -78, -124, -7, -128, 86, 39, 91, -127, -75, -22, 83]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "A93257D7CFD1CD98EA6407DBAFD63B8FED5F968EC4BDD0C1FF97801B727233A28C5DD97EE9E742C56E856F3EA976EB955156466E151E1DBE273C8FBE7141DCA43378A9CF78D0F474742F3A46FF37129351CF30A42745E65C63A5DC02DE63CB87A63B3B776AF567369209E65E020D1FD30BC93C55FB26417FDFA93EA8CDFCCB0799ECC6012AD6AFCC83980380270E698F1F58FD5111B3A4721384B09CA7AB2D7C75A7E1C826BE68C3DE864EBBEAA864DF5CE0FF39053608D57484D9CED08577F75CD8F1FD8A07CB1290A32C87FCE5CFB696F19BAB73833B308C34E7359F982EF6E73B280030B284F98056275B81B5EA53" + "'", str33, "A93257D7CFD1CD98EA6407DBAFD63B8FED5F968EC4BDD0C1FF97801B727233A28C5DD97EE9E742C56E856F3EA976EB955156466E151E1DBE273C8FBE7141DCA43378A9CF78D0F474742F3A46FF37129351CF30A42745E65C63A5DC02DE63CB87A63B3B776AF567369209E65E020D1FD30BC93C55FB26417FDFA93EA8CDFCCB0799ECC6012AD6AFCC83980380270E698F1F58FD5111B3A4721384B09CA7AB2D7C75A7E1C826BE68C3DE864EBBEAA864DF5CE0FF39053608D57484D9CED08577F75CD8F1FD8A07CB1290A32C87FCE5CFB696F19BAB73833B308C34E7359F982EF6E73B280030B284F98056275B81B5EA53");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-100, -82, 43, -35, 13, -39, -124, 43, -83, 110, 110, -26, 96, -87, -1, -21, 120, -33, -52, -100, 82, 81, -10, -123, -102, -31, 12, -53, -2, 33, 94, 9, 113, 59, -65, 127, -104, 38, 57, 122, 79, 28, -11, -48, 103, -36, 38, -39]");
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("151E246784C29628F4695AB03B1F235562577D5FE3EC39FB32375B2E74C325F73F98634CD583D304E84E0F4F333ADE0E", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("BFA851FF4111087AB96BB781B50F823677BCDC15F765FCBE204E7CD9D4F3EB021E77AC23461ED6E06EF74D8F915B9F5AF8C4CB759AAA88DE3E792D49926BEDF4D6F45FC0FBBEAF0488EA535C89A83D923CA8D848B8389EC81045F01ABCA58221BF35403414D32B44C3881849CFF97781", secretKey18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-10, 61, 40, -103, -8, -78, -65, -117, -79, 20, -78, 62, 81, -30, -95, 62]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-37, 66, -112, -118, 30, -58, 99, 8, 18, -67, 95, -62, 110, 85, -61, 49]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-95, 63, -99, -7, -29, 49, -23, 68, 76, -39, -102, -50, -48, -74, 11, -30]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[44, -3, 51, 33, 100, 84, 14, -43, -106, -84, 64, -119, -58, 23, 11, -87]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[43, -111, -22, 36, 70, 49, -1, 119, 16, 14, -72, 123, -21, 104, -44, -93, -104, -39, -90, 74, 98, -113, 62, 34, 21, -69, 40, 36, -35, -68, 119, -63, -92, 98, 68, -27, 49, 68, 116, -125, 98, -67, 35, -18, 60, -16, -82, 17, 47, -9, -108, -115, 41, 51, -117, -112, -21, 97, -57, -100, -42, -107, -85, 17, -18, 25, 34, -9, -98, 43, -109, 98, 43, 3, -34, 66, 62, -81, 83, 109, -103, 9, 41, -39, -81, 32, 42, 115, -108, 112, 106, 98, -83, 61, -48, -75, -95, 63, -99, -7, -29, 49, -23, 68, 76, -39, -102, -50, -48, -74, 11, -30]");
        org.junit.Assert.assertNotNull(byteArray24);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("911F57119EB24E767E42E4F6B323A1B64ACC59F689B27E8E3BFDDB32C46328E28973E926473BDF881F9F712F06F4821C", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-61, -66, -76, 104, -5, -25, -17, 113, -111, 20, 116, 6, 104, 127, 101, 97]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-101, 35, -60, 66, 59, -41, 85, -92, -115, -71, 42, 113, 51, -7, -1, 82, -121, 6, -96, 30, 108, 31, -119, 19, -94, 81, -113, 86, -87, 121, 108, 25, 64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-8, 91, -67, 71, -120, -94, 2, -40, -96, 76, -101, -114, 120, -79, 24, -91, -69, 5, 116, -107, -109, 68, -35, -106, -13, 62, -35, 124, 4, 124, 118, -42, 64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-101, 35, -60, 66, 59, -41, 85, -92, -115, -71, 42, 113, 51, -7, -1, 82, -121, 6, -96, 30, 108, 31, -119, 19, -94, 81, -113, 86, -87, 121, 108, 25, 64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[73, 87, -100, 86, 114, 95, -65, 109, 11, -88, -8, 96, -126, -20, 112, 22, -44, 8, -31, -88, -79, -108, 91, -88, -35, 66, -63, -12, -16, -24, -117, 49, 21, -44, 7, 70, 39, -72, 103, 65, 127, 51, -105, -99, -112, -75, -15, -80, -36, -21, 82, 66, 81, -63, 121, 55, 94, -27, 44, -87, -11, -65, -25, 103, 118, 51, 37, 101, 127, 16, -87, 29, -80, -49, -2, 14, -78, 85, -119, -113, -114, 7, -66, -32, -2, -31, 39, -75, -52, 100, 1, 59, 59, -44, 105, -54, 64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[63, -123, -42, 51, 72, 26, -1, -98, -65, 78, 21, -59, 44, 50, -47, -10, 80, -16, -72, 35, 22, -7, 5, -64, -77, 100, 11, -96, -34, -29, 84, 6, 3, 15, -68, 113, 124, -120, 102, -76, -110, -102, 57, 16, 17, 121, 121, 46, 24, -112, 2, -31, 92, 38, 56, -3, 109, -53, -70, 85, 78, 37, -41, 125, 16, 108, -123, -118, 11, -93, 110, 31, -98, -25, 115, 84, 30, -17, 35, 39, -106, 3, -60, -33, 49, -1, 115, -72, 73, 113, -116, -26, -12, -26, -126, -54, 64, 11, -46, -26, 7, -57, -37, -84, 43, 108, 88, 82, 66, 53, -18, -120]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2E533BD2ECBE7C3FD98BEEB2CDC73A98008CF4FF235826BD055BD62D9343972E751000D08D468870B5287928060CDCE316E47E3B3260D60411AFEC55B6D44BE852C069E93A226F44816D2C9A81E41032BB028FE54291F9BC27B63985202205F5A48FA954796D6B93F9814271C4FE6E5A68B8C0F298B1673FEECDCF866AEC7B204674B8742919183AAE96688AF1213C2EC8BBBFA1D9B5AF290685A29B115CE134E134A0C7FAB80583F9C3835484D390BE2811E46D143B52D2B425FF2B5C0237165C060B7A0EC490A9D78F0938CDEB97F99B6BEEDBFC6A5E98BC742E9CA1D1500F400BD2E607C7DBAC2B6C58524235EE88" + "'", str17, "2E533BD2ECBE7C3FD98BEEB2CDC73A98008CF4FF235826BD055BD62D9343972E751000D08D468870B5287928060CDCE316E47E3B3260D60411AFEC55B6D44BE852C069E93A226F44816D2C9A81E41032BB028FE54291F9BC27B63985202205F5A48FA954796D6B93F9814271C4FE6E5A68B8C0F298B1673FEECDCF866AEC7B204674B8742919183AAE96688AF1213C2EC8BBBFA1D9B5AF290685A29B115CE134E134A0C7FAB80583F9C3835484D390BE2811E46D143B52D2B425FF2B5C0237165C060B7A0EC490A9D78F0938CDEB97F99B6BEEDBFC6A5E98BC742E9CA1D1500F400BD2E607C7DBAC2B6C58524235EE88");
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray19 = new byte[] {};
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray19);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey21);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey25);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey25);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey25);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray19, secretKey35);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey35);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey35);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey35);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey73);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey73);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey73);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey73);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey73);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey73);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey73);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("96A2A04D1B84009DBFC722FC08404202556D0443F1622B551E33EC6AEC926AB6220C5A1E905F2CDFB8D5AFC9473CC961", secretKey73);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("CE223CF68EB6FEC359BAEBD15B5C20BFF08B501E10FEA3BCE54D5983D7684D38E2F42735676D95E8E2E342D32712A46F", secretKey73);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey73);
        java.lang.Class<?> wildcardClass87 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[24, -63, -128, -19, -125, -37, 18, -102, -117, -93, -114, 36, -37, 58, -50, 24]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-35, -125, -13, -29, 17, -48, 33, -113, -50, -64, -12, -52, 13, 5, 25, 56]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-3, 11, 34, -63, 115, -48, 23, -52, 65, -89, 92, -56, -34, -69, -70, -81]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[18, 45, 46, -92, 109, 40, -44, 18, 46, 84, -89, -48, 122, 114, 15, -43]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-58, 111, 19, -46, -46, 86, -124, -6, -21, -56, -25, -11, -27, 64, -7, 23]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-20, -61, -85, -119, -64, 107, -22, 116, 1, 78, -3, 26, -102, -17, 104, -89]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-8, -80, 18, 61, -102, -117, -55, 124, 72, 86, -35, -73, 123, 37, 12, -71, 23, 101, 106, -5, -5, -17, 74, 103, 105, 51, 117, -15, 108, 95, 4, -3, -58, 111, 19, -46, -46, 86, -124, -6, -21, -56, -25, -11, -27, 64, -7, 23]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[70, 54, -79, 14, 53, -3, -22, 8, 9, -34, -18, 23, 104, 80, -47, 22, -44, -111, -4, 106, 69, 94, 51, -127, -103, 18, -125, 65, 12, 51, -95, 12, -32, -7, 0, 40, 15, -64, 13, 114, 55, -101, 81, -15, -52, -35, 125, -46, 8, 60, -44, 55, -80, -94, -25, 101, 124, -80, -93, 41, -10, -4, 25, -50, 49, 69, 83, 109, -114, -124, 116, 16, -54, 84, -21, 41, 87, 119, -100, 51, 43, -15, -68, -116, -69, -104, -69, -53, -45, -8, -25, 79, -86, 13, -1, 27, -58, 111, 19, -46, -46, 86, -124, -6, -21, -56, -25, -11, -27, 64, -7, 23]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[116, -108, 65, -21, -14, -118, -122, -51, 45, -114, 45, 119, 33, -118, 43, -46]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[95, -37, 103, 95, -126, 7, -104, 86, 87, 61, -63, -114, -81, -62, -104, -3]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-72, 107, -25, -81, 47, -107, -54, -103, -121, 20, -9, -63, 108, -100, -12, -50]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[117, -112, 60, -45, -17, 124, -7, 25, 2, 72, 72, -57, 13, -44, 73, 48]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-99, -55, -22, 64, -61, 85, -101, 90, -93, 1, -9, -70, 80, 126, 31, -76]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-99, -55, -22, 64, -61, 85, -101, 90, -93, 1, -9, -70, 80, 126, 31, -76]");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-88, -11, -78, -18, -55, 14, -99, 12, 96, 42, 63, -39, 25, 64, -4, -93, 90, 60, 99, 51, -49, 70, 95, -12, 72, -59, -3, -2, -1, -84, -93, -97, -40, -42, -94, 20, -100, -2, -73, -39, -68, 58, 19, -20, -42, -111, 121, -127, -44, 101, 90, -40, 10, 123, -56, 24, 21, 63, -33, 40, 8, 86, 87, -39, -102, 54, 4, 104, -47, -73, 77, 123, -88, 81, 94, -72, 32, 76, 5, 122, 12, -75, -2, -4, 49, -16, 95, 124, -67, 21, -15, -16, 77, 49, -81, 51, -42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-93, 66, -42, 103, 123, -20, -6, 45, 23, 119, 84, -72, -117, -30, 74, 119, 68, -48, -127, 17, 23, 71, 59, -63, 32, 36, 12, 43, 84, -97, 96, -53, -42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-101, -74, -117, -72, -117, -40, 55, 17, -12, -62, 69, 39, -18, -91, 14, 74, -9, -55, 36, -124, 36, -95, -15, 107, 90, -60, -111, 102, -105, -14, -50, 40, -42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[60, 53, 12, -86, -11, 53, -22, -31, -8, 110, -95, 73, -50, 105, -14, -76]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-126, 118, -115, -72, 104, -71, -72, -56, -120, 10, -125, -79, -15, -32, -55, -117, -18, 2, 47, 5, 42, -24, 50, -77, 72, 4, -74, 44, 52, -54, 97, -30, -92, -73, -56, -91, 99, -48, -36, -96, 63, 50, 19, -56, -47, -10, 87, -117, -115, 60, -100, -125, 127, -85, -38, 44, 74, 112, 49, -42, 86, -27, 62, 124, 2, -26, -108, -37, -39, -127, -35, 20, 112, -26, -81, -5, -126, -115, 3, 43, -88, -2, -66, 61, 16, -48, -55, 53, -113, -102, 85, -121, -82, -84, 83, 79, -42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-93, 116, 82, -35, -61, 17, -91, 72, 54, -116, 66, -37, -70, 97, 107, 11, -111, -69, -16, 9, -81, 31, -3, 42, 43, -106, -12, -46, 76, -33, 5, 122, -29, -19, -118, -82, -44, 41, 56, -51, -58, -100, -116, -49, 73, 39, -83, 43, 105, 18, 5, 45, 112, -52, -90, -5, 83, -9, -127, -2, -25, -5, -34, 36, 31, -27, -81, -64, 15, -44, -104, -74, 82, 4, -44, -71, -57, -79, -37, -9, -4, -49, 63, -81, -37, -110, 13, -36, -72, 45, -93, -33, -78, -128, 127, -99, -42, 93, -70, -89, -58, 67, 86, 99, -50, -24, -111, -68, 104, -7, 69, -12]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray48 = new byte[] {};
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray48);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey50);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey54);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey54);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey54);
        byte[] byteArray58 = new byte[] {};
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray58);
        javax.crypto.SecretKey secretKey60 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey60);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray58, secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray48, secretKey64);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey64);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey64);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey64);
        java.lang.Class<?> wildcardClass72 = secretKey64.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[105, -81, 55, 6, -34, 2, 75, -61, 100, 15, 33, -121, -27, 80, -97, -7]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[77, -120, 104, 109, -25, -53, -51, 87, 52, -32, -8, 126, -45, -58, -59, 74]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[6, 39, -74, 1, 36, 58, -26, 100, -83, -64, -58, 103, 18, 36, -76, -98]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-7, -49, -83, -10, -54, 83, -16, -20, 14, 76, -122, -113, 105, -96, -68, -5]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[57, 102, -54, 1, -125, -48, 19, 73, 114, 82, 3, 92, 94, -84, -58, 17]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[40, -17, -105, 72, 69, 75, 98, 113, -7, 37, 82, 116, -20, -48, -79, 98]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[48, -78, 68, -22, -19, -118, -107, -2, -73, 113, -122, 123, 66, 125, -101, 116]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-24, 71, -101, -3, 21, -41, -67, 76, -104, -116, 125, -74, 75, 50, -13, -36]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-72, -27, 42, 62, -49, 32, 59, -2, -19, -37, 23, 21, -20, -25, 15, 50, 71, -77, 17, 23, 114, -79, -52, 92, -32, 52, 11, 113, -15, -116, 88, 117, 48, -78, 68, -22, -19, -118, -107, -2, -73, 113, -122, 123, 66, 125, -101, 116]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-30, -98, 15, -61, -51, -26, 20, 93, -103, -28, 79, -1, 68, -30, -43, 119]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-62, -12, -80, -46, 64, -84, -55, 106, 99, -101, 88, 23, 27, -82, 59, -75]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[111, 30, -26, 60, 77, -103, 111, -63, -11, 61, 37, 19, 102, 39, 11, 119]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-64, 64, 38, 113, -121, -56, 46, 33, 18, 127, -33, -7, 84, -25, -48, 28]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[73, 76, -49, -23, 102, 91, -50, 85, 16, -40, -42, -100, 77, 45, 73, -76, 101, -76, 104, 38, 77, -81, 4, 86, -6, 9, 58, -103, 97, -75, 58, 111, 111, 30, -26, 60, 77, -103, 111, -63, -11, 61, 37, 19, 102, 39, 11, 119]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-99, -76, 89, -91, 15, -91, 31, 92, -69, 100, 123, 125, 81, -8, -6, 74, 26, 114, 32, -62, 12, -10, 42, 54, 28, -91, 71, 55, 78, -124, 87, -19, 111, 30, -26, 60, 77, -103, 111, -63, -11, 61, 37, 19, 102, 39, 11, 119]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey29);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey29);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        java.lang.Class<?> wildcardClass39 = byteArray37.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-89, -8, 61, -30, 34, 36, 11, -21, 88, 4, -114, -107, -25, 42, -5, 42]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-67, 112, -83, 42, -83, 47, 27, -7, -20, 126, -1, 107, -16, 105, 35, -35]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-26, -63, 69, -13, 74, -8, -70, -88, -50, 51, 102, 11, 111, -42, -124, 15]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-66, 108, 124, -32, -51, 24, 70, -90, -36, -19, -115, 38, 17, -53, -36, -35]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[55, 69, -89, 15, -91, 99, 61, 110, -100, 75, 79, -114, -66, -80, -39, -58]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-117, -107, 15, -70, 85, -95, -84, -24, 117, -112, 21, 51, 101, 39, 49, 19]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-99, 38, 101, 11, 117, -115, 59, -110, -48, -120, 15, 82, -21, 53, -126, 20, -11, -37, -39, 9, -25, 21, -92, 45, -45, 20, 83, 5, -2, -10, 108, -110, 55, 69, -89, 15, -91, 99, 61, 110, -100, 75, 79, -114, -66, -80, -39, -58]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[99, -3, -19, -11, -42, -21, -74, 103, -58, 80, 111, -106, -24, -32, -100, -105, -89, 75, 45, 12, -46, 54, 78, 23, -57, 116, 115, 117, -67, 66, 110, -108, 33, 29, 80, -18, 9, -50, -87, -69, 65, -111, -50, -96, -21, 29, -112, 28, 19, -51, 11, 78, -115, -74, -83, 97, -128, -103, -121, 17, -124, -86, 116, 121, -84, -103, -88, -54, -20, 85, -57, 103, 85, -31, 55, 0, -111, -10, -56, 101, 31, 115, 99, -60, 127, -34, -71, -2, 42, 105, -19, 123, -99, -87, 107, -25, 55, 69, -89, 15, -91, 99, 61, 110, -100, 75, 79, -114, -66, -80, -39, -58]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "08ED1CD3587DE8F60CE288C4E1926237467BBEACE1E811EFD19E99FCE9019FCE4E36661D6D9ED4DFE4F6CB36608DAF47DA045495829F5ED44F803AC4D0287C2D84F4075BDF0D4475C7DCAD1A6255193A197B52412E35E9D2BB2263BDA9BF0D079B9DEA2C715FC41E1253E84EE1C3C0282A25E1D28A67C1EF79C1307E8150A01FC83666AE945E4E1A838EF660374679B2226F34CF64F13EBC0924F90FF9002A703CC9C90023C8C6177E48EF026C8EE134475511622F58E7B1A06ACF7C65ACD0302247D4752D11907256638510F28B3122386CB4731E2CDF6AC21C154EC6A4952D3745A70FA5633D6E9C4B4F8EBEB0D9C6" + "'", str38, "08ED1CD3587DE8F60CE288C4E1926237467BBEACE1E811EFD19E99FCE9019FCE4E36661D6D9ED4DFE4F6CB36608DAF47DA045495829F5ED44F803AC4D0287C2D84F4075BDF0D4475C7DCAD1A6255193A197B52412E35E9D2BB2263BDA9BF0D079B9DEA2C715FC41E1253E84EE1C3C0282A25E1D28A67C1EF79C1307E8150A01FC83666AE945E4E1A838EF660374679B2226F34CF64F13EBC0924F90FF9002A703CC9C90023C8C6177E48EF026C8EE134475511622F58E7B1A06ACF7C65ACD0302247D4752D11907256638510F28B3122386CB4731E2CDF6AC21C154EC6A4952D3745A70FA5633D6E9C4B4F8EBEB0D9C6");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("EA1D56E4605E5ABE05F8883E0296A54B", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[108, -117, -26, -41, 49, 5, 82, 18, 89, -92, -18, -31, 11, 123, 125, 15]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[108, -117, -26, -41, 49, 5, 82, 18, 89, -92, -18, -31, 11, 123, 125, 15]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-97, 72, 78, -48, 80, -67, 27, -90, -125, -84, -9, 101, -92, 33, -101, 24]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-57, -126, 65, 120, -56, 61, -50, -95, -1, 8, -47, 3, 44, 13, -89, -21, -72, 103, -94, 109, 112, 23, -89, -71, -60, 38, 93, -118, 69, 106, -18, -73, -80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[12, 88, -37, -67, 107, 73, -29, -24, 65, -57, 29, 69, 12, 9, 74, 44, 102, 117, -28, -83, 95, 21, 0, -111, -106, 45, -36, -14, 31, 94, -37, -88, -80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[104, -81, -39, -74, -13, 50, -16, 104, 118, 113, 106, 119, -10, 78, -103, -27, 118, 46, 114, 125, 55, 13, -94, 72, -81, -84, -88, 48, 97, -27, 127, 61, -80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[23, 14, 26, -21, 82, 116, 11, 86, -108, -44, 103, -69, -127, -70, -28, 62, 71, 56, 60, -57, -97, 44, -74, -72, 49, 25, -51, -26, -83, 113, -75, -102, -80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-80, 0, 52, 66, 87, -93, 31, -86, 54, 109, 64, 50, -83, 54, 67, 35]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "B000344257A31FAA366D4032AD364323" + "'", str21, "B000344257A31FAA366D4032AD364323");
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("13E1C3A12E3725151210B93CF77EEBE0092B05FAA2B558F8199BA9EB1B821832C1881AB108F54628CC68B377506260206BA8E8F9F82F67AE98754B54F72C6A10072507D603E2574DDF5DCF516A932C067EFA35AEFBB148EB1A38A273B347C7354BCEA32E8C277478ECAA861C2981D893", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("5B8B924556E33AF4E41817A856D380D0", secretKey11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[99, 6, -55, -28, 75, -27, -78, -81, 9, 3, -112, 33, 49, 75, -120, -57]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-81, -73, 34, 16, 103, -90, -87, -21, 76, -119, 104, -36, 40, -2, -33, -45]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-62, -11, -5, -31, -35, 41, 120, -90, -64, -73, -30, 41, 34, 47, 102, -28, 111, 120, 3, 91, -24, -14, -63, 59, -25, -65, 50, -44, 55, 62, 104, -21, 99, 6, -55, -28, 75, -27, -78, -81, 9, 3, -112, 33, 49, 75, -120, -57]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-81, 54, -126, -1, -88, 74, 105, 78, 79, 106, -8, 71, 77, 120, 12, -11, -22, -50, -126, -16, -121, 113, 28, -76, 56, -7, -70, 106, -26, 107, 13, -39, 115, 80, 47, -58, -100, -128, 76, -85, 66, -102, 25, -35, -35, -127, -117, -19, 85, 42, 114, -56, 29, 53, 99, -92, -30, 122, 77, -78, 52, 28, -114, -116, 23, -35, -86, 44, 126, 93, 88, 17, -19, 32, -21, 80, -54, -20, 60, -106, -63, 102, 97, 30, 39, 97, -56, 91, -52, -20, 16, 20, 6, -64, -5, -18, 99, 6, -55, -28, 75, -27, -78, -81, 9, 3, -112, 33, 49, 75, -120, -57]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-75, -19, 35, 53, -37, -20, 127, 90, -106, -61, 76, -74, 15, -67, 51, 57, -51, -7, -22, 28, -68, -84, 118, 36, 4, -29, -107, 110, -62, -5, 38, 118, 99, 6, -55, -28, 75, -27, -78, -81, 9, 3, -112, 33, 49, 75, -120, -57]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[32, 99, 20, 11, -76, 102, -70, -34, 78, 84, -50, 119, -68, -6, -40, -61, 10, 79, 123, 18, 87, -74, -124, 109, 47, 83, -58, -51, -27, 93, 57, -37, 99, 6, -55, -28, 75, -27, -78, -81, 9, 3, -112, 33, 49, 75, -120, -57]");
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-15, 57, -46, 37, -119, -114, -42, 8, -121, -108, 122, 77, 2, -54, -72, -38]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[53, -46, -44, -52, 26, -37, -43, 104, 29, 32, -87, 24, -22, -33, -19, 96]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[53, -71, -112, -23, -22, -66, -40, -38, -54, 24, 88, 31, 85, 85, -2, -89]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[18, 0, -69, -119, -3, -75, 77, -8, -8, 81, 27, -113, -98, -93, -81, -119]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-106, 50, -20, -121, -96, 19, 69, -66, 26, 101, 110, 84, -54, -4, 67, -122, 113, -32, -17, -83, -110, 25, 2, 34, -128, 71, 63, 85, -40, -126, 72, -113, 53, -71, -112, -23, -22, -66, -40, -38, -54, 24, 88, 31, 85, 85, -2, -89]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[58, -111, -39, 43, -125, -103, 18, -64, -42, -74, -116, 71, 18, -15, -50, 97, -62, 70, 108, 75, 114, -121, 23, -125, -96, -100, 84, -23, 110, 111, -31, 98, 53, -71, -112, -23, -22, -66, -40, -38, -54, 24, 88, 31, 85, 85, -2, -89]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7" + "'", str25, "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7" + "'", str26, "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7" + "'", str27, "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7" + "'", str28, "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7" + "'", str29, "3A91D92B839912C0D6B68C4712F1CE61C2466C4B72871783A09C54E96E6FE16235B990E9EABED8DACA18581F5555FEA7");
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("911F57119EB24E767E42E4F6B323A1B64ACC59F689B27E8E3BFDDB32C46328E28973E926473BDF881F9F712F06F4821C", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey8);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey30);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey34);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey34);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey34);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey34);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey43);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey43);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[30, 81, 20, -90, 85, 86, 122, -112, -64, -92, 3, 78, -60, -125, 30, 120]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-120, -108, 1, 3, -84, 88, 44, -12, -89, -27, -80, 48, 31, -43, 96, 106, 88, 94, -127, -39, -31, -60, -77, 81, 62, 61, 60, -26, -24, 125, 55, -36, 113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[75, 23, -44, -38, 37, -124, 7, 37, 113, -106, -34, 46, 120, 11, 17, 109, -105, 109, 74, 28, 16, -2, -125, -104, 122, 0, 50, 18, -96, 121, -45, 108, 113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-120, -108, 1, 3, -84, 88, 44, -12, -89, -27, -80, 48, 31, -43, 96, 106, 88, 94, -127, -39, -31, -60, -77, 81, 62, 61, 60, -26, -24, 125, 55, -36, 113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[64, 34, 16, 65, 107, -46, -100, -122, -63, 80, -29, 88, -43, -20, -60, -65, 5, -16, -33, -38, -48, -15, -87, 78, 44, -25, 82, 98, 119, 38, -77, 118, 50, 82, 116, 62, -81, 20, -54, 115, 119, -56, -23, 84, 124, 101, -7, 68, -26, -42, 75, 113, -84, -44, 127, 45, 39, 3, 83, -114, -116, -54, 78, -62, 18, -87, 12, -82, 14, -87, 48, -26, -46, 47, -91, -75, 94, -65, -65, 63, 48, 101, 28, -116, -77, 44, 107, 103, 90, -73, -13, -11, -125, 101, 120, -71, 113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-95, -43, 56, 84, -113, 49, 69, 42, 45, -6, -98, 124, 80, -9, 93, -56, -128, -40, 49, -99, -38, -79, -1, -3, 69, -119, 114, 113, 112, -97, 62, -117, -62, -122, 124, 74, -78, 27, 32, 98, 56, 16, 33, 14, -9, -111, 13, -100, 122, -84, 94, -11, -114, -121, 39, 29, 92, -120, 19, -1, 53, 1, 47, -20, -68, -117, 85, 58, 5, -62, -114, 67, -32, -35, 42, 94, -110, -34, 17, 53, -53, 24, 61, -27, 86, 34, -48, 35, -24, 41, 57, 21, -38, 27, 46, 127, 113, 49, 57, -114, -95, -51, 120, 126, -36, -63, 50, 33, -80, -53, -96, 85]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[87, -89, 57, -18, 96, 40, 29, 40, -50, 54, 21, -63, 77, 119, -109, -102]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[16, -102, -85, -24, -10, -63, -15, -91, -62, 89, -14, -102, 86, 22, 81, -127]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-62, 109, -50, 42, -120, 121, 67, 72, 68, 35, -76, -90, 22, -112, -122, 110]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-31, -18, -33, -104, 122, 121, -82, -86, -89, -10, -70, -39, -88, -95, -44, 0]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-53, 126, 28, -50, 119, 87, -91, -108, 93, -47, 96, 7, -53, -93, -5, -104]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[17, 114, 41, 28, -60, -78, -65, 116, 97, -92, 4, 75, 67, -37, -51, 37]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[17, 114, 41, 28, -60, -78, -65, 116, 97, -92, 4, 75, 67, -37, -51, 37]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[21, -55, 105, 59, 65, 78, -126, -7, -78, -118, 62, 20, 18, -73, 47, 105, -12, 0, 115, 8, -14, 31, 86, -21, -93, -52, 92, 40, 108, -50, 91, 30, -53, 126, 28, -50, 119, 87, -91, -108, 93, -47, 96, 7, -53, -93, -5, -104]");
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey13);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey13);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[27, 24, 10, 60, 33, 67, 105, 14, -108, -77, -6, 4, 15, 119, -109, -120]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-78, -86, 115, -100, 79, 114, 66, 51, 57, -85, -36, 51, 0, 21, -102, 27, -27, -125, -57, 33, -33, -118, -72, -55, -110, -74, -121, -8, 49, -117, 44, -11, -18, -58, -94, 20, -118, 72, 22, 71, 113, -106, -19, 62, -14, 105, 21, 28]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "6FBBBC7C08B4ECF3CE55CD06DAD3516F94C5439E213B97016DA11E8A0ED5F150436647E6DFD507D80949EF287409674AAB0803D5EA33095684E416F976BD17FE322C890448BC3854D7F2FF01A7E19FF354CBF89D933F432A78BCCB0E05CFAE210997F9487E42F61E1844F5D1F13C10BC4D6958DB416B06B1B1A73DB3B80E802013C8102E3412CED77C9F0D4BA6F35FB01A5DCAF6E49A93D2EA2CE72FD71AC1AE13BF996CF5DFD8D835B3333C88A9A01D56763C80F05D6FA29EDE3E2720DA91E772F3D5FACD7DEDA074CA0823C3B7B5D81E37CB0602AADCCD42CE4368D88943BBDEDC8B2DF122E9F4699BEB1527616A074A3A1BCDB601E0DCD5A010F50EB62E2702BAD044B8B2A0B58B28482C32D600D5D0475A91AC6B225F56C2FF8C5EED87E2FC9F6FC1DDFFC29925B846CA82D9F11D5C438BB3011BBEA542CB761040D9F762E5248EA900C9C7607FF398C50D69012A994A0E22034290FE87118E2DD806789F35ABFA89914B2D349003563BDEBB3DE049D78EB7F8C77A6640FD8329453CA8D8C1429216946A44E274FB5369B1B3B83591408F185B0D1CEEBECEA6AE3756FCE5D7A9448606C62874050C2DF398DC609608CCA071616B52F0D465FDB5C29D66C4B7353B63D96563A561C282E1000C1A243163B050C66AEE1ED3524DCC9E4EEDEBEEC6A2148A4816477196ED3EF269151C" + "'", str7, "6FBBBC7C08B4ECF3CE55CD06DAD3516F94C5439E213B97016DA11E8A0ED5F150436647E6DFD507D80949EF287409674AAB0803D5EA33095684E416F976BD17FE322C890448BC3854D7F2FF01A7E19FF354CBF89D933F432A78BCCB0E05CFAE210997F9487E42F61E1844F5D1F13C10BC4D6958DB416B06B1B1A73DB3B80E802013C8102E3412CED77C9F0D4BA6F35FB01A5DCAF6E49A93D2EA2CE72FD71AC1AE13BF996CF5DFD8D835B3333C88A9A01D56763C80F05D6FA29EDE3E2720DA91E772F3D5FACD7DEDA074CA0823C3B7B5D81E37CB0602AADCCD42CE4368D88943BBDEDC8B2DF122E9F4699BEB1527616A074A3A1BCDB601E0DCD5A010F50EB62E2702BAD044B8B2A0B58B28482C32D600D5D0475A91AC6B225F56C2FF8C5EED87E2FC9F6FC1DDFFC29925B846CA82D9F11D5C438BB3011BBEA542CB761040D9F762E5248EA900C9C7607FF398C50D69012A994A0E22034290FE87118E2DD806789F35ABFA89914B2D349003563BDEBB3DE049D78EB7F8C77A6640FD8329453CA8D8C1429216946A44E274FB5369B1B3B83591408F185B0D1CEEBECEA6AE3756FCE5D7A9448606C62874050C2DF398DC609608CCA071616B52F0D465FDB5C29D66C4B7353B63D96563A561C282E1000C1A243163B050C66AEE1ED3524DCC9E4EEDEBEEC6A2148A4816477196ED3EF269151C");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[1, -86, 124, 24, 118, 100, 86, -10, -60, 58, 73, -87, 12, 102, 127, 31]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[123, -52, -76, 97, 52, -73, -50, -35, 49, -10, 59, 107, -62, 63, 85, 64]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[123, -52, -76, 97, 52, -73, -50, -35, 49, -10, 59, 107, -62, 63, 85, 64]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-120, -78, 78, 114, 27, -120, 65, 102, 34, 76, -63, 2, -91, 23, -45, -98]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 69, 17, 30, -106, 75, 26, -99, 118, -65, -123, 68, -104, -8, -105, 105, -9, 56, 115, 19, -40, -22, -81, -121, -80, 90, -52, 27, 34, 10, -39, 58, 1, -86, 124, 24, 118, 100, 86, -10, -60, 58, 73, -87, 12, 102, 127, 31]");
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("2515935D1009DE791DC49864FF615114BDF117C94CDA9E32624E1965E295C28A0B98301B3A30C9BB261F464BF7E6B23A16B74CEE8189B71B34CE3CB8344C2DABD334B43E26E117527222E4AD3AEED30566C87659C9C6276AF3677A9AE4CC07BAB6192D9E17635059A70E217F0A412B265F514DEBC12C97B7E2022BC157BF759F0EB6B94496B221C49AB7B5E05CBA95D28DF7B8AD145837B82BE97A2DDF38CD009B0CEF1D92255A5CEC9795D68AB441B0B93288F2C16630A95EF4A9A8C2CD837C8B23584A8EB0D14532D5D0C4C33CD92A9192BCD0763529291F476EDC65B8C7B20EBDE9EA0204B33E46391855D893E840", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("6BBEA07288CF3BE9E1DE322DA09FD7F6", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-115, -124, 101, 103, 8, 18, 26, 37, -79, 70, -86, 44, 100, -123, -113, -3]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-10, 106, -102, 109, 94, 5, 59, -113, -7, -62, -85, 97, 57, -3, 63, -109]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[123, -19, 4, 27, -97, -111, -51, -102, -40, -22, -39, 54, 66, 112, 103, 45]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-115, -124, 101, 103, 8, 18, 26, 37, -79, 70, -86, 44, 100, -123, -113, -3]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-121, -27, 26, 105, -18, 8, -66, 108, -46, -118, 66, 111, -27, 48, 29, -62, -69, -104, -7, -75, -19, -12, 115, -80, -113, -21, -12, 50, 12, -34, 112, 102, -20, 60, -28, -6, 17, -47, 121, -68, -112, 83, 54, -121, 106, 59, 13, 46, -43, -106, -25, -71, 38, 84, 93, 87, -102, -117, -2, -60, -81, 111, 19, -79, 37, -94, -80, 28, -26, -126, 97, 28, 42, -16, 84, -4, -79, 105, -106, -87, -126, -107, -60, 50, -5, 27, -94, 95, -65, -28, 3, 93, -13, 6, 97, -59, -115, -124, 101, 103, 8, 18, 26, 37, -79, 70, -86, 44, 100, -123, -113, -3]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-105, 100, 123, 17, -125, 121, -96, -30, 114, -71, -117, 58, 118, 81, -37, 61, -64, 54, -56, 22, -85, -125, 9, 32, -51, 24, -119, -108, -119, -13, -114, 20, 91, 119, 12, 115, 58, -75, -72, -128, 123, -114, 97, 18, -75, 79, 81, -107, -49, 86, -22, -80, -63, 14, 35, -33, -50, -76, -82, -14, 45, 99, -46, -101, -127, 99, 51, 124, 66, 7, -117, 46, 118, 33, 100, 35, 125, -91, 23, -41, -91, 69, 24, -79, 80, 60, 34, 70, 80, 103, -109, 56, 15, 43, 117, 82, -115, -124, 101, 103, 8, 18, 26, 37, -79, 70, -86, 44, 100, -123, -113, -3]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-7, -113, 87, 114, -111, -96, -94, 87, -6, 18, 69, 8, -54, 62, 91, 103, -100, -117, 36, 122, 60, 51, 116, -75, 38, -102, -128, -54, 106, 61, -47, 99, -115, -124, 101, 103, 8, 18, 26, 37, -79, 70, -86, 44, 100, -123, -113, -3]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "F98F577291A0A257FA124508CA3E5B679C8B247A3C3374B5269A80CA6A3DD1638D84656708121A25B146AA2C64858FFD" + "'", str17, "F98F577291A0A257FA124508CA3E5B679C8B247A3C3374B5269A80CA6A3DD1638D84656708121A25B146AA2C64858FFD");
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey41);
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey41);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey87);
        java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey87);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey87);
        byte[] byteArray97 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB83F328EFDE9D9B3886CB70930AC21C48FDA9DC95096A2295D60D57C78EFD8FFE90887174DD3B7D771EEA3F9DCC0254", secretKey87);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-9, 89, 110, 77, -56, 35, 16, -80, 30, -127, -24, -77, 58, 25, -54, 126]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[69, -90, 109, 57, -55, 59, 35, 16, 31, 70, -69, 45, 104, -7, 26, -30]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-58, -50, 27, 105, 59, 59, -89, -2, 68, -26, -68, 39, 79, 36, 127, -120]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[92, -92, 10, -128, 97, -127, -21, -19, 3, -83, 55, -8, 40, 27, 108, 9]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-23, -26, 12, -119, 42, -114, -34, 93, -36, -10, 89, 100, 13, 41, 45, 38]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-84, -113, 48, -13, 42, 97, -82, -8, 21, -98, 109, 50, -94, 48, -32, -99]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-78, 72, 22, 120, 110, 46, 21, -57, -84, 78, -75, 124, 0, 16, -116, 50]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[104, 15, -44, 81, 127, 41, -60, -94, 4, 93, 126, -67, -51, 49, -79, 71]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-15, 13, 31, -81, 51, -30, 9, 103, -49, -3, 124, -87, 102, 96, -104, -84, 20, -128, -54, 0, 58, 28, 32, -15, 116, -61, 0, -118, 16, -6, -9, 69, -78, 72, 22, 120, 110, 46, 21, -57, -84, 78, -75, 124, 0, 16, -116, 50]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-85, -6, -5, 61, 24, 102, -35, 58, -54, 6, 35, -118, 63, 122, 35, 32]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[120, 28, -71, 15, 21, -78, 52, -24, -99, -15, 50, -47, -76, 37, -71, -21]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[56, 120, 0, 107, -60, 98, 19, -9, 96, -66, -123, 52, -52, 72, -110, -5]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[31, -60, 93, 12, 59, -38, -47, 96, 118, -10, -41, -69, 36, 86, -110, -51]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[86, -104, -42, 58, 84, -83, -90, -75, -79, 125, -30, 104, -47, 91, -124, 12]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-82, 71, -111, 30, -113, 89, 12, -42, 4, 99, 44, 17, 33, 122, -100, 72]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[66, -32, 115, -33, 7, 97, -96, -103, -126, -10, 78, 41, -77, 42, 34, -98]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-8, 106, 19, 122, -104, 117, -79, -65, -106, -125, -29, -17, -109, 78, 13, 105]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-116, -49, -127, -128, -128, 30, -58, -116, -94, 22, 14, -28, -30, 52, 24, 60, 43, 101, 127, 34, 57, -1, -106, -116, 49, 41, -122, -46, -106, -119, -102, -35, 66, -32, 115, -33, 7, 97, -96, -103, -126, -10, 78, 41, -77, 42, 34, -98]");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[-43, -94, -70, -48, 103, -70, -34, 16, 107, 71, -83, 115, -74, -108, -37, 70, -54, -19, 2, 93, -43, -57, 63, -119, -83, -50, -73, 87, 2, 104, 7, 68, 66, -32, 115, -33, 7, 97, -96, -103, -126, -10, 78, 41, -77, 42, 34, -98]");
        org.junit.Assert.assertNotNull(byteArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[-61, 7, -43, -26, -31, 71, 114, -126, 38, -106, 18, -78, 79, -76, 2, -122, 84, 28, 106, 38, 16, -48, 46, 53, 108, -70, 47, -52, 68, -18, 3, -95, -28, -60, -120, 37, -114, -44, -31, -118, 81, -5, 7, -125, -114, 25, 40, 6, 70, -117, 56, -40, -44, 19, -33, -7, 39, 93, -25, -110, -16, -29, 27, -25, -82, 87, 102, 17, -33, -99, -113, -56, -50, 48, -72, -5, 108, 10, 99, 56, 81, 98, 19, 31, 60, 124, 98, 68, -13, -31, -107, 41, -33, -11, 32, 86, 66, -32, 115, -33, 7, 97, -96, -103, -126, -10, 78, 41, -77, 42, 34, -98]");
        org.junit.Assert.assertNotNull(byteArray97);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray97), "[-16, 112, -70, -99, -38, -76, 23, -6, -77, 52, -36, -107, 68, -88, -103, 108, -20, -114, -101, -98, 44, 12, 41, 89, 11, 108, -29, 118, 47, 110, 86, -25, -116, -14, -66, -54, 62, 102, -118, 1, -20, -113, -5, 85, 40, -87, -100, -111, 42, -66, 126, 99, -58, -31, 39, 127, 67, 30, -76, -106, 5, -35, -71, -46, 46, -9, -4, 34, 64, -105, -115, 96, 112, 10, -68, 2, 88, 72, 101, 123, -50, 116, 57, -118, -13, 20, 20, -46, 34, -20, -115, -45, -120, -44, 53, -106, 66, -32, 115, -33, 7, 97, -96, -103, -126, -10, 78, 41, -77, 42, 34, -98]");
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey4);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey18);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey18);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey18);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D4C8E2E20030A55B604493C7700ED49933089CFC3B5004641CE8B8129C0142D91ABFA409D685D0B79A84FA7957F1AFB781BD87A2C9710F55E17128CBD9C8C59135FA1577C84FC5D8A5F508F75FB7DCB1557B824C39AC1906DD3DCB32A8BF8A59DD33E7A26D07558A5BD45C071BE6386", secretKey18);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey18);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-125, -2, 43, -59, -61, 18, 24, -111, -100, 108, -75, -82, -11, 32, 28, 77]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[97, -81, 98, -5, 104, 53, -21, 118, -41, -98, -35, 4, 55, -96, 74, 109, 38, -115, -59, 97, -14, -126, 19, 112, 83, -71, -63, 118, -84, -95, -38, -80, -19, 118, 102, -12, 49, 80, 31, 20, -108, 14, -12, -102, -14, 119, 25, -75, -18, -15, 7, 96, 40, -122, 21, 37, 7, -45, 62, -90, -53, -50, -18, -12, 85, 60, 1, -43, -78, -101, -98, 104, -71, 86, 7, 44, -101, 96, 71, 19]");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, -50, 111, 125, -48, 67, 65, 18, 91, -11, -69, -51, -14, -37, -27, -55]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, -50, 111, 125, -48, 67, 65, 18, 91, -11, -69, -51, -14, -37, -27, -55]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[105, -52, -104, -10, 113, 14, -35, -91, 46, -53, -99, -62, -117, -64, -104, 42]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[58, -84, 36, -85, -32, -101, 108, -100, -69, -82, -80, 90, -32, 19, -32, -114, -60, -104, -69, 8, 103, -63, -12, 69, 85, -116, -81, -54, 70, 5, -23, 50, 100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[58, -84, 36, -85, -32, -101, 108, -100, -69, -82, -80, 90, -32, 19, -32, -114, -60, -104, -69, 8, 103, -63, -12, 69, 85, -116, -81, -54, 70, 5, -23, 50, 100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-91, -8, -87, -80, 56, 94, -78, -80, -25, 18, 8, -48, -124, 5, -66, -12, 33, 18, 78, -85, -55, -101, 32, -113, 68, 3, 58, -18, 58, 27, 38, -124, -97, -15, -56, -99, -114, -103, -70, 32, 82, -115, -46, 97, -8, 89, -33, -68, 41, -1, -128, -59, 21, -3, -53, 108, 54, 104, -29, 76, 67, 48, -70, 75, 4, -53, 24, -10, 81, 99, -125, -74, -91, 114, 14, 83, 3, 65, 104, 11, -28, -29, 106, -107, 121, 78, 34, 108, 120, -64, -3, -23, 96, -112, 51, -34, 100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-71, -64, -42, -13, -88, -55, -32, 10, -41, 58, -120, 52, 76, -55, -97, -51, -16, -64, 112, -41, 6, 106, 21, 27, 11, -126, -3, 45, 14, 82, 105, 120, 40, -120, -122, -71, -100, 7, 16, 26, -67, 78, -103, -49, 125, -11, 59, 125, 50, 83, 117, -78, -87, -79, -63, 50, 40, 75, -63, 123, -126, -103, 1, 103, 111, -84, 91, 33, -52, 7, 107, 23, -68, -76, -37, -103, -69, 72, -70, -60, 85, 103, 26, -86, -39, 26, -105, 11, 3, -67, -84, -12, 16, -75, -78, -39, 100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-107, -45, 125, -34, -3, -53, 98, 112, 43, -56, 45, 117, 112, 111, 115, 43, 122, -122, -128, 30, 126, 46, 83, -58, 125, -110, 89, -35, 85, -47, 55, 20, 100, -91, 54, -76, 76, 98, 49, 70, -37, 30, 28, -128, -24, -119, 13, -33]");
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey8);
        java.lang.Class<?> wildcardClass14 = byteArray13.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-62, -54, -109, -110, -84, -115, -42, 119, -92, 96, -27, -25, 80, 34, -56, -29]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[29, -42, -29, -3, 12, -42, -79, -91, 78, -41, 49, -11, 97, -100, -110, -30]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[56, -101, 17, 121, 81, -26, 66, -56, -23, -41, -108, -64, 28, 98, -79, 120, 50, 90, -84, -9, 12, -73, 61, -65, -114, 8, -63, 24, 126, 86, 26, 60, -91, 83, -25, -40, 9, -73, 34, -49, -28, -84, -48, -89, -56, 92, -16, 92, -29, 2, -32, -65, -74, -73, 53, 14, 63, 91, -54, 30, -128, -39, 110, -60, -33, -59, 55, -59, 66, -105, 47, 24, -104, 10, 65, -105, -123, 10, 69, 110, -70, -13, -14, 5, 116, 84, -80, -110, -104, -38, -71, 57, -110, -97, 68, 62, -62, -54, -109, -110, -84, -115, -42, 119, -92, 96, -27, -25, 80, 34, -56, -29]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[21, 78, -21, 22, 127, -22, 2, -2, -21, 0, -33, 16, 26, 72, -109, 49, 43, 52, 114, 5, 25, 9, 112, -86, 74, 83, -126, 126, 4, 89, 119, -39, -62, -54, -109, -110, -84, -115, -42, 119, -92, 96, -27, -25, 80, 34, -56, -29]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey11);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("FA8F43B641CB7056E29F1C776EA0B877054A2206D0E59E37778FB9E312BCEEF13C44F882D8AABF0CDDD3F7BB2B0B6FC6", secretKey11);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("08ED1CD3587DE8F60CE288C4E1926237467BBEACE1E811EFD19E99FCE9019FCE4E36661D6D9ED4DFE4F6CB36608DAF47DA045495829F5ED44F803AC4D0287C2D84F4075BDF0D4475C7DCAD1A6255193A197B52412E35E9D2BB2263BDA9BF0D079B9DEA2C715FC41E1253E84EE1C3C0282A25E1D28A67C1EF79C1307E8150A01FC83666AE945E4E1A838EF660374679B2226F34CF64F13EBC0924F90FF9002A703CC9C90023C8C6177E48EF026C8EE134475511622F58E7B1A06ACF7C65ACD0302247D4752D11907256638510F28B3122386CB4731E2CDF6AC21C154EC6A4952D3745A70FA5633D6E9C4B4F8EBEB0D9C6", secretKey11);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-116, 43, -128, 110, 10, -122, -88, -116, 49, 5, -51, 125, 86, -34, -45, 96]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[117, -40, 83, -85, -113, 76, 76, 44, -128, -14, -50, -51, 60, 85, 39, -82]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[32, -107, 54, -76, 90, -125, 71, -48, -115, -127, -102, 28, 84, 115, -49, -13, -6, -47, 55, -121, 94, 8, -15, -44, 113, 60, -120, 65, 120, -70, -111, 112, 46, 87, 43, 89, 99, 108, -123, -34, -55, -47, 73, -109, 70, 50, -26, 50, -124, -29, -120, 99, -29, 17, 24, -122, 31, -77, -105, -59, -13, -98, 85, 113, -13, 102, -78, -56, 127, -5, 37, -69, 100, -57, 117, 2, -53, 108, 67, -73, 5, 98, -67, -87, 98, 34, -79, 92, 72, -97, 31, 19, 123, 66, 96, 20, -116, 43, -128, 110, 10, -122, -88, -116, 49, 5, -51, 125, 86, -34, -45, 96]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[63, -15, -123, -60, -102, 31, -59, -62, 61, 14, 103, -27, -62, -117, 3, 36, -104, -83, 77, 72, -8, 63, 27, 67, 124, 68, -27, -39, -9, -25, -71, 104, -116, 43, -128, 110, 10, -122, -88, -116, 49, 5, -51, 125, 86, -34, -45, 96]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-116, 43, -128, 110, 10, -122, -88, -116, 49, 5, -51, 125, 86, -34, -45, 96]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-92, 123, 66, 42, 47, 11, -7, -15, 61, 111, 70, 79, 116, -94, 23, -70, -90, -123, 25, 25, -124, -103, -125, -78, 18, -65, 82, 121, -10, 100, 73, -104, -28, 10, 44, -53, 75, 85, -62, 115, -54, -93, 78, -24, -3, -108, -111, -41, -53, -79, -67, -116, -118, 99, -20, -54, 90, -11, 11, -39, 33, 118, 44, -15, 93, 34, 88, 5, 87, 67, 37, -80, 34, 117, 101, 90, 81, -69, -111, 78, 39, -38, -6, 127, -42, -123, 15, -28, 40, 18, 78, 45, 37, -76, -34, 63, -116, 43, -128, 110, 10, -122, -88, -116, 49, 5, -51, 125, 86, -34, -45, 96]");
        org.junit.Assert.assertNotNull(byteArray19);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey29);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey44);
        byte[] byteArray49 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey44);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey44);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[106, -76, -39, 47, -51, 32, 85, -102, -8, -94, -1, 90, 73, -112, -112, -51]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[15, 26, -100, 53, -23, 113, -73, -88, 3, 107, -44, -102, 74, -16, 99, -104]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[1, -98, 112, 67, -7, 98, 80, -41, -67, 3, 111, 110, 63, -94, -48, -35]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[92, -78, 4, -92, 21, 71, 1, -25, -103, 12, 58, -80, -49, 48, -82, 86]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[74, 97, -79, -49, -71, 42, -50, -90, -39, 112, 55, 95, 69, -70, -115, 15]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[116, -58, 95, -50, -108, 107, -123, -123, -123, 40, 38, -11, 14, 77, 124, 3]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[116, -58, 95, -50, -108, 107, -123, -123, -123, 40, 38, -11, 14, 77, 124, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-69, 36, 30, -50, 50, -86, 26, -39, 78, -66, 89, -17, 96, 47, -109, -111, 100, 74, -49, 98, -88, 98, -41, -70, 66, -98, 104, 85, 81, -57, 121, 79, -15, -44, -119, -71, 9, 47, -32, -97, -28, -8, 127, -28, -19, -37, -17, 90, 55, 126, -44, -36, -14, -70, -65, 19, -97, -15, 64, -90, -17, -12, -50, -111, 50, -122, -53, -12, -73, 110, 51, -71, -115, -103, -7, 30, -76, -47, 10, -10, -87, 28, 96, 28, -24, -34, 106, 29, -108, -77, 92, 21, 20, -93, 81, -104, 74, 97, -79, -49, -71, 42, -50, -90, -39, 112, 55, 95, 69, -70, -115, 15]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 83, -97, 72, 67, 82, 49, 60, 56, -107, 76, -68, -94, -23, -118, -8, 105, -82, 91, -4, 46, -111, -16, -22, -13, -8, 80, -13, -100, 118, 87, 58, 74, 97, -79, -49, -71, 42, -50, -90, -39, 112, 55, 95, 69, -70, -115, 15]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[31, 23, 21, -78, 91, -124, 87, -94, -46, -75, 36, -12, 38, 97, 58, 67, 35, -92, -95, 91, 99, -16, 110, -34, 81, 16, 73, 12, -37, 37, -88, 122, 74, 97, -79, -49, -71, 42, -50, -90, -39, 112, 55, 95, 69, -70, -115, 15]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-127, 120, 30, 32, -101, -67, -66, 59, 55, 123, 68, -80, -126, 117, -100, -67]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[102, 91, 14, -21, -102, 79, 83, 77, -54, 107, -50, 97, -105, -75, 62, 88]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[102, 91, 14, -21, -102, 79, 83, 77, -54, 107, -50, 97, -105, -75, 62, 88]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-40, -124, -99, -83, 37, -128, 23, -19, 81, -67, 73, 18, -81, -4, 29, 75]");
        org.junit.Assert.assertNotNull(byteArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[125, 75, 89, 125, 102, 44, -61, -37, 107, -128, -26, -15, 90, -92, 40, -63, -15, -100, -94, -77, -125, 125, 23, -20, -61, -63, -25, -29, -78, -66, -106, 18, -127, 120, 30, 32, -101, -67, -66, 59, 55, 123, 68, -80, -126, 117, -100, -67]");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[105, -28, 19, 88, -35, 83, 15, -86, 82, -108, -45, -25, -49, 90, 6, -26, -86, -106, 79, -57, 123, -21, 53, 90, 26, 107, -120, -35, 15, 95, 61, 99, 58, 7, 17, 102, -48, 109, 91, 59, 45, 112, -60, 102, -37, 70, -43, -31, -49, -104, -124, -47, 31, -101, -116, -81, -107, 46, 40, 41, 105, -45, 114, -36, -29, 45, -55, 1, -122, -57, 110, -125, 98, 56, 68, -118, -14, -69, -58, -66, -99, 23, 90, -56, -79, -36, 50, 34, 120, 81, -89, -31, 124, -125, -82, -95, -127, 120, 30, 32, -101, -67, -66, 59, 55, 123, 68, -80, -126, 117, -100, -67]");
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        byte[] byteArray20 = new byte[] {};
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray20);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey26);
        byte[] byteArray30 = new byte[] {};
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey32);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey36);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey36);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray30, secretKey36);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray20, secretKey36);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey36);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey36);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey36);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        byte[] byteArray59 = new byte[] {};
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray59);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey61);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey65);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey65);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray59, secretKey65);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey65);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey74);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey74);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey74);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey74);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey74);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey74);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey74);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("96A2A04D1B84009DBFC722FC08404202556D0443F1622B551E33EC6AEC926AB6220C5A1E905F2CDFB8D5AFC9473CC961", secretKey74);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("CE223CF68EB6FEC359BAEBD15B5C20BFF08B501E10FEA3BCE54D5983D7684D38E2F42735676D95E8E2E342D32712A46F", secretKey74);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey74);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("91BFEFFB50844D1A382B0BF35EC94FBBF3FB89A60EABC2201DE1CB8F3BE838DD0B7C3DB5105EFECBDCBBFD745672D653", secretKey74);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray88);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[120, 103, 85, -97, 16, 53, 61, 86, 24, -79, 24, 101, 24, 56, 46, 77]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, -118, 24, -1, 57, -11, -84, -87, 71, -20, 39, -17, -6, 53, -20, -85]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-96, -118, -66, -39, -125, -57, -67, -97, 114, 29, -30, 121, -81, -124, 81, -65]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[68, -29, 39, -46, 9, -66, -36, 58, 9, 86, -39, 2, 57, 51, 58, 12]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-95, -60, 85, -24, -60, 7, -6, 15, -126, 33, 87, -3, 60, 24, -84, 67]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-91, 91, -63, 53, 11, -10, 108, -77, 94, -37, -90, -38, -110, 33, 124, 104]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-56, -87, -72, -127, -120, 124, 119, 37, -76, 0, -29, 81, -75, -112, 3, -113, 0, -57, -5, -119, -113, -118, -126, 23, -26, 29, 87, 11, 121, 56, -74, -125, -95, -60, 85, -24, -60, 7, -6, 15, -126, 33, 87, -3, 60, 24, -84, 67]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[65, -100, -82, -64, -76, 5, 1, 0, -36, 96, -6, -78, -105, -103, 59, -99, -57, -20, 27, -92, -40, 40, 10, -87, -97, -81, 12, 32, -62, -120, -90, 85, -3, 126, 89, -36, 117, -73, -114, 31, -96, 97, 107, 111, 57, 19, 8, -69, -122, 0, 72, 44, -60, -52, 98, -108, -28, -36, -122, -51, -119, -73, -91, -109, 22, -53, -105, -71, -67, 0, -95, 70, -33, 107, 49, -42, 12, 42, 83, 5, -103, 127, -86, 62, -10, -33, 120, 53, -19, -46, 23, -53, -10, 18, 57, -25, -95, -60, 85, -24, -60, 7, -6, 15, -126, 33, 87, -3, 60, 24, -84, 67]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[68, -47, 18, -95, -105, 53, 12, 86, -57, -47, -19, 114, -114, -98, 126, -13]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[19, -84, -80, 118, 86, -3, 103, 51, 79, -76, 46, 80, -40, -29, -100, -13]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[122, -127, -60, 99, -101, 93, -77, -42, -55, -61, 7, 6, -100, -75, 38, 44]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[121, -81, 41, 71, 66, 16, 82, -47, 70, -66, -28, -6, 21, -114, 0, -63]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-123, -34, -42, 118, -88, 59, 121, 59, 33, 109, 53, -53, -58, 84, 121, -33]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-123, -34, -42, 118, -88, 59, 121, 59, 33, 109, 53, -53, -58, 84, 121, -33]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-120, -2, -21, 39, -94, 75, -127, 89, 82, 109, 113, -94, 73, 102, -88, 127, 36, -70, -24, 2, 13, -44, 53, 0, -117, 0, -113, -14, -19, 100, -38, -23, 1, 7, 99, -39, -95, -89, -57, 79, -96, -83, 85, -52, -63, -87, -46, 108, 49, 35, -113, -52, 76, -27, 6, -50, 114, -66, 45, -87, -71, -91, 91, 93, -8, 35, -52, 51, -11, -50, 51, -14, -75, -50, -83, 35, 77, 86, -128, 67, -121, 63, 31, 68, -58, 101, -115, 78, -70, 58, 112, 109, 112, -120, -88, 14, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-44, -74, -101, -82, 59, 16, 100, 82, -126, -73, -98, 82, -47, -63, -53, 58, -88, -54, -109, 67, -5, -32, -126, -22, 17, -93, 3, -91, 37, 49, -127, 39, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[35, 75, 7, -53, 97, -114, -123, -1, 73, -108, -122, 38, -18, 74, -38, -66, -39, -94, -97, 27, -14, -9, 34, 57, 39, 114, 119, 27, -101, -9, 122, -17, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[45, -96, 94, -80, 11, -85, 75, 16, 124, -21, -1, 87, -56, 73, -86, -13]");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[20, -110, -123, -106, -80, 15, 86, 72, -7, 33, 79, -59, -33, -2, -42, -50, 106, -17, 66, 90, -111, -107, 58, -97, 22, 127, -36, -97, 115, -72, 5, -61, 38, -37, 109, -26, 91, 4, -108, -107, -92, 51, -39, -120, -20, 37, -105, -49, -35, 68, 36, -68, -108, -6, -39, 22, 16, -29, 72, 117, 12, -45, -35, 28, 42, 76, 74, -14, -57, -62, 127, 111, -82, 110, -62, -110, 54, 116, -40, 27, -90, -98, 98, -81, 90, 127, 85, -86, -72, 90, 77, -69, -70, 107, 22, -91, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[37, -44, 88, 16, 15, 72, 1, 7, -22, -6, -117, -42, -82, 28, -64, 25, 23, 57, 48, -113, 15, -27, 26, 116, -8, -124, -93, -127, -66, 63, -127, 109, 76, -79, 5, -55, -72, -97, -42, 86, -52, 70, -7, -2, -119, 9, -23, -113, -74, 60, 23, -34, 79, 57, 93, -41, 84, 104, 47, -16, 122, -93, 123, -43, -23, -81, 13, -93, -71, -127, -10, -127, -29, -60, -32, 21, -50, 57, -42, 40, 86, -9, 36, 90, -75, -8, -2, 7, 115, 54, 27, 94, -109, -5, 36, 126, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[95, -65, -25, 114, 92, 3, -14, -62, 27, -37, 20, 127, 10, -42, 33, -28, 60, 31, -60, 44, 14, -81, 42, -66, 80, -108, 14, 90, -74, 19, -57, 71, 87, 116, -24, -78, -42, -123, -63, 18, -109, 126, 38, -15, -15, 15, -110, 7, 1, -57, -12, -56, -97, 36, 84, 4, 11, -53, 122, 3, 44, 87, 110, 123, -48, -95, -122, 56, 16, 30, 17, -9, -95, 46, 80, 92, -19, 33, -82, -62, -127, -77, 58, -6, -51, 103, 22, -32, 12, 64, -92, -80, 114, -119, 53, 44, -64, -26, 14, -61, -102, -54, -108, 67, 104, 108, -22, 122, -65, -87, -87, -17]");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "5FBFE7725C03F2C21BDB147F0AD621E43C1FC42C0EAF2ABE50940E5AB613C7475774E8B2D685C112937E26F1F10F920701C7F4C89F2454040BCB7A032C576E7BD0A18638101E11F7A12E505CED21AEC281B33AFACD6716E00C40A4B07289352CC0E60EC39ACA9443686CEA7ABFA9A9EF" + "'", str89, "5FBFE7725C03F2C21BDB147F0AD621E43C1FC42C0EAF2ABE50940E5AB613C7475774E8B2D685C112937E26F1F10F920701C7F4C89F2454040BCB7A032C576E7BD0A18638101E11F7A12E505CED21AEC281B33AFACD6716E00C40A4B07289352CC0E60EC39ACA9443686CEA7ABFA9A9EF");
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey23);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("EB838DF9F50578D48FFD772D84A349F9E4DB2F17CB00FAAE2C8D9EEFEF300448BFB8461E95D2CDC21A8A178474848103BE6A371AD2081A16E15B81471BC4F8B82BB8E8812E51A1CC557E64A4190FF374FAE170C5FE7496057D3BCCD5CD200FE0C04A91B1239EE4FDC07096DE95038EB0", secretKey23);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[45, -117, 124, -95, 62, -123, -109, 13, -120, 93, 15, 56, -6, 88, -22, 43]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-64, -33, -93, 31, 14, -122, 16, -35, -48, -120, 108, 31, -15, 10, -17, -32]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-14, -84, -48, 84, 1, 127, 125, 64, -108, 60, 26, 35, 78, 5, 101, -127]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-39, 55, 16, -86, 127, 74, 83, 77, 35, -6, -126, 54, 7, -49, 40, -35]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-37, -98, -92, 95, -16, -2, 112, -13, -17, -35, 106, -76, -75, 126, 34, -106, -66, 125, -33, -54, 79, 8, -66, -72, -59, -60, -120, -88, -113, 98, -39, -54, -14, -84, -48, 84, 1, 127, 125, 64, -108, 60, 26, 35, 78, 5, 101, -127]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-87, -74, -38, -119, 68, 46, -28, 16, -98, 39, 79, -98, -35, -119, 62, -100, -9, 127, -105, -5, 0, 68, 2, 86, 78, -114, 120, -31, -11, 34, -96, 74, -23, 17, -111, 121, -89, -80, -122, 99, -57, -37, 127, -1, -56, 62, 121, -98, 102, -28, 82, 115, 5, -65, -67, -31, 25, -128, -86, -8, -25, 115, 99, 81, -30, 9, -73, -71, -65, -7, -44, 55, 52, 20, -3, -28, 54, 125, -48, 86, 110, -6, 106, 114, -77, -92, -101, -67, -59, 19, -66, 74, -49, 80, -18, -93, -14, -84, -48, 84, 1, 127, 125, 64, -108, 60, 26, 35, 78, 5, 101, -127]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-17, 63, -17, 69, 85, -1, 83, 95, -69, -34, 123, -55, -29, -120, -36, 103, 61, -99, 116, -36, 51, 124, 16, -103, 33, 61, 22, 62, -75, 115, -117, -14, -66, 58, -7, -73, 115, 90, -5, 126, -61, -33, 114, 125, 113, 97, 9, 61, -122, 32, -77, 10, 85, -124, 122, 124, 77, -24, -56, -76, 96, 44, 48, -22, -62, 122, -53, 25, -61, 82, 123, 83, -60, 81, -104, -87, -32, 116, -65, 73, -28, 89, -18, -78, 79, 25, -121, 81, 25, 109, -103, 26, 105, 118, -36, -85, -14, -84, -48, 84, 1, 127, 125, 64, -108, 60, 26, 35, 78, 5, 101, -127]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "5F77C6420928F8C47912E26ECA90DB1033C170E37BB5E54048BBCE22490421EC999F18F4DD7EC3021E70E565027848A530AF4882DD9C6D2581DD75804BF0510B9D19D7A4EFD188A5D46C5CBC6876B221716E91A17C329E79D6106CB036705EBBA692DF97E219E3C5103A8D3E8C014B8DB276FDB3BCEADAAE21AFED835C83D204938F2C8076E227B09C7E4B5C97A23BF2CB67EF5ACA2B6A19D61D2F669F3CCFEA1B4EAD2981E5C4D42F4CB960DE9EDBF4C5927C1769B151950C0110035C47B509AEF62AAB0175DA1A994F85BDA667638A305CBFF4C73D7754E7A312EA0F050B99F2ACD054017F7D40943C1A234E056581" + "'", str33, "5F77C6420928F8C47912E26ECA90DB1033C170E37BB5E54048BBCE22490421EC999F18F4DD7EC3021E70E565027848A530AF4882DD9C6D2581DD75804BF0510B9D19D7A4EFD188A5D46C5CBC6876B221716E91A17C329E79D6106CB036705EBBA692DF97E219E3C5103A8D3E8C014B8DB276FDB3BCEADAAE21AFED835C83D204938F2C8076E227B09C7E4B5C97A23BF2CB67EF5ACA2B6A19D61D2F669F3CCFEA1B4EAD2981E5C4D42F4CB960DE9EDBF4C5927C1769B151950C0110035C47B509AEF62AAB0175DA1A994F85BDA667638A305CBFF4C73D7754E7A312EA0F050B99F2ACD054017F7D40943C1A234E056581");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "5F77C6420928F8C47912E26ECA90DB1033C170E37BB5E54048BBCE22490421EC999F18F4DD7EC3021E70E565027848A530AF4882DD9C6D2581DD75804BF0510B9D19D7A4EFD188A5D46C5CBC6876B221716E91A17C329E79D6106CB036705EBBA692DF97E219E3C5103A8D3E8C014B8DB276FDB3BCEADAAE21AFED835C83D204938F2C8076E227B09C7E4B5C97A23BF2CB67EF5ACA2B6A19D61D2F669F3CCFEA1B4EAD2981E5C4D42F4CB960DE9EDBF4C5927C1769B151950C0110035C47B509AEF62AAB0175DA1A994F85BDA667638A305CBFF4C73D7754E7A312EA0F050B99F2ACD054017F7D40943C1A234E056581" + "'", str34, "5F77C6420928F8C47912E26ECA90DB1033C170E37BB5E54048BBCE22490421EC999F18F4DD7EC3021E70E565027848A530AF4882DD9C6D2581DD75804BF0510B9D19D7A4EFD188A5D46C5CBC6876B221716E91A17C329E79D6106CB036705EBBA692DF97E219E3C5103A8D3E8C014B8DB276FDB3BCEADAAE21AFED835C83D204938F2C8076E227B09C7E4B5C97A23BF2CB67EF5ACA2B6A19D61D2F669F3CCFEA1B4EAD2981E5C4D42F4CB960DE9EDBF4C5927C1769B151950C0110035C47B509AEF62AAB0175DA1A994F85BDA667638A305CBFF4C73D7754E7A312EA0F050B99F2ACD054017F7D40943C1A234E056581");
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("4D4C8E2E20030A55B604493C7700ED49933089CFC3B5004641CE8B8129C0142D91ABFA409D685D0B79A84FA7957F1AFB781BD87A2C9710F55E17128CBD9C8C59135FA1577C84FC5D8A5F508F75FB7DCB1557B824C39AC1906DD3DCB32A8BF8A59DD33E7A26D07558A5BD45C071BE6386", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey11);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("973DAD711DBDED294D7B756668A76E985E99E1DAB4BF0B32190F8B244DEEE951CD78BF9EB4AB37299A9BD0400BE104F6ED8DEC32B097BE81235421C56D953C65981A6685D6C7A41067BCF13C225EABB88E43C627DAD3934C7D68C6BCEE69BF9BE42DA8486D680A7F3B18CACE0FC4A0CC08683619B3C090B565955EE036A6C117BDB790C330CE4C3C89C7ED620B12CAAB08C18643FC60FE988E0D6EB82BB92E24532076DA8BEE9D73B3CD5938BB8B20CA76020C7DBC9FD9EB6CF90E769F57B01FFB29C34A10DE9C500FFD36A3F3B6F2AE9B5DE279E1A24A28B6D1AA0EF7132B2D371D56295E54F5D629F6F7FC9189C99B", secretKey11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[64, -107, 101, 41, -41, 26, -45, 52, -118, -122, 80, 38, -90, -37, 93, 21]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-40, 73, -96, -122, 108, -102, -48, 112, 57, -54, -95, -20, -40, 63, 25, 58]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-42, -6, 66, -94, 102, 127, -23, -1, 77, 38, 65, -97, 70, 87, 80, 78, 121, 19, 93, 61, 51, 78, -106, 59, -127, -107, -45, -128, 22, -91, 77, 111, -11, 28, -124, -42, -107, 96, 109, -20, 106, 64, -104, -57, -25, -74, -111, -100, 87, -4, -22, -46, 82, -118, 28, 42, -72, 21, -66, -59, 59, 100, -59, -86, 18, -32, 44, 82, 88, -109, 47, 9, -114, 68, 39, -16, -110, -103, 5, 53, 74, 102, -19, -116, -89, -29, -78, 45, 100, -63, -6, -126, 27, 99, 86, 88, 64, -107, 101, 41, -41, 26, -45, 52, -118, -122, 80, 38, -90, -37, 93, 21]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[99, -29, 90, -7, 69, -77, 71, 83, -28, 39, 32, 96, 0, 94, 43, 102, -5, -118, 98, -55, -75, 75, 126, 105, -12, 5, 39, -4, -99, 106, 96, -74, -43, -47, -119, 31, 111, -97, -32, 65, -124, 116, 75, 107, 9, 72, -53, 117, 62, 83, 10, 29, -50, -66, 34, -44, 53, -63, -128, -93, -117, -118, 47, -115, 120, 49, -19, 78, 74, -2, -72, -46, -99, -109, -113, -112, -70, 61, -117, 111, 79, -103, 42, -62, 87, 87, 15, 40, 50, -114, 102, -37, -94, 96, -121, -51, 64, -107, 101, 41, -41, 26, -45, 52, -118, -122, 80, 38, -90, -37, 93, 21]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-95, 61, 66, 65, -100, -68, -30, -113, 25, 10, -10, -43, -124, -112, 111, -53]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-26, 91, -125, -124, -83, -56, -28, -89, -73, 21, -76, 69, 90, 103, -3, -128]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-26, 91, -125, -124, -83, -56, -28, -89, -73, 21, -76, 69, 90, 103, -3, -128]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-127, -86, -70, 91, -49, 76, 62, -81, -46, 122, 88, 78, 82, -110, -27, 28]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[48, -36, -16, 29, 19, -57, -103, 78, -92, -54, -82, -108, -44, 59, -103, 9, 96, 41, -101, -85, -91, -92, 79, 88, 33, 31, -112, -76, 18, -74, -17, -68, -95, 61, 66, 65, -100, -68, -30, -113, 25, 10, -10, -43, -124, -112, 111, -53]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[68, 25, -92, -28, -60, -82, 50, 23, -45, 52, -68, 45, -57, -111, 74, 19, 18, -39, -3, 34, -87, 35, -25, 16, 35, -85, -55, 117, 99, -59, 17, -10, -95, 61, 66, 65, -100, -68, -30, -113, 25, 10, -10, -43, -124, -112, 111, -53]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-95, 61, 66, 65, -100, -68, -30, -113, 25, 10, -10, -43, -124, -112, 111, -53]");
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey49);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey49);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey77);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey77);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("FB83E713190A7571AE722110B348511FBCAC782FA38E8CD4553A704DD75ADD55CF5DBDBCDA0B7E51B06319A69A0D84A5395780C36240E12F480C3386BD64FE7BD005C48CCEF781BFC8C03CCAB48BA79777685B1A54388FD5F5242D8B749DA7FD4FC71E27D2C9BB5D0E55316F5945D7F9", secretKey77);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-109, -31, 87, 81, 55, -10, -82, 85, -41, 24, 93, 84, -33, 63, 109, 123]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-26, 23, -53, 14, 4, 101, 24, -102, 83, -55, -18, -128, 51, 7, 94, -40]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[19, -83, 76, 6, 65, -39, 47, -127, 1, 95, 127, 60, 92, -82, 75, -57]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-127, 116, -60, 87, 121, 15, -122, 44, 98, 21, 108, 40, -29, -57, 15, 68]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-6, -76, -51, -37, -13, -1, -124, -50, 88, 5, -73, 110, -102, 71, -77, -103]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[35, 51, -103, 102, -10, -105, 98, 59, -19, -12, 9, -87, -86, -69, -51, -96]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[35, 51, -103, 102, -10, -105, 98, 59, -19, -12, 9, -87, -86, -69, -51, -96]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-95, -97, 124, -127, -117, -94, -34, 49, 3, 127, -2, 69, -117, 71, -108, 7]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[94, -49, 121, -97, -81, 82, 124, -81, 88, 113, 68, -99, -49, 30, -117, -27]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[2, -56, -125, 32, -53, -32, -5, -58, -12, -73, -13, -26, -117, -76, -78, -57]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-117, 101, -33, 80, -10, -75, -79, 21, -17, 27, -50, 50, -49, 48, 95, 12]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[19, 41, -7, -39, -44, -84, 115, 97, -79, -128, -23, -5, 115, -83, 46, 35, 99, -85, -128, 6, 60, -109, -94, -46, -87, 103, -36, -33, 39, -99, 91, 55, 2, -56, -125, 32, -53, -32, -5, -58, -12, -73, -13, -26, -117, -76, -78, -57]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[77, -51, 76, 117, -86, 97, -88, -38, 31, 21, -18, 113, -93, -25, -87, 71, 28, 1, 57, 106, 11, -25, 121, -59, -104, 97, 3, 66, -22, -73, -49, 111, 2, -56, -125, 32, -53, -32, -5, -58, -12, -73, -13, -26, -117, -76, -78, -57]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-38, 68, -110, -69, 96, 79, -57, 116, -99, 113, 49, 89, -6, 44, 55, -95]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-90, 124, -64, -110, -5, 92, -44, -122, 35, -23, 9, -66, 116, -39, 25, -52]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[61, -120, -126, 80, -119, -14, 37, 19, -30, 69, -93, -25, -125, 35, 57, -36]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-23, -95, -21, -120, 86, 15, 6, 30, -42, 42, -45, 22, 23, 65, 3, 76]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-123, 126, -53, 11, 16, -13, 90, 1, 36, -14, -8, 74, -7, 93, 23, -65, -102, -124, -21, -75, 123, -115, 42, 23, 115, 22, -17, 98, 36, -116, -84, -57, 61, -120, -126, 80, -119, -14, 37, 19, -30, 69, -93, -25, -125, 35, 57, -36]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-50, 45, 17, -15, -88, 51, 101, 49, -101, 124, -51, -44, -31, 92, -105, 27, 107, -68, 22, -52, 126, -24, -71, 70, 73, -126, 120, -12, -35, 39, 3, 0, 61, -120, -126, 80, -119, -14, 37, 19, -30, 69, -93, -25, -125, 35, 57, -36]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[92, 74, -127, 30, 61, 5, 84, -49, -77, -71, 98, -61, 29, -65, -122, -91, 76, 112, 83, -55, -115, 94, 68, 123, 65, -4, 66, -109, 48, 106, 2, 116, -123, 107, -47, 11, -101, 80, -103, 90, -19, -117, -23, -82, 54, 62, -63, 86, 47, 99, -50, 53, -89, 92, 43, 46, -9, -12, 127, 108, -76, 111, 104, 64, 68, -16, 121, 84, -3, -25, 4, -48, 50, 19, 61, -89, 121, 94, 26, 15, 27, 33, -52, 52, 126, -74, 51, 120, 126, -60, -45, -98, -52, -63, 26, 13, 61, -120, -126, 80, -119, -14, 37, 19, -30, 69, -93, -25, -125, 35, 57, -36]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteArray86);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("8DE2D2478B9254DA9F2857FE63F009EF998A83F3CB7DEB4931DD64ECB229D6F42CF335D3DD27F8123BAC8B090886EFAB", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[19, 81, 48, -3, -105, 85, 57, 66, 80, 63, -13, 107, -86, -99, -33, -98]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-61, 78, 16, -26, 64, -38, 109, 49, 113, -78, -62, 41, 23, 8, -88, 53]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-61, 78, 16, -26, 64, -38, 109, 49, 113, -78, -62, 41, 23, 8, -88, 53]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-45, 24, -27, 80, -18, -126, 0, -16, -50, 14, 99, 47, -8, -76, 40, -34]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-59, 32, 51, 34, -72, 17, -83, 98, 30, -30, 71, 38, -108, 23, -100, 117, -82, 6, -91, 93, -19, -60, -91, -58, 74, -72, 126, 23, -36, 67, -46, 47, 104, -92, 105, 89, -121, -45, 93, 77, 23, 125, 76, 29, 78, 100, 17, -55, -21, 49, 48, -93, 63, 16, -61, -24, -109, -85, -10, 92, -1, 82, 109, -26, 69, 65, 70, 96, -124, -120, -81, -104, -29, 30, 84, 48, 83, -20, -56, 109, 50, 12, -2, 94, -72, 36, 74, 100, 9, 59, -103, 111, 23, -9, 56, -17, 19, 81, 48, -3, -105, 85, 57, 66, 80, 63, -13, 107, -86, -99, -33, -98]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[45, 60, 48, -123, -108, -35, 69, 73, 42, 13, -109, -14, 127, 26, 44, -107, 47, -80, -105, -90, -30, 79, 20, 92, -41, -72, 7, 0, 16, -29, -68, -117, -127, 64, -98, 91, 118, 110, -112, -122, 47, -77, 91, -41, -122, -78, 27, -30, 116, -89, -56, -117, -108, 43, 52, -126, -14, -103, -15, 32, 78, 99, -52, 19, 51, 54, 123, -19, 2, 48, 66, 47, 96, 37, -46, 81, 116, -56, -5, 87, -65, 45, 97, -3, -20, -114, -127, -116, -74, -31, -118, 117, -23, -12, 94, 105, 19, 81, 48, -3, -105, 85, 57, 66, 80, 63, -13, 107, -86, -99, -33, -98]");
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("C9FC1992384A1755DB64614442270E2B31563704ECF16EFAA5C1726C4CDBC498C642A97DCEEC3F4FA6F43A36B23BCA396ACB3DCF339DB09FC664F5FD55FA820E29A30EBA11F10418470CBD5010EA6B9327ECA4F06CE1E9613299AF18DAF1189E646DA4CE696E820FF0EA76CC637A32B5", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("012FDBF56D49E13B3D07EC7B6AF379E89B230FB893AEBEF1CC9164FD4F2B639DDD1B05648B10C14615401CDC1373379D36000C0006F5698A172A78EE7AEC5540D91E0377A1843CF5E55F70E5949CCF3E7D855EB8E605A931840FAA7984BB939659D2B87946E3A22A00FC15A66A1BB0D2", secretKey9);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[106, -41, 62, 96, -69, -26, -96, -63, -103, 66, 84, -10, -51, 10, -6, 73]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[17, 59, -83, -56, -32, 30, 66, 20, 16, -93, -17, 14, -62, 34, 95, 89]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[17, 59, -83, -56, -32, 30, 66, 20, 16, -93, -17, 14, -62, 34, 95, 89]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[51, -1, -126, -103, 112, -8, 12, -28, 47, -99, -43, -16, 111, -71, -127, 76]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-92, -11, 95, -18, 95, -104, -108, 31, 77, 99, 36, -102, 66, 3, 8, 65, 69, -41, -16, -30, -87, 91, 91, -18, -114, 80, -21, 83, -16, -37, -40, -106, 106, -41, 62, 96, -69, -26, -96, -63, -103, 66, 84, -10, -51, 10, -6, 73]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[122, 117, 2, 31, -35, 50, -127, -104, -118, 32, -23, 53, 7, 98, 86, -114, 110, 47, 9, -114, 64, 81, 58, 35, -73, -41, -67, 109, 73, 38, -67, -118, -85, -34, -84, 27, 119, 104, -20, -52, -4, -66, -5, 90, 31, -53, -45, -18, -39, 75, -113, 62, 14, 61, -94, -40, -88, -97, 8, -56, 102, 67, 10, 65, 75, -32, -44, -19, 58, -107, 51, 97, 56, -106, 110, -110, -24, 91, 114, 79, -31, 77, 35, 78, 118, -49, -28, 1, -51, 48, 83, -115, 99, 41, 115, 102, 106, -41, 62, 96, -69, -26, -96, -63, -103, 66, 84, -10, -51, 10, -6, 73]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-92, -11, 95, -18, 95, -104, -108, 31, 77, 99, 36, -102, 66, 3, 8, 65, 69, -41, -16, -30, -87, 91, 91, -18, -114, 80, -21, 83, -16, -37, -40, -106, 106, -41, 62, 96, -69, -26, -96, -63, -103, 66, 84, -10, -51, 10, -6, 73]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey3);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("911F57119EB24E767E42E4F6B323A1B64ACC59F689B27E8E3BFDDB32C46328E28973E926473BDF881F9F712F06F4821C", secretKey16);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey16);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[70, -5, 121, -89, 85, 63, 70, -121, 92, 52, -24, -65, -98, 110, -13, -124]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-9, 48, 88, -28, -57, 5, -58, -41, -47, 28, 121, 115, -92, -53, -84, -76, -83, 121, -42, -38, -117, 125, 46, 64, -36, 45, -72, 109, 71, -2, -47, -64, -1, 82, 44, 109, 25, 15, 106, -100, 27, -108, -85, 73, -112, -88, -14, -105]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[23, 46, -71, 124, -15, 46, 35, 33, -85, -2, 81, 15, 64, -112, -96, 119]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-53, -20, -82, -77, 62, 93, 78, -34, 80, -27, -114, 78, -7, -50, 115, -124, -101, -38, -39, -68, -2, -53, 75, 80, -89, -11, -103, 6, 15, 50, -53, 67, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-73, 99, 120, -120, 4, 27, -80, 109, 39, 80, 117, 32, -18, 107, -99, -62, 51, 93, -97, 124, 84, 52, 45, -107, 78, 100, -35, 90, -103, 50, 3, 47, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-53, -20, -82, -77, 62, 93, 78, -34, 80, -27, -114, 78, -7, -50, 115, -124, -101, -38, -39, -68, -2, -53, 75, 80, -89, -11, -103, 6, 15, 50, -53, 67, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[45, -104, 74, 22, 98, -116, -27, 5, -1, -21, 68, -103, 122, 66, -19, -21, -52, 112, 9, -107, 122, 85, 74, 24, 38, -83, -5, 83, -70, -74, 31, 0, -57, 30, 27, -105, 122, 80, 122, -124, -50, 5, -62, 83, 11, -111, -120, -22, 14, -35, 65, 82, 97, -15, -88, 45, -126, -50, -38, 61, -79, 115, 28, 29, 37, 71, -94, 112, -69, -85, -90, -89, -87, -74, -46, 4, 105, 109, -93, -27, -117, -34, -44, 79, 103, -50, 60, 92, -80, -36, -79, 16, 62, 87, -37, 111, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-59, -61, 48, -55, -46, -20, -87, -78, -20, 41, -15, -109, 87, 19, 113, -14, 47, -88, 73, -87, 21, -111, -39, 75, 118, 13, -93, 110, 36, -33, -20, 16, 30, 60, -123, -22, -1, -1, -116, 50, 78, -92, 123, -49, 32, -83, 55, -97, 61, 72, 14, -67, 103, -63, 70, -106, 125, -89, -30, 33, -95, -54, 93, -83, 6, -4, 120, -65, -24, 29, 52, 114, 43, -44, 118, -13, 40, 113, -64, 112, -54, -98, -38, -41, 27, 102, 103, 58, 36, -74, -11, 111, 97, 47, 119, 15, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[85, 109, 63, -44, -87, -47, -104, -20, -33, -79, 97, 14, 80, -48, 77, -110, 98, 122, 36, 62, -1, 89, -100, 83, 39, 89, -70, -34, -44, 20, -2, -85, 124, 93, 61, -54, -127, 59, 27, -28, -116, 122, -1, -78, 67, -99, 108, 44]");
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BC56F621DC45FC7D1FDEDD4E498E56D34D7F230DC0E6513A1E8E802ABE835C2B0F9EE57E2E19D764D4335F94137AB4BEE19F8D586276EBC8D9B901ED50CD8BE3CC8DB84CD51730BBA1D34E0DE2CA64CAA3FA81C1A3930109BD10DC23E6003DA1D6D7D2AF02CCD0059606A2F3912D1C5", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[38, -32, 127, 101, 126, 106, 117, -61, -16, 122, -33, -96, 41, 61, -38, -54]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[46, -87, 10, 86, 108, 28, 92, -113, 4, 14, 22, 95, -68, -61, 120, -37]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[46, -87, 10, 86, 108, 28, 92, -113, 4, 14, 22, 95, -68, -61, 120, -37]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[81, -36, 51, 85, -15, 8, -69, 25, 98, -104, -51, 87, 76, -45, 112, 9]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-8, -91, -104, 16, -26, -32, 41, 84, 29, -64, 4, -80, -56, 40, 17, 37, 67, 56, 49, 4, -36, 103, -40, 95, -6, -123, 57, 46, -8, 85, 13, 98, 38, -32, 127, 101, 126, 106, 117, -61, -16, 122, -33, -96, 41, 61, -38, -54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DF57A0BDB140E063A505859D3DBE36A31EC39B5D7160CEC52DD429BA558F66D52F83FC5E00DB0EBD338561A30117FA8316A2E200B6E0087EDDAB37488D3FC3BF57EFC9E89A9DCADF52E95FF6C62A6D87C8F00A2D51B140F573CFF54B7B4B09DAF3D9FAC906C9FA54BDD62CEBA4E4981725D88AFE04A3181738651954C16D4F873B8DB4E9553FFEC22A848C0948C81740D06E06C5D3575F6BA912A5D9E0538065E1A322FB206902AFD6A56436DFF1A36A956F4F91D854D317531ADD29B7E7ADC400317F5725F641EF027FCF5DE3F22985FA53D5959D31294AB325893D16432B4026E07F657E6A75C3F07ADFA0293DDACA" + "'", str13, "DF57A0BDB140E063A505859D3DBE36A31EC39B5D7160CEC52DD429BA558F66D52F83FC5E00DB0EBD338561A30117FA8316A2E200B6E0087EDDAB37488D3FC3BF57EFC9E89A9DCADF52E95FF6C62A6D87C8F00A2D51B140F573CFF54B7B4B09DAF3D9FAC906C9FA54BDD62CEBA4E4981725D88AFE04A3181738651954C16D4F873B8DB4E9553FFEC22A848C0948C81740D06E06C5D3575F6BA912A5D9E0538065E1A322FB206902AFD6A56436DFF1A36A956F4F91D854D317531ADD29B7E7ADC400317F5725F641EF027FCF5DE3F22985FA53D5959D31294AB325893D16432B4026E07F657E6A75C3F07ADFA0293DDACA");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, -10, -5, 21, -70, -111, 43, 41, 33, -73, -5, -58, 101, 127, 59, 16]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-63, -95, 30, -62, 13, -34, 68, -91, -43, 62, -99, -40, 97, 9, -76, -87]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-87, -37, 68, 94, -9, -46, 12, -97, -55, 49, 39, 41, 47, 101, -115, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, -10, -5, 21, -70, -111, 43, 41, 33, -73, -5, -58, 101, 127, 59, 16]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-82, 1, -85, 67, -39, -95, 61, 67, 114, -120, 12, 32, -66, -12, 62, -55, 84, -73, 1, -102, 24, 34, -23, 2, 124, -102, -74, -125, -87, -20, -85, 50, 7, 105, 50, 127, -81, 36, 86, -2, -67, -79, -36, 118, -109, -28, 79, -115, -97, 63, 75, -111, 9, 38, -41, 71, -24, 74, -13, 69, 64, -42, 43, 31, 93, -88, -116, -28, -27, -30, -59, -84, 123, -38, 39, 57, -11, 41, 122, 66, 92, -88, -49, -38, -126, -21, 125, -75, 25, 17, -15, -98, -3, 16, -128, -116, 100, -10, -5, 21, -70, -111, 43, 41, 33, -73, -5, -58, 101, 127, 59, 16]");
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey20);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey20);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("CF37B0B529CCD850082647A5F1BC3A6C402E2C7CC1BF7E02CEF0A7CBA81BB836A4C5883F5BC097FB385E58BE67E3C3C4", secretKey20);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-99, 67, 90, 109, -60, -19, 84, 19, -100, -47, 3, 48, 57, -98, 124, 84]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-27, 108, 66, -36, -42, -115, -34, -54, -68, 10, 19, 116, 121, 7, 21, 24]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-87, -95, 119, -119, -84, -95, 55, -128, -55, 70, -22, -127, -10, 116, -40, 17]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-59, 34, 122, 59, -27, 62, 15, -104, -76, 102, -101, -6, -104, -126, 41, -9]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-96, 103, -125, 127, -114, -38, 97, -78, -92, -126, 44, 22, -43, -127, 12, -95, 82, -55, -77, -33, 47, -32, -102, -101, -11, 40, -88, -60, -33, -34, -115, -31, -87, -95, 119, -119, -84, -95, 55, -128, -55, 70, -22, -127, -10, 116, -40, 17]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[104, 84, -37, -46, 111, -50, 127, -112, -9, 107, 26, -74, -8, 113, -84, 44, -98, -49, -77, -54, -70, 65, 24, -113, -105, 121, 16, 106, 89, -63, -63, 115, -87, -95, 119, -119, -84, -95, 55, -128, -55, 70, -22, -127, -10, 116, -40, 17]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[104, 84, -37, -46, 111, -50, 127, -112, -9, 107, 26, -74, -8, 113, -84, 44, -98, -49, -77, -54, -70, 65, 24, -113, -105, 121, 16, 106, 89, -63, -63, 115, -87, -95, 119, -119, -84, -95, 55, -128, -55, 70, -22, -127, -10, 116, -40, 17]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-42, 115, 4, 36, 44, -110, -105, -31, 125, 126, -1, 99, 24, -101, -118, 49, 101, 49, -108, -66, -111, -96, -104, -53, -117, 36, 5, -91, 112, 126, -1, -55, -43, 1, -15, 115, 89, -85, 127, -52, -42, 54, -121, 16, -30, 60, -79, 103, 22, -99, 105, -124, 25, 80, 2, -53, -42, -125, 57, 71, 107, 70, -3, -124, -100, 110, 48, 3, 56, -3, 2, 33, 80, 103, 86, 97, 40, -77, -20, 55, -103, -89, 6, 38, 66, 28, 90, 86, -39, 36, -123, -117, 84, 127, 63, 73, -87, -95, 119, -119, -84, -95, 55, -128, -55, 70, -22, -127, -10, 116, -40, 17]");
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey30);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-103, 78, -70, -121, 77, -128, 116, 125, 84, -91, 2, -67, 78, 18, -107, 22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-115, 75, -99, -122, -43, -76, -29, -83, -100, 65, -62, -85, -98, 86, -43, -102]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[25, -95, -42, -100, -16, 96, 79, 1, -95, -8, -103, -116, 82, -13, -57, -104]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[20, -20, -76, -11, -125, 113, -110, 82, 10, 4, 44, -119, -6, 72, 122, -60]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-34, -48, -118, -20, -43, 115, -112, -24, 39, 95, 56, 68, -109, -77, -71, -82]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-34, -48, -118, -20, -43, 115, -112, -24, 39, 95, 56, 68, -109, -77, -71, -82]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[27, -123, -60, -72, 20, 46, 100, 71, 50, -47, -20, 16, 59, -69, 77, -46, -126, 109, -96, -40, 72, -46, 104, 109, 60, -4, -123, -51, -8, 121, -13, 35, 73, -21, -14, -71, -44, 105, 9, -116, -85, 56, -91, -72, 19, 125, -72, 42, -34, 38, 96, 102, -59, -25, -127, 43, 96, 123, 33, 14, 53, -59, -118, -36, 111, 122, -125, -48, -87, 24, -31, -48, 118, 92, 77, -110, -48, -80, -117, -1, -52, -31, 88, -110, -41, 102, 7, 56, 62, -124, -121, 122, 52, 6, 120, -61, -72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[46, 3, 60, 103, -106, 86, 109, 68, 118, -47, 81, -62, -24, 53, -75, -51, -41, -33, 19, 9, 43, 5, 109, -8, 25, -84, 7, 34, -23, -120, -90, -69, -72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-22, -105, -77, -44, 69, -95, -36, 39, -14, 34, -99, -4, -23, -81, -19, -47, -12, -68, -47, -109, 83, -126, 120, -98, -86, -55, 46, -124, -111, 58, -59, -1, -95, 63, -77, 51, -117, -100, 78, 104, 51, -44, 73, -47, -106, -16, -63, -92, -44, 69, -57, -61, 111, -124, -3, 102, 9, -120, 10, 90, -123, 119, 117, 66, 55, -79, -11, 98, -51, 24, 81, -102, -93, 100, -117, 12, -61, -106, -67, 104, 2, 16, 94, 46, -19, -20, 120, -78, -97, 108, 31, 14, -75, -121, -81, -117, -72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[27, -81, 85, -59, -31, 126, 120, -40, -42, -116, 61, 58, 121, -24, 10, 15, 66, 35, -9, 74, -53, -127, 6, 30, -67, -14, -71, -92, 21, 74, 7, -112, -72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-27, -60, 116, -116, 36, 58, 62, -78, 5, 32, 122, 53, 66, -122, 42, -72, -106, -22, 24, -21, 12, 25, 119, 110, 38, -32, 84, 51, -87, -106, -112, 116, 50, 16, 113, -111, 15, 47, 16, -6, 11, -82, -119, 117, -112, -125, 84, 46, -12, -29, -30, 21, 114, -117, 29, 56, -24, -14, -51, 2, 125, 45, -44, -68, -48, -97, 41, -117, -44, 120, 100, 74, -62, 40, -16, -100, -23, 101, -114, 58, -117, -47, -62, -39, -85, 56, -98, -16, 75, 121, 106, 115, 37, -77, 32, -61, -72, -44, -120, -75, 55, -53, 91, -85, 56, -73, 70, -7, 88, 8, 60, 13]");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "E5C4748C243A3EB205207A3542862AB896EA18EB0C19776E26E05433A9969074321071910F2F10FA0BAE89759083542EF4E3E215728B1D38E8F2CD027D2DD4BCD09F298BD478644AC228F09CE9658E3A8BD1C2D9AB389EF04B796A7325B320C3B8D488B537CB5BAB38B746F958083C0D" + "'", str40, "E5C4748C243A3EB205207A3542862AB896EA18EB0C19776E26E05433A9969074321071910F2F10FA0BAE89759083542EF4E3E215728B1D38E8F2CD027D2DD4BCD09F298BD478644AC228F09CE9658E3A8BD1C2D9AB389EF04B796A7325B320C3B8D488B537CB5BAB38B746F958083C0D");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "E5C4748C243A3EB205207A3542862AB896EA18EB0C19776E26E05433A9969074321071910F2F10FA0BAE89759083542EF4E3E215728B1D38E8F2CD027D2DD4BCD09F298BD478644AC228F09CE9658E3A8BD1C2D9AB389EF04B796A7325B320C3B8D488B537CB5BAB38B746F958083C0D" + "'", str41, "E5C4748C243A3EB205207A3542862AB896EA18EB0C19776E26E05433A9969074321071910F2F10FA0BAE89759083542EF4E3E215728B1D38E8F2CD027D2DD4BCD09F298BD478644AC228F09CE9658E3A8BD1C2D9AB389EF04B796A7325B320C3B8D488B537CB5BAB38B746F958083C0D");
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey21);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey21);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey21);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey21);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("07348ECD51EED5BD08687C6F83217330C5264FED1BBC550113DDC7F394CCE711D7EB0FE5866936479D357810CBAFA3B3", secretKey21);
        java.lang.Class<?> wildcardClass31 = secretKey21.getClass();
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-86, -40, -58, 79, -47, -6, 9, 106, -80, 12, -1, -8, 17, 46, 1, 46]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-25, 57, 105, -7, 124, -64, -51, -28, -106, 22, 23, -6, 3, -87, -37, -88]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-86, -88, -117, -28, 66, -75, 3, -30, 50, 18, 20, 103, -125, -46, 92, -116]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-103, -86, 1, 23, 94, -51, -120, -118, -83, -115, -36, 67, 94, 113, -70, -35, -27, -2, 80, -95, -88, -45, 100, -48, -81, -11, -78, 32, 97, 115, 14, -85, 5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[78, 19, -99, -34, 51, -95, 75, 122, -77, -120, -102, -110, -35, 99, 26, 1, -32, -47, -34, 6, -123, 19, 22, 123, -24, 43, -77, 39, -94, 78, 32, 87, 5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-127, 55, -37, -68, -96, -85, -86, -46, 10, -14, -71, 124, 52, -38, -100, 6, 33, -128, -24, 114, 81, -114, -110, -53, -123, 6, 2, 87, 71, -11, 68, 98, 5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-37, 94, -90, -103, -23, -109, 103, 99, -65, -105, 50, -65, -45, 119, -116, 112, -114, 56, -59, -33, 38, 2, 29, 104, -61, -49, 74, -110, -40, -105, -67, 20, 5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[12, 108, -76, -49, -57, 85, -84, -29, -103, 47, 41, 77, 24, 98, -51, -27, 83, -29, -111, -112, 21, 104, 59, 88, -22, -64, -33, 26, 65, -6, -6, 82, 29, -40, -114, -71, -4, 123, 5, -29, 50, -85, -14, -57, 64, 97, 118, 49, 0, -67, -29, -102, -115, 92, 5, 30, -87, -11, 117, 52, 43, -54, 99, -39, -112, 66, -4, 81, 81, -119, -33, 88, -70, -56, 94, -87, 44, 4, 122, 31, 7, 94, -1, 93, 57, 6, 97, 122, -34, 116, -47, -88, -65, 65, -108, -88, 5, 109, -12, -37, -71, -20, -63, 34, 89, -14, -64, 121, -53, -56, -113, 51]");
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("D9EE101B4685006F7128539956351AF2C1444CEC28235FAD9E38DA1A1681FF76BB19A14E5C277A50867FACC53FD23378", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("105FC605D6A2070B9F640FBC1B6F3682A741D1DEEFCC6B0E745C7D3691E95F68EF8CACAD83A3B737873E0745834804A5C106EED22ED626ACF9D81168490BA52B17B7481A7D7BFE599506CE914180AF25783D943EFF3E2F31E7CEDDEA15F9DE0A4D83F80AFFC66C1932A4CF9A85D3513F", secretKey31);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-128, 12, 77, -83, 122, -21, 17, 16, -36, 41, -119, -77, 25, 7, 102, -124]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[60, -91, -106, -81, -1, 43, -44, 17, 44, -42, -62, -121, -13, 90, 122, 4]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[64, 7, 58, 11, 109, 103, -120, 59, -8, -123, 39, 102, 59, 24, -58, 7]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 5, 86, 116, 52, -16, -66, 72, -38, 61, -10, 27, -36, -75, -85, -71]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[31, -124, 84, 44, 76, -23, 71, -65, 94, 75, -40, 125, 49, -87, -48, 65]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[31, -124, 84, 44, 76, -23, 71, -65, 94, 75, -40, 125, 49, -87, -48, 65]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-32, 116, 95, -125, 44, -120, -5, 1, -83, 15, 91, 83, -128, 97, -48, 87, 109, -116, -67, -124, 38, -105, -72, -49, 31, -124, 102, 0, -126, -86, 49, 127, 95, -71, 12, 60, 17, 118, -89, -41, 32, -105, -49, 89, 120, 8, -44, -28, -91, -29, -85, 84, -13, 107, 45, 59, -78, -99, -67, 124, 87, -17, 39, -107, 7, -79, -100, -46, 35, -11, -81, -34, 107, -116, 121, 47, -99, 17, -39, -103, -97, 58, -27, -119, -88, 115, -117, 84, -21, -74, 42, 36, 32, 21, -6, -88, 24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-2, -63, 6, -74, -82, -100, -3, 21, -59, -60, 91, -65, -11, -69, -90, 10, -127, -90, 50, 12, 70, -16, 58, 106, 77, 36, 41, -85, -114, -80, -5, -84, 24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-3, 23, 100, -18, -13, 69, -27, -122, -91, 7, -122, -81, 56, 122, -110, 68, -48, 47, -5, -59, 77, -70, 36, 29, -80, 118, -123, 31, 16, -20, -116, -30, 65, 120, 117, -64, -11, -44, -24, 15, 54, 66, 0, 107, 116, 21, 63, -39, -80, 27, 50, -8, -82, -79, -44, 77, 46, 106, 86, -3, -73, -94, 50, 41, 90, -49, -124, 6, -114, 2, -28, 34, -92, -1, -62, 53, 109, -83, -33, -35, 43, 25, -39, -34, -57, -100, -59, -25, 17, 22, 102, -12, 30, 93, -37, 82, 24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[67, -29, 57, 110, 84, 14, -8, -96, 85, 107, -59, -17, 127, 70, -41, 38, 34, -111, -71, 82, 117, -123, 72, -49, -54, 52, 35, 85, 92, -87, 45, -127, 24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-32, 55, 117, 11, -59, -93, -30, 40, -97, -108, 85, 101, 94, -4, -54, -64, 117, -97, 32, -38, -61, 33, -43, -45, -84, -37, 73, 27, -55, 94, 31, -95, -125, -115, 57, -29, 124, 85, 126, -85, 16, 110, 27, -89, -84, -26, 38, -106, 115, 104, 125, -12, 93, -96, -54, 55, 10, -45, 27, 36, 91, -86, -20, -123, 62, 111, -22, -124, -76, 99, 97, 38, -14, -39, -119, 17, -84, -9, 69, -86, -72, -113, 66, 37, -71, -60, 107, -112, 3, -48, 62, -48, -17, -69, 61, -47, 24, -17, 114, -86, -122, 78, 49, 127, 5, 81, 109, -107, -8, 18, 98, 61]");
        org.junit.Assert.assertNotNull(byteArray41);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey49);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey49);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey77);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey77);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey77);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray86);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray86);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-56, 95, -123, -40, -82, -57, 110, -17, -90, 112, 119, 96, -103, 55, -50, -17]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-4, 3, 118, -93, 54, -109, 113, -68, 52, -107, 95, -109, 37, 18, -2, 56]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[98, -8, -33, -33, -79, -117, -103, -63, 87, 93, -24, -119, 72, -36, -43, -4]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[15, -124, 79, 57, 27, -83, 31, -117, -115, -9, -36, -117, -44, -12, -32, -48]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[88, 50, 75, -42, 103, 107, 67, -109, -56, -22, 37, 2, -25, -42, -3, 58]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[47, 85, -82, -60, 41, 3, 116, 0, 98, 52, -76, -30, -6, 35, -78, -57]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[47, 85, -82, -60, 41, 3, 116, 0, 98, 52, -76, -30, -6, 35, -78, -57]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[62, -24, -91, 19, 75, -94, 87, -42, 119, -93, -73, -9, -37, 49, 120, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-65, 13, 84, -122, -63, -2, -46, 12, 102, -69, -79, 41, 47, -64, -33, -51]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[86, -119, 76, -113, -4, 36, -26, -29, 104, 56, 24, 97, 102, 33, -83, 88]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[48, 27, 50, -12, -32, 47, 14, 30, 59, -117, 82, 9, -28, -118, 109, 31]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-127, -124, 65, 119, 49, 91, -110, -125, 28, -119, -10, 88, -123, -48, 120, 2, -3, 7, 94, 8, -104, 66, 23, 83, 88, -19, 9, 61, -78, 68, 125, 85, 86, -119, 76, -113, -4, 36, -26, -29, 104, 56, 24, 97, 102, 33, -83, 88]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[123, -71, 59, -111, 76, -96, -72, 94, 63, 118, 6, 118, -119, -98, 6, 92, 3, 42, 53, -82, 42, -43, -77, 57, -52, 71, 25, -93, 38, 105, -102, -116, 86, -119, 76, -113, -4, 36, -26, -29, 104, 56, 24, 97, 102, 33, -83, 88]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[62, -46, -15, 108, 22, 119, -115, 80, -120, 113, 67, -74, -76, 57, 2, -20]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[18, -99, 14, -8, -1, -89, -17, 54, -76, -30, -95, 22, 47, -48, 67, -21]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-114, 99, 55, 70, 19, -24, 62, -31, 108, 23, -17, -41, -1, -29, -5, -57]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[78, 43, -49, -15, -7, -29, 74, 99, -89, 8, 9, -45, 94, -39, 38, -70]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-37, -55, 63, 47, 65, 23, 86, -16, 20, 85, 1, -38, 73, -51, 69, 91, 20, 73, -125, 125, -84, 92, 106, 19, -48, 67, -46, -105, 62, 10, 105, -86, -114, 99, 55, 70, 19, -24, 62, -31, 108, 23, -17, -41, -1, -29, -5, -57]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[14, 2, -125, -110, 95, 120, -38, -19, 95, 108, -17, -72, -28, -122, -43, 127, 26, -35, -121, 14, 48, -70, 69, -49, -58, -60, -80, -70, -27, 46, -2, -81, -114, 99, 55, 70, 19, -24, 62, -31, 108, 23, -17, -41, -1, -29, -5, -57]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-2, -73, -126, 16, 121, -110, 81, -105, 49, -31, 4, 108, 22, 78, 98, -97, -47, -125, -100, 109, 35, 77, 58, -40, -102, 42, -79, -128, -97, -88, 15, 118, 50, -79, 48, -32, 13, -95, -19, 26, 75, -105, -128, 102, -1, 67, -107, -103, 59, -6, 69, -59, -56, -10, -74, 69, 38, 103, -53, -33, 18, -83, 5, 54, -127, 52, 26, -30, -14, -73, 41, -43, -110, -50, 99, -33, 14, -44, -41, 125, 59, -120, 100, -17, -3, 35, -88, 22, -104, -63, 104, -31, -82, -13, 23, -128, -114, 99, 55, 70, 19, -24, 62, -31, 108, 23, -17, -41, -1, -29, -5, -57]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-37, 61, 55, 40, 99, 25, -19, 96, 9, 26, -84, -46, 49, 100, -123, -37, 118, 106, 39, -11, 13, -21, 39, -106, -105, 69, 117, -93, -17, -66, 38, 121, -114, 99, 55, 70, 19, -24, 62, -31, 108, 23, -17, -41, -1, -29, -5, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DB3D37286319ED60091AACD2316485DB766A27F50DEB2796974575A3EFBE26798E63374613E83EE16C17EFD7FFE3FBC7" + "'", str87, "DB3D37286319ED60091AACD2316485DB766A27F50DEB2796974575A3EFBE26798E63374613E83EE16C17EFD7FFE3FBC7");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DB3D37286319ED60091AACD2316485DB766A27F50DEB2796974575A3EFBE26798E63374613E83EE16C17EFD7FFE3FBC7" + "'", str88, "DB3D37286319ED60091AACD2316485DB766A27F50DEB2796974575A3EFBE26798E63374613E83EE16C17EFD7FFE3FBC7");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4C7CB59394E72B69F45D1E2AA0FA780F751F16EB8BA56483F94BE11F79E67ECF9F3D63109C0B2FE7578E64352135EA2938A7C6A88E392EEE5475858750DD388554589950EEE0DA54A320B42765ED7287E5C011BDFE31C693EA9C58289A153ED33DE270921AF017460D3499ED48FBE503", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BC56F621DC45FC7D1FDEDD4E498E56D34D7F230DC0E6513A1E8E802ABE835C2B0F9EE57E2E19D764D4335F94137AB4BEE19F8D586276EBC8D9B901ED50CD8BE3CC8DB84CD51730BBA1D34E0DE2CA64CAA3FA81C1A3930109BD10DC23E6003DA1D6D7D2AF02CCD0059606A2F3912D1C5", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[120, -113, 89, -1, 112, 122, 42, 49, -125, 81, 24, 119, -83, -22, -98, -93]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[11, 109, 113, -50, 2, -87, -67, -4, -11, 126, -73, 78, 57, -1, -37, 51]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[19, 52, -100, -38, 51, -81, -126, 7, -49, 27, -95, -111, -58, 54, 76, 73]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3" + "'", str11, "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3" + "'", str12, "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3" + "'", str13, "5649FBFDD96F4D806AD8317043A047FC39553D3C0AC9AA11CF1750790D2FFB4C9F0EFB593E823075FB0056A534E1689F7F651C259D6C49845B57CD440F60E8B21BB9819A8BB9429FD35CE7880DBF1F35BAB04297025572359F8F3AC95A80C3BA729988FEE48D960C65B3D33075F1A5C63E77200137728A9D5A471D999EE3E8CF769EBADF19550C595669A04ABBF9615C837EE032700E74444B37B56DF049CE24244CEBA7C4A5360A6D3D2C83FC8C36DA807B1D9EEDD5704660B763812F1D943EA2763D021237CF6F0FB065B3601297AB673CECA34568A9C98234CBDADC8CD5F0788F59FF707A2A3183511877ADEA9EA3");
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("28CB949D24EEE4DC467B318C66541639", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("D83E92664961C1EF1D22294E2ECE9117BA47572F878827B21016D1A1288C690A0D4867AC9ABDEE8B731818AEB32F6232", secretKey5);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-111, 2, 68, -27, 5, -66, -109, -4, -20, 45, -112, -48, -77, 60, 16, 81]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[124, -42, -120, -1, -75, -79, -48, -23, 58, -128, -105, -40, -79, -121, 41, 43, 14, -1, -90, -24, -82, 123, 95, 126, -20, -62, -61, -71, 105, 77, -88, 117, -18, -45, 125, 25, 51, 98, 15, 21, -7, 62, -28, -8, 94, 119, 80, 108]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[34, -16, -14, -39, 29, -115, -73, 2, -40, -92, 28, -13, -11, -125, 8, 13, 60, 95, 125, 117, 105, -52, -64, -47, -59, 19, -124, 85, 74, -38, 77, -104, -18, -45, 125, 25, 51, 98, 15, 21, -7, 62, -28, -8, 94, 119, 80, 108]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-73, -93, 95, 103, 94, -14, -109, -3, 18, -60, -50, 125, -31, -120, 64, 40, -68, -99, 3, -80, -114, -35, -62, 61, -11, 89, 2, -124, 94, 81, 106, -93, -18, -45, 125, 25, 51, 98, 15, 21, -7, 62, -28, -8, 94, 119, 80, 108]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-28, 109, -90, 120, 48, -11, 62, 35, -45, -117, 92, -9, 22, 61, -47, 110, -97, 5, 9, 14, 82, -118, 63, 86, 47, -124, 92, -24, -90, 62, -70, 3, -115, -25, -41, -98, 103, 27, -43, -18, -28, -99, 43, -9, 84, -127, 17, -5, 117, 7, 29, -92, 50, 114, -11, 94, -112, 43, 23, 107, 109, -94, 108, 75, 123, 94, -103, 25, 8, 36, 100, 27, -103, 16, 81, -52, -67, -48, 22, 59, 115, 97, -17, 108, -5, -44, -108, 108, -101, -22, -37, -6, 111, -98, -78, -80, -18, -45, 125, 25, 51, 98, 15, 21, -7, 62, -28, -8, 94, 119, 80, 108]");
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("5A4388F5C9EE9C7F705CA6A58D37FC3D", secretKey8);
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-100, 56, 61, 6, -110, -125, -103, 117, -21, -121, 70, 37, -119, 44, -34, 51]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-69, -11, -65, 125, -114, -9, 61, 52, -97, -40, 65, -82, 85, -117, -40, 61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-69, -11, -65, 125, -114, -9, 61, 52, -97, -40, 65, -82, 85, -117, -40, 61]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-87, 104, -14, -30, -31, -30, -45, 65, 46, 13, 72, -78, -97, -64, 40, 8]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-60, 103, 107, -126, 6, 98, -63, 73, -128, 62, -16, 43, 53, 126, 28, 99, 85, -64, -57, -58, -116, 48, 102, -100, -28, -125, 98, -58, -8, 87, 95, -5, -100, 56, 61, 6, -110, -125, -103, 117, -21, -121, 70, 37, -119, 44, -34, 51]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-60, 103, 107, -126, 6, 98, -63, 73, -128, 62, -16, 43, 53, 126, 28, 99, 85, -64, -57, -58, -116, 48, 102, -100, -28, -125, 98, -58, -8, 87, 95, -5, -100, 56, 61, 6, -110, -125, -103, 117, -21, -121, 70, 37, -119, 44, -34, 51]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-100, 56, 61, 6, -110, -125, -103, 117, -21, -121, 70, 37, -119, 44, -34, 51]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[40, -60, 116, 21, -78, -12, 93, -66, -79, -119, 78, 64, 2, 10, 64, 39, -3, -122, 50, 9, -10, -87, 94, 55, -37, -101, -112, -93, 124, 75, -73, 3, -100, 56, 61, 6, -110, -125, -103, 117, -21, -121, 70, 37, -119, 44, -34, 51]");
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("6C517F653C3377D929E534FF5EA12175FA6A0E7795946216928F57AB947E8683ED53EF4B9E0E1EDAEC5C39A2FF8C4575", secretKey26);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey26);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey26);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey26);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-75, 120, -74, -88, 70, 110, 116, -80, 123, -84, 105, -7, 38, -78, 42, -31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-85, -88, 38, 19, 55, 113, 42, -104, 36, -121, -80, 80, -97, -92, 12, 63]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-31, 108, 94, 26, 28, 37, -107, 12, -27, 81, 91, -89, 74, -76, 70, -97]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-70, 35, -86, -29, 46, 87, 93, 27, 115, 15, -89, 67, 62, -38, -20, -87]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, -7, 112, -20, 72, -45, -57, -78, 20, 48, -29, -45, 34, 45, 60, 25]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[106, -118, 57, 93, 37, -16, 14, 35, -5, 35, -31, -80, -32, -33, -31, -124, -108, 51, 94, -48, 34, 27, 2, 8, 110, 82, -52, 47, -120, -3, -65, -114, -111, 83, 97, -37, -97, 13, -29, -9, -106, -27, -78, 127, 52, 43, -125, -115, -5, 78, 121, -30, 106, -110, 89, 40, 1, -68, 58, -103, -118, 114, -13, 66, 116, -56, -118, -21, 122, 41, 120, -58, -12, 103, 105, 119, -86, -2, 13, -51, -16, -114, -11, -22, -120, -96, -44, 82, -96, 81, -113, 7, 126, 105, 40, 71, 97, -7, 112, -20, 72, -45, -57, -78, 20, 48, -29, -45, 34, 45, 60, 25]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-83, -120, 71, 48, 68, 26, 111, 124, 52, 106, 81, -34, -89, -60, 23, -45, 115, -50, -70, 85, 118, 123, 123, -82, 60, -86, -73, -113, 93, -39, -85, 74, -128, -85, -23, -85, -100, 30, -14, -85, 2, -88, 77, 119, 62, 30, -60, 103, -113, -96, 96, 126, 109, 110, -102, -3, -16, 52, -56, -109, 0, -38, -10, -79, 97, -7, 112, -20, 72, -45, -57, -78, 20, 48, -29, -45, 34, 45, 60, 25]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey5);
        java.lang.Class<?> wildcardClass11 = secretKey5.getClass();
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-11, -4, 28, -11, 21, -75, 81, 86, -29, 98, -16, -61, -116, 56, 117, -93]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-50, 51, 100, 51, 96, 5, 99, 41, 77, -56, -25, 80, 85, -25, -121, -12]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-50, 51, 100, 51, 96, 5, 99, 41, 77, -56, -25, 80, 85, -25, -121, -12]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[81, 98, 58, 107, -32, 17, -41, 29, -108, 70, -75, 25, 46, 79, -53, -3]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-114, 33, -12, 48, 100, -20, -50, 23, 82, 22, -93, -16, -29, -19, 13, 40, 47, -46, -94, -59, -101, 8, 4, 15, -106, 50, 94, -122, 2, -35, 70, -85, -11, -4, 28, -11, 21, -75, 81, 86, -29, 98, -16, -61, -116, 56, 117, -93]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey7);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-93, -9, -15, -126, 56, 25, -96, 77, 115, -69, 111, -81, -71, 101, 56, 47]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-84, -76, 19, 20, 107, 125, 48, -63, 63, 40, -89, 11, 122, -47, -127, 104]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[95, 110, 20, -16, 120, -66, -22, -1, 109, 70, 68, -68, -15, 88, -110, -37, -91, 73, -40, 28, 107, 62, -30, -33, -85, 34, 55, -49, 61, 9, 80, 65, 21, -97, 18, 11, 22, 110, -21, 109, -67, -8, 35, 24, -82, -99, -109, 97, -123, -7, 40, -106, 87, 113, -13, 30, -101, 17, 90, -31, 94, 19, -28, -27, -71, 92, -1, 127, 81, -58, 55, -87, -17, -6, 36, 69, 107, -40, -39, 66, -7, -71, 80, 52, 11, 57, 47, -11, -115, -104, 34, -80, 24, -62, -7, 111, -93, -9, -15, -126, 56, 25, -96, 77, 115, -69, 111, -81, -71, 101, 56, 47]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "5F6E14F078BEEAFF6D4644BCF15892DBA549D81C6B3EE2DFAB2237CF3D095041159F120B166EEB6DBDF82318AE9D936185F928965771F31E9B115AE15E13E4E5B95CFF7F51C637A9EFFA24456BD8D942F9B950340B392FF58D9822B018C2F96FA3F7F1823819A04D73BB6FAFB965382F" + "'", str12, "5F6E14F078BEEAFF6D4644BCF15892DBA549D81C6B3EE2DFAB2237CF3D095041159F120B166EEB6DBDF82318AE9D936185F928965771F31E9B115AE15E13E4E5B95CFF7F51C637A9EFFA24456BD8D942F9B950340B392FF58D9822B018C2F96FA3F7F1823819A04D73BB6FAFB965382F");
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("93E856496AB2A11AB44A36FBC8B36255EF986B6AAA7E6506684F69F08DDBAC717A3E807967132C777B05E6CA0673F7BD00455126E4F72F3D293C331C70BC358E9C1E15B06F01FA53020796398DF5CF28172FE57E9FFB4BDF71C3144B5002BDCD49277D4B4143E0964FA60A7BC6FC46F0", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-83, -26, 52, 42, -121, 24, 65, -78, 69, 75, -75, -95, -105, 20, -91, -109]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-127, -116, -5, -74, -1, 125, -115, 99, -117, -23, 8, 52, -108, 9, -123, 16]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-127, -116, -5, -74, -1, 125, -115, 99, -117, -23, 8, 52, -108, 9, -123, 16]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-123, 26, -65, 61, 35, -36, 64, 44, -107, -95, -61, 31, -89, -4, 127, -128]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-65, 72, -107, 90, 94, 116, 11, -113, -43, 103, -68, -61, 9, 48, -6, 68, 114, -122, -84, 22, -74, -53, -79, 104, 63, -60, -64, -34, 100, -28, 71, -115, -83, -26, 52, 42, -121, 24, 65, -78, 69, 75, -75, -95, -105, 20, -91, -109]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-65, 72, -107, 90, 94, 116, 11, -113, -43, 103, -68, -61, 9, 48, -6, 68, 114, -122, -84, 22, -74, -53, -79, 104, 63, -60, -64, -34, 100, -28, 71, -115, -83, -26, 52, 42, -121, 24, 65, -78, 69, 75, -75, -95, -105, 20, -91, -109]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[91, -121, 14, 66, -119, 123, -29, 18, 72, 17, 36, -4, -52, 82, -62, 76, 106, -110, 39, 44, -128, -48, 27, 33, -104, -30, 116, -121, 105, 12, -2, -36, 104, 76, -28, -17, -19, -25, 23, -35, 7, -79, -62, -30, 72, -82, -21, 73, 29, -13, -114, -54, 100, -4, -27, 118, -21, 46, -83, -36, -94, -55, 32, -36, -41, 84, 88, 125, 67, 93, 30, 111, -12, -109, -63, -128, 102, -33, -4, 122, -72, 28, 31, 73, 74, 87, 111, -73, 106, 88, -88, 6, -70, -126, 76, -29, -83, -26, 52, 42, -121, 24, 65, -78, 69, 75, -75, -95, -105, 20, -91, -109]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey51);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray63 = new byte[] {};
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey65);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey69);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey79);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey79);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey79);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey79);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey79);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey79);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("9CCBC03D05AB85E13D79E44337ACE832A4BAA108E91AF4CB07CF3307104A78EA4F9BA93A1FDF4480DDCB0F38683A493C", secretKey79);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF800238462E513BE5098334AC67DCD08462F3EF1D20C85620DD2DC4BD1A2823D7B22DB2B6419599E6A69C5CC2E8B4F8348D9F75590E6587EBF8FB21F59383C3594608DF4FA8A993839AE949996524B3FB2C76C3B473B66EFCFC5C8935A18BA38C96B0E7E1BA043160B73224F2931F8B", secretKey79);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[93, -45, -96, 38, 73, 80, 13, -78, 81, 26, 24, 82, 2, -86, -36, -53]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[71, 87, -68, -15, 5, -57, 1, -60, 10, 31, -98, -39, -93, -125, -96, -24]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[90, -67, 5, 114, 73, 62, 68, -118, 88, 80, -64, 71, -102, 23, 99, -124]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-25, -2, -126, -128, 39, 36, -8, -71, 106, 51, 39, -17, -77, 88, 19, -88]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[104, 18, -18, 49, -52, 24, -24, 1, 105, 93, -84, 49, -13, 50, 103, 88]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[25, -53, 104, -116, -5, -25, -83, 44, 121, -3, 7, 101, -94, -114, 26, -25]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[25, -53, 104, -116, -5, -25, -83, 44, 121, -3, 7, 101, -94, -114, 26, -25]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[106, 7, 11, 72, 78, -86, -75, 67, 26, -83, 11, -36, 88, -22, 108, -90]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-83, -80, 113, -77, 42, -17, 21, 118, -126, 96, 123, 83, -43, 80, -92, 127]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-67, 21, -89, -52, -90, 61, 115, 52, -12, 114, 81, -64, 41, 44, 51, -68]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[4, -103, 97, 75, -76, 68, 90, 63, -52, 76, -83, -26, -50, 14, -90, -8]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[56, -60, 113, -6, 1, -55, -55, -5, 64, -34, -32, 125, 123, -68, -19, -94, -53, -46, 25, -46, 97, 45, -76, -21, 90, -13, -37, -106, 92, -15, -128, 58, -67, 21, -89, -52, -90, 61, 115, 52, -12, 114, 81, -64, 41, 44, 51, -68]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-104, -85, 101, 71, 86, 95, 27, 91, -56, 80, -84, -122, 93, -24, -92, -62, 34, 24, 77, -52, -91, -25, 83, -28, -110, -26, 81, -61, -34, 12, -104, -101, -67, 21, -89, -52, -90, 61, 115, 52, -12, 114, 81, -64, 41, 44, 51, -68]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-66, -116, 44, 4, 5, 54, -20, -71, 30, 3, -96, 34, -121, 103, -60, 3]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-99, -79, 68, -8, -81, 37, 44, 78, 71, 101, -96, -56, -87, -127, -59, 90]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[80, 104, -103, 18, -63, -32, 107, -80, 79, -58, 95, -18, -62, -39, 80, 48]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-84, 48, -83, -58, -1, 42, 97, -76, 54, 20, 25, -86, 74, 114, -88, 45, 87, -39, -58, -102, 86, 54, 120, 113, -110, 4, -108, -93, 77, 47, -51, 77, -67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[127, -72, 108, -77, 99, -126, -33, 82, 9, 16, -102, -17, -54, 106, 102, -41, -94, 12, -23, -30, -11, -97, -64, 112, 5, 75, 120, 49, -30, 12, -4, 12, -67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[121, 31, 13, -78, 77, -72, 98, -108, -48, 45, -71, -112, 109, 33, -36, 30, 2, 83, -2, 63, -30, 80, -73, -2, -89, 31, 26, 8, 105, 87, 73, 94, -96, 73, 25, -4, 28, 114, 107, 36, 36, 97, 42, -11, 52, 10, 82, -34, -58, -117, -45, -83, 100, 99, 27, 23, -103, -99, -61, 8, -105, 95, 90, -6, 111, -123, -20, 25, -107, 88, -36, 73, -16, -93, 64, -53, 119, -58, 98, -66, -20, 108, 48, 2, -121, 112, 19, 41, -15, -22, -109, -57, 125, -110, -39, -23, -67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[2, -60, -2, -114, 104, -42, 9, 94, 32, -73, 3, -37, 93, -87, -35, -56, 31, 56, 63, 5, 69, -81, 42, -38, 48, 47, 17, 72, -21, -39, 87, -30, -67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[85, -47, -50, -71, 48, -123, -22, 99, -121, 13, 76, -25, -101, 88, -3, 25, -49, 5, 90, -110, -45, 81, 19, -60, -112, -36, -40, 96, 14, -73, 61, 14, 103, 22, -35, -43, -6, 56, 3, 98, -57, -36, -34, -39, -102, -31, -88, -10, 2, 118, -21, 75, 35, -87, -78, -15, 29, 1, -105, 127, 104, 88, 115, -48, 66, -73, -114, 43, 63, 95, 75, 19, -58, 120, -57, -23, -80, -15, -93, 93, 6, 34, 43, -64, -62, -86, 24, -121, -35, 32, 54, -17, 126, 39, 42, -128, -67, 75, 66, -67, -9, 62, -66, 108, 5, -48, 78, 42, -94, 10, 15, 95]");
        org.junit.Assert.assertNotNull(byteArray90);
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray69 = new byte[] {};
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray69);
        javax.crypto.SecretKey secretKey71 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey71);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey75);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey75);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey75);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey81);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str89 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray69, secretKey85);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey85);
        java.lang.String str92 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey85);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey85);
        java.lang.Class<?> wildcardClass94 = secretKey85.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-127, 106, -63, -118, 71, -37, -44, -40, -92, -66, 85, 111, -58, 9, 100, -75]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-119, 12, -66, 81, -116, 108, 71, -106, 102, -100, -16, -53, -56, -114, -78, -20]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[61, 71, 88, -33, -122, -20, 57, -93, 26, 44, -102, -84, 64, 93, 40, -122]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[16, -31, -46, 14, 28, 32, 78, 116, -111, 47, -41, -115, -66, -23, 39, -40]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-124, -65, -39, -111, 7, 88, -51, -36, 57, -73, -37, 115, 55, -57, -8, 70]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[4, -2, 37, 52, -16, -84, 55, -119, -50, 65, -68, 70, 51, 29, -19, 126]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[78, -16, 105, -64, 116, -31, 71, -69, 33, 14, 126, 27, 76, -53, -128, -41]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[75, -4, 34, -67, -20, -39, 47, -43, -53, -20, -7, -13, 28, 30, -111, 123]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[33, -122, -52, -95, -90, -90, 0, 9, -37, -17, 6, 79, -12, -126, -108, -66, 49, -97, -124, -110, -51, 115, 39, 34, -6, -102, 21, -98, 9, -98, 58, -110, 78, -16, 105, -64, 116, -31, 71, -69, 33, 14, 126, 27, 76, -53, -128, -41]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-54, -89, -82, -30, -115, 101, -11, -118, 62, -75, 94, 112, 3, 113, -103, -69]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[62, 103, -23, -86, 3, 121, 121, -117, 41, -84, -110, 94, 19, -102, 3, 92]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-27, 93, -32, -47, -94, 5, -6, 46, 49, -35, 12, -27, -71, -101, -79, 13]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-33, -126, 62, 93, -108, -93, 57, -104, -10, 70, -54, -55, -105, -96, 121, 8]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(secretKey71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[-9, 116, -49, 111, 123, -100, -100, -2, -87, -106, -87, -65, 80, 88, 69, 0]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[91, 68, 76, -4, -30, -118, -98, -71, 77, -46, 95, 82, 29, 27, -73, 81]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[17, 109, -37, -83, 80, -52, -21, 97, 73, -13, -37, -67, -105, 59, 51, 94]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-17, 84, -3, 2, -10, 93, 125, -77, -47, -59, 81, 60, -31, 42, 70, -95]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-114, -102, -97, 113, -98, -40, -42, -76, -21, 92, 16, -100, 50, 41, -41, 21, 110, -114, 25, 18, 90, 31, 116, 123, -62, 19, -115, -105, -43, -127, 20, 69, 17, 109, -37, -83, 80, -52, -21, 97, 73, -13, -37, -67, -105, 59, 51, 94]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-95, 21, 9, 29, -67, -117, 42, -9, 64, 44, -75, 6, -50, -19, -24, 90, -87, -34, -115, -49, 6, -85, 99, -19, 97, -111, -36, 78, 30, 46, 66, -18, -2, 33, -35, 82, 30, -84, 31, -93, 98, 0, -92, -31, 108, 34, 92, -74, 37, -122, 87, -106, 115, 88, 107, -106, -110, -43, -93, -116, 12, -39, -9, 8, -119, 27, 34, -65, -52, 106, -26, -100, 91, -32, 10, -2, 45, 119, -30, 38, -69, -24, 30, 106, 75, -86, 26, 36, -15, 55, -23, -78, 93, 110, -83, 105, 17, 109, -37, -83, 80, -52, -21, 97, 73, -13, -37, -67, -105, 59, 51, 94]");
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-64, 0, -63, 31, -123, 94, -54, -19, 67, -4, -25, 19, -74, -23, -97, 120]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[53, -109, -74, -97, 73, -44, -25, 16, 54, 34, 91, -57, -99, 10, -57, 60]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[7, -7, 126, 83, -25, 75, -2, -121, 4, 12, 126, 43, -36, 116, 15, 2, 22, 86, -47, -128, 43, 15, 86, 82, 115, 97, 34, -83, -22, 107, 115, -11, -6, 103, -112, -71, -25, -79, 59, 15, 89, 82, 64, 3, 91, -121, 79, 111, -66, 60, -122, 99, -10, 101, -39, 25, 90, 111, 109, 90, 83, 86, -31, -111, -54, 22, -20, 113, 100, 8, 59, -70, -116, 52, -98, 109, -38, -25, -123, -81, -10, -85, 115, -8, -76, 109, -64, -18, -63, 35, -102, -75, 53, -124, 62, -39, -64, 0, -63, 31, -123, 94, -54, -19, 67, -4, -25, 19, -74, -23, -97, 120]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-40, -48, 18, 4, -36, -45, 39, -43, 110, -23, -40, -125, 89, 51, 7, -15, 113, 125, 21, -102, 37, -84, 26, -77, -20, 49, 36, -48, 15, 66, -56, 117, -64, 0, -63, 31, -123, 94, -54, -19, 67, -4, -25, 19, -74, -23, -97, 120]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "D8D01204DCD327D56EE9D883593307F1717D159A25AC1AB3EC3124D00F42C875C000C11F855ECAED43FCE713B6E99F78" + "'", str14, "D8D01204DCD327D56EE9D883593307F1717D159A25AC1AB3EC3124D00F42C875C000C11F855ECAED43FCE713B6E99F78");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[71, -108, -76, 33, -110, -114, 93, 124, -27, 19, 111, 59, -99, 72, 127, 89]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-16, 16, 55, -9, 88, -32, 23, -113, -78, -95, -72, 17, -74, -106, -90, -79]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-82, -74, 79, 15, -36, 43, -45, -85, 62, -40, -25, -13, 83, -45, 71, -16, 100, -74, -99, 93, -76, -33, 111, 36, 21, -9, -86, 84, -33, -106, -67, 8, 71, -108, -76, 33, -110, -114, 93, 124, -27, 19, 111, 59, -99, 72, 127, 89]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-17, -99, 45, -74, -48, -74, 5, 32, -84, -29, -126, 42, -11, -106, -42, 58, 57, 42, -35, 35, -38, -76, 66, 114, -20, 83, 90, 38, 107, 126, -74, 74, -23, 78, 41, -8, -34, 97, -70, -16, 106, -6, -118, -107, 21, -28, -46, -92, 5, 66, -82, -110, -104, -74, 99, -44, 116, 41, 25, -84, -76, 110, -107, -68, 71, -108, -76, 33, -110, -114, 93, 124, -27, 19, 111, 59, -99, 72, 127, 89]");
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("6089928EF0EC1A52F9E601572DB1E4CB8699A9284FD1C94AE3D3FC6BBF036430D5FCE1DD62A9EEE591BDC6ED60D05B34", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-44, 18, 91, 87, 6, -33, -38, -27, -51, -45, -113, -14, -105, -53, 5, -78]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-46, -40, 53, -79, 98, 118, -31, -39, 14, -102, 48, -42, -32, -108, 28, -107]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[71, -35, 15, 61, -69, -8, -97, -117, 112, -116, 121, 43, -21, -126, 119, 19, 114, 1, -15, 13, 124, 5, 27, -3, -80, 58, -126, 24, -17, -15, -77, -84, 68, -44, 60, 20, -29, 86, 60, -12, -24, 71, -6, 0, -47, 3, 52, 92, -14, -109, 37, 90, 90, -120, -33, 6, -72, 94, 114, -10, 121, 9, 1, 35, -14, -114, 62, 84, -90, 4, -23, 34, -101, 73, -5, 91, 16, -74, 17, 35, 105, -40, -17, 86, 116, -51, -35, -117, -56, 0, -85, -48, 104, 37, 80, 50, -15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-38, -85, 115, 57, 41, 47, 110, -22, 104, -126, 86, 100, 55, -112, -104, 45, -105, 24, -123, 66, -19, -119, -47, 72, -67, -19, 8, 99, -23, -25, -36, 94, 48, 14, 1, -53, -32, 20, -90, 71, 81, -127, -109, 89, 101, 30, -79, -35, 85, -3, -111, -15, -3, 54, -2, 28, -123, -22, 77, 124, -69, 72, -86, 111, -122, -101, 111, 33, 61, 18, 60, 78, -84, -100, -53, 23, -93, -29, -52, 34, 55, 54, 87, -77, -16, -89, 34, -52, -86, -122, -111, -68, 18, -120, 127, 42, -15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, 65, -58, 114, 80, 24, -22, -111, -89, 20, -61, 42, -8, -24, 5, -18, 49, 45, 64, 96, 89, -92, -45, 95, 9, 37, -65, -50, 5, -91, -126, -28, 51, -74, 81, 22, -128, -64, -6, -41, 122, -89, -10, 26, 91, 74, 87, -17, 54, -29, -73, -4, -10, 118, 89, -91, -29, 91, 51, -30, 121, 115, 94, -60, -64, -92, -124, -78, -28, -4, -95, 90, -12, 126, -46, 0, -122, -123, 121, 78, 55, -19, -52, 26, 16, -19, 62, -64, 6, 7, -90, -57, 90, -102, -111, 107, -15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[94, 100, -10, -34, 43, 51, 76, -95, 54, -83, -128, -57, 71, -3, -13, 38, -69, -42, -59, 106, -95, 63, 2, -107, 111, 100, -11, 110, 26, 57, 108, 82, 57, -68, 42, 91, -30, 97, 6, -39, 93, -122, 33, 116, -99, 48, 93, -19, -80, -13, -39, 88, 5, 28, 121, -83, -12, 125, -38, 31, -50, 94, -78, 78, 126, -24, -110, -71, -6, 53, -18, -75, -36, 31, 20, -30, 8, -112, -16, 65, -110, -15, -16, 112, 92, -33, -111, -101, 66, 114, 90, 114, -5, 125, -64, -19, -15, -17, 61, 124, 26, -7, -36, 22, 21, 13, -122, -42, 1, 53, -15, 59]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "5E64F6DE2B334CA136AD80C747FDF326BBD6C56AA13F02956F64F56E1A396C5239BC2A5BE26106D95D8621749D305DEDB0F3D958051C79ADF47DDA1FCE5EB24E7EE892B9FA35EEB5DC1F14E20890F04192F1F0705CDF919B42725A72FB7DC0EDF1EF3D7C1AF9DC16150D86D60135F13B" + "'", str19, "5E64F6DE2B334CA136AD80C747FDF326BBD6C56AA13F02956F64F56E1A396C5239BC2A5BE26106D95D8621749D305DEDB0F3D958051C79ADF47DDA1FCE5EB24E7EE892B9FA35EEB5DC1F14E20890F04192F1F0705CDF919B42725A72FB7DC0EDF1EF3D7C1AF9DC16150D86D60135F13B");
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        java.lang.Class<?> wildcardClass14 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[24, -70, -77, -51, -105, -88, 31, 25, 98, -44, -46, -28, 49, 98, -41, -20]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[68, 48, 31, 21, 72, 23, 7, -30, 52, 94, -99, -28, -87, 17, -104, -60]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-59, 35, 102, -58, -82, 67, 55, -53, -22, -112, -96, -13, 41, -19, -45, -30, -111, -119, 40, 64, -6, 113, -116, -112, 90, -112, 77, 115, 5, 18, -36, -26, -122, 40, -70, 66, -65, -41, -74, -8, 21, -8, -71, 53, -71, -47, 5, -37, 16, 24, -19, 55, -21, 5, -92, 38, -72, -80, -101, -2, 127, -51, 12, 50, 21, -70, 74, -76, -126, -40, -82, -75, -31, -49, 115, 104, 109, 82, -105, 15, 39, -110, -14, 12, 44, 3, 20, 57, -40, 51, 120, 49, 106, -78, 97, -26, 24, -70, -77, -51, -105, -88, 31, 25, 98, -44, -46, -28, 49, 98, -41, -20]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[24, -70, -77, -51, -105, -88, 31, 25, 98, -44, -46, -28, 49, 98, -41, -20]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("4B93528CB4D40368DBBC4EA8E4FF781EDC2DB9D78FBD2033B56BE9404B1870FEF23277FB0A8B5F6045F08FDF4785516B", secretKey4);
        java.lang.Class<?> wildcardClass9 = byteArray8.getClass();
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[101, -115, -89, -29, -100, -75, -57, 18, 15, -108, -108, 22, -19, 112, -110, 0]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[41, 60, 34, 81, -43, 50, -9, 99, -127, 70, -34, -84, -18, 105, 3, 91]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[48, 124, -73, 1, 8, -21, 64, 110, -95, -40, 3, -21, 81, -86, -97, -16, -103, 54, 20, 88, 74, 125, 47, -106, -40, -9, -76, -59, -115, 35, -86, 3, 9, -43, 123, -119, 19, -69, -94, 64, 52, -29, -71, 119, -84, -26, -40, 28, 106, 22, 27, 18, 85, 73, 76, 41, 39, -50, -128, -87, -96, -11, 89, 17, -117, 102, -109, 58, -87, 23, 81, -115, 50, 21, 43, 118, -29, 31, -53, 124, -99, -16, 109, -127, -10, -116, 8, 76, -34, 70, 98, -61, -76, 94, -126, -109, 101, -115, -89, -29, -100, -75, -57, 18, 15, -108, -108, 22, -19, 112, -110, 0]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[79, 34, 57, 53, 125, -107, 48, 65, -40, -75, -117, 42, -89, 21, 9, 10, 105, 12, 113, 117, -102, -86, 6, 10, -92, 65, -118, 28, 27, 52, -125, 100, -104, -92, -15, 67, -30, -41, 108, -96, 27, 75, -107, 70, 27, -95, -103, -122, 56, -17, 17, 68, 97, -128, -118, -46, 20, -79, -26, 72, -45, -88, -61, 90, 66, 90, 16, -92, 68, -36, 0, -58, -115, -100, 83, 48, -90, -115, -93, -44, -115, 105, -8, 100, 118, -32, 17, -111, -93, -104, -85, 57, -82, 25, 119, -42, 101, -115, -89, -29, -100, -75, -57, 18, 15, -108, -108, 22, -19, 112, -110, 0]");
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey62);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey62);
        java.lang.Class<?> wildcardClass70 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[112, 35, -45, 100, 12, 47, -49, 109, -59, 45, -94, -40, 71, 30, -96, 72]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[43, 71, -15, -81, 81, -123, 124, -74, -68, -31, -27, 106, -48, -91, 19, 99]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-94, -42, -29, 21, 49, -63, 115, 12, 9, 5, 101, 104, 102, 68, -59, 39]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[120, -82, 23, 127, -112, 58, 43, 107, -93, -33, 47, 80, 124, -73, 110, 119]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[7, 113, -99, -91, -107, 41, -80, -27, 40, -121, 69, 123, -5, -22, 113, 33]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[123, 7, 54, -64, 76, -67, -114, 24, 11, 30, 90, 82, 7, 71, -26, -35, 9, -15, -16, -89, 54, 61, 108, -85, -66, -11, 82, -74, 116, -104, 97, 108, 49, -18, 3, 117, -128, -34, -68, 48, -2, 95, -59, -46, -90, -7, 99, -34]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[49, -18, 3, 117, -128, -34, -68, 48, -2, 95, -59, -46, -90, -7, 99, -34]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[28, -51, 113, -39, 46, -12, -13, -87, -118, 15, 19, 58, -36, -63, -83, 52, 106, 114, -102, 104, -43, 117, 127, -104, 102, -44, 9, -50, 31, 52, 121, 85, 49, -18, 3, 117, -128, -34, -68, 48, -2, 95, -59, -46, -90, -7, 99, -34]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-58, -6, -60, 121, 99, 44, 35, -73, 36, -19, 35, 83, -23, -81, -16, 22]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[76, -31, 90, -47, 68, 90, -103, 16, 80, -72, 8, -60, -27, -122, 4, -3]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[24, -63, -69, -56, -91, -114, 33, 13, 3, 89, 66, -109, -85, -105, 7, 109]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 90, -55, 36, -100, -114, -110, -9, -103, 76, -77, 89, 90, -78, 28, 77]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-112, -99, 98, -99, 10, -106, -68, -71, -61, -57, -119, -86, -76, 77, -67, 66]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[80, 21, 33, -103, 80, -105, 62, 71, 31, 68, -15, 48, -35, 27, -97, -88, -49, -64, -11, 93, 52, 31, -99, -86, -39, 13, 46, -64, -33, 14, -61, 116, -26, -116, 102, -81, -14, 110, -103, 77, 62, -104, -113, -128, 45, -60, 119, 28]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-26, -116, 102, -81, -14, 110, -103, 77, 62, -104, -113, -128, 45, -60, 119, 28]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[120, -77, 21, 43, 63, -78, 108, -82, 22, 7, -95, 92, -50, -43, -119, 103, 116, -36, -17, -7, -18, -102, 14, -68, -94, 103, -80, -81, 78, -66, -3, 43, -26, -116, 102, -81, -14, 110, -103, 77, 62, -104, -113, -128, 45, -60, 119, 28]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[58, 29, 93, -100, 4, 52, -89, -64, -32, 77, 19, -39, 55, -37, -83, -54, 8, 126, 107, 22, -56, 108, 51, 45, -71, 33, 127, -61, -50, -67, -47, 61, -47, 17, 122, -103, -118, -91, 35, 101, -84, -7, 54, -39, -12, -13, 53, 82, 54, -124, -84, 124, -123, -71, 29, 23, 46, 94, -30, -77, -14, -89, -64, -7, 60, 123, -17, 29, -113, -28, -91, 44, 48, 104, 94, -61, 28, 117, -27, -75, 32, 63, 13, 28, 55, 1, 15, -10, -107, -38, 75, 56, -25, -17, 98, 117, -26, -116, 102, -81, -14, 110, -103, 77, 62, -104, -113, -128, 45, -60, 119, 28]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("38102B2E1145FBAAF0B2B38CC93ADD360FD596E4464D6F1D0861549F89A7ED7CBCD17E9F8278FCBF01F3E6B8574E38EC", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey15);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey15);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey15);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey15);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey15);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-15, -22, 54, 81, -62, 40, 79, 56, 55, -80, -37, 95, 96, -63, 31, -109]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-11, 47, 16, 125, -23, 13, 22, -32, 75, 6, -122, -118, -49, 20, 73, 96, 42, -76, -117, 16, -44, -42, -51, -15, 123, -119, -93, -59, -122, 87, 109, -65, 35, -101, 125, 64, -86, -120, 110, -57, -60, -85, -100, -93, -57, -106, -79, 105]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[10, -60, 42, -85, 81, 30, 6, -51, -55, 107, -41, -102, -88, -58, -41, -40, 113, -106, 73, -61, -108, 29, 84, 19, -97, 20, 9, 36, -107, 53, -14, -125, 65, -52, 60, -90, -16, 113, -55, -7, -10, -42, -101, 64, -11, -116, 12, -101, -60, -103, 23, 74, -46, 26, 48, -33, -114, -124, -40, -100, -123, 109, 41, 107, -75, -106, -3, 65, -109, 86, -9, 17, -48, 40, -60, -32, -111, 37, 53, 37, 10, 102, -30, -10, -50, 18, -10, -83, 121, -49, 9, -75, 100, 46, -55, -93, 35, -101, 125, 64, -86, -120, 110, -57, -60, -85, -100, -93, -57, -106, -79, 105]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0AC42AAB511E06CDC96BD79AA8C6D7D8719649C3941D54139F1409249535F28341CC3CA6F071C9F9F6D69B40F58C0C9BC499174AD21A30DF8E84D89C856D296BB596FD419356F711D028C4E0912535250A66E2F6CE12F6AD79CF09B5642EC9A3239B7D40AA886EC7C4AB9CA3C796B169" + "'", str9, "0AC42AAB511E06CDC96BD79AA8C6D7D8719649C3941D54139F1409249535F28341CC3CA6F071C9F9F6D69B40F58C0C9BC499174AD21A30DF8E84D89C856D296BB596FD419356F711D028C4E0912535250A66E2F6CE12F6AD79CF09B5642EC9A3239B7D40AA886EC7C4AB9CA3C796B169");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[44, -63, -88, 29, 31, -72, 56, 119, -35, -24, 107, -16, -39, 64, 126, -49]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-87, -103, -16, -121, -83, 10, 55, -115, 74, -75, -86, 35, -48, 25, -77, -102, -61, 32, 56, -69, 124, 107, 123, 31, -102, -39, -112, 35, 89, -112, 44, 124, -110, -103, 112, -66, 61, -101, -91, 95, -11, 111, 78, -42, 120, -40, -104, -54]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-110, -103, 112, -66, 61, -101, -91, 95, -11, 111, 78, -42, 120, -40, -104, -54]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-126, -28, 77, -110, 19, -22, 35, 105, 62, 25, -92, -44, 51, 94, -17, 36, -110, -18, 127, -41, -58, 89, 57, 89, 43, -81, -124, 100, -97, 98, -103, 107, -110, -103, 112, -66, 61, -101, -91, 95, -11, 111, 78, -42, 120, -40, -104, -54]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-87, -103, -16, -121, -83, 10, 55, -115, 74, -75, -86, 35, -48, 25, -77, -102, -61, 32, 56, -69, 124, 107, 123, 31, -102, -39, -112, 35, 89, -112, 44, 124, -110, -103, 112, -66, 61, -101, -91, 95, -11, 111, 78, -42, 120, -40, -104, -54]");
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey18);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey45);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey45);
// flaky:             org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[18, -25, -2, -119, -9, 37, 23, 97, 109, 29, 20, 10, -27, 105, -92, -61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-127, 85, 113, -119, 74, 43, 66, -23, -80, 105, -105, 21, -22, 87, 118, 50]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-69, -2, 75, -9, -123, -74, -20, -68, 78, -68, -120, 1, -7, -103, -44, -94]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[111, -43, -41, 38, 11, -83, -65, -82, 74, -22, -117, -77, 55, 81, -110, -23]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[83, -93, -90, -29, -125, 118, -49, 27, 107, -63, 66, -60, -36, 109, 58, -25, -101, 19, -98, 28, -88, -71, -124, -47, -78, -12, -13, 21, 37, 69, 55, -110, -69, -2, 75, -9, -123, -74, -20, -68, 78, -68, -120, 1, -7, -103, -44, -94]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[98, 84, 31, -112, 77, 64, -19, 33, -79, 32, 118, -106, -104, -44, -51, 48, 43, 126, 47, -29, -86, -28, -65, -1, 49, -42, -63, 82, -112, -94, 123, 53, -102, -23, -50, -44, -18, 108, -117, -99, 66, -41, -117, -18, 26, -66, -25, -4, 51, 116, 101, 49, -83, -123, -69, 38, 96, -116, 7, 105, 118, -80, -68, 90, -53, -110, 30, -122, 6, 68, -10, -22, 15, 6, -10, 108, -15, -64, 0, -111, -85, -124, 106, 105, 99, -57, 31, -90, 18, 21, 82, -39, 115, 0, -60, 115, -69, -2, 75, -9, -123, -74, -20, -68, 78, -68, -120, 1, -7, -103, -44, -94]");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "62541F904D40ED21B120769698D4CD302B7E2FE3AAE4BFFF31D6C15290A27B359AE9CED4EE6C8B9D42D78BEE1ABEE7FC33746531AD85BB26608C076976B0BC5ACB921E860644F6EA0F06F66CF1C00091AB846A6963C71FA6121552D97300C473BBFE4BF785B6ECBC4EBC8801F999D4A2" + "'", str25, "62541F904D40ED21B120769698D4CD302B7E2FE3AAE4BFFF31D6C15290A27B359AE9CED4EE6C8B9D42D78BEE1ABEE7FC33746531AD85BB26608C076976B0BC5ACB921E860644F6EA0F06F66CF1C00091AB846A6963C71FA6121552D97300C473BBFE4BF785B6ECBC4EBC8801F999D4A2");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-105, -65, -18, 79, 0, 107, 120, -56, -89, -57, 16, -27, -116, -81, -99, -27]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[83, -30, -32, -19, 24, -102, 27, -127, 21, -66, -22, 110, -102, 118, 105, -83]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[102, -66, 41, -48, 103, -52, 22, -91, -32, 4, 23, 103, -94, 4, 53, 77]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[37, -81, 113, 64, 2, 1, 30, 83, 19, 90, -89, -34, -94, 83, 116, -49]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[38, -61, 112, -94, -128, -69, -70, -15, 23, -95, 92, -43, 8, -64, 45, -107, 103, -16, -19, -20, 74, 0, 102, 64, 118, -117, -39, -117, -85, -7, 67, -82, 102, -66, 41, -48, 103, -52, 22, -91, -32, 4, 23, 103, -94, 4, 53, 77]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-39, 15, -124, -102, -116, -70, 0, 74, 72, -89, 87, 61, 44, -20, -20, 80, 127, -90, -51, 122, -44, -64, -67, 55, 89, -19, 14, 48, -44, -28, 98, 109, 102, -66, 41, -48, 103, -52, 22, -91, -32, 4, 23, 103, -94, 4, 53, 77]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-39, 15, -124, -102, -116, -70, 0, 74, 72, -89, 87, 61, 44, -20, -20, 80, 127, -90, -51, 122, -44, -64, -67, 55, 89, -19, 14, 48, -44, -28, 98, 109, 102, -66, 41, -48, 103, -52, 22, -91, -32, 4, 23, 103, -94, 4, 53, 77]");
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        byte[] byteArray0 = null;
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey63);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey63);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey63);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey63);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Null input buffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-104, -15, -47, -24, 72, 56, 5, -20, -111, -64, -109, -98, -40, 48, 47, 36]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[63, -45, 126, -7, -116, 39, -120, 16, 74, -22, -99, 7, -67, -70, -65, -56]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[32, 15, -20, -26, -43, 94, -70, -72, 32, -119, -121, 30, -79, -126, 110, 21]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[63, -109, 91, 14, -77, 94, 87, -25, 64, -40, 53, 49, 15, -51, -4, 84]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-5, -86, -47, 39, 30, 90, 106, 72, 27, -79, 74, -17, 58, 34, 123, -9]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[115, 48, 66, 14, 105, -104, 70, -126, -122, -60, 58, -87, 19, -19, 75, 18, 7, -111, -108, -16, -26, 96, 107, -75, -97, 49, -4, 97, 72, 0, -52, -104, 124, 25, -56, 104, 66, -28, 46, -4, -86, -125, 113, 127, -98, -90, 40, 3]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[124, 25, -56, 104, 66, -28, 46, -4, -86, -125, 113, 127, -98, -90, 40, 3]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[114, -43, 10, 22, -87, -70, -93, 113, 112, 57, 98, -105, 64, 24, -19, 51, -120, -117, -108, 12, -62, 116, 39, 89, -67, -34, 1, -56, -95, -16, 103, -72, 124, 25, -56, 104, 66, -28, 46, -4, -86, -125, 113, 127, -98, -90, 40, 3]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-68, -103, 112, 88, 112, 32, -3, 68, -124, -123, -69, -33, 89, -98, 40, 117]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[55, -119, -99, -119, -95, 124, -120, 27, 113, -55, 109, 4, -109, -88, 2, 99]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[120, 39, -31, -47, -78, -1, 112, -105, 11, -71, -81, -101, -102, 36, 71, 39]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-35, -73, 33, -122, 69, 24, -35, -10, -62, -30, -1, 64, 55, -23, -69, -52]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-46, 29, -112, 70, 54, -25, -58, 80, 37, -58, -17, -53, 110, 0, 103, -67]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-33, 82, -55, 121, 60, 92, 64, 25, 123, 97, -116, 78, 127, 83, 4, -122, 53, 112, -98, -7, -63, -4, -60, -6, -43, 111, 11, -38, -96, 70, -77, 9, -86, -64, 72, -110, 70, -57, 93, -104, -120, 116, -22, -108, -3, 104, 116, 107]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-86, -64, 72, -110, 70, -57, 93, -104, -120, 116, -22, -108, -3, 104, 116, 107]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[25, 127, -29, -83, -124, 11, 104, 22, -52, 28, -19, -88, -111, -94, -81, 89, 117, -12, 7, -91, 12, 88, 25, 83, -45, -57, 87, -46, 74, -12, -118, 0, -86, -64, 72, -110, 70, -57, 93, -104, -120, 116, -22, -108, -3, 104, 116, 107]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-19, -55, 91, 97, 60, 64, 70, 7, -69, 43, 126, -54, -49, 106, -42, -4, 62, -57, 54, -110, 91, -92, 57, -30, -53, 64, -73, 58, 58, 72, -67, 91, 63, -74, 6, -113, -63, 85, -75, 41, 14, 84, 55, -85, -124, -66, -115, 102, 49, -112, -76, 31, -69, 39, -110, 8, 41, 118, -61, -82, 107, 120, -28, -111, -115, 10, 16, -78, -12, -7, -77, -110, -125, 67, 66, 102, 53, 112, -83, 77, -40, -74, -59, -88, 75, 104, -55, 106, -31, -7, 16, -113, 43, -80, 113, -106, -86, -64, 72, -110, 70, -57, 93, -104, -120, 116, -22, -108, -3, 104, 116, 107]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey8);
        java.lang.Class<?> wildcardClass17 = secretKey8.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-74, -65, 45, 14, -103, 87, 23, 58, -63, 59, -53, -100, -5, -44, -105, 36]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, -47, -123, 79, -13, -26, 105, -60, 123, -112, 49, 109, -109, 111, -93, -60]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[84, -47, -123, 79, -13, -26, 105, -60, 123, -112, 49, 109, -109, 111, -93, -60]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[119, -95, -75, -32, 9, -57, 97, 48, 41, 62, 36, -50, -104, -51, -36, 101]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[40, -93, 30, -113, 2, -69, -28, 125, -25, -85, 91, -32, -47, -121, 65, -44, -35, -55, 5, -63, 107, -97, -14, 19, -118, -33, -26, -83, 127, 124, 63, -71, -74, -65, 45, 14, -103, 87, 23, 58, -63, 59, -53, -100, -5, -44, -105, 36]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[40, -93, 30, -113, 2, -69, -28, 125, -25, -85, 91, -32, -47, -121, 65, -44, -35, -55, 5, -63, 107, -97, -14, 19, -118, -33, -26, -83, 127, 124, 63, -71, -74, -65, 45, 14, -103, 87, 23, 58, -63, 59, -53, -100, -5, -44, -105, 36]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[49, 125, -20, 28, 74, -28, -96, 114, 84, -88, 55, 99, 115, -2, -22, 66, -7, -69, -102, 75, -11, -77, 119, -38, 71, 43, -19, -85, -5, 121, 70, 104, -98, 107, 39, -112, -10, 34, 43, 38, -109, 79, -82, -44, 5, -114, -77, -5, 123, -57, 48, -45, 55, -51, -29, 73, 20, -91, 10, -122, -61, -7, -34, 6, -78, 43, 63, 118, -124, -31, -33, 57, -52, -1, -99, 109, 78, -65, 28, 106, -102, 73, -34, 78, -90, 3, 70, -23, -118, 92, -22, 42, -1, -74, -7, -125, -74, -65, 45, 14, -103, 87, 23, 58, -63, 59, -53, -100, -5, -44, -105, 36]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[38, 79, 40, -57, -117, -71, -71, -35, 69, 47, -114, -68, 29, 63, 47, -46, -68, -31, 82, -78, -53, 92, -96, 104, -5, 77, -88, 57, 17, 22, -66, 127, -24, -63, 18, 3, 122, -17, 63, -101, -116, 28, -31, 4, -76, 124, 85, -81, 51, -35, 78, 88, -16, -83, -113, 56, -61, -89, -89, 49, 84, -104, 92, 17, 82, 124, -46, 47, 74, -51, -85, 25, 120, 51, 121, 7, 18, -60, 91, 62, -8, -108, -52, 98, -128, 15, 100, 21, -9, -80, -66, 105, 6, 7, -18, -71, -74, -65, 45, 14, -103, 87, 23, 58, -63, 59, -53, -100, -5, -44, -105, 36]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey11);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey11);
        java.lang.Class<?> wildcardClass19 = secretKey11.getClass();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-26, 83, -98, -39, 122, 43, -39, 100, 13, -23, 32, 123, -62, -40, -86, 114]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-83, 54, 99, -72, 92, 34, -52, -37, 44, -64, -88, 42, -8, -37, 116, -50]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-111, 59, 61, -40, 46, 76, -77, -11, -43, 78, -19, 24, 98, 64, 120, 72, 44, -119, -116, -41, -71, -17, 108, 98, 71, -1, -71, -107, -1, 84, 114, 7, 105, 30, 100, 56, 51, -91, 46, 61, 29, -78, -29, -76, 1, -41, 81, 119, -106, 111, -90, -102, -95, 64, 48, 97, 76, -114, 3, 42, 122, 36, 71, -13, -24, -55, -100, 35, 3, -121, 69, -89, -112, -52, -112, -97, 98, -52, -89, 40, 59, -33, 35, -113, 43, -28, 103, 33, -113, -24, 92, 124, 0, -100, -25, 126, -26, 83, -98, -39, 122, 43, -39, 100, 13, -23, 32, 123, -62, -40, -86, 114]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[111, 85, 86, 121, -27, 35, -63, 17, -50, 27, -48, 8, 53, 65, 91, -87, -121, 109, -13, -11, -94, 112, 53, -62, -47, -114, 26, 24, -30, 32, -19, 25, 90, 87, 14, -84, 32, 123, -115, -119, 47, 93, 68, 93, 16, -18, 83, -76, 110, 6, 27, 60, -16, 67, -55, -11, 78, 17, 45, 126, 32, -123, -92, -96, -126, 111, 63, 91, 92, -82, -34, -29, 118, 77, 36, 89, 73, 44, 98, -69, -124, -50, 83, -113, 48, -36, -123, -82, -40, -91, 31, -43, 21, -107, 106, 34, -26, 83, -98, -39, 122, 43, -39, 100, 13, -23, 32, 123, -62, -40, -86, 114]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[54, 94, -55, -107, -106, 21, 1, -125, 10, -20, 92, -113, -41, 71, 84, 22, -38, 49, -30, 94, -57, -64, -115, 59, -32, 11, 82, -123, -7, -75, 125, -104, -43, -49, -18, -3, 68, -52, -20, 91, -53, 114, 39, -26, -13, 3, 8, -93, 104, 109, -55, -48, -77, -9, 77, 42, -108, -33, -60, 102, -74, 116, 58, -126, -117, 55, 74, 31, 52, 68, -5, -33, 72, 90, -15, -55, -51, 74, -77, 30, 36, 57, -43, -33, -87, -75, -126, -111, 102, 37, 17, -65, -104, 71, 35, -67, -26, 83, -98, -39, 122, 43, -39, 100, 13, -23, 32, 123, -62, -40, -86, 114]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey16);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey16);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey16);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey16);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("C9FC1992384A1755DB64614442270E2B31563704ECF16EFAA5C1726C4CDBC498C642A97DCEEC3F4FA6F43A36B23BCA396ACB3DCF339DB09FC664F5FD55FA820E29A30EBA11F10418470CBD5010EA6B9327ECA4F06CE1E9613299AF18DAF1189E646DA4CE696E820FF0EA76CC637A32B5", secretKey16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey16);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-39, 127, -51, 39, -68, -101, -90, 68, -69, -59, 22, -10, -61, -38, -68, -33]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[56, 43, 76, 42, -74, -11, 115, 41, 123, 11, 124, 67, -11, 38, 7, -113]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[104, -58, -24, -98, 56, -27, -39, -40, -115, 85, -113, 84, -23, 97, -6, -98, 122, -119, -63, -58, -78, -87, -64, -22, 118, -50, 24, -115, 24, -53, -96, -63, -39, -105, 47, 28, 64, 86, 63, 93, 54, -52, 2, 124, -19, -107, -38, -22, -76, 56, -91, -92, -46, -124, 5, 67, 105, 42, 126, -95, 41, -126, -20, 18, -21, -73, -70, 117, -115, 36, -3, -52, -119, 37, -64, -110, 3, 93, 5, 6, -128, -23, -42, -9, 90, 28, -87, 71, 98, -64, -110, -22, 26, -84, 77, -32, -39, 127, -51, 39, -68, -101, -90, 68, -69, -59, 22, -10, -61, -38, -68, -33]");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "68C6E89E38E5D9D88D558F54E961FA9E7A89C1C6B2A9C0EA76CE188D18CBA0C1D9972F1C40563F5D36CC027CED95DAEAB438A5A4D2840543692A7EA12982EC12EBB7BA758D24FDCC8925C092035D050680E9D6F75A1CA94762C092EA1AAC4DE0D97FCD27BC9BA644BBC516F6C3DABCDF" + "'", str7, "68C6E89E38E5D9D88D558F54E961FA9E7A89C1C6B2A9C0EA76CE188D18CBA0C1D9972F1C40563F5D36CC027CED95DAEAB438A5A4D2840543692A7EA12982EC12EBB7BA758D24FDCC8925C092035D050680E9D6F75A1CA94762C092EA1AAC4DE0D97FCD27BC9BA644BBC516F6C3DABCDF");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[55, 44, -82, -59, 2, 61, 24, 64, -50, -113, 117, -94, 111, 106, 14, -37]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[113, 77, 114, -70, 76, 57, -120, -26, -93, 61, 96, -105, -114, -98, -11, -88]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[113, 77, 114, -70, 76, 57, -120, -26, -93, 61, 96, -105, -114, -98, -11, -88]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-84, -14, 90, -74, -51, 121, -71, 98, 66, 61, 22, 21, 32, -66, 70, 74]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[74, 79, 5, 116, -113, -99, -98, 52, -99, 108, -45, 79, 64, -55, 15, -122, -62, -44, -12, 81, -125, -101, -81, 93, -93, -2, -124, 11, -54, 64, -13, -66, 55, 44, -82, -59, 2, 61, 24, 64, -50, -113, 117, -94, 111, 106, 14, -37]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[64, 31, -48, -84, -16, 79, 117, -69, 69, -111, -11, -125, -79, -19, 52, -96, -5, 31, 32, 44, -24, 120, 61, 49, 116, 65, -78, 111, -78, 117, -28, -104, -44, 3, 11, -47, -108, 60, 57, 107, -94, 78, -47, -8, -92, -94, 7, -58, -31, -23, -91, -75, -14, 53, 64, -67, -5, -99, 122, 88, 84, -99, -70, -108, -86, -127, -122, 65, -108, 21, -74, -30, 92, 13, 119, -122, -4, 75, 118, 127, 11, -10, -22, 93, -113, -1, 62, 24, 113, -42, 2, 119, -9, -11, 117, 8, 55, 44, -82, -59, 2, 61, 24, 64, -50, -113, 117, -94, 111, 106, 14, -37]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[74, 79, 5, 116, -113, -99, -98, 52, -99, 108, -45, 79, 64, -55, 15, -122, -62, -44, -12, 81, -125, -101, -81, 93, -93, -2, -124, 11, -54, 64, -13, -66, 55, 44, -82, -59, 2, 61, 24, 64, -50, -113, 117, -94, 111, 106, 14, -37]");
        org.junit.Assert.assertNotNull(byteArray24);
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("5F6E14F078BEEAFF6D4644BCF15892DBA549D81C6B3EE2DFAB2237CF3D095041159F120B166EEB6DBDF82318AE9D936185F928965771F31E9B115AE15E13E4E5B95CFF7F51C637A9EFFA24456BD8D942F9B950340B392FF58D9822B018C2F96FA3F7F1823819A04D73BB6FAFB965382F", secretKey5);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[89, 111, 59, -90, -79, 96, -117, -92, -84, 25, -81, 76, -36, -13, 13, -12]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, -113, 88, 22, 27, 39, -46, 75, -52, 105, -126, 25, -83, -36, -95, -94]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[120, 108, -77, -119, -86, 17, 68, -93, -117, 10, -123, 70, 111, 24, -6, 48, 28, -90, -70, -81, 48, -19, -9, 14, -57, -120, 100, -85, 86, 76, 86, 75, 89, 111, 59, -90, -79, 96, -117, -92, -84, 25, -81, 76, -36, -13, 13, -12]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-70, -103, -35, 53, 59, -100, -122, -101, 39, -45, -7, -41, -99, 71, -47, 89]");
        org.junit.Assert.assertNotNull(byteArray10);
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray3 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey2);
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey2);
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertNotNull(byteArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[99, 93, -35, 91, -39, -94, 45, -109, 63, -73, -40, -15, 13, 108, 36, -64]");
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[85, 21, -74, -80, 91, 98, 21, -114, 90, -63, -63, 67, -11, -53, 3, 12, 17, -16, -53, 18, -67, 88, -69, 59, -104, -115, 28, 106, 24, -64, 110, 72, -29, -52, -63, -78, -97, 110, 7, 102, -24, 63, 47, -91, 116, 116, 94, 21]");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "5515B6B05B62158E5AC1C143F5CB030C11F0CB12BD58BB3B988D1C6A18C06E48E3CCC1B29F6E0766E83F2FA574745E15" + "'", str5, "5515B6B05B62158E5AC1C143F5CB030C11F0CB12BD58BB3B988D1C6A18C06E48E3CCC1B29F6E0766E83F2FA574745E15");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "5515B6B05B62158E5AC1C143F5CB030C11F0CB12BD58BB3B988D1C6A18C06E48E3CCC1B29F6E0766E83F2FA574745E15" + "'", str6, "5515B6B05B62158E5AC1C143F5CB030C11F0CB12BD58BB3B988D1C6A18C06E48E3CCC1B29F6E0766E83F2FA574745E15");
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey28);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.Class<?> wildcardClass39 = byteArray35.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[4, -103, -115, -50, 72, -115, -44, -124, -29, -7, -49, 76, -108, 29, -110, -24]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[90, -66, 70, -8, 41, -88, -93, -128, 64, -124, -56, 89, 121, 72, 23, 52]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[99, -107, 28, 86, 2, 91, -10, -51, 111, 16, 121, 79, -77, -38, -51, 108]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-24, 39, 67, 57, 99, -86, 82, -103, -87, -10, -102, 100, -125, -120, 41, 73]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[19, -21, -34, -93, 127, -53, 43, -122, 58, -5, -107, -11, -24, -71, -81, 50]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[34, -94, 105, -80, -48, -90, 30, 122, 104, 23, 101, 74, 78, 92, -24, -121]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[34, -94, 105, -80, -48, -90, 30, 122, 104, 23, 101, 74, 78, 92, -24, -121]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[52, 111, 31, -6, -113, -56, 116, 14, 73, -45, 8, 6, 83, -32, 104, 71, -76, 32, -107, 121, 109, -70, -8, 36, 0, -8, 63, 32, 9, 56, 53, 76, 55, 98, 59, 76, 117, 31, -8, -43, 3, -36, -72, 75, 1, -82, 26, 21, 51, 25, -64, 12, -10, -19, 11, -90, 30, 87, 28, 94, 118, -97, 96, 68, -100, 52, 63, 15, 34, 127, 77, 54, -98, 88, 75, 85, 9, 116, -87, 29, -37, -85, -112, 38, -48, 81, 61, -76, 85, -51, -26, -98, -120, 83, 121, -9, 19, -21, -34, -93, 127, -53, 43, -122, 58, -5, -107, -11, -24, -71, -81, 50]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[42, -30, 61, 16, 2, 94, -51, -15, -29, 11, -105, 51, -119, -36, 48, -90, 113, 86, 99, -30, -18, -112, 84, 66, 118, -94, 72, -12, -118, 89, 55, -80, 19, -21, -34, -93, 127, -53, 43, -122, 58, -5, -107, -11, -24, -71, -81, 50]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[49, 123, 71, 35, -5, -30, 124, 11, 78, -22, -74, -90, 62, -80, -12, 105, 59, -72, 105, 4, 103, -86, 126, 77, -42, 39, -78, -125, 86, 43, -118, -100, 19, -21, -34, -93, 127, -53, 43, -122, 58, -5, -107, -11, -24, -71, -81, 50]");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32" + "'", str36, "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32" + "'", str37, "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32" + "'", str38, "317B4723FBE27C0B4EEAB6A63EB0F4693BB8690467AA7E4DD627B283562B8A9C13EBDEA37FCB2B863AFB95F5E8B9AF32");
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey21);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey30);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("53AE1050E35EDA9A5023D9EE70F014907C95D84435399DE65A8ED10E87E2D98DE826BD34E176B05C95D1E12A3DEA07388F9B5429B03FB811F614219A89B0E7E01D8A41449F82DBFAADB5A7CA36BFD90AA76ACF7137C2C63F5C5B7FFD134E858E6BE4C94B4BE4FED769A070755BB1CBBE", secretKey30);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[58, -98, 104, 122, 37, 72, 114, 99, 75, 43, -17, 10, -67, 76, -47, 75]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-104, 14, -77, -70, 78, 96, 46, 103, -108, 37, 55, 124, -77, 12, -85, 110]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[26, -50, -113, -103, 87, 84, -32, 17, -117, 35, -19, 56, -59, -119, -70, 8]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-122, 65, 18, 66, -34, -75, -7, -110, -113, 71, -61, 49, -28, 122, -68, -78]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[32, 79, 111, -54, 1, -119, -81, -107, 1, 48, -53, -115, -17, -98, 118, 44]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[79, 26, 98, -47, 85, 16, -77, 103, -83, 68, -106, -67, 23, -45, -39, 36]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[79, 26, 98, -47, 85, 16, -77, 103, -83, 68, -106, -67, 23, -45, -39, 36]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[124, -102, 126, -66, -34, -88, -127, 98, 25, -37, 106, 121, 123, -90, -72, -98, -5, 24, -106, -126, -50, 116, -74, -99, 54, 81, -27, 10, -110, 6, 19, 85, -36, 78, -82, -69, -52, -35, -62, 30, -90, -119, 67, -29, 25, 117, -19, -80, 112, 105, -62, 115, 49, -116, 14, 24, -81, -29, -35, 30, -124, -1, 124, -78, 86, 69, 5, -9, 39, -11, 62, -32, 117, -124, 40, -91, 99, 25, -15, 124, 116, 63, -61, -11, -48, -47, -4, 117, 115, 22, 121, 59, 5, 110, -5, 15, 32, 79, 111, -54, 1, -119, -81, -107, 1, 48, -53, -115, -17, -98, 118, 44]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[63, -61, -28, 27, 34, -103, -120, 89, 117, -123, -17, 18, 88, 107, 9, -53, -110, 67, -1, -99, -53, 81, 83, 25, 90, 30, 87, 58, -34, -118, -103, 29, 32, 79, 111, -54, 1, -119, -81, -107, 1, 48, -53, -115, -17, -98, 118, 44]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[59, -67, -67, 6, 19, 54, -98, 126, -112, -43, -43, 65, 5, -98, -16, 83, 55, 76, 94, 101, 127, -40, -81, -93, 67, -111, -31, 27, 33, -85, 53, -74, 32, 79, 111, -54, 1, -119, -81, -107, 1, 48, -53, -115, -17, -98, 118, 44]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray39);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey23);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey23);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey61 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey61);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey61);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey61);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey61);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey61);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey61);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("E2F814217F1DA5B7F8A312ED99E6D0D59083E5D22ADC4BE38FEB52BE61C54F8DC2FAE8080C5A72306CECE7314BCCE623DFBDD9F414F3FE2858BB1D71B1CA4B0FDA00B9B63DE4C451A289EFA0E3FAF5E8CF88E898D433AAE1887D5DCB4DFD5733D54148A9444CD9F21D68362FE13FC7DD", secretKey61);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey61);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey61);
        javax.crypto.SecretKey secretKey81 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey81);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey81);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey81);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey81);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey81);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey81);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey81);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey81);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey81);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey81);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-124, 79, -115, 17, 112, 12, 35, 26, 7, -4, 43, 86, -16, 65, 125, 20]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[14, 83, 5, -67, 5, 16, -88, 110, 110, -81, 64, -13, -6, -95, 2, 63]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-105, 20, -53, 30, -99, -112, -84, 112, -73, 44, 96, 32, 57, 113, 50, -46]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-4, 88, 38, 79, 57, -84, -64, 99, -88, 94, 49, 78, 70, -78, 35, -24]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-125, -4, 7, 24, 127, -40, 40, 3, 119, -38, -66, -51, 72, 74, -63, -63, -43, -113, -28, 60, -90, -69, -56, -7, 120, -125, -65, 113, 56, 14, -92, 87, -105, 20, -53, 30, -99, -112, -84, 112, -73, 44, 96, 32, 57, 113, 50, -46]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[65, 24, -69, -28, -103, -52, 62, -121, 48, 9, -47, -90, 127, 87, -101, 51, 75, 90, 104, -19, -18, 69, 68, -28, 97, -83, 67, 121, 74, -90, -65, -69, 67, -114, 37, -119, 57, 29, -75, 19, 46, -30, -62, -61, 107, -16, -54, 16, -27, 77, 71, 99, 96, -82, -96, -63, -77, 24, -17, 46, -97, 53, -14, -35, 53, 51, 116, 57, -94, -120, -16, -22, -56, -113, -45, -54, -3, -56, 123, -50, 110, -114, -74, -1, 37, -38, 84, -67, -111, 66, 0, 42, -20, -73, 74, 111, -105, 20, -53, 30, -99, -112, -84, 112, -73, 44, 96, 32, 57, 113, 50, -46]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[80, -12, -10, -74, -24, 6, -89, 61, -56, 2, 18, -8, -71, -10, -6, -110]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[62, 95, 49, 88, -119, -94, -118, 108, 113, 59, -37, 45, -42, 96, 60, -37]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-51, 21, -50, 117, -8, -79, -84, -90, 62, -5, -94, -97, -85, -82, -56, 88]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-18, -83, 66, -115, -78, 66, 83, 103, -39, -1, -70, -50, -62, -22, 74, 68]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey61);
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[-70, -93, 48, -59, -25, -31, 23, -10, -17, 76, 89, -111, -100, 101, 12, 118]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[29, -112, 125, -20, 29, -122, 11, 61, 52, -29, 43, -16, -8, 21, 29, 126]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[29, -112, 125, -20, 29, -122, 11, 61, 52, -29, 43, -16, -8, 21, 29, 126]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-35, -14, -62, -121, 28, 79, -104, -11, 91, 6, 62, 112, 100, 95, -122, 40, -46, -83, 104, 121, 107, 80, -115, -118, 92, -80, 122, 113, 90, 73, -65, -13, -3, -100, 99, -66, -107, -104, 95, -83, -37, 97, -42, -44, -104, 30, -12, 96, 70, -35, 7, 27, -108, 57, -56, 69, -26, 22, -36, 82, -120, 98, -126, -88, -78, 22, -119, 72, -3, 91, 0, 10, -94, 82, -54, -88, -124, 10, 112, -19, 64, 95, -47, 94, -93, 120, 87, -95, 71, -121, 81, 116, -92, -88, -105, 105, -70, -93, 48, -59, -25, -31, 23, -10, -17, 76, 89, -111, -100, 101, 12, 118]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[93, 11, -105, -9, -116, 111, -91, 84, -87, -15, 46, -126, 2, 106, 23, -14, 89, -109, 90, -111, 24, -111, -12, 44, -30, 11, 84, 123, -19, 43, -55, -122, -70, -93, 48, -59, -25, -31, 23, -10, -17, 76, 89, -111, -100, 101, 12, 118]");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[35, -112, 9, -70, 10, 24, -53, 25, -84, -104, -40, 66, -15, 124, -65, -79, 107, 39, -127, -62, 111, 9, -48, 38, 27, 114, -97, 113, 22, 63, 25, -16, -70, -93, 48, -59, -25, -31, 23, -10, -17, 76, 89, -111, -100, 101, 12, 118]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[1, 120, 37, 76, -98, 90, 57, -16, -75, 82, 47, 32, -70, -77, 99, 100]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(secretKey81);
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[91, 73, 116, 88, -72, -113, -70, 29, 104, 63, 12, 27, -69, 79, -119, -44]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[91, 73, 116, 88, -72, -113, -70, 29, 104, 63, 12, 27, -69, 79, -119, -44]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-18, -121, -25, -102, -61, 37, -51, -66, -86, -99, 59, 76, 101, -43, 47, 113]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-125, -10, 50, 71, -17, -123, 15, 63, 105, 97, -53, 10, 18, -64, 105, 61, -94, 45, 122, 119, -64, 25, 121, -120, 91, -102, -15, 81, 68, 6, -16, 61, 111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-125, -10, 50, 71, -17, -123, 15, 63, 105, 97, -53, 10, 18, -64, 105, 61, -94, 45, 122, 119, -64, 25, 121, -120, 91, -102, -15, 81, 68, 6, -16, 61, 111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[54, 17, 26, -59, -120, 77, -81, -122, 60, -56, -111, -33, -100, -36, -50, 24, -80, 60, -43, -106, -32, 97, -27, 94, 75, 122, -28, -103, 46, 53, 78, -6, 74, 61, 127, -108, -107, 77, -46, 41, -15, 1, 109, -1, 117, 50, -67, -78, -7, 12, 59, 54, 59, -89, 1, 121, 115, -24, 82, 59, 39, -120, 24, 65, 77, 56, 67, -11, 63, 110, -60, 5, 114, -66, -102, -85, 44, 10, 37, 74, 122, 72, 119, -85, 11, 42, 119, -53, 20, -118, 39, -117, 48, -64, 103, 98, 111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-43, 67, 13, -86, -20, 111, -29, -126, -11, 35, -28, 50, 57, -103, -42, 115, -120, 96, -7, 23, 44, -78, -26, -12, -41, -68, -16, 23, 16, -97, 75, 57, 28, -37, 27, 13, -63, -115, 6, 122, -40, 61, 107, -120, 120, -4, 64, 93, 49, -80, -1, -111, 81, 25, 26, -102, -111, 66, 6, -106, 5, -26, -34, -104, 12, -34, 44, -55, -18, 85, 42, -88, -46, 36, -13, -82, -5, -100, -127, 72, 84, -16, -34, 64, 5, -38, 38, 57, -56, -49, 84, 8, 23, 100, 90, -116, 111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[111, -87, -42, 57, 28, 82, 84, -103, 123, -127, 95, 20, 89, 97, -80, -91]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-18, -121, -25, -102, -61, 37, -51, -66, -86, -99, 59, 76, 101, -43, 47, 113]");
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey5);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey5);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[101, -21, 55, -43, 3, 84, -41, 48, -39, 93, -64, 82, -86, 44, -9, 73]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[121, -124, -106, -13, 115, 112, -53, -44, -108, -5, 14, -56, -64, 85, 81, -33, 56, 127, 89, -50, 4, 95, 77, -94, -127, 22, 93, 122, 2, 110, 48, -20, -58, -52, -63, 39, 14, 80, 109, 123, -24, -15, 96, -13, -9, 119, 4, 99]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        byte[] byteArray28 = new byte[] {};
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray28);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        javax.crypto.SecretKey secretKey34 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey34);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        java.lang.String str41 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey38);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray28, secretKey38);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey38);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey38);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[114, 53, 18, -87, -17, 1, 108, -9, 118, -92, -96, 82, -121, -84, 80, -93]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-10, -106, -63, -5, -12, 67, -79, -70, -1, -67, -115, 90, 78, -54, -30, 89]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-10, -106, -63, -5, -12, 67, -79, -70, -1, -67, -115, 90, 78, -54, -30, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-27, -121, -9, -28, -27, 51, -33, 18, -122, -96, 86, 49, -61, 68, -6, 70]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-82, 87, 82, 47, -87, 63, 29, -41, 7, 98, 72, -110, 37, -28, -69, 34, -22, 43, -38, 51, -74, -85, 6, 46, 89, -50, 3, 106, -121, 105, -42, -122, 114, 53, 18, -87, -17, 1, 108, -9, 118, -92, -96, 82, -121, -84, 80, -93]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[114, 53, 18, -87, -17, 1, 108, -9, 118, -92, -96, 82, -121, -84, 80, -93]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[43, 82, -11, 79, 0, 112, -41, 27, 125, 28, -127, 83, 112, 110, -61, 123, -85, -14, -42, 14, -30, -69, -83, 52, 22, 85, 29, -3, 9, 100, 60, 16, 114, 53, 18, -87, -17, 1, 108, -9, 118, -92, -96, 82, -121, -84, 80, -93]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2B52F54F0070D71B7D1C8153706EC37BABF2D60EE2BBAD3416551DFD09643C10723512A9EF016CF776A4A05287AC50A3" + "'", str15, "2B52F54F0070D71B7D1C8153706EC37BABF2D60EE2BBAD3416551DFD09643C10723512A9EF016CF776A4A05287AC50A3");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[27, 107, -2, -3, 63, 82, -100, -106, 9, -119, 119, -127, -5, -18, 30, 24]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[47, -1, 56, -69, 23, -52, -7, -94, 76, 58, 22, -65, 51, -89, 14, -70]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-122, -79, 85, 112, 42, -100, -109, -68, -57, 45, 8, 96, 37, 64, 40, 81]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-95, -17, 56, -42, 80, 76, -32, 106, 11, -104, -52, -20, 35, 74, 54, 124]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[6, -127, 125, -59, 75, 61, -120, -40, -79, 23, 108, -64, 100, -83, 44, 34, -47, -62, -77, 95, -63, -8, 87, -19, 6, -105, -52, 0, 68, -8, 35, 111, -112, -102, 122, 57, 104, -124, -125, 0, -90, 114, 85, 16, 11, 126, -73, 54, -1, 18, 88, 101, -123, -53, 51, 48, -57, -77, -9, 38, -15, -109, -86, -109, -121, 86, -28, 89, 125, -55, -78, 74, 78, 82, 18, -45, -45, -49, 6, 102, 49, -43, -40, 72, 24, 16, -68, 121, -106, 23, -34, -57, -107, -35, -125, -66, -122, -79, 85, 112, 42, -100, -109, -68, -57, 45, 8, 96, 37, 64, 40, 81]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[122, 91, 12, -35, -111, 40, 58, 23, -102, 32, -6, 73, -102, 109, -112, -27, -35, 84, 106, -111, -98, -123, -122, 102, 123, -77, 48, 26, 0, 40, -58, 111, -21, -67, 118, -44, -5, -35, 85, -42, -39, -81, -62, -88, -36, -97, 69, 92, -51, 17, -23, -91, 109, 55, 54, -10, 23, 35, -70, -126, 73, 74, -42, -9, 52, 41, -49, -106, -13, -52, -34, 11, 27, -19, 88, -27, -102, -60, 25, -20, 59, -37, -23, -5, -61, -115, 76, 38, 126, -94, 37, -103, -126, -122, -63, -88, -122, -79, 85, 112, 42, -100, -109, -68, -57, 45, 8, 96, 37, 64, 40, 81]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("D5CC482C618B522A0D950952700538D08FC7A927085EA13AAE4FCD4524E4B5C6E400959C65C39ABA95D1FEB9C080BC97BA4EA87BED731AD45A52CE96BD04E3E2E8CB359471FF2FD820C28F2A63F01D7F573259F98C4F85FBE5513589CBFAD48B7ECB49ADAD83188C87D6FEAC4417EC80779A6E710CC58A9ADF7D1A2FD89F6F85F4202403AB600ADC96C3429B118CD9EF0873A8F85BAB15686CD3FA6B71A1EB7DD4B3EDA0EF61B3C1B7575AFC51C484CA820B0DD04830A020CEFBA5457765CED8E6952D473B440F30546FFABC734BF3D051569777855996F2B7A64BF543B8BC705599CF2973E04C0513E58A61292E703B", secretKey29);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-27, 60, -91, 68, 37, -69, -113, 72, 2, 62, 51, 65, -120, 22, 22, 54]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-122, 84, 48, -56, 51, 97, -56, -7, -19, 119, -90, -49, -39, -75, 124, 98]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[115, -90, -102, -42, 37, 46, -47, 73, -67, -1, -52, -51, 56, -89, -4, 73]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[113, -117, -40, -31, 101, -6, 21, -104, 61, 6, -85, 49, -73, -63, 26, 15]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[64, -1, -73, 90, -14, 18, -120, 99, -76, 89, 35, 36, 70, 103, -44, -25]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[8, 22, 112, 28, 123, 24, 75, -34, -49, -33, -2, -114, -113, 35, 96, -127]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[8, 22, 112, 28, 123, 24, 75, -34, -49, -33, -2, -114, -113, 35, 96, -127]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-103, 8, 34, 124, 40, -118, -127, 33, -32, 82, -44, -64, 17, -123, -118, -127, 19, -71, -63, -57, -116, -90, -59, 95, 60, 91, -19, -32, 26, -13, -34, -76, -50, 120, -5, -8, -84, 98, -4, -42, 70, 98, 127, -44, -33, 21, -17, -72, 101, -83, -19, 21, 25, -58, -107, 42, 30, 38, -118, -37, 35, 108, -52, 98, 62, 25, 108, -23, 33, -86, -123, -31, 17, -35, 33, -70, -73, 7, 14, -97, 23, 39, 72, 7, 3, 85, 86, 121, -117, 81, -39, -62, 25, -110, -68, -8, 64, -1, -73, 90, -14, 18, -120, 99, -76, 89, 35, 36, 70, 103, -44, -25]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[50, 6, -108, -43, 30, -54, -96, -93, -68, -42, 67, 46, -121, 51, -86, -46, -73, -4, 77, -63, 50, -49, -72, 7, 97, 125, -4, 7, 86, -91, -68, 76, 64, -1, -73, 90, -14, 18, -120, 99, -76, 89, 35, 36, 70, 103, -44, -25]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[18, -91, 55, 91, 113, 110, -13, 109, -98, 33, 64, 37, -10, 124, -122, 61, 114, 0, -92, 30, -4, -84, -99, -114, -121, 7, 107, 15, -24, 21, -18, -121, 1, 6, 109, 122, -104, -61, -122, 97, 56, 66, 45, -98, 34, -121, 71, 114, 75, -32, 101, -118, 57, 25, 64, -72, -50, 55, -108, -37, 66, -88, 38, 35, 73, -42, 8, 50, -35, 60, 76, -46, 39, 54, -109, 95, 2, -28, -9, -123, -113, 12, 88, 61, 56, -31, -68, 63, -37, 51, -55, -109, -2, -108, 25, -27, 64, -1, -73, 90, -14, 18, -120, 99, -76, 89, 35, 36, 70, 103, -44, -25]");
        org.junit.Assert.assertNotNull(byteArray37);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("2F2860C6FC357E0D6B36B5C115CA66545F03386AD9065AFD258B277E518889BBE499026231269FDA91D029D60DB5E58F", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("D1CD0B0449787BE6071817C207EC585B776002352FC7B07A227732E22DEB4731014D29DA9D39C4F1A64960304C48CDED8B42469B9217CE3A20CE17F3708BB638C8D056A307B34ABD9FA2CF918987109B86FAC18F1F8795A5511FAE2DCF804B2A44AB45F3C160E7FE046F2263101D881B", secretKey9);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-25, -88, -58, -18, 46, -4, -7, -123, -88, 22, -34, 110, -91, -71, -31, 6]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, 50, 60, -117, 43, 45, 58, 99, -74, 83, 52, -65, -115, -120, 85, -80, -105, 13, 54, -70, -127, -53, -120, 92, -56, 95, -12, 56, 52, 112, 46, -45, 73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-51, -60, 42, 7, 124, 9, -63, 85, 103, 53, 4, -2, -8, 65, 46, -80, 76, 42, 104, 121, -24, 80, -43, -45, -19, 54, 15, 65, -67, 120, 55, -14, 73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-92, -32, 44, 22, 125, 19, 4, -92, -118, -8, 27, 59, 79, 8, -122, -126, -55, -66, 114, -62, -98, 90, -75, 17, -85, -117, -13, 17, 22, -33, 106, -32, 73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-39, -30, -29, 22, 52, -30, -43, 38, 78, 80, 96, -102, -102, -18, -80, -45, 110, 83, -88, 115, 104, -42, -115, 38, -113, -90, 37, -46, 83, -9, -6, -58, 53, -89, -12, 81, 63, -8, -69, -125, 3, -11, 81, 127, 50, 45, 65, -82, -19, -118, -46, 21, 10, 88, 105, 81, -107, 44, -55, 122, 91, -46, 64, 35, -47, 33, -123, 34, -93, -123, 24, -15, -27, -36, -35, 48, -62, 61, -26, 101, 45, -105, -1, 68, 127, -119, 27, 85, -73, -49, -103, -91, -90, 58, 59, -100, 73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-12, -102, -65, -123, -67, 42, 105, -42, -4, 13, -105, 75, -100, 4, 39, 122, 14, 18, 92, -62, -20, -90, -12, -60, -128, -21, -27, 11, 94, -82, -128, 26, -107, -115, 96, -31, -112, 38, 0, -88, -66, -122, 2, -72, -105, -77, 38, -86, -35, -88, -85, -128, 8, -32, -101, -84, -43, 23, -108, 111, -65, 43, -77, 81, 9, 92, -33, 54, -109, -113, 112, 99, -117, -71, -16, -38, 94, -123, -43, 0, 106, 41, 4, -48, -87, 103, 28, 30, 90, -14, -72, 60, 116, 2, -82, 57, 73, -111, 106, -59, 38, -24, 55, -46, -67, 116, 24, 62, -9, -20, -97, -40]");
        org.junit.Assert.assertNotNull(byteArray18);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey7);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("45B4BBF5625DD1115C7513E4234036137BCE42C4D0DEF1922C761DC847E3DDBAB91E045B863645187344B4ADA4E1E2BD", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-119, 85, -118, -92, -59, 80, -117, -63, -17, -40, -85, -107, -29, -38, -65, 86]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[26, 38, -64, -117, 105, 89, 66, -50, 72, -14, 17, -73, 100, 0, -116, -61]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[26, 38, -64, -117, 105, 89, 66, -50, 72, -14, 17, -73, 100, 0, -116, -61]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[64, -72, -69, -23, -95, -107, -83, -14, -78, -118, 86, -7, -30, 77, -67, -2]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-101, 70, -73, -2, 28, -52, -9, -58, -35, 48, -90, -66, 82, -29, 0, 94, -94, 102, -20, 38, 110, -107, -92, 99, -24, 86, -97, 115, 121, 45, -22, 38, -119, 85, -118, -92, -59, 80, -117, -63, -17, -40, -85, -107, -29, -38, -65, 86]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-119, 85, -118, -92, -59, 80, -117, -63, -17, -40, -85, -107, -29, -38, -65, 86]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-4, -85, 50, -126, -69, 91, 31, 61, 113, -49, -95, -91, -19, -72, 10, 44, 15, 89, 72, -120, 112, -105, -128, -92, -99, 59, 26, 0, 38, 46, 10, 93, -119, 85, -118, -92, -59, 80, -117, -63, -17, -40, -85, -107, -29, -38, -65, 86]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "FCAB3282BB5B1F3D71CFA1A5EDB80A2C0F594888709780A49D3B1A00262E0A5D89558AA4C5508BC1EFD8AB95E3DABF56" + "'", str15, "FCAB3282BB5B1F3D71CFA1A5EDB80A2C0F594888709780A49D3B1A00262E0A5D89558AA4C5508BC1EFD8AB95E3DABF56");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "FCAB3282BB5B1F3D71CFA1A5EDB80A2C0F594888709780A49D3B1A00262E0A5D89558AA4C5508BC1EFD8AB95E3DABF56" + "'", str16, "FCAB3282BB5B1F3D71CFA1A5EDB80A2C0F594888709780A49D3B1A00262E0A5D89558AA4C5508BC1EFD8AB95E3DABF56");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[84, 32, -13, 100, 114, -93, -125, -119, -67, 113, -121, -51, -123, -33, 45, 105]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-45, -65, -96, -40, 16, 96, -102, -55, -53, 7, 43, 73, 120, 77, 44, -125, -63, 87, 99, -125, 88, 20, -96, 92, 26, -17, -25, 89, -67, -21, 32, -78, -103, 54, 68, 14, 127, 56, -68, 26, -51, -109, -37, -5, 107, -27, 38, 77]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[8, -123, 87, -77, -7, 37, -102, -6, -12, 76, 123, -50, -7, 16, -105, 48, 105, 56, -104, -69, 121, 13, 32, 110, -69, 35, -5, 51, 68, 51, -70, -106, 98, 119, -128, 52, 22, 37, -44, -82, 108, 13, 62, -18, -36, -115, -108, 52, 93, -111, 97, -54, 29, -69, -65, 37, 62, -5, 94, 68, 30, 34, -51, 92, 106, -112, -28, 52, 80, 119, -55, -104, -88, 36, -80, -128, -125, 36, -1, -75, -105, 117, 60, -118, -4, -50, 98, -52, 63, 105, -20, -40, -20, -51, 7, 48, -103, 54, 68, 14, 127, 56, -68, 26, -51, -109, -37, -5, 107, -27, 38, 77]");
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey14);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey33);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("FF800238462E513BE5098334AC67DCD08462F3EF1D20C85620DD2DC4BD1A2823D7B22DB2B6419599E6A69C5CC2E8B4F8348D9F75590E6587EBF8FB21F59383C3594608DF4FA8A993839AE949996524B3FB2C76C3B473B66EFCFC5C8935A18BA38C96B0E7E1BA043160B73224F2931F8B", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("99E382C99A5325C217EEFD707EE08D88", secretKey33);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-121, 26, -124, 76, -47, -71, -27, -7, 111, -93, -8, -123, -102, 71, -94, -11]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-70, -76, -19, 11, 59, 71, -128, -97, 44, -61, 14, -110, 3, -97, 99, 112]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-70, -76, -19, 11, 59, 71, -128, -97, 44, -61, 14, -110, 3, -97, 99, 112]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-74, 18, -1, 84, -56, 95, -128, -80, 56, -82, -98, -58, 92, 9, -57, -82]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, -9, 41, -124, 43, 39, -96, -56, 81, 60, 100, 69, -11, 19, -80, 78]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-85, -33, -89, -84, 37, 78, 0, 91, 116, 87, 13, -127, 23, 40, 43, -21]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-116, -96, 39, 55, 13, -19, 124, 43, -108, -28, 39, -114, -44, 63, -104, 48]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[122, -67, 99, 57, -30, -39, -17, 124, -34, 38, -123, -8, -64, -45, -16, -127]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-47, 52, 33, -6, -120, 116, -71, -36, -76, 126, -32, -89, 22, 57, 71, -43, 63, -105, 85, 79, 71, -13, 45, -7, 44, -95, -74, 86, -120, 71, -126, 20, -116, -96, 39, 55, 13, -19, 124, 43, -108, -28, 39, -114, -44, 63, -104, 48]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-57, -15, -29, -105, 31, 1, -90, -40, -60, 41, 48, 10, 32, -80, 49, 125, -126, 26, 116, -71, 82, 28, -23, -124, -65, 26, -89, -22, -45, 117, -106, 9, -116, -96, 39, 55, 13, -19, 124, 43, -108, -28, 39, -114, -44, 63, -104, 48]");
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey30);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey49);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey49);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("6089928EF0EC1A52F9E601572DB1E4CB8699A9284FD1C94AE3D3FC6BBF036430D5FCE1DD62A9EEE591BDC6ED60D05B34", secretKey49);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("D83E92664961C1EF1D22294E2ECE9117BA47572F878827B21016D1A1288C690A0D4867AC9ABDEE8B731818AEB32F6232", secretKey49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey49);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[15, 84, 60, 96, -101, 57, 60, -127, -17, 55, 4, -50, -37, -91, -58, 35]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[26, 35, 73, 40, -18, 19, 21, -16, 62, -25, -108, -78, -103, 19, 100, 119]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-44, 111, 71, 54, -8, 42, -44, -64, -126, 59, -55, -69, -125, 111, -122, -82]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-95, 19, 22, -56, 98, 25, 89, 33, -19, 74, -55, 92, 101, -62, 59, 3]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-4, 59, -80, -108, 31, 102, 47, -16, 105, -41, -10, -106, -41, 115, 98, -76]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-72, 71, -58, 109, -10, 112, -102, 91, -7, -10, 11, 48, 46, 118, 49, 60]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[32, -56, 114, -65, 90, 8, -28, 10, -111, 91, 125, 104, -119, 105, 111, 4, 85, -68, 121, 39, -71, -14, 71, 40, 58, -23, -115, -51, 70, 7, -64, -9, -4, 59, -80, -108, 31, 102, 47, -16, 105, -41, -10, -106, -41, 115, 98, -76]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[26, 8, 125, -112, -51, -77, 50, 106, -104, 26, -89, -27, -37, 116, -119, 26, 101, 78, -16, -38, -62, 36, 112, 27, 27, 59, 118, -25, 52, 22, -49, 73, 34, -102, 81, -68, -28, -49, -117, 40, -101, -44, -111, -41, -17, -50, -75, 100, -26, -99, -123, 77, 3, -100, 114, -73, -84, 51, 73, 10, -9, -128, -30, 73, -21, -63, -100, -60, 58, -73, 5, -58, -75, 31, -112, -108, -60, -92, 23, 95, 77, 72, -114, 38, 20, 8, -71, 102, -120, 96, 43, 71, -80, 67, -34, -4, -4, 59, -80, -108, 31, 102, 47, -16, 105, -41, -10, -106, -41, 115, 98, -76]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-49, -109, -62, 5, -55, -44, -89, -123, 37, 53, 87, -124, -29, 64, 20, -60, -22, 10, 91, -90, 118, 49, -60, -43, 102, 93, 100, -98, 48, -109, 86, -122, 79, -57, 69, 125, 85, -64, -94, 29, -18, 106, -45, 83, -54, 19, -11, -66, -90, 22, -35, -70, 108, 52, 121, -71, -62, 124, -15, -36, -41, 28, 119, -21, -88, 105, -68, 41, -38, -69, 102, 91, -11, 103, -83, -95, 15, -123, -106, 16, -78, 67, 115, -66, 60, -103, 9, 88, -42, 30, -14, -34, 70, -80, -63, 58, -4, 59, -80, -108, 31, 102, 47, -16, 105, -41, -10, -106, -41, 115, 98, -76]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-121, -29, 36, 94, 27, 121, -93, -41, 6, -4, -127, 34, -17, 10, 7, 21, 126, 60, -94, 87, 13, -61, 52, -128, -37, -58, -81, 95, -108, 4, 29, -66, 99, 6, -13, 37, -60, 123, -67, 5, 13, 42, -82, 30, 22, 70, -44, 15, 54, -5, 13, 127, 112, 19, -101, 12, 57, 98, 47, 44, 59, 26, 81, 48, -96, 80, 20, -74, -23, 83, -59, -110, -1, -16, -73, -1, -103, -75, 18, 43, 74, -128, -11, -91, -104, -92, 92, -19, -21, 46, 43, -9, 52, -71, 89, 71, -4, 59, -80, -108, 31, 102, 47, -16, 105, -41, -10, -106, -41, 115, 98, -76]");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-62, -83, -99, 59, 116, 98, -79, -101, 11, 125, -78, -96, 91, 56, -85, 126]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-103, 16, -51, -8, -63, 11, 73, -77, -71, -15, -58, -73, -36, -114, -108, 114]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[43, 36, 52, 57, -89, -2, -85, -109, -98, -9, 106, 97, 63, 12, 45, 15, -1, -18, 41, 29, 83, 101, -5, 62, -44, 1, 38, 62, -115, -35, 24, 61, 112, -128, -58, -81, 51, -35, 10, -45, -70, -113, -27, 118, -88, 31, 15, 70, 23, -81, 1, 30, -101, -53, -56, 59, 44, -45, -110, 96, 90, -80, -66, -9, -10, 40, 102, 51, -87, 62, 30, -128, 27, 123, -48, -118, 55, 64, 101, 58, -8, -2, 109, -98, 83, 19, 79, 69, -59, -116, -55, -29, 16, 13, -50, 60, -9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[30, 105, -38, -12, -124, -3, 38, 91, 42, 120, 52, 34, -23, -125, 62, -117, -81, -116, -120, 1, 95, -12, 102, -107, -51, -49, 101, -68, -68, -18, 126, 118, 18, -79, -23, -4, 60, 105, -46, -5, -28, -61, 12, -28, -36, 51, -66, -19, -86, 22, -85, -90, -117, -15, -121, -99, 18, 29, 13, 34, 101, 20, -76, -71, 117, 47, 23, 18, -57, 113, 118, 66, -1, -41, 31, -108, -2, 87, 65, 114, -71, 47, -22, -117, 62, 31, 92, -104, -32, -47, 121, -94, -116, -114, -90, -46, -9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[3, -124, -120, -37, 17, 16, -34, -77, 98, 18, -98, -6, -83, 34, -20, 123, 69, 68, 63, -49, -92, -11, -101, -5, 25, -74, 58, -118, 62, -19, -18, 67, -115, -67, -93, 11, -16, 46, -80, -41, -101, -113, -106, -110, 50, 84, -43, 106, 47, 19, -100, 0, -81, -50, 51, 89, 103, -108, 9, 34, -59, 113, -51, 62, 0, 127, 38, -69, 22, -24, 87, 111, -17, 16, 21, -52, 96, 92, -99, -98, 24, -102, -82, 8, -38, 31, -55, -79, -100, 49, -56, -26, -18, -82, -68, 86, -9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[102, 111, 21, 71, -113, -93, 0, 96, -59, -99, -92, 109, 3, -118, 50, -12, 79, 9, 16, 94, 47, 1, -49, 57, 82, -66, -80, -53, 96, -18, 78, 35, 127, 99, 11, 25, 104, -68, -94, -3, -69, -56, 12, -73, 72, 22, -30, -92, -44, -4, 61, 106, 72, 122, -67, 26, -101, -7, 97, 26, 87, 1, 31, 21, -102, -99, -61, 74, 31, -39, 64, 98, -90, -56, -32, -111, 63, -65, -50, -37, -12, 24, 92, 17, -92, 64, 7, -10, 115, 93, 88, 43, 44, -74, -94, -126, -9, -116, 53, -61, 71, 84, -70, -65, 104, 53, -111, 77, 40, 127, 36, -106]");
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey8);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey19);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-115, -44, -48, -30, -93, 81, 21, 90, -105, -2, -120, 79, -110, 96, -82, 60]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[44, -31, 99, 23, 22, 19, 34, 105, -93, -119, 77, -78, -4, -57, -35, 24]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-34, 28, 45, -74, -9, -85, -33, -12, 29, -65, 26, -124, 46, 54, 9, 98, -48, -123, -78, -87, -23, 116, -94, 13, 84, 111, 48, 30, 29, 50, -74, -108, -27, 29, 97, 79, -5, 42, 77, -108, 106, -127, -1, 12, -128, 19, -60, 76, -128, 51, -97, -46, -86, -3, -54, 102, -122, -4, 93, 20, 32, 2, 90, 18, -97, -124, -16, -8, -118, -46, -124, 121, 72, -74, 115, -64, 122, 85, 11, -69, -96, -96, 53, 10, 104, 80, 31, -4, -28, 77, -64, -13, 40, 125, -56, -79, -115, -44, -48, -30, -93, 81, 21, 90, -105, -2, -120, 79, -110, 96, -82, 60]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[98, 101, -64, -71, -62, -46, 114, 119, 7, 54, -19, -44, 61, -124, 112, 47, -29, 72, -72, 80, -113, 30, 36, 12, -17, 8, -26, -13, -72, 125, 92, 126, 30, 69, -6, 83, 99, 96, -9, 67, 82, 81, 0, 105, -108, -47, -101, -54, -107, -124, -90, -62, 71, 47, 81, 122, 35, 107, 88, 9, -22, 53, 85, 7, -66, -26, 61, -121, -117, -34, -16, 75, 81, 19, -71, 75, -127, -22, 95, -116, -48, 105, -73, -90, 82, 42, -49, -2, -102, 30, 56, 41, 1, -84, 71, 41, -115, -44, -48, -30, -93, 81, 21, 90, -105, -2, -120, 79, -110, 96, -82, 60]");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[82, 92, 24, 49, -65, 101, -95, 69, -75, -69, -18, -45, 3, 66, 52, -87]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-24, -96, 87, 9, 74, -124, 27, 102, -33, -100, -29, 68, 13, 27, -127, 27]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[29, 67, 52, 28, -30, 37, -62, 102, 22, 96, -29, -64, -10, 44, -47, -82]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[82, 92, 24, 49, -65, 101, -95, 69, -75, -69, -18, -45, 3, 66, 52, -87]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[94, -24, 112, -2, -63, 6, 119, 39, 27, 122, 31, -59, 68, 122, -25, -30, -81, 101, 102, 108, -55, 53, 100, -48, -32, -23, -105, 99, -111, 113, 86, -47, 82, 92, 24, 49, -65, 101, -95, 69, -75, -69, -18, -45, 3, 66, 52, -87]");
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey10);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey10);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey10);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey10);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey10);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey10);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("2490216A5A23648B1D40BD8864CD66B988C12C8F63914359E46667F589C07D19691E2E705B4815D28A7E0C48BCAAB69C", secretKey10);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("F2714AB72A3DCAE32CBF0909FE7D8B4B4E6C9C2D175F3EF49760DB90E7D32EEF", secretKey10);
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[43, 62, -9, -17, -37, 49, 57, 19, 23, 90, 112, -123, 113, 35, 119, -119]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[57, -126, 39, -116, 75, 113, 119, -68, -58, -106, 112, 34, -86, 113, -81, 10, -82, -95, 73, -89, 106, -83, 67, -20, 112, -54, -110, -117, 5, 72, -76, -76, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[112, -54, -128, -103, 85, -7, 82, 63, -124, 87, 85, 78, -117, -90, -13, 36, -104, -116, 123, 24, 33, 2, -16, -66, -100, 103, 74, 94, 102, -61, -2, -81, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[5, 41, 116, -89, 115, -123, -51, -110, 9, -34, -119, -53, -13, 75, -118, -3, -127, 52, 111, -71, 63, -49, -47, -6, -75, 5, -63, 31, 122, -3, -31, 86, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[112, -54, -128, -103, 85, -7, 82, 63, -124, 87, 85, 78, -117, -90, -13, 36, -104, -116, 123, 24, 33, 2, -16, -66, -100, 103, 74, 94, 102, -61, -2, -81, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-15, 127, -120, -7, -24, -75, -120, -101, -11, -117, -65, 120, 86, 98, 45, 111, 15, -57, 107, -88, -78, -43, 102, -24, -50, -72, 37, 62, -109, -64, 111, 68, -39, -78, 2, -86, -94, 86, -80, -122, -61, 33, 29, 115, 104, -73, 1, 74, 109, 72, 65, 33, 110, -94, -17, 69, 121, -81, -47, 114, 53, 74, 17, 39, -39, 120, -104, -26, 103, 97, -96, 96, 37, -10, -122, -94, 117, 79, -71, 84, -83, 55, 58, 109, -127, 126, 37, 2, 108, -80, 101, -41, 59, -126, -115, 57, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-46, 55, 14, 113, 38, -81, -127, -7, 80, -19, -66, -111, -119, -3, 32, -94, 62, 126, 107, 61, 3, -36, 124, 36, 77, 2, -62, 53, -17, 111, 110, 36, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[35, -50, 116, -86, -46, -45, -47, -35, -22, 125, -80, 100, 40, 40, -56, -127, -21, 76, -13, 18, -126, 125, 47, -16, -60, -4, -66, 79, 8, 98, -86, 68, 0, 40, -128, 89, -93, -89, -9, -58, -125, 13, -61, -79, 81, 3, -75, 25, -125, 69, -23, 60, 95, -11, 3, 116, -108, -33, -35, -11, 121, -48, -69, 11, 82, 13, 108, 97, -20, 63, 37, -108, -82, 76, -45, -36, 7, 55, 64, -45, -89, -8, -82, 97, 19, -43, 90, 65, 86, 43, 89, 21, 122, -77, 15, 77, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-64, -93, 13, 32, -43, -3, 40, -117, 118, -89, 86, -104, 8, -125, -25, -53, 28, -61, -1, 14, -47, -12, 92, 28, -65, 83, -97, 89, 47, -101, 0, 81, 87, -115, 114, -108, 125, -32, -4, -103, -20, 6, 18, -78, -16, -51, -31, 110, -46, 115, 5, 127, 72, -121, 42, -15, -106, 99, 96, 11, -83, -128, -128, -90, 54, 11, -19, -123, 43, 76, -5, -89, -21, -110, -123, -95, -14, 2, 50, -22]");
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("5F77C6420928F8C47912E26ECA90DB1033C170E37BB5E54048BBCE22490421EC999F18F4DD7EC3021E70E565027848A530AF4882DD9C6D2581DD75804BF0510B9D19D7A4EFD188A5D46C5CBC6876B221716E91A17C329E79D6106CB036705EBBA692DF97E219E3C5103A8D3E8C014B8DB276FDB3BCEADAAE21AFED835C83D204938F2C8076E227B09C7E4B5C97A23BF2CB67EF5ACA2B6A19D61D2F669F3CCFEA1B4EAD2981E5C4D42F4CB960DE9EDBF4C5927C1769B151950C0110035C47B509AEF62AAB0175DA1A994F85BDA667638A305CBFF4C73D7754E7A312EA0F050B99F2ACD054017F7D40943C1A234E056581", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-50, -74, 52, 47, -5, -53, 94, 13, -2, 17, -13, 66, -35, -17, -120, 95]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, -127, -66, 34, -88, 121, 110, -2, -77, 95, 73, -50, 123, -20, -17, -71, 103, 34, -60, -103, -48, 28, -73, 2, -1, 70, -5, -51, -18, -13, -91, -36, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[85, -124, -94, 60, -22, 86, -6, 15, -49, 107, 34, -32, 120, -92, -123, 31, 34, -83, -15, -13, -5, 39, 101, 43, 109, -73, 56, -110, -61, -64, 28, 109, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-80, -127, -66, 34, -88, 121, 110, -2, -77, 95, 73, -50, 123, -20, -17, -71, 103, 34, -60, -103, -48, 28, -73, 2, -1, 70, -5, -51, -18, -13, -91, -36, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[46, 78, -116, -49, -66, -2, -105, -114, -37, -94, 40, -1, -49, -72, 92, -16, 20, -51, 107, -49, -86, 67, -1, 46, 65, -56, 122, -80, -89, -104, -55, -69, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-54, 25, -21, 50, -67, -85, -61, -97, -82, -77, 38, 95, 11, -124, 38, 107, 104, -44, 124, 21, 109, 37, -6, -52, -125, -29, -37, -55, -92, -92, -90, -55, 59, -60, 11, 66, 77, -117, -86, -122, -99, 53, 116, 61, -101, 7, 107, 62, -52, -108, 85, 93, -127, -42, 26, -119, -72, -37, 59, 111, 8, -113, -63, -69, -127, -47, -44, -64, -43, -103, -113, 69, 58, -10, 63, -47, -62, 123, 18, 127, -70, 114, -2, 50, 65, -63, -121, 53, -30, 44, -98, 114, -50, -39, 35, 56, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[46, 78, -116, -49, -66, -2, -105, -114, -37, -94, 40, -1, -49, -72, 92, -16, 20, -51, 107, -49, -86, 67, -1, 46, 65, -56, 122, -80, -89, -104, -55, -69, -66, -28, -123, 52, -128, 126, 59, 7, -111, 4, -118, 10, -38, -95, 91, -89]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("4BC56F621DC45FC7D1FDEDD4E498E56D34D7F230DC0E6513A1E8E802ABE835C2B0F9EE57E2E19D764D4335F94137AB4BEE19F8D586276EBC8D9B901ED50CD8BE3CC8DB84CD51730BBA1D34E0DE2CA64CAA3FA81C1A3930109BD10DC23E6003DA1D6D7D2AF02CCD0059606A2F3912D1C5", secretKey6);
        java.lang.Class<?> wildcardClass13 = secretKey6.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, -19, 80, 103, 106, -125, 111, 84, -17, 11, -123, 37, -58, 84, 117, 48]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[90, -127, 27, 43, 29, -103, -59, -31, -56, 56, 52, -28, -51, 59, -10, 59]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[90, -127, 27, 43, 29, -103, -59, -31, -56, 56, 52, -28, -51, 59, -10, 59]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[108, 90, 60, -36, -76, 101, -38, -90, -126, -101, 36, 55, 84, 52, 124, -116]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[48, 18, -73, 112, -56, 44, 61, -96, 25, -118, 118, -19, 51, 24, 47, 114, 56, 80, 101, -2, -105, 12, -46, -17, -44, -92, -24, 63, 77, 38, 109, 96, 1, -19, 80, 103, 106, -125, 111, 84, -17, 11, -123, 37, -58, 84, 117, 48]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-78, 67, -100, -35, -14, 93, 15, 79, 14, 15, -38, 95, -85, 23, 31, 23]");
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey24);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey24);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey24);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey24);
        byte[] byteArray32 = new byte[] {};
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray32);
        byte[] byteArray37 = new byte[] {};
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray37);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey39);
        javax.crypto.SecretKey secretKey43 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey43);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey43);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey43);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey53);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey53);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey53);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey53);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey53);
        byte[] byteArray62 = com.thealgorithms.ciphers.AESEncryption.encryptText("D35960F848132D8F8E9DD1FCF1CBD521", secretKey53);
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("0656A0EA18FD8C2FFFE23F65013B7020A0A65BA19D7E27CA60EEA30A6D8E7ED8BB0A74BD2F93031F04D3BF2A50719F8B", secretKey53);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("6089928EF0EC1A52F9E601572DB1E4CB8699A9284FD1C94AE3D3FC6BBF036430D5FCE1DD62A9EEE591BDC6ED60D05B34", secretKey53);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey74);
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey74);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey74);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey74);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey74);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey74);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("EA1D56E4605E5ABE05F8883E0296A54B", secretKey74);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey74);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-80, 106, -96, -2, -24, 44, -49, 71, 19, 97, -63, -42, 24, 101, 52, 58]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[14, -127, 100, -30, -64, 97, -67, 59, -78, -115, 13, -69, 3, -9, 6, -113]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[19, 57, 12, 61, 39, -25, 74, 27, -64, 57, -103, -33, -92, 105, 77, 31]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-52, 99, 34, -87, 60, 43, 53, -68, 73, -26, -74, 49, 97, 11, -75, -90]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-110, 65, -61, -29, 110, -3, -48, -105, 19, -113, 101, -39, 16, 69, 55, 77, -50, 0, -43, -98, 114, -66, -99, 19, -56, -57, -126, -119, -94, 119, 44, 81, 47, -77, -10, 25, 4, 72, -119, 118, -14, -96, -92, -72, 119, 84, 93, -86, -88, 102, -32, 91, -36, -105, 28, 30, 27, 39, -123, -93, -22, 14, -120, 109, 113, -86, 32, 28, 49, 7, 20, 110, -27, 95, -108, 58, -52, -42, 65, -62, 41, 75, 30, 72, 7, -70, 2, 91, -39, -122, -105, -25, -69, -106, -105, -94, 19, 57, 12, 61, 39, -25, 74, 27, -64, 57, -103, -33, -92, 105, 77, 31]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-114, 59, -26, -125, 71, -94, -57, -1, -123, 42, 50, 47, -77, -72, -71, -26, -14, 107, -40, -76, -19, -66, -126, -45, -6, -103, 80, -116, -119, 93, 38, -81, -80, -89, 43, -13, 34, -39, -45, -110, 24, -119, 21, 19, -4, 75, -77, -22, -64, -52, -125, 46, 105, 30, 68, 66, -52, 85, 36, 43, -64, 31, -13, -29, 57, 33, -66, 72, 71, 72, 100, 88, -103, 31, 114, 89, -74, -57, -82, -117, -75, 88, -15, 117, -44, 10, -114, -32, 115, -88, 74, 81, 75, 69, 106, -37, 19, 57, 12, 61, 39, -25, 74, 27, -64, 57, -103, -33, -92, 105, 77, 31]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[30, 39, 125, -21, 93, -116, 92, -124, 27, -56, -41, 44, -68, -101, -110, 23]");
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[113, -21, -118, 54, 10, 5, -120, -126, 115, 63, -78, -86, -22, 25, -104, -95]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[76, 14, 100, 14, -78, 72, 34, 31, -34, -88, -39, 96, 93, -50, 37, -69]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[32, -89, -10, -61, 55, -111, 40, -113, 59, 96, -41, -64, 47, 36, -59, -76, -50, 73, -17, 60, -21, 118, -120, -110, -10, -23, -121, -11, -3, 58, -113, -23, 115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-87, 113, 26, 106, 119, 14, 12, 111, -57, -122, 49, -24, -2, 59, 80, -54, 27, 48, -75, -84, 83, 118, -38, -14, -126, 42, -55, 93, 79, -48, -44, -126, -23, -109, -21, 124, -24, -102, 126, 13, 126, 10, 84, -83, 4, -93, 58, 35, -82, -6, -84, 18, -39, -117, 17, 77, 1, 117, 0, 41, 96, 117, -75, -82, -128, 94, 40, -56, -110, 45, -46, 36, 0, 46, 10, -46, 68, -47, 81, -50, -80, -49, 97, -65, -100, 79, -79, -112, 119, -22, 14, -8, 34, -38, -63, -35, 115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[123, -30, -37, 97, 35, 81, -78, 119, 96, -22, -61, 50, -94, -123, -57, 119, 115, -46, 124, 97, 109, -2, -59, -63, 21, -124, 119, -91, 39, 123, 62, -127, 115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[42, 101, -35, -52, -102, 75, 72, -83, 12, 109, -119, -54, -127, 99, 65, 12, 44, -96, 73, 76, -104, -78, -43, -91, -33, -69, -36, 42, -29, 5, 50, -89, -21, 86, 116, -74, 105, 106, 43, -31, -49, -55, 110, 40, 109, 18, 102, 80, -128, 1, 88, -19, -83, 75, -102, 40, -4, -123, 63, -41, 59, -70, 28, -117, -115, 94, -48, -4, -81, -48, -60, 19, -33, -47, -81, -87, -122, -51, -58, -27, -90, 71, 23, -74, -100, -72, 3, -40, 61, 101, -6, 41, 41, -124, -66, -108, 115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[59, 75, -86, 92, -20, 4, -63, -8, -77, 31, 71, -8, 54, -41, 27, 107, 14, -1, -84, 42, -9, -96, 93, -72, 73, 122, -27, 27, 5, 47, -18, 8, 126, -85, 82, 64, 51, 29, 58, -102, 27, 12, -10, 34, -40, -119, 115, 5, -95, 53, 96, 18, 16, 30, -16, -51, 90, -14, 120, 84, -12, -59, 42, -42, 122, -112, 2, 58, -33, 15, -81, -106, 105, 3, 52, -123, -66, 2, 121, -113, 116, 63, 73, 17, -100, 40, -121, 126, 7, -38, 121, 111, -28, 6, -6, -81, 115, -108, 78, 28, -109, -38, -36, 125, 104, 50, 104, 97, 22, -123, 67, -78]");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[3, 37, -118, 118, -22, -66, 70, -69, 74, 44, -47, 6, 39, 69, 120, 88]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[3, 37, -118, 118, -22, -66, 70, -69, 74, 44, -47, 6, 39, 69, 120, 88]");
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[91, 95, 43, -7, 94, 92, -119, -16, -94, 121, 115, -78, -103, -101, 10, -34]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-86, -22, 98, -127, -63, 72, -110, -36, -58, 105, 12, -12, 85, 15, 119, -110, 65, 31, 114, -55, -31, -128, 111, 16, -28, -53, 107, -86, -1, -108, 18, 8, -8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[29, 106, -88, -10, 17, 4, -125, -3, 123, 105, -22, 73, -35, -29, -64, 26, -108, 88, -126, 96, 104, -74, -6, 41, -35, 67, -90, 68, -43, -27, -55, -62, -8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-71, -128, -126, -38, -24, -7, -117, -33, 93, -78, -67, -5, -14, 63, 68, -98, 111, -1, 104, 90, -88, 32, 53, -122, 53, -93, 13, -110, -84, -35, -71, -39, -8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[18, 63, 13, 123, -124, 95, -124, -73, 18, -77, 90, 21, 57, -126, -69, 28, -5, -121, 92, 15, -84, 33, 30, -41, 86, 106, 1, -62, -98, -36, -19, 102, -8, -6, 51, -69, -49, -92, -60, 18, 115, -78, -90, -37, 40, 81, 87, -25]");
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("DFC346733F1FEA5CF9C056FB23CE6BA8", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("DB540EF8775EAF76D0FFE3C2734C1BB34BAD54DC5D3DFCC5D9819C29E5AF9F27", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC346E8BB81E1F58D708CA9BEF4CE7044A621BE5FE1AD781CDEBE5FAC7C37B8BBCE4B5CE003AF5F2F1C27EFC0C9FDB6C", secretKey6);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[127, -40, 114, -4, -20, -62, -39, 48, -76, -126, 48, -40, 88, -102, -103, -15]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[106, -91, -23, 92, 7, 125, -46, 126, 124, 106, 36, -50, 109, -67, -49, -65]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-41, 50, -108, 112, 105, 6, -75, -57, 31, 77, 108, 56, 5, -123, -22, -19, 57, -4, -6, -77, -23, 46, -93, 34, 90, 58, -116, 90, 13, 34, -112, 36, 127, -40, 114, -4, -20, -62, -39, 48, -76, -126, 48, -40, 88, -102, -103, -15]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-25, -20, 23, -73, 82, 7, -87, -54, 60, -125, -2, 126, -114, -75, 86, 8, -44, 73, 68, -119, -3, -27, -17, -30, -79, 107, 5, -57, -45, -27, 90, -39, 38, -51, 37, -66, 67, 35, -9, -17, -39, 7, -14, 90, 45, 78, 53, 9, 72, 118, 66, -72, 112, 75, -45, -80, 105, -62, 7, -73, 125, 95, 36, 33, 127, -40, 114, -4, -20, -62, -39, 48, -76, -126, 48, -40, 88, -102, -103, -15]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-109, 95, -71, -107, -108, -51, -36, -124, -126, 27, -92, 127, -71, -118, 67, 69, 50, 95, -38, -37, -40, -47, 85, -41, 92, 53, -67, -38, 53, 69, 123, 93, -58, 12, 88, -45, 83, 43, -74, 97, -50, -124, -60, -27, 16, 113, -44, 92, 27, -46, 82, 107, 19, 106, 100, -41, 82, 120, 117, 14, -99, 52, 117, -97, 106, 13, 67, 4, -21, -72, -22, 89, -57, -120, 71, 31, 6, 110, -4, -32, 32, -39, -18, 126, -34, -74, -12, -85, -120, 84, -120, -30, -42, -126, 92, -88, 127, -40, 114, -4, -20, -62, -39, 48, -76, -126, 48, -40, 88, -102, -103, -15]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-116, 109, -64, -13, 27, 1, 124, 62, -79, 33, 29, 88, -96, 34, -11, -22, 20, 77, 74, -3, -28, 72, -41, 118, 38, 23, -73, 80, 8, -82, -16, -65, 71, -83, -74, 23, 101, 63, 56, 78, -46, 120, -71, 55, 21, 55, 100, -31, -93, 52, 73, -49, -13, -110, -119, 116, 44, -37, -50, 121, 82, 81, -17, 38, -35, -119, 74, 26, 124, 82, -70, 29, -127, 39, 52, -128, -39, 113, -49, -26, 18, 2, 28, 72, 45, -22, 37, 107, 97, -25, -83, -95, -8, -39, -13, 36, 127, -40, 114, -4, -20, -62, -39, 48, -76, -126, 48, -40, 88, -102, -103, -15]");
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey9);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey23);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey32);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey32);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey32);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey32);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey32);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey32);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("A7AA7633B416425E062B93EBAFC3E8F101756308309966014899E4F66D0E6FC06B9672B995918912ED8FBEA822A3F72BCA34B52403C7ADE10911410F1AE4DBFB362294A3B5935663881A3BB078393FC11A1FEDC30261D485A164A23F55FBFA3B822465E8211CEB1082C9CD771F644DC53666DB2500D7D50F1D27D031854BA1565A032F2CBC9B24F2580DFAFF7863C62BC91B1332B1759C78379C527C7EEF4C514AA5EB71146E8FEFB8F49B0B2BD4780CAE70D4B246A57B164DE90C05EB9C9766C91A43B3A950F7609639BF23475DF36E5D0A36491A59C81036C86E2F66FA9A505937EA2B82A3A9BD4C4472155AA7749B", secretKey32);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey32);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        java.lang.Class<?> wildcardClass46 = byteArray43.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[64, 51, 73, 39, 38, -22, -50, 11, -66, -18, -89, 105, 119, 106, 31, 9]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[26, 127, 73, 101, 111, 3, 92, -8, 19, -127, 101, 116, 43, 99, 82, -21]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[97, -113, -99, 95, -10, -107, 58, 49, 94, 104, 124, -55, -13, 49, 72, 53]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[23, -80, -23, -82, 94, -78, 92, -29, 13, 74, 4, 93, 69, -32, 55, 67]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-116, -15, 86, 103, -27, 66, -78, -41, 53, 74, 72, -5, -35, -106, -126, -88]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-116, -15, 86, 103, -27, 66, -78, -41, 53, 74, 72, -5, -35, -106, -126, -88]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[87, 111, -41, 15, -81, -3, -95, 37, 57, -106, -47, -59, 69, 67, -43, -33, -77, -127, -125, -107, 62, 5, 57, -19, -115, 51, -50, -35, -28, 1, 76, -74, 87, -44, -118, -127, -73, -85, 53, 26, 44, 1, 36, 27, 6, -98, -120, 73, 107, -27, -64, 95, -15, -72, -52, -40, -34, 127, 122, -127, 89, 115, -18, -100, -94, 29, -72, -116, 25, 114, 107, -36, -41, 39, 58, 48, -126, 9, -95, -101, -37, 50, 52, -100, 16, -2, -43, -106, -68, 109, -21, 78, 56, -26, -41, 30, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[64, 48, 55, 34, -122, -69, -81, -120, 57, 95, 119, 5, 68, 84, 54, 68, 63, -45, -106, -77, 31, -5, -29, 116, -20, 126, -41, -7, 63, -75, -13, -59, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-106, -86, 11, -9, -26, 108, -45, 120, -19, -88, 34, -33, -70, -22, -122, -81, -50, -110, 8, 94, -14, 27, -10, 4, 6, -72, 97, 91, -39, 45, -68, 11, -114, -96, 83, 89, -66, -40, -107, -67, 0, 33, 63, 100, 58, -83, 107, -119, -83, -91, 71, 48, 52, 38, 28, -47, -77, -20, 104, 3, 43, -53, 91, 36, 122, -13, -11, 3, 93, -30, -118, -40, 86, -54, 69, 66, 71, 2, -98, 46, -5, -127, 76, -51, -41, 35, -25, -66, 50, -53, 105, -121, -50, 47, -87, -71, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[46, -57, 105, 19, 18, 18, -99, 25, 110, -86, 74, -45, 23, 5, 28, -110, -104, -2, 75, 50, 110, 51, 100, 94, -93, 74, -101, 0, 35, 97, -112, 17, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-69, -31, 44, -22, 30, -84, 96, -47, -47, -13, -29, 17, -17, -20, 67, 46, -42, -72, -59, -35, -39, -11, -83, -17, -11, 27, 33, -19, -107, -94, -123, -18, 59, -53, -127, -127, -47, 71, -60, -40, -44, -100, -88, 122, 85, -58, 76, -18, 121, -81, 72, 81, 117, 114, 109, -48, -8, 100, -66, 112, -57, -63, -22, 93, 17, -119, -63, -58, -70, 69, -107, -32, 39, 100, 127, 7, 117, 117, -78, -101, 42, -54, 127, -35, -126, -68, 106, 73, 101, -11, -8, -17, -36, -43, -40, 3, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[112, 2, -1, 108, -15, 108, 91, 4, -59, 85, 12, -83, 112, 97, 73, -60, 69, -20, 126, 93, 48, 123, 47, -5, 110, -93, -34, -58, 17, 17, -41, 48, -82, -109, 126, 46, 84, 34, 93, -119, -12, 102, -40, -90, 124, -105, -26, 6]");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7002FF6CF16C5B04C5550CAD706149C445EC7E5D307B2FFB6EA3DEC61111D730AE937E2E54225D89F466D8A67C97E606" + "'", str44, "7002FF6CF16C5B04C5550CAD706149C445EC7E5D307B2FFB6EA3DEC61111D730AE937E2E54225D89F466D8A67C97E606");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7002FF6CF16C5B04C5550CAD706149C445EC7E5D307B2FFB6EA3DEC61111D730AE937E2E54225D89F466D8A67C97E606" + "'", str45, "7002FF6CF16C5B04C5550CAD706149C445EC7E5D307B2FFB6EA3DEC61111D730AE937E2E54225D89F466D8A67C97E606");
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("0AF0535C088597FAF65C01D551ABB67D", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("02C3F2126843143433879BD0F0A2693E42C34F0C5ACD97EA7CC5122709CAF927C4BA03C50EA6FA133A5ABDF4987B3297D2F38DB83D3E8F59E85D8FE3E8C4B9C34B5E0A654C40A7B1329B5FD7F7014F25A5ED634056248C87B377D8DB4CBAB897604AD39A7FAC9D24C3A2C9B0169D8F61C613D537F085DCD4861020B84EEEF59FF64880CFD4DF06C4C3C4722FAAD4B90436F71EC3D3A99352E02AF55544C280C31A4BF5B4B0083CA07C46291E46E7CC07987F877488479B973C51C8A7EB49CF4C3BECC74DF9341D1888328896244AB46D758D9745392DB0C7C03FB90C9C6585D4B2CE56C11365BF419E3F91FE06B4918A", secretKey5);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-107, 9, 15, 15, 121, -35, -52, 56, -80, -65, 114, -32, -54, 31, -58, -115]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-45, -86, -32, -13, -77, -19, -15, -29, 124, -26, 46, -96, 92, -31, -121, 82]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[9, 11, 1, -89, -116, -34, -59, -58, -30, -114, -17, 125, 48, -57, -3, 0, -79, 97, 18, -67, -22, 4, -88, -64, -65, 53, 11, 52, -42, 49, -111, -90, -107, 9, 15, 15, 121, -35, -52, 56, -80, -65, 114, -32, -54, 31, -58, -115]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-68, -100, -69, 99, -115, -18, -91, 38, -74, 28, 14, -100, -20, -46, -26, 5, 126, 61, -10, -98, -35, 3, -47, -33, 117, -90, -43, 96, 11, -13, -82, 86, -107, 9, 15, 15, 121, -35, -52, 56, -80, -65, 114, -32, -54, 31, -58, -115]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "9ED47D5BEA1C9ACE7A920254C9EFA1E923F644470F8E8A797BB23DA11E141FC75713E1F09BFC660DF66CBF795B52BD4C0E39A39CE73BC30353AC59B577ED0358188CA7BB92F69F471396F19728AD4A69304B329C34CBA670F0373DD75F26F1C05DF4B6FD94F1CD813F25E7DA82351F49BF9A3764D873039247C21D9CF74DF6E0CFB98ED1040B9154D59D5383B27503919898E438B002FBD79A7B7E21716D52493F835ED4E00D766BC69610BC0D8C976F6013E2217F9519680A9840DDB780ADF569806A52D3E7238E9750C3F4901EA1D74D9BB73520D11C04B798454CB530DFC0ECE41D2A24882534983EC3B09E5C3070BCC11E52D28A62D3EC162F4E3DDE93B38E129316B2EF561DCEB8B57386EEEFA4B418844BF7C4FC9B507E9D7C9790E5253C24031E90940F2C4D8B593A0EE27D20F8FB80B1B6C0B172064259B26C35A5F26E2404569BB68AFFDA7377A387D5DCAB6BAB3BB6B1E35EDE083189767C0CE9F4A22359A195ED5E5BDFC9D9D2DBB60017B3720752F3A560E510B709654E69353B0D332FBFC3CCEDFF8A4B24FA162232167A623BF9F6B887391A62D32C2F0C31A18AFFF64FAA2EAE8BC47153F35FFC049D2A378EFEB4C122DBCB0FA122002696497866C14AAAD0A984B999D1E6D5BA12E51EDF88A6D86AC1E9252659749FC276E995090F0F79DDCC38B0BF72E0CA1FC68D" + "'", str11, "9ED47D5BEA1C9ACE7A920254C9EFA1E923F644470F8E8A797BB23DA11E141FC75713E1F09BFC660DF66CBF795B52BD4C0E39A39CE73BC30353AC59B577ED0358188CA7BB92F69F471396F19728AD4A69304B329C34CBA670F0373DD75F26F1C05DF4B6FD94F1CD813F25E7DA82351F49BF9A3764D873039247C21D9CF74DF6E0CFB98ED1040B9154D59D5383B27503919898E438B002FBD79A7B7E21716D52493F835ED4E00D766BC69610BC0D8C976F6013E2217F9519680A9840DDB780ADF569806A52D3E7238E9750C3F4901EA1D74D9BB73520D11C04B798454CB530DFC0ECE41D2A24882534983EC3B09E5C3070BCC11E52D28A62D3EC162F4E3DDE93B38E129316B2EF561DCEB8B57386EEEFA4B418844BF7C4FC9B507E9D7C9790E5253C24031E90940F2C4D8B593A0EE27D20F8FB80B1B6C0B172064259B26C35A5F26E2404569BB68AFFDA7377A387D5DCAB6BAB3BB6B1E35EDE083189767C0CE9F4A22359A195ED5E5BDFC9D9D2DBB60017B3720752F3A560E510B709654E69353B0D332FBFC3CCEDFF8A4B24FA162232167A623BF9F6B887391A62D32C2F0C31A18AFFF64FAA2EAE8BC47153F35FFC049D2A378EFEB4C122DBCB0FA122002696497866C14AAAD0A984B999D1E6D5BA12E51EDF88A6D86AC1E9252659749FC276E995090F0F79DDCC38B0BF72E0CA1FC68D");
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey6);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey17);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("109629313FAF6585DFA3B0DC895E3B8AF94DF898E6D88C0452F4557637F5CDE6", secretKey17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey17);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[57, 74, 97, -71, 78, 20, 51, 80, 1, 110, 50, 95, -5, 91, -22, -120]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[25, -13, -56, -96, 49, -44, -90, -2, 110, 65, -70, -22, -29, -24, 24, -20, -61, 33, 7, 33, -61, 54, 61, -2, -76, 29, -121, 14, -77, -22, 46, 0, -7, 117, 66, -54, 81, 90, -93, 26, -30, -52, -18, 76, 63, -105, 25, 62]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-7, 117, 66, -54, 81, 90, -93, 26, -30, -52, -18, 76, 63, -105, 25, 62]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-83, -4, -16, -92, -127, 87, -112, 32, -16, 70, -124, 57, -60, 89, -2, -96, -59, -16, 77, 58, 64, -107, 80, -23, 8, 108, -36, 61, 9, -20, -98, 121, -7, 117, 66, -54, 81, 90, -93, 26, -30, -52, -18, 76, 63, -105, 25, 62]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-114, -85, -116, -107, 35, -21, 53, -39, 51, -7, -36, -35, -123, 81, 50, 120, 60, 68, -62, -59, -88, 99, 66, 7, -11, 36, -77, -106, 123, 14, -102, 74, -7, 117, 66, -54, 81, 90, -93, 26, -30, -52, -18, 76, 63, -105, 25, 62]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[75, -45, 22, 70, -124, -74, -40, 59, -95, -82, -104, -77, 7, 43, -54, -102, 72, -64, -123, -69, 46, -68, 59, 113, -36, -47, -113, 114, -27, 50, -111, -20, 71, -69, 97, -90, 111, 4, -44, 59, 43, 52, 6, 64, -128, -77, 94, -46, -40, -114, 93, -12, -48, -124, 13, 14, 85, 126, 49, 124, 28, -107, 21, 120, 38, -59, 28, -105, 57, 15, 55, -114, 70, -123, -52, -31, 47, 98, 73, 40, 62, -60, 85, -7, -61, -103, -3, -33, -120, -56, 122, -24, -21, 47, -122, 60, -7, 117, 66, -54, 81, 90, -93, 26, -30, -52, -18, 76, 63, -105, 25, 62]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[44, 57, -15, -4, -71, -127, 73, 81, -54, 57, -11, 30, 74, -31, -116, -98]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-68, -81, -1, 65, -22, -74, -96, -36, 41, -58, -90, -103, -113, -93, -28, -18, -90, 42, 121, 12, -49, -35, 11, 119, 98, 42, -61, -98, -78, -84, -100, 42, 74, 114, 51, 118, -112, -112, -126, -14, -25, 112, 91, -99, 110, 90, -21, -118, -39, -32, -17, -18, 46, 15, -27, -83, -124, 29, 15, -79, -33, 14, -18, -43, 113, -30, -69, 114, -104, -67, -74, 55, -62, 83, 92, 104, 73, 60, -104, -118]");
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        byte[] byteArray22 = new byte[] {};
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey24);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey28);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey28);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey28);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey55);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey55);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[126, -1, 112, 24, -25, 62, 112, -76, -126, -28, 12, -52, -105, -63, -53, 31]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-38, 56, 126, 39, 110, 91, -109, 60, 64, 91, 25, 25, -29, -105, 126, 102]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-34, -43, 39, -128, 51, 30, 54, -113, -105, 57, -70, 29, 41, 53, 73, 56]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-8, 46, 90, 39, 17, -11, -52, -61, 35, 125, 96, -47, 28, -29, 110, 53]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-122, -119, 22, -66, 97, 94, 66, 36, 44, 94, -47, 70, 126, -117, 90, 76]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, 67, -68, 32, 6, -115, 19, 90, -101, 44, 35, 26, -63, 88, 35, -44]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-72, 36, -37, -91, 68, -117, -90, -98, -76, 74, 110, -20, 92, -85, -71, 100, 113, -45, -97, -123, 41, -82, -64, -108, -22, 74, 102, -43, -6, -112, 107, 96, -122, -119, 22, -66, 97, 94, 66, 36, 44, 94, -47, 70, 126, -117, 90, 76]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-21, 6, -40, 13, 6, 112, 0, 101, 57, 79, -58, -118, -109, -28, -52, -48, 46, 123, -48, -107, -1, -42, -108, 49, 51, -5, 51, 37, -38, -22, 62, 43, 38, 61, -18, 110, -112, 115, -94, 119, -113, -120, 53, -54, 105, 21, 68, -13, 96, -39, 44, 117, 47, -67, 10, -60, 123, -74, -127, 15, 52, -45, -79, 11, 127, -67, 58, -10, 104, -42, 93, -127, 12, -84, 105, -122, 108, -64, -90, 86, -76, -124, -84, 34, -13, 49, 50, -43, -5, -64, -111, -108, 64, -17, -61, 45, -122, -119, 22, -66, 97, 94, 66, 36, 44, 94, -47, 70, 126, -117, 90, 76]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-65, 22, -73, -42, 119, 11, 54, -83, 65, 115, -40, -98, 107, -66, -124, -20]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-99, -71, -69, 58, -34, 90, -51, -90, -12, -95, -20, 5, -120, -26, -122, -111]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[89, -31, -13, -39, 41, 6, -29, 96, -32, -8, 35, -106, 121, -123, -96, 44]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[88, -9, -70, 95, -4, -2, 120, 6, -83, 30, -63, -4, -70, 13, 107, -50]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[39, -104, 125, -37, 102, 32, -49, 64, 113, 47, 35, -18, 103, 66, -86, 18, 92, -9, 25, 60, -115, -13, -21, 124, 8, -65, -100, 19, -71, 118, -83, 67, 89, -31, -13, -39, 41, 6, -29, 96, -32, -8, 35, -106, 121, -123, -96, 44]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("F00BB61C80623A0DF592868EB8C40995D846BDF47DC1D5C4584AE0D4A708AFFC07FA54F6C7DF0ACBA7990EEE87320EDF4A3F6863D4D2E3F383537BE7F6E1BC28B43D87FD58F4C7144FC4C1C5DF3190ABD058CC3DAEB2C81B3C510790F2CC0E2AE0CBFE7FC3AA1DCE147D2F9F1207B3ACE9B1FA93E26C5B99AFFC546E615F2E5862F67D543B111F8C95F4AA8303426A7BD3604EA80BF3C55C44B806DD8458300A199AF75E19480AF1C5B590EB31C10093139F9A91B2EDC374B080FE1D21E95024E710010A9F0E558F6E008AEC389BA4C11107D24F12E7CE6DE9A9A9D050ECE824685664C985D55345EF7D948753A52737", secretKey26);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey49);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey53);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey53);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey53);
        byte[] byteArray57 = new byte[] {};
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray57);
        javax.crypto.SecretKey secretKey59 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey59);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey63);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey63);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray57, secretKey63);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey63);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey63);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey63);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey63);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey63);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("14E3F5984515DD427E94BC6F6C8D6F35C0F91D90FC39478640619F9998EB40D852E0FD0B29B4D19954C7DC8CBA5EF9AA", secretKey63);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey63);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[52, -24, 107, -42, -50, -50, 115, 61, -122, -53, 31, 46, -124, -23, 55, -26]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[85, 14, 33, 121, -21, -98, -120, -80, -97, 44, 55, 63, 24, 46, 59, -109]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-56, 42, 9, 7, -107, -75, 48, -25, -104, 53, 65, 92, 109, -34, 114, 126]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[115, 121, -88, -41, -8, 99, 13, -94, -13, -89, -124, -12, 58, 27, -78, -106]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[109, 20, 122, 33, -104, -124, -7, -87, -106, 78, -70, 121, 43, -60, -96, -70]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-92, 119, -105, 37, 96, -97, 76, -16, 86, -85, -110, 39, 1, 79, 55, -15]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-92, 119, -105, 37, 96, -97, 76, -16, 86, -85, -110, 39, 1, 79, 55, -15]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "6CB930D0E095EE492B47BB7D01E71C775C9412350B5DF77787DE229E6EA84A3161C624B269AA5EB7A10F4F49151AE02C030104794186F89D5ACB27FE7ED2772DB5BE4E19C06DB29D472ED4BD2E09F34C0B32EE70B55DB1A7C43D9673FB656DFC0B96A75797563DCCB702C031C666D3D6396654464E83B3E159DF6F31B79FA584DF8AA15083FA6D8959947574B4FE02803A81E51DF9097F852896C5B25405BEDD6EA529553DDCB010783CD84400835E72C7035ADEFCBFE7C559F81563B1AD24DC96AE8C6C36598A212545084017DC2EFC5D732AF85290A0127B1D87A34032A99F942CC46C56DEDCE2AF5C77FF2EF6855FC8C5B7DAF00990636D3F53A07FEC56918124412A689BDFB5597BFA4D1FC18D146F9DF1A682B7479B4DA6379933E747C14426004505EC515232E4B4AD060C7EDDBA0E5558DE5F1B6FE2CB4E2381EFBFA9EBEE018064BEC83BFFAA68000A195461EC5A3B8EC60647E7ABDE8422B181C85AB829B37ED4C53E8DDC64F838D89F21C8520CCB930A2B96BBC70ED0AE4F3D906A5A80FBEAB7E1394B270A31BBCBD5908ABF72F92AE4E8B4B5ED2584AB983EAD422AA16EC4228200F44F7B63558C23E5E6DB5B497F12EE3184CCCD3058BA62E54DD8972828FCBF5272CA3479CF4B6EC30AEB5F2166B873EBDDF614979827EC3BB36D147A219884F9A9964EBA792BC4A0BA" + "'", str32, "6CB930D0E095EE492B47BB7D01E71C775C9412350B5DF77787DE229E6EA84A3161C624B269AA5EB7A10F4F49151AE02C030104794186F89D5ACB27FE7ED2772DB5BE4E19C06DB29D472ED4BD2E09F34C0B32EE70B55DB1A7C43D9673FB656DFC0B96A75797563DCCB702C031C666D3D6396654464E83B3E159DF6F31B79FA584DF8AA15083FA6D8959947574B4FE02803A81E51DF9097F852896C5B25405BEDD6EA529553DDCB010783CD84400835E72C7035ADEFCBFE7C559F81563B1AD24DC96AE8C6C36598A212545084017DC2EFC5D732AF85290A0127B1D87A34032A99F942CC46C56DEDCE2AF5C77FF2EF6855FC8C5B7DAF00990636D3F53A07FEC56918124412A689BDFB5597BFA4D1FC18D146F9DF1A682B7479B4DA6379933E747C14426004505EC515232E4B4AD060C7EDDBA0E5558DE5F1B6FE2CB4E2381EFBFA9EBEE018064BEC83BFFAA68000A195461EC5A3B8EC60647E7ABDE8422B181C85AB829B37ED4C53E8DDC64F838D89F21C8520CCB930A2B96BBC70ED0AE4F3D906A5A80FBEAB7E1394B270A31BBCBD5908ABF72F92AE4E8B4B5ED2584AB983EAD422AA16EC4228200F44F7B63558C23E5E6DB5B497F12EE3184CCCD3058BA62E54DD8972828FCBF5272CA3479CF4B6EC30AEB5F2166B873EBDDF614979827EC3BB36D147A219884F9A9964EBA792BC4A0BA");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[99, -58, -19, -54, -121, 37, -37, 105, -41, -17, -107, 29, -69, -111, -7, -112]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[2, -28, 108, -88, -30, -4, 102, -75, 70, 76, 20, 10, 57, -123, 34, 91]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[54, -102, -34, -106, -52, -109, -115, -123, -82, 113, -106, 87, -22, -86, 12, 86]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[25, 103, -92, -49, 71, -23, -81, 16, 121, 24, 106, 59, -71, 52, -101, 35]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(secretKey59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-12, -74, -74, -97, -110, 2, -50, 85, -43, 24, 113, -33, 116, -4, -66, -99]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[6, 0, 33, -58, 119, 18, 102, -90, 5, 31, 106, 9, 22, 31, -16, 100]");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-61, -3, 14, 39, 16, 113, -81, 127, -74, 96, -31, 89, 119, 103, -102, 38, -106, 37, -80, -102, 106, 35, -125, 40, 34, 114, -81, -101, 58, 0, 123, 127, -12, -74, -74, -97, -110, 2, -50, 85, -43, 24, 113, -33, 116, -4, -66, -99]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[123, 90, 45, -52, 39, -95, -36, 23, 108, 97, -47, -63, 97, -96, 113, 26, 123, -7, -9, -59, -102, 121, 55, -27, 50, -2, 124, -67, 33, 116, 22, 35, 119, 109, -47, -31, 61, 24, -63, -119, -104, -72, -13, 79, 40, 115, 41, 116, 56, -116, 24, 40, 123, -16, 78, 72, 33, 24, -97, -78, -98, -109, -14, 93, -55, -41, 36, 43, 44, -117, 30, 20, -94, -1, 116, -104, 75, -40, -30, -120, 1, -49, 78, -93, 30, 34, 40, 26, 113, -55, 39, -81, -33, 67, -55, -101, -12, -74, -74, -97, -110, 2, -50, 85, -43, 24, 113, -33, 116, -4, -66, -99]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-120, 25, -29, -113, -57, -44, -91, 40, 111, -54, 70, -55, -15, 45, 35, 69, -113, 121, -41, -18, 74, 44, 4, -121, -51, 41, 21, 70, 5, 92, 63, 103, -13, 58, -93, -34, 110, 17, -23, -51, -26, -108, 103, -62, -34, -3, 54, -110, -16, 96, -4, 121, 90, 0, -34, 78, -16, 67, -118, -36, -125, 25, -35, -62, -26, -32, -11, 66, -8, 47, 34, -27, -34, 88, 116, -53, -41, -100, -31, -12, -38, 96, -79, 50, -6, -64, -39, -52, 101, 102, 19, 7, -37, -111, -17, -49, -12, -74, -74, -97, -110, 2, -50, 85, -43, 24, 113, -33, 116, -4, -66, -99]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-24, -41, 85, 1, 83, -91, 68, -71, -53, 26, -49, -16, -94, -32, 115, 3, -77, 98, -71, 43, 82, -102, -16, 111, -36, 48, -122, -81, -48, 66, 1, -27, 105, -37, -80, 46, -86, 35, 33, -1, 55, 68, 52, -35, -87, -27, -52, -18, -9, -43, -20, -17, -21, 75, -88, 14, 63, 40, -25, -116, -112, 36, 101, 27, -6, -51, -72, -96, 44, 2, 32, 78, 41, 13, -118, 40, -45, -9, 80, 64, 96, -17, 94, 107, -34, -123, -105, -119, -79, -100, -4, -107, -27, 100, -99, 40, -12, -74, -74, -97, -110, 2, -50, 85, -43, 24, 113, -33, 116, -4, -66, -99]");
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("859B3FA722C372255FE30D8C636CD8405F9F730B2F82910FBDE3CFDC474CF456F33A22EDB46C16DB9298451E252DC0F7", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("61A02453F95F6132E75513332C58695F98AD5D2C7A586FB197378CE96D54942F9C07C134BE416F42EE646468C6D2B8ED", secretKey9);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-41, 89, -87, 106, 60, 15, -19, 45, -43, -2, -81, 14, -52, 81, 9, 80]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-22, 48, -59, -5, -89, -110, -66, -74, 43, 75, 93, 90, 78, 60, 74, 35]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-22, 48, -59, -5, -89, -110, -66, -74, 43, 75, 93, 90, 78, 60, 74, 35]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[58, 95, 39, -110, -50, 120, 8, -128, 123, -50, 20, 106, 111, 71, -89, 71]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[91, -48, 30, -74, 7, -127, -42, 99, -39, 47, -28, -61, 2, 124, -39, 60, 127, -102, 69, 89, 115, 36, 41, -97, -9, -87, 98, -19, -6, 41, 49, -36, -41, 89, -87, 106, 60, 15, -19, 45, -43, -2, -81, 14, -52, 81, 9, 80]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[8, 3, 108, 48, -11, 33, -66, -24, 24, -43, -87, -26, 1, -68, 102, 70, 2, 50, 61, -80, 100, -103, -53, -97, 22, -71, 116, 48, 13, 70, 21, 123, 123, -103, -54, 38, -19, -76, -53, 7, 79, 110, -80, 36, -32, -128, 52, -119, 73, 9, 37, -18, 40, 41, 102, -5, 83, -68, -59, 103, 15, -109, -59, -110, -24, 13, 17, 23, -2, 17, -25, 127, -23, -2, 89, 83, 104, -66, 17, 78, 98, 79, 120, -11, -118, -44, 115, -51, -87, -58, -38, -120, 108, -46, 95, 64, -41, 89, -87, 106, 60, 15, -19, 45, -43, -2, -81, 14, -52, 81, 9, 80]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-117, 47, -5, 87, -87, 1, -48, -82, 82, -7, 58, -72, -27, -41, -8, -27, -21, -33, 116, -115, 23, 5, 40, 33, 93, -16, 45, 6, 34, -68, 79, 4, -41, 89, -87, 106, 60, 15, -19, 45, -43, -2, -81, 14, -52, 81, 9, 80]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-61, -94, 87, -31, -66, -78, -80, -54, -9, -110, -50, 58, 121, -116, 37, 26, -4, 49, -78, 28, -54, -127, 14, 82, -82, 104, 110, -23, 106, 9, -67, -96, 54, -8, 31, -29, -24, -82, 57, -117, 53, 61, -2, 56, -48, 63, 71, 112, 1, 123, 100, 79, -25, 102, -118, -102, 125, 57, -14, -102, -107, 107, -59, -115, 73, 22, 100, 107, -98, -24, -44, -108, 33, -91, -13, 100, -119, 114, 16, -28, -19, -28, 125, -81, 118, 96, -54, 21, 84, 25, -106, -74, 43, -35, 12, -15, -41, 89, -87, 106, 60, 15, -19, 45, -43, -2, -81, 14, -52, 81, 9, 80]");
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey6);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        byte[] byteArray26 = new byte[] {};
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray26);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey28);
        javax.crypto.SecretKey secretKey32 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey32);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey32);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray26, secretKey32);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey32);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey41);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey41);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey41);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey41);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[29, 114, 123, -71, 49, 82, 54, 50, -14, -42, -68, -99, 37, 74, 86, -86]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-35, 39, 116, -90, -67, 112, 105, -59, 42, -58, 87, 85, 78, 60, 90, 101, -6, -108, -24, 111, 122, -119, 21, 53, 33, -92, 93, -45, 123, 43, -52, -52, -10, -105, -39, -59, 14, 86, -92, 20, 38, -42, 83, 92, 16, 15, 111, -108]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-10, -105, -39, -59, 14, 86, -92, 20, 38, -42, 83, 92, 16, 15, 111, -108]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-7, 127, 91, -71, 72, -111, -1, -51, -107, -99, -48, -66, 81, -92, -93, 81, 42, 81, -47, 110, -101, 11, -120, 81, -42, -115, -111, 44, -11, -42, -38, 123, -10, -105, -39, -59, 14, 86, -92, 20, 38, -42, 83, 92, 16, 15, 111, -108]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-35, 39, 116, -90, -67, 112, 105, -59, 42, -58, 87, 85, 78, 60, 90, 101, -6, -108, -24, 111, 122, -119, 21, 53, 33, -92, 93, -45, 123, 43, -52, -52, -10, -105, -39, -59, 14, 86, -92, 20, 38, -42, 83, 92, 16, 15, 111, -108]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[41, -94, 85, -55, -56, -87, 64, -123, 49, 38, -32, -49, 21, 115, -11, -64, 96, 111, -83, 3, 3, -70, 52, -14, 38, -127, -113, -29, -124, 71, -34, -72, -10, -105, -39, -59, 14, 86, -92, 20, 38, -42, 83, 92, 16, 15, 111, -108]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[27, -59, -15, -20, 59, 19, -22, -64, 53, 105, 89, -99, -86, -43, -91, 121]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[101, 100, -72, -14, -70, -117, 29, 43, 72, 70, -103, -14, -90, 82, 49, 35]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey32);
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-109, 3, -109, -65, 27, 68, -74, -100, 6, 90, -95, 67, 28, -47, -53, 52]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-84, 21, -64, 39, -38, 15, -12, 26, 75, -96, -48, 26, 32, -24, 37, -38]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-80, 54, -92, 73, -100, -118, 9, 25, 67, -13, -76, -106, -36, 17, -103, -71]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-88, -15, -124, -107, 105, -93, -63, -34, -71, 67, 22, 64, -88, 78, 104, 32]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-88, -15, -124, -107, 105, -93, -63, -34, -71, 67, 22, 64, -88, 78, 104, 32]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-37, 48, 100, 53, 95, 108, -55, 56, -125, 73, 73, 86, 70, 74, 38, 12, 10, -28, 18, -64, -46, -65, 16, 112, -74, -27, -90, 61, 77, 114, 28, 109, 72, 19, 104, 98, -59, 9, 54, 77, -8, -121, -98, 117, -13, -97, -71, 112, 79, 107, -87, -80, 3, 95, 25, 80, -45, 110, 86, 71, -3, 13, -58, 81, 110, 47, -81, -5, -107, 108, -81, -104, -82, 65, -52, 88, -123, 49, -99, -80, -83, -122, 59, -22, -53, -50, -119, -2, 51, 109, 31, -99, 92, 113, 39, 18, -80, 54, -92, 73, -100, -118, 9, 25, 67, -13, -76, -106, -36, 17, -103, -71]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[34, 51, 35, 96, 10, 54, -115, 69, 39, -8, 77, -113, 117, -12, -27, -55, -65, 17, 87, 36, -83, 106, -26, 122, -55, -4, 82, 4, -53, -92, 121, 29, -80, 54, -92, 73, -100, -118, 9, 25, 67, -13, -76, -106, -36, 17, -103, -71]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-76, -97, -50, -36, -83, 15, 125, -125, 10, 92, 120, 11, 116, -96, 65, -111, 32, 26, -63, -40, 39, -18, 87, 2, -8, -62, 89, -18, -73, 115, -29, 101, -1, -47, -16, -114, -84, 124, 74, -94, 47, -107, 3, 41, -52, -128, -89, 108, -60, 45, -66, -54, 99, 48, 34, 81, 109, -87, -59, -83, 0, 58, 118, -89, 92, 0, 66, 69, 5, 26, -64, 48, -68, 1, 60, -90, -99, 107, -72, -25, -90, -31, 90, 75, -35, -87, -28, 11, 35, 13, 76, 42, -80, -98, 4, 36, -80, 54, -92, 73, -100, -118, 9, 25, 67, -13, -76, -106, -36, 17, -103, -71]");
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-73, 90, 98, -30, -13, 24, -126, -5, -62, -31, -22, 21, 86, -6, 76, -25]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[13, 60, 47, -105, 47, 66, -28, -4, 77, 1, 55, 73, -65, -128, -10, 27, 105, -55, 78, -67, 101, 91, -103, -16, -30, -32, 34, -81, 98, 10, 12, -2, 62, -67, -53, 110, -108, 110, -106, 45, -11, -9, 39, 83, -19, -64, 51, 65]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[62, -67, -53, 110, -108, 110, -106, 45, -11, -9, 39, 83, -19, -64, 51, 65]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[109, 12, -37, -111, 46, 67, -70, -59, -31, -20, 96, -16, 80, 26, -72, -52, -14, -55, 103, -118, 42, 109, 93, -67, 13, -72, 113, -14, -30, -51, 108, 1, 62, -67, -53, 110, -108, 110, -106, 45, -11, -9, 39, 83, -19, -64, 51, 65]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[13, 60, 47, -105, 47, 66, -28, -4, 77, 1, 55, 73, -65, -128, -10, 27, 105, -55, 78, -67, 101, 91, -103, -16, -30, -32, 34, -81, 98, 10, 12, -2, 62, -67, -53, 110, -108, 110, -106, 45, -11, -9, 39, 83, -19, -64, 51, 65]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-38, 45, -60, 76, -34, -126, -34, -44, -46, -54, 96, -9, -35, 67, -122, -119, 125, -112, -1, -45, -93, -4, 66, -98, 100, 73, 52, 100, 8, -34, -96, -47, 62, -67, -53, 110, -108, 110, -106, 45, -11, -9, 39, 83, -19, -64, 51, 65]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DA2DC44CDE82DED4D2CA60F7DD4386897D90FFD3A3FC429E6449346408DEA0D13EBDCB6E946E962DF5F72753EDC03341" + "'", str13, "DA2DC44CDE82DED4D2CA60F7DD4386897D90FFD3A3FC429E6449346408DEA0D13EBDCB6E946E962DF5F72753EDC03341");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DA2DC44CDE82DED4D2CA60F7DD4386897D90FFD3A3FC429E6449346408DEA0D13EBDCB6E946E962DF5F72753EDC03341" + "'", str14, "DA2DC44CDE82DED4D2CA60F7DD4386897D90FFD3A3FC429E6449346408DEA0D13EBDCB6E946E962DF5F72753EDC03341");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-121, 110, -58, 34, -85, 10, 40, 2, 9, -10, 93, -24, -73, -47, 104, -95]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[50, 68, -119, -109, -123, -35, -103, -76, 102, 39, 11, 122, -110, -105, 57, 28]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-127, 21, -65, 115, -108, -9, -32, 64, -86, 80, 98, 116, 77, 48, 115, 81]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-121, 110, -58, 34, -85, 10, 40, 2, 9, -10, 93, -24, -73, -47, 104, -95]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-73, -89, 103, -52, 126, 59, 81, -118, -79, -11, -10, -94, 39, -111, -3, -20, -50, -19, 26, -40, -13, -73, -105, 38, -33, 61, 86, -71, -53, 26, -56, -74, 22, 71, 102, 51, -63, -5, 87, -17, -96, 53, -73, 103, 116, 10, -80, 70, -31, -63, 58, -88, -109, 116, -115, -97, 110, -28, 58, -10, 55, -62, 111, -25, 71, -53, 125, -77, 113, -117, 35, 19, -107, 44, 39, 65, 98, 27, 49, -84, 98, -105, 70, -98, 120, 97, 34, 42, 99, -120, -12, 19, 84, 106, 30, -54, -121, 110, -58, 34, -85, 10, 40, 2, 9, -10, 93, -24, -73, -47, 104, -95]");
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey7);
        java.lang.Class<?> wildcardClass15 = byteArray14.getClass();
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-89, -69, 12, -35, -124, 25, -89, -74, 15, 52, 114, -77, -24, -62, 12, 77]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-113, -85, 84, -92, 106, 27, 3, 76, 109, 37, 73, 124, -12, 65, -24, 5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-113, -85, 84, -92, 106, 27, 3, 76, 109, 37, 73, 124, -12, 65, -24, 5]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[83, -25, 108, 64, -102, -88, -15, 126, 33, 40, 8, -11, 100, -80, -30, 126]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-95, 61, 92, -10, 73, -28, 14, -35, -64, -111, 121, -91, 49, 62, -76, -79, -38, 104, -111, 19, -95, 117, 97, -39, 23, -106, -40, 121, 77, 92, 91, -3, -89, -69, 12, -35, -124, 25, -89, -74, 15, 52, 114, -77, -24, -62, 12, 77]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-95, 61, 92, -10, 73, -28, 14, -35, -64, -111, 121, -91, 49, 62, -76, -79, -38, 104, -111, 19, -95, 117, 97, -39, 23, -106, -40, 121, 77, 92, 91, -3, -89, -69, 12, -35, -124, 25, -89, -74, 15, 52, 114, -77, -24, -62, 12, 77]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-37, -124, 20, 19, 9, 45, 46, -109, -118, -33, 73, 104, -126, 127, -115, 22, -104, -25, 105, -28, -84, -52, -103, -76, 31, 10, 17, -12, -82, -8, -37, 46, -49, -51, -29, -43, 88, -44, 11, -122, 31, 22, -84, -75, 76, -35, -116, -73, 59, -55, 36, 94, 118, -41, -79, -103, -58, 57, -83, 68, 26, 121, 19, -38, -51, -69, -109, -4, -71, 117, 44, -7, -103, 76, 44, 0, -108, -77, 99, 11, 96, 92, -83, 1, -111, 19, -109, -45, 105, 24, -55, -28, 122, 81, -7, -115, -89, -69, 12, -35, -124, 25, -89, -74, 15, 52, 114, -77, -24, -62, 12, 77]");
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey30);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey30);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey30);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("3936FD812C91212F194AB86A824263051DA8B1A57BA066FD17C2004627236A7FF585BA5B6323F95597371790DDC1FAAF", secretKey30);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("6566D0469D4956CB5AB75EF7230BC4F5", secretKey30);
        java.lang.Class<?> wildcardClass40 = byteArray39.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[83, 121, -95, -65, -12, 86, 105, 116, -78, 17, 65, 9, 61, 31, -104, -53]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-104, 78, -125, 109, 18, -21, -97, 120, 62, 25, -94, 77, -45, -113, 118, 68]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[35, 61, 80, -87, 103, 91, -46, -104, -18, 55, -32, 114, 66, -21, 123, 46]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[81, 120, -62, 66, -112, 71, 76, -17, -94, -19, 63, 105, 127, -117, -46, 33]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-27, -13, -26, -117, 4, 120, -102, -127, 70, -59, -72, 112, -95, -110, 50, -33]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-18, 18, 89, -93, 56, 86, -85, -48, -54, -71, 79, 59, -48, 21, -124, 108]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[118, -86, 9, -100, -58, 73, 88, -11, -60, 13, -111, 14, 116, -9, 61, 32, -5, 81, -68, -34, 36, 48, 64, -72, 100, -126, 7, 43, 36, 82, 12, -12, -27, -13, -26, -117, 4, 120, -102, -127, 70, -59, -72, 112, -95, -110, 50, -33]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-37, -81, 82, -60, 56, 113, 117, -46, -28, 83, 26, -120, -3, 44, -33, 50, -1, 114, 77, -116, -104, -93, -8, -95, -47, 21, 10, 91, -100, -65, -20, -113, -45, 73, 97, -66, 92, 116, 56, 37, -102, -122, 75, 68, -13, -86, -21, 32, 57, -64, 57, -123, -45, -100, 125, 94, 68, -66, 102, 18, 3, -105, -27, -103, -42, 64, -56, 102, 110, 21, 8, -79, 6, -98, 81, 23, -3, -81, -109, 84, 38, 37, 33, 26, 17, 97, 60, -51, -55, 62, 121, 23, -48, 14, -96, -38, -27, -13, -26, -117, 4, 120, -102, -127, 70, -59, -72, 112, -95, -110, 50, -33]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-86, 9, -34, -51, 28, 117, -58, 56, -2, -79, 0, -34, 106, -1, -99, -44, -117, -88, -59, 22, 9, 114, -71, 33, 84, -99, 119, -4, 110, -115, 37, 82, 46, 77, 14, -107, -113, -47, -34, -58, 35, 107, -125, -75, -106, 32, -47, 4, 52, -2, 3, -125, -115, -22, 119, 4, -54, 6, -65, 51, -109, 106, -21, -15, -101, 102, -106, -8, -20, -27, 89, -66, 4, -19, -28, 127, 39, 15, -51, 57, -63, 106, 68, 124, -34, -59, 54, -40, -32, -74, 32, 109, -70, 51, 98, 53, -27, -13, -26, -117, 4, 120, -102, -127, 70, -59, -72, 112, -95, -110, 50, -33]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-49, -108, -70, 6, 30, -69, -27, -12, -83, 40, 5, 127, 0, -3, -112, 50, 105, -7, 20, -14, -17, -94, -112, 51, 40, -23, 48, -39, -60, 77, -124, 82, -27, -13, -26, -117, 4, 120, -102, -127, 70, -59, -72, 112, -95, -110, 50, -33]");
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey31);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey31);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey31);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey31);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey31);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey31);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey31);
        java.lang.Class<?> wildcardClass42 = secretKey31.getClass();
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[78, -95, 124, -123, -75, 119, -59, 22, -92, -86, -52, 83, -125, -86, 57, 25]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[86, 45, -93, -53, 119, 119, 15, 53, -84, 66, -93, 48, -95, -97, 100, -44]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[58, 2, -88, 10, -56, 21, 39, 67, 87, -93, 112, 36, -101, 72, -10, -123]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-51, 43, -15, -51, 10, -110, -121, -121, -14, -77, 117, 13, 75, 24, -40, 113]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-82, 111, -44, 99, 121, 68, 48, 96, 22, -103, -23, -68, -11, 68, 10, -69]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-82, 111, -44, 99, 121, 68, 48, 96, 22, -103, -23, -68, -11, 68, 10, -69]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-119, 90, -69, -78, -54, 13, 16, -3, 99, 105, -10, 22, 25, -121, 7, -69, 95, -32, 123, 85, -36, 12, -28, -22, -28, -92, 93, 74, -72, -123, 98, 65, 3, -82, 16, 82, 109, 11, -83, 15, -60, 127, -35, -75, -24, -10, 10, 57, -89, 39, -22, 104, 12, 54, 110, 28, -102, -113, 12, -82, 34, 72, -100, 18, 82, -40, -48, 121, -68, -64, -58, -109, 109, -27, 62, -109, -106, -21, -59, -34, -91, -13, 126, 93, -68, -128, 49, 4, -78, -117, -108, -3, -113, 78, -78, -97, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-10, 28, 43, 69, -73, 81, -122, -110, -65, -89, -125, -93, -63, -40, 94, -115, -85, -68, -126, -103, -49, 24, 31, 14, -56, -5, 24, 56, -47, -66, -18, 20, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[85, 51, -23, 86, 31, 104, 22, 93, -26, 9, -96, -4, 96, -14, -9, -92, 15, 48, 35, 105, 30, 42, -85, 39, -58, -99, -110, -12, 4, -2, -111, -15, 35, 14, -63, -83, -128, -53, 89, -5, 113, -14, 42, 56, 0, 16, -39, -91, -107, -19, -113, -108, 35, 120, 83, 33, 79, 16, 55, -10, 86, 41, -79, 7, 124, -57, 92, -56, -64, -38, 4, 36, 31, 110, 0, -75, -18, 53, -49, 34, 108, 2, -105, 10, -43, -95, 67, -71, 68, -77, -35, 101, 36, -72, -68, 23, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[38, 43, 43, -23, 83, -90, -56, -113, -81, 52, 111, -40, 107, 15, -107, 127, 121, 89, -31, 92, -7, 104, 25, -74, 74, 119, 72, -10, -65, -71, -36, -55, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-57, 70, 121, 110, -78, -121, 41, -39, 116, -48, 3, -81, 87, -43, 1, -109, -119, 1, -89, 107, -89, -106, -121, 41, 29, -92, 127, 72, -51, -116, -69, 116, 94, -128, 58, 41, 108, -120, 111, -82, -86, -98, -39, 67, -105, 89, 12, 54, -111, -124, 63, -55, 82, 95, -128, 125, -113, -58, -35, -62, 66, -120, -27, -106, 114, -43, 36, -5, -26, 32, 48, 62, 20, 44, -69, -12, -57, -123, 49, -107, 107, 122, 49, 112, 0, 67, -28, 91, -51, -17, 45, 38, 32, 26, 123, -87, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[32, 36, -28, 44, -51, -84, 19, 91, -109, 60, 42, 100, -85, 33, 51, 51, -2, 31, 102, -59, 112, 97, -60, 80, -114, -28, -49, -75, 117, 31, 2, 123, -88, 47, 18, 5, 6, -52, 111, 5, 6, -46, -67, 100, 1, 29, -112, -57, -29, 32, -45, 81, 39, -110, -9, -110, -58, -121, -101, -46, 80, 11, -89, 72, 28, 122, -1, 2, -117, 103, -124, 60, 20, -114, -54, -29, -68, 26, -27, -80, 68, -54, -93, -111, -66, -44, -30, 2, -91, -14, -99, 96, 98, -2, -79, 76, 103, 3, -126, -100, -104, -32, 20, -83, -71, 113, -120, -2, -20, 109, 12, -66]");
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey9);
        java.lang.Class<?> wildcardClass19 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-13, 1, -73, -82, 48, -6, -17, 89, 106, 22, 2, 66, -87, 83, -55, -116]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-13, 1, -73, -82, 48, -6, -17, 89, 106, 22, 2, 66, -87, 83, -55, -116]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[49, 13, 62, -114, 101, 6, -70, 45, 108, 12, 112, -96, 24, -103, -22, 105]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-53, 58, 17, 41, 53, -53, -115, 57, 63, 73, 87, 35, 57, 82, -104, 73, -56, -85, -38, -114, -107, 86, -16, -65, -95, 77, 38, -104, 32, 5, -2, -118, 84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-53, 58, 17, 41, 53, -53, -115, 57, 63, 73, 87, 35, 57, 82, -104, 73, -56, -85, -38, -114, -107, 86, -16, -65, -95, 77, 38, -104, 32, 5, -2, -118, 84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-44, -58, 31, -73, -25, -75, 9, 26, 13, 78, 3, -69, 41, -31, 38, -103, -13, -128, -126, -52, 63, 16, -3, -15, -58, -54, -48, -57, -127, -29, -16, 126, -107, -109, -12, -64, 108, 70, 38, -49, -127, 53, 88, 46, 52, -1, 10, -91, 123, 92, -94, 17, -75, 65, 77, -128, 48, -87, 87, 46, 20, -65, 126, 22, 23, -43, 12, -44, 93, 18, -61, -114, 65, 39, -58, -43, -103, -67, 88, -7, -81, -91, 104, 66, -29, -47, 91, 123, -93, -21, -4, -33, -29, 61, 96, 81, 84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-92, -107, 119, -97, -10, 26, 12, 68, -53, -80, 47, -80, -1, 0, 6, -113, -94, -102, 104, -67, 81, 34, -20, 50, 53, 1, -77, -77, 4, 72, 8, -61, 81, -40, 20, -127, -65, -71, 118, -37, -66, 111, 25, 86, 117, 30, 59, -71, -43, -23, 22, -40, 40, 60, 6, 46, -16, 0, -26, -22, 45, -127, 22, 78, 1, -78, -39, -126, -121, -44, 10, 22, 54, 27, -82, -43, 43, -72, 3, -30, -54, 9, -87, -75, 25, 31, -16, 30, -13, -33, -94, -82, 33, -61, 97, 12, 84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[42, 54, -26, -41, -17, -14, 9, 58, 89, 106, 119, -3, -100, -51, 39, -18, -94, 48, -80, -71, 20, -90, 102, 93, 13, -124, -53, -77, 50, 95, -30, -71, 84, -100, -121, 69, 96, -116, 25, -125, -71, 107, -35, -109, -64, -78, 3, 47]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey8);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey8);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        byte[] byteArray24 = new byte[] {};
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray24);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey26);
        javax.crypto.SecretKey secretKey30 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey30);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey30);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray24, secretKey30);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey30);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey52);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey52);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        byte[] byteArray72 = new byte[] {};
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray72);
        javax.crypto.SecretKey secretKey74 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey74);
        javax.crypto.SecretKey secretKey78 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey78);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey78);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray72, secretKey78);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey78);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey78);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey78);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey78);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey78);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("DF526F7FAE725CE24F286A0C0F0EBF399A0ABBCE2D773085B78356F69165B69E15B2BCA7AFEE1E211AAAA3F949A3E8981A59747B0390EBE7606C3C795FEBE7ADEC479C667E7482431F0E893358F2F97CB5B6E3A4939774DC0F4A15E61787374B41DF8BE2EF95956AF00408CF799B54EC", secretKey78);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-2, 88, -3, 46, 39, 76, -63, 94, -39, -122, -41, -126, -17, -51, 68, 108]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-70, 71, -68, -71, 76, 67, 71, 29, 75, 13, 19, -28, -2, -42, 68, -88]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-70, 71, -68, -71, 76, 67, 71, 29, 75, 13, 19, -28, -2, -42, 68, -88]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-115, -55, -46, 7, -54, 79, -92, 117, -17, -96, 110, -69, -33, -22, -75, -104, -74, -85, 23, 66, 49, 116, 59, 101, -62, -104, -68, 122, -39, -47, 115, 10, -49, 61, 33, -102, 109, 121, -86, -92, -98, 6, 54, 24, 110, 34, 64, -14, -64, -20, -30, 111, 20, 109, -77, 104, -20, -38, -28, 92, -37, 4, 3, -80, 53, 71, -81, 13, -53, -73, 1, 40, -118, -103, 94, 104, 20, -9, -86, -30, 109, 114, -60, -106, -37, 12, 18, 63, 63, 123, -59, 3, -59, 40, -79, -77, -2, 88, -3, 46, 39, 76, -63, 94, -39, -122, -41, -126, -17, -51, 68, 108]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-32, -3, 63, 113, -92, -68, 120, 43, -67, 58, 53, 95, -63, -62, 48, 87]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[47, -67, -69, 94, 107, 56, -42, 63, 64, 119, 13, 86, 103, -113, -113, -127]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(secretKey30);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[64, 99, -111, 121, 111, -73, 14, -3, 87, 30, 25, 125, 95, -83, -87, -100]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[29, 30, -84, -128, -99, 5, 25, 110, -41, 17, -23, 89, 116, 77, -97, 99]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[46, 15, 109, -49, 79, -62, -54, -112, 22, 29, -5, 89, -95, 11, 43, 117]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-46, -25, 11, 99, 6, 124, -120, 60, -40, -63, 102, 38, -95, -75, 68, -3]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-72, -8, -41, -86, 8, 72, -11, -30, 92, -67, 67, 40, 47, -8, 67, 76]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[76, -15, 30, -27, 1, 66, 26, -101, 84, -74, 14, 65, 71, 75, -34, -83]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[73, -1, 64, 105, 39, 79, 108, 70, 59, -15, 102, 65, 124, 102, -62, -103, 4, -26, 77, -17, 74, 69, -71, -53, -105, -113, -108, -53, 19, -13, 42, 46, -72, -8, -41, -86, 8, 72, -11, -30, 92, -67, 67, 40, 47, -8, 67, 76]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-69, 74, 17, 14, -19, 65, -37, -77, 59, 68, 59, 17, -42, -125, -19, -47]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[65, -78, -44, 112, 44, -102, -96, 19, -40, -88, 71, -45, -8, -36, -58, 112]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(secretKey74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey78);
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-5, 75, -34, -29, 79, -128, 84, 99, 1, -41, 16, 107, 84, -54, -8, -112]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[124, 68, 28, -104, 82, -120, 1, -64, 38, 63, 58, 33, 34, -82, -94, -124]");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[118, 99, -104, 108, 73, -47, -24, 49, -112, 53, -66, -5, -119, -99, 42, -83, -38, -75, 72, 31, -114, -2, 70, -106, -53, -36, 79, 110, -97, -40, -111, -100, -5, 75, -34, -29, 79, -128, 84, 99, 1, -41, 16, 107, 84, -54, -8, -112]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-87, 57, 6, -118, 2, 50, -95, 65, -95, -100, 104, -74, 21, 32, 101, -54, 98, 20, 8, -8, -59, 23, -46, -17, -80, 85, 3, 57, 36, -93, -94, 58, -5, 75, -34, -29, 79, -128, 84, 99, 1, -41, 16, 107, 84, -54, -8, -112]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(byteArray87);
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey29);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[71, 16, -67, -127, 68, -77, 20, 81, 45, 62, 55, -117, 14, -110, 56, -78]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[63, 74, 16, -74, -114, 94, 55, -65, -26, -68, 19, 69, 51, 8, -11, -85]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-76, 33, -43, -123, 95, 56, -54, 113, 4, -69, 125, 124, -106, 44, 63, -126]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-116, -121, 70, -94, 12, 123, 99, -127, 21, 99, -82, -96, 72, -26, -37, -46]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-31, 42, -37, 86, -72, 12, 72, -6, -39, -56, -97, 1, -70, -27, 21, 116]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-54, 38, 106, -89, -73, -50, 119, -48, -43, -4, 47, 72, 51, 76, -68, -22, -87, -14, -115, 23, -7, -88, 123, -4, 18, -106, 35, -117, 82, 54, -76, 50, 12, -16, 27, -121, -23, -83, -101, 65, 89, 117, -92, -44, -59, 112, -64, 30]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[12, -16, 27, -121, -23, -83, -101, 65, 89, 117, -92, -44, -59, 112, -64, 30]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-80, -12, 124, -68, 107, -41, -56, -7, 66, -14, 25, -117, -73, 46, 29, -21, 25, -38, -4, -76, 1, -8, 21, 22, 44, 83, 5, -15, -89, 51, -91, 16, 12, -16, 27, -121, -23, -83, -101, 65, 89, 117, -92, -44, -59, 112, -64, 30]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[64, 107, -95, -38, 82, 80, 24, 103, -14, -102, 126, 51, 19, 30, -50, 120, 4, -46, -69, 97, 59, -106, 121, -106, 116, 70, -103, -97, -39, -18, -121, -113, 12, -16, 27, -121, -23, -83, -101, 65, 89, 117, -92, -44, -59, 112, -64, 30]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[64, 107, -95, -38, 82, 80, 24, 103, -14, -102, 126, 51, 19, 30, -50, 120, 4, -46, -69, 97, 59, -106, 121, -106, 116, 70, -103, -97, -39, -18, -121, -113, 12, -16, 27, -121, -23, -83, -101, 65, 89, 117, -92, -44, -59, 112, -64, 30]");
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey4);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey4);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey4);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        byte[] byteArray21 = new byte[] {};
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray21);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey23);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray21, secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey38);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey38);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey38);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey38);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey38);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey73);
        byte[] byteArray75 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey73);
        byte[] byteArray76 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey73);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey73);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey73);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey73);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey73);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-95, 65, 88, 94, 70, -48, -99, -38, -110, 40, -9, -58, 45, -16, -116, 107]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-42, -96, 46, 93, 2, 74, -97, -62, 42, 4, -85, 109, -97, 97, -88, 100]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-2, 13, 18, 2, -17, -107, -22, 45, 74, 78, -119, 87, 26, 36, 18, 43]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-95, 65, 88, 94, 70, -48, -99, -38, -110, 40, -9, -58, 45, -16, -116, 107]");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "A141585E46D09DDA9228F7C62DF08C6B" + "'", str9, "A141585E46D09DDA9228F7C62DF08C6B");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "A141585E46D09DDA9228F7C62DF08C6B" + "'", str10, "A141585E46D09DDA9228F7C62DF08C6B");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-3, -6, -89, -63, -90, 47, 59, -71, 106, 79, -92, 81, 110, 124, -123, -25]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-49, -54, 18, -82, -36, -49, -101, 103, -89, -71, 31, 87, 28, 105, 35, 98]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[74, -57, 123, -72, -78, -84, 1, -126, 45, -23, 64, 11, 118, -34, 127, 86]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-19, -12, 70, 1, -46, 59, 127, -39, 1, 16, -107, -116, -8, -64, 13, 79]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-104, -103, 85, -117, -117, 24, 101, 18, -17, -115, 66, -128, 44, -79, 112, 49]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[50, -110, 95, 95, -110, 52, 104, 8, 59, 103, -50, 107, -93, -48, 112, -3, 64, 19, -119, 84, -14, -68, -40, -89, 58, -103, 114, -26, 28, 102, -121, 86, -115, -1, -95, 71, -102, -14, 97, -53, 32, -21, -47, 48, 67, -119, 17, 39]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-115, -1, -95, 71, -102, -14, 97, -53, 32, -21, -47, 48, 67, -119, 17, 39]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[48, -78, 112, -36, 47, 111, 57, 41, 26, 19, -14, -106, 29, -119, -70, 21, 89, -57, -113, 59, 75, -34, -98, 45, -16, -106, 59, 34, -26, 45, 65, -61, -115, -1, -95, 71, -102, -14, 97, -53, 32, -21, -47, 48, 67, -119, 17, 39]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[109, -122, -33, -31, -2, -49, 114, -72, -13, -89, -121, 0, 75, 79, 20, 22]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-19, 99, 30, 9, 109, 96, 91, -116, 43, 36, -34, -7, 64, 54, 30, -44]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[77, 97, 28, 89, -122, -55, 38, 42, 92, -4, 27, -26, 112, -14, 84, -35]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[45, 46, 107, -126, -122, -37, -115, 3, -31, 81, 95, 67, -22, -62, -92, -47]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-21, 19, 101, -47, -47, 0, -38, -9, 106, -123, -63, -33, -4, 32, -92, 116]");
        org.junit.Assert.assertNotNull(byteArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[-52, 25, 113, -47, -45, -106, -45, 119, -125, -91, -91, 31, 101, 65, 27, 46, 62, 18, 103, -17, 94, 83, 98, -37, 118, -22, -12, -62, -29, 79, -92, 105, 13, 6, -113, 76, 73, -95, 70, 5, 83, -125, -100, -12, -3, -63, -12, -107]");
        org.junit.Assert.assertNotNull(byteArray76);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray76), "[13, 6, -113, 76, 73, -95, 70, 5, 83, -125, -100, -12, -3, -63, -12, -107]");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 12, -87, -40, 104, -2, -117, 82, -88, 99, 125, 116, 83, -40, 48, -81, -27, -69, -128, -9, 38, -25, -70, -12, 96, -48, 127, 106, -106, -61, -25, -96, 13, 6, -113, 76, 73, -95, 70, 5, 83, -125, -100, -12, -3, -63, -12, -107]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-91, -15, -102, 97, 68, 86, -4, 108, -10, -15, -99, -94, -73, 106, 105, 78, -83, 46, 80, 22, -49, 120, 35, 76, 60, 123, -95, -100, 39, -8, 15, 18, -34, -65, -67, -107, -3, -34, -25, -36, -31, -109, -49, 101, 99, -52, -91, -66, 95, 44, 10, 67, -46, -25, -103, -17, -32, -112, -110, -90, 36, -44, -46, 71, -46, 22, -94, -34, 23, -18, 86, -47, 53, -65, 28, -10, -54, -70, -30, -10, -117, -30, 106, -20, 24, -37, -62, 106, 4, -7, -43, 26, -99, 84, -83, -96, 13, 6, -113, 76, 73, -95, 70, 5, 83, -125, -100, -12, -3, -63, -12, -107]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey29);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("38102B2E1145FBAAF0B2B38CC93ADD360FD596E4464D6F1D0861549F89A7ED7CBCD17E9F8278FCBF01F3E6B8574E38EC", secretKey29);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[55, -13, 18, 117, 8, 75, -4, 106, -124, 45, -23, 105, -85, -115, 98, -5]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-60, -3, 106, -47, 116, -99, -127, -80, -75, 57, 79, 120, -62, 66, -105, 82]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-98, 76, -8, -21, 58, 107, 100, -63, 83, 83, -64, -68, -24, 38, 76, 32]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[16, -98, -23, 96, -115, 126, -45, -30, -91, -90, 68, 11, 49, -54, -108, 88]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-31, 122, 38, 57, -95, 50, -84, 102, -64, -68, 15, -56, 28, 101, -11, 15]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-4, -72, -69, -42, -77, -45, -42, -94, -66, -17, 104, 17, 21, -62, 30, 110, -62, -79, 71, 27, -36, -32, 15, -25, -76, 62, -16, -87, -12, 85, 105, 22, 49, 0, 75, 89, -35, -127, -16, -84, -61, 93, -66, -35, -111, -92, 114, 106]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[49, 0, 75, 89, -35, -127, -16, -84, -61, 93, -66, -35, -111, -92, 114, 106]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-77, -42, 0, -113, -48, -117, -102, -71, -21, 15, -68, -4, -68, 113, -15, -126, -53, -29, 48, 33, 73, 28, -22, 21, -47, -124, 68, 127, 94, 50, -107, -103, 49, 0, 75, 89, -35, -127, -16, -84, -61, 93, -66, -35, -111, -92, 114, 106]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-17, -67, 79, -57, -53, -29, -35, -11, 107, 36, 55, -9, -45, -123, 71, -55, 74, 5, -79, 31, -47, 120, -31, -56, 105, 44, 106, -125, 105, -58, -65, -109, 49, 0, 75, 89, -35, -127, -16, -84, -61, 93, -66, -35, -111, -92, 114, 106]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[79, 3, 46, -122, -43, -53, 33, 38, 6, -8, -22, 123, 46, -10, 40, 12, 45, -31, 15, 53, -116, 27, 71, -18, 13, 8, -55, -96, 127, 8, -74, 23, -127, 91, -118, -57, -19, -22, -124, -16, 16, -31, 36, 30, 70, 106, -98, 0, -67, -51, -61, -92, -47, 46, 109, 109, 83, 127, -24, -116, -43, -114, -123, -69, 60, -113, -60, -61, 11, 76, 88, 112, 52, 92, -52, -95, 118, -58, -102, 19, -101, 31, 53, 43, -97, 86, -29, 50, 62, 9, 0, -109, -48, -51, 91, -57, 49, 0, 75, 89, -35, -127, -16, -84, -61, 93, -66, -35, -111, -92, 114, 106]");
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("84307F73E77F01B6362A876770A1520C", secretKey9);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-107, 7, -104, -22, 68, 95, -37, -37, 67, -15, 67, 36, 10, -22, 80, -20]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[124, 53, -26, 107, 106, 90, 18, 120, -12, -30, 84, -78, -111, 127, -60, 61]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[84, -70, 61, -8, 84, -6, 119, 54, -27, 105, 79, -10, 91, 71, -6, 94, -47, 18, -9, 118, 18, 67, 26, 17, -34, 2, -107, 107, -60, -113, -101, 61, 73, -26, 37, 97, -119, -15, -97, -110, 6, -128, 82, 111, -40, -101, -121, 87, 13, -127, 123, -121, -79, 73, 52, 114, -49, -38, 73, 8, 3, 36, -16, -128, 5, -24, 75, -60, -105, -106, 28, -79, -15, -126, -62, -36, -75, -124, 115, 84, -109, 72, -119, -104, -38, 32, -3, 105, -32, 18, 23, 61, 125, -100, -8, 83, -107, 7, -104, -22, 68, 95, -37, -37, 67, -15, 67, 36, 10, -22, 80, -20]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-74, 108, -72, 30, 81, -31, 77, 20, -8, -111, -111, -100, -62, 12, 114, -54, 57, -82, 49, 50, -22, 117, 13, 47, 119, -13, 92, -63, -55, 125, 103, -60, -107, 7, -104, -22, 68, 95, -37, -37, 67, -15, 67, 36, 10, -22, 80, -20]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-71, 0, 118, -80, -8, 35, 5, 82, 5, 61, -102, -109, 59, 81, -24, 67, -55, -81, 48, -77, -84, 109, 69, 66, 32, 80, 38, 112, 85, -62, -43, 69, -107, 7, -104, -22, 68, 95, -37, -37, 67, -15, 67, 36, 10, -22, 80, -20]");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "B90076B0F8230552053D9A933B51E843C9AF30B3AC6D45422050267055C2D545950798EA445FDBDB43F143240AEA50EC" + "'", str16, "B90076B0F8230552053D9A933B51E843C9AF30B3AC6D45422050267055C2D545950798EA445FDBDB43F143240AEA50EC");
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        byte[] byteArray4 = new byte[] {};
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey6);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey10);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey10);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey10);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey16);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey29);
        byte[] byteArray36 = new byte[] {};
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray36);
        javax.crypto.SecretKey secretKey38 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey38);
        javax.crypto.SecretKey secretKey42 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey42);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey42);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey42);
        byte[] byteArray46 = new byte[] {};
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray46);
        javax.crypto.SecretKey secretKey48 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey48);
        javax.crypto.SecretKey secretKey52 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey52);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey52);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray46, secretKey52);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray36, secretKey52);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey52);
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey52);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey52);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray4);
        byte[] byteArray64 = new byte[] {};
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray64);
        javax.crypto.SecretKey secretKey66 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey66);
        javax.crypto.SecretKey secretKey70 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey70);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey70);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey70);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey76 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey76);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey80);
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray64, secretKey80);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey80);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey80);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey80);
        java.lang.String str88 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray4, secretKey80);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey80);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("0656A0EA18FD8C2FFFE23F65013B7020A0A65BA19D7E27CA60EEA30A6D8E7ED8BB0A74BD2F93031F04D3BF2A50719F8B", secretKey80);
        byte[] byteArray91 = com.thealgorithms.ciphers.AESEncryption.encryptText("0828A2F47B940CF88033EBD022183022", secretKey80);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("ED074CDAE5AB949C9BCBBA74D15E00B8", secretKey80);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[93, 80, 38, -84, -92, 106, -81, -80, 111, -99, 65, -53, -41, 7, 57, 32]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-98, -104, 99, 57, 47, 66, -117, 11, 103, 27, -55, -127, 101, 73, -116, -31]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[51, -32, 16, -71, 94, -74, 121, 1, 70, 3, -74, -6, -82, 85, -72, 110]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 62, -92, -92, -63, 89, 21, -26, 117, -99, -19, -106, 60, 94, -35, 74]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[102, -22, -31, -115, 102, -63, -108, -53, -25, -25, -121, 125, 96, 118, 93, 57]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[113, -115, 64, -94, 36, -84, 95, -65, 65, -38, -25, 86, -113, -92, 62, -27]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[113, -115, 64, -94, 36, -84, 95, -65, 65, -38, -25, 86, -113, -92, 62, -27]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey42);
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-93, -63, 74, -88, -51, 48, 62, -14, -124, -6, -30, 33, -89, -11, 102, -43]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-37, -118, -40, 87, 71, -31, 43, 93, 107, 110, -76, -46, -99, -34, -25, -125]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(secretKey52);
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-110, -115, -98, -112, -117, -101, 54, 42, 115, 113, 119, -63, -68, -91, -77, 101]");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[25, -5, -72, 41, 101, 38, -74, -13, 104, 125, 26, 53, -127, -81, 3, 28]");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[80, 34, -74, -77, 35, -39, -98, -5, 18, -32, -30, -40, -78, -24, 114, 91, -53, -55, -67, -11, 63, -9, -109, 123, -119, 75, -42, -23, -80, 49, -22, -77, -110, -115, -98, -112, -117, -101, 54, 42, 115, 113, 119, -63, -68, -91, -77, 101]");
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-62, -26, -102, 23, -105, 61, 99, -48, 121, 50, 77, 21, -18, 123, 33, -57, 6, 102, -99, -17, -45, -76, -73, -99, -28, 115, -77, 99, 124, -54, -37, 38, -110, -115, -98, -112, -117, -101, 54, 42, 115, 113, 119, -63, -68, -91, -77, 101]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey70);
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[85, -117, -127, -10, -120, 54, 45, 35, 37, -105, -52, 112, -123, 8, 106, 118]");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[125, 45, 68, -69, 72, -64, -120, 113, -5, 23, 75, -9, -72, -94, 43, 98]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-41, -19, -71, 33, -116, -127, -7, 3, -40, 21, -18, 74, 62, -23, -51, -78]");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-94, 103, 36, -53, 88, 48, 62, -124, 63, -23, 92, -70, -116, -46, -15, -76, -13, 103, -101, 118, 29, 65, -9, 73, 76, -12, 25, 28, -100, 102, 104, 96, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-82, -53, -43, 117, -18, -48, -46, -50, -56, 56, 82, -66, 85, 115, 71, 11, 26, 108, 3, -43, -61, -27, 46, -31, 90, 66, -31, 110, 44, -86, -124, -73, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[-56, 61, -30, -90, 121, -30, 120, 34, 97, -98, -75, 21, -99, -115, 34, 77, 34, 46, 126, 63, -114, -65, 103, -120, 12, 38, -69, 38, 85, -33, 3, -44, 127, -2, -66, 66, 121, 112, 23, -36, 25, -14, -71, -48, 42, -114, -119, -67, -30, 70, 34, -50, -79, 6, -123, 10, 77, -49, -52, 57, -82, -120, 3, -66, 4, -1, -73, 38, 44, 89, -101, -95, -39, -48, -2, -88, 41, -53, -89, 112, -96, 88, 9, -33, 105, -62, -49, 43, -111, 8, 77, 107, 83, 122, 85, -106, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[104, 117, 105, 59, 1, -3, -116, 106, 26, -35, -93, -123, 95, -60, -58, -98, -124, 60, -110, -29, 17, 99, 108, -44, -8, 84, -9, 19, -35, 27, 79, 22, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-94, 35, 88, -96, -123, 52, 39, 43, 40, 79, 21, -65, -11, 52, 76, 121, 36, -89, 47, -116, 94, -100, 94, 96, -38, 4, 24, -69, -14, -24, 45, 34, -106, -66, 35, 114, 0, 96, -33, 74, -22, -77, 46, 116, 27, -99, -124, -94, 115, 101, -106, 102, -19, 123, 91, 6, 1, 126, 88, 28, -124, -63, -34, 3, -95, -118, -25, 15, 110, 119, -95, 85, -73, 66, -49, 44, 96, -22, -39, 16, -73, -119, -39, 29, -74, -110, -14, -107, -40, 43, 88, -78, 99, 86, 36, 100, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[102, 72, 20, 35, 70, -93, -52, -106, 100, -8, -6, -97, -11, -1, 74, -126, -39, 85, 58, -39, 79, 35, 60, 15, 27, 70, -100, -53, 64, 55, -10, 70, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[-73, 21, 119, -1, 90, 117, -81, 113, -1, -79, 67, -88, -104, 121, -69, 62, -53, 122, -113, -34, 38, 18, 13, -80, 74, -39, 2, -12, -35, -67, 84, -58, -50, -104, -14, 65, -117, -78, 63, -96, 120, 89, 80, -78, -2, -59, 112, 35]");
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("B381568DCAB4A8F20A5B48860522A5ABD5CBEF38D8386B533B629A0EE0B727AF0048C3EAC30D9ED12CCAD464146830F1", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey29);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey29);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey29);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-93, -8, 126, -89, -31, 12, -115, 32, 13, 64, 75, -125, -111, -105, -47, -43]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[47, 71, -114, 75, 30, -32, 123, -45, -80, -80, 123, -69, 114, -91, 58, 97, 10, -48, 89, -16, -112, -120, 101, 93, -24, 46, 70, 51, -6, -106, -124, 70, -5, -119, 31, -40, -44, 28, -31, -25, -63, 127, 57, -69, 93, -87, -37, 89]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-5, -119, 31, -40, -44, 28, -31, -25, -63, 127, 57, -69, 93, -87, -37, 89]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[86, 92, -4, -113, 27, -111, 22, -81, -43, -44, 16, 74, -33, 34, 32, 102, -54, 45, 104, -29, 18, -112, -105, -20, -27, 106, -45, 72, 115, -58, -95, 25, -5, -119, 31, -40, -44, 28, -31, -25, -63, 127, 57, -69, 93, -87, -37, 89]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[47, 71, -114, 75, 30, -32, 123, -45, -80, -80, 123, -69, 114, -91, 58, 97, 10, -48, 89, -16, -112, -120, 101, 93, -24, 46, 70, 51, -6, -106, -124, 70, -5, -119, 31, -40, -44, 28, -31, -25, -63, 127, 57, -69, 93, -87, -37, 89]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-13, -20, -37, 97, -89, 85, 127, 14, 89, -6, 41, 64, -123, -4, 36, 100, 35, 61, 42, -124, 104, -90, 75, -53, -38, 72, 85, 59, 43, 118, -1, 46, -46, 60, -74, 74, -79, -68, -13, 123, 15, -74, 5, -59, -113, 110, 3, 66, -30, -5, -54, 97, 103, -42, -88, -82, -127, 54, 30, -113, -28, -116, 106, -9, 47, 107, -115, 22, 48, -83, 102, -6, 53, 54, -34, 66, -28, -103, -88, -124, -63, 29, 93, 16, -60, 20, 96, -43, 16, 31, 75, 24, -15, 65, -64, -103, -5, -119, 31, -40, -44, 28, -31, -25, -63, 127, 57, -69, 93, -87, -37, 89]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "F3ECDB61A7557F0E59FA294085FC2464233D2A8468A64BCBDA48553B2B76FF2ED23CB64AB1BCF37B0FB605C58F6E0342E2FBCA6167D6A8AE81361E8FE48C6AF72F6B8D1630AD66FA3536DE42E499A884C11D5D10C41460D5101F4B18F141C099FB891FD8D41CE1E7C17F39BB5DA9DB59" + "'", str13, "F3ECDB61A7557F0E59FA294085FC2464233D2A8468A64BCBDA48553B2B76FF2ED23CB64AB1BCF37B0FB605C58F6E0342E2FBCA6167D6A8AE81361E8FE48C6AF72F6B8D1630AD66FA3536DE42E499A884C11D5D10C41460D5101F4B18F141C099FB891FD8D41CE1E7C17F39BB5DA9DB59");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "F3ECDB61A7557F0E59FA294085FC2464233D2A8468A64BCBDA48553B2B76FF2ED23CB64AB1BCF37B0FB605C58F6E0342E2FBCA6167D6A8AE81361E8FE48C6AF72F6B8D1630AD66FA3536DE42E499A884C11D5D10C41460D5101F4B18F141C099FB891FD8D41CE1E7C17F39BB5DA9DB59" + "'", str14, "F3ECDB61A7557F0E59FA294085FC2464233D2A8468A64BCBDA48553B2B76FF2ED23CB64AB1BCF37B0FB605C58F6E0342E2FBCA6167D6A8AE81361E8FE48C6AF72F6B8D1630AD66FA3536DE42E499A884C11D5D10C41460D5101F4B18F141C099FB891FD8D41CE1E7C17F39BB5DA9DB59");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[28, 29, 64, 30, 71, 21, -121, 29, 72, -45, -101, -107, -44, -11, 62, 19]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-53, 11, 32, 51, -84, 16, 105, -81, -39, 123, 27, -56, -19, 124, -58, -123]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[73, -29, -109, 19, 121, 62, -84, 109, 109, -127, 32, 14, -118, 52, 63, 4]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[81, -105, 75, 89, -101, 114, 15, 41, 92, -22, 124, 26, -97, -47, 74, -104, 92, -73, 27, -52, 117, 63, 8, 118, -58, -59, 57, -55, 46, 84, 48, 29, -31, -123, -61, -97, 81, -118, 8, -47, 27, -128, 37, -119, 110, -78, -11, 31]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-31, -123, -61, -97, 81, -118, 8, -47, 27, -128, 37, -119, 110, -78, -11, 31]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-113, -96, -92, 50, 88, 24, 83, -54, -2, 3, -47, 125, -4, -77, -44, -75, -10, 2, -78, -3, 102, 66, -18, 92, 123, 107, -15, -30, -33, -57, -58, -65, -31, -123, -61, -97, 81, -118, 8, -47, 27, -128, 37, -119, 110, -78, -11, 31]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey28);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey51);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey51);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey51);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        byte[] byteArray63 = new byte[] {};
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray63);
        javax.crypto.SecretKey secretKey65 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str66 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey65);
        javax.crypto.SecretKey secretKey69 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey69);
        byte[] byteArray71 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey69);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey69);
        byte[] byteArray73 = new byte[] {};
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray73);
        javax.crypto.SecretKey secretKey75 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey75);
        javax.crypto.SecretKey secretKey79 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey79);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey79);
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray73, secretKey79);
        java.lang.String str83 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray63, secretKey79);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey79);
        byte[] byteArray85 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey79);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey79);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey79);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey79);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("151E246784C29628F4695AB03B1F235562577D5FE3EC39FB32375B2E74C325F73F98634CD583D304E84E0F4F333ADE0E", secretKey79);
        byte[] byteArray90 = com.thealgorithms.ciphers.AESEncryption.encryptText("C5B0E6249B748A69222611DC2DE01FFA", secretKey79);
        java.lang.Class<?> wildcardClass91 = byteArray90.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[116, -71, 63, -68, 53, -121, -62, -81, -100, -56, -19, -103, -116, 64, -18, -59]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-111, 1, -85, -29, 25, -124, 5, 43, 7, 14, -42, -35, 97, 69, -61, 12]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-55, 74, -53, 10, -112, -83, -17, -118, -114, -111, -27, -94, 60, -78, -9, -79]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[89, 117, -61, 115, -128, -70, 93, -7, -95, -42, 49, 54, 9, 25, 53, 43]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-59, 113, 10, -71, 2, -85, -104, 60, 86, 69, 44, -111, 30, 13, -22, -107]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[58, 49, 45, 64, 99, -32, -100, 26, -54, 59, 44, 64, 27, -98, -25, 75]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[58, 49, 45, 64, 99, -32, -100, 26, -54, 59, 44, 64, 27, -98, -25, 75]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-46, -74, -101, 60, 124, 115, 104, 26, -104, -127, -34, -128, 14, 29, 2, -122]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[42, -103, -109, -77, -33, -43, -36, 68, -56, 111, 89, -51, 115, -84, 30, 52]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-63, 107, -72, 51, 32, 52, -3, -14, 57, 71, -66, 83, -17, -124, -28, -124]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[73, -122, 69, 97, 26, 98, -63, -42, -76, 16, -75, 76, 89, -69, 86, 21]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[114, -74, 3, 79, 55, 100, -21, 102, -123, 23, -33, 58, -29, 78, -37, -69, -127, -67, -99, 49, 51, -47, -61, -16, 106, 31, 41, 58, 54, -55, -27, -74, -63, 107, -72, 51, 32, 52, -3, -14, 57, 71, -66, 83, -17, -124, -28, -124]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-84, -2, 113, 31, -6, 106, 121, -14, 14, 62, -27, 48, -121, 62, -51, -57, -61, -106, -37, 2, -125, -87, 113, -10, -127, -78, -111, -38, 117, 5, 28, -119, -63, 107, -72, 51, 32, 52, -3, -14, 57, 71, -66, 83, -17, -124, -28, -124]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(secretKey69);
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[54, -117, -84, 46, -31, 3, -77, -19, -18, -73, -9, 1, 121, 89, 103, 87]");
        org.junit.Assert.assertNotNull(byteArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[12, -125, 10, -119, 14, -65, -15, -38, -123, -59, 98, -116, 19, -43, -49, -43]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(secretKey79);
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[89, -73, 74, 62, -51, -63, -120, -127, 90, 108, -99, -107, 15, -115, -64, -3]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[13, 79, -22, -71, 68, -96, -4, -123, -7, -95, -60, 48, -83, -116, -125, 34, 81, 127, 19, 70, 28, -38, -122, 69, -56, -50, -44, -106, 66, 75, 75, -21, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray85), "[-69, 2, -99, 41, -116, -56, -78, -14, 46, 30, 103, 34, -98, -93, 116, 14, 65, -7, 116, -74, -128, 120, 118, 77, 30, -92, 52, 69, -93, -31, -109, 121, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-77, -85, -121, 57, -30, -84, -101, 32, -88, 47, -115, 39, 31, 75, 3, 50, 127, 87, 24, -1, 64, -96, -81, -8, -2, 43, 52, 27, -56, 125, 21, -23, 82, -90, -119, -64, 62, 12, -4, 34, 58, -123, -34, -13, -15, -35, -113, 1, -111, 94, 41, 31, -2, 113, 37, -98, -84, -45, 54, -6, -110, -72, 122, -16, 80, -87, -125, -125, -64, -120, -113, 60, -23, 48, 30, 95, 115, 21, 113, 10, 2, -47, -88, -25, 74, -49, -20, 94, 101, 110, -49, 25, 109, -20, -39, 29, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[-40, 39, -46, -55, -54, 38, -42, 15, -97, 12, 3, 25, 83, 55, 35, -56, 99, 21, 82, -23, -76, -48, -53, -7, -91, 88, -15, -91, 30, 13, -51, -48, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[113, 72, -65, -128, 29, -119, -4, 111, -41, -73, 72, 74, 127, 116, -49, -107, -92, 87, -56, -47, 41, 54, 32, 10, 36, 23, -116, 31, -24, 66, 10, 76, 58, 88, 124, -2, 13, 21, -80, -104, -103, -75, -8, -52, -43, 109, 63, 49, 47, -25, 89, -62, -73, -85, 29, -62, -109, -52, -25, -52, -128, -22, -19, -34, 119, 30, 122, 115, 35, 5, 92, 119, -21, 75, -112, 57, 14, 55, -124, -25, 2, 127, -61, 52, 115, 75, 66, 109, 13, -120, -33, -81, -103, 89, 126, -4, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-15, -106, 41, 68, 104, 70, -35, -28, -1, 78, -31, -95, -66, 63, 81, -88, -83, 90, 50, 86, 93, 97, -83, 102, 56, -82, 123, -54, 69, -13, -3, -104, -17, -5, -127, 115, -51, -47, 75, 35, -90, 117, -81, 123, -106, 48, 15, 101]");
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey5);
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey5);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey5);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("4B93528CB4D40368DBBC4EA8E4FF781EDC2DB9D78FBD2033B56BE9404B1870FEF23277FB0A8B5F6045F08FDF4785516B", secretKey5);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B90076B0F8230552053D9A933B51E843C9AF30B3AC6D45422050267055C2D545950798EA445FDBDB43F143240AEA50EC", secretKey5);
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-21, 32, -48, 68, 47, -79, 2, 77, 8, -33, -68, 126, -27, 97, 17, 105]");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-56, 97, 84, -77, -57, 100, 60, 77, 11, -125, 88, -74, -66, -104, -9, 35]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[26, 23, -40, 49, 109, 69, -22, 18, -38, -15, -26, 123, -70, -5, 64, 33, -121, -48, -25, 91, -69, 112, 6, -112, 123, -48, -93, 79, -57, 75, 58, 98, 44, 112, -2, -63, -123, 118, -97, -115, 47, -106, 57, -65, 31, 114, -81, 57, 93, -40, -109, 66, -5, -37, 103, 124, -21, 90, 75, -74, 58, -92, -10, 38, 69, 4, -102, 1, -60, 78, -105, -49, -24, 28, -63, -35, -99, -35, -97, 114, -21, 78, 72, 112, 14, -119, 26, 2, -46, 103, -29, 20, 27, -17, -83, -94, -21, 32, -48, 68, 47, -79, 2, 77, 8, -33, -68, 126, -27, 97, 17, 105]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-65, -24, 45, 45, 86, 40, 116, -106, -88, 5, -61, -128, -51, -30, -21, -8, -97, 28, -117, -117, 43, 20, -75, 84, 58, -70, -116, 14, 92, 108, -39, 15, -12, -77, -66, -104, -46, -100, -111, -76, 80, 85, -58, 103, 19, -30, 87, 8, -56, -35, -102, -88, 0, -67, 41, -70, 1, 3, -68, -87, -68, 101, -123, -30, 112, -69, 111, 73, 27, -47, 121, 19, 3, -125, 38, 87, 27, 47, 102, 93, 29, -34, 62, -47, 112, -43, 11, 90, -24, 41, 119, -78, 81, 78, -116, -44, -21, 32, -48, 68, 47, -79, 2, 77, 8, -33, -68, 126, -27, 97, 17, 105]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-46, -23, 20, -24, 57, -22, 51, -32, -9, -78, -107, 121, -2, 25, -36, 38, 77, 82, 19, -43, 0, -105, 47, -54, 44, -26, 36, -40, -48, -6, 77, 119, -102, 71, 104, 33, 113, 121, 46, -110, 45, -61, 116, 53, 29, 74, -35, 28, 120, 39, -32, 10, -19, -16, 83, 78, 95, -34, -70, 33, -125, -64, -36, -65, 2, -95, 82, 89, -35, 30, 24, 64, 103, 52, 33, -110, -15, -94, 47, 28, -71, -90, -45, -72, 117, -43, -47, 78, 19, -2, -43, 54, 0, -125, -40, 107, -21, 32, -48, 68, 47, -79, 2, 77, 8, -33, -68, 126, -27, 97, 17, 105]");
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey11);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey11);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-119, -12, -27, -101, 2, 57, 0, 127, 61, 20, -114, -120, 121, 3, 60, -57]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[43, -37, 38, -8, 76, -96, -49, 115, -72, 56, -96, -100, -95, 102, -11, -78]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-82, 8, 1, -103, -114, 40, -103, -48, -61, -34, -65, -41, 111, -44, -54, 49, 126, 115, -76, -15, -94, -72, 6, -19, 49, -121, -84, 85, -95, 6, -53, 16, 62, 102, -13, -55, -121, -98, 48, 13, 24, -48, 75, -7, 122, 88, 122, -109, 112, -95, -85, -22, -97, 40, -83, 85, 15, -57, -40, -91, -66, 88, 107, -5, 23, -32, -118, 41, 25, -121, 92, 28, -73, -101, 111, -27, -64, -17, -37, 97, -123, 73, -85, 127, 23, -122, 116, -125, -34, 96, 72, 27, -34, -87, 7, 75, -119, -12, -27, -101, 2, 57, 0, 127, 61, 20, -114, -120, 121, 3, 60, -57]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[57, -77, -2, 43, 126, 43, 91, -127, -52, -69, -16, 114, -26, 60, -108, 105, -117, -107, 97, 25, -111, -44, 100, -39, 91, 78, 91, 122, 108, 68, 86, 34, -18, 16, -74, -16, -22, -69, -81, -81, 126, 110, -80, 110, -108, 75, -127, -53, -86, 33, -41, -25, 84, -102, -110, 6, -22, 14, -86, -120, -83, 124, -69, 7, -22, -20, 42, -45, 34, 89, 104, 59, 38, -91, -80, 77, 33, -11, 90, 122, -7, -27, 35, -11, -77, 36, -74, 55, 120, -106, -97, 11, -7, 96, 58, 61, -119, -12, -27, -101, 2, 57, 0, 127, 61, 20, -114, -120, 121, 3, 60, -57]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-30, -102, 91, 37, 69, 54, -81, -81, 95, 110, 65, 34, -49, 8, -123, 110, 115, 105, -92, -115, 20, -125, 55, -61, -64, 48, 72, -10, -22, 9, -26, 108, -119, -12, -27, -101, 2, 57, 0, 127, 61, 20, -114, -120, 121, 3, 60, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "E29A5B254536AFAF5F6E4122CF08856E7369A48D148337C3C03048F6EA09E66C89F4E59B0239007F3D148E8879033CC7" + "'", str19, "E29A5B254536AFAF5F6E4122CF08856E7369A48D148337C3C03048F6EA09E66C89F4E59B0239007F3D148E8879033CC7");
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("29FA794D1C1715C8774A0AC45904F0BBBD805E70F4DBBD331E5140CC46CD226535742AD87A4D64F48B8AC1A0552E7B8D", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("31DAD7D8B79BC557E0C326C8405DDB96", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        java.lang.Class<?> wildcardClass18 = byteArray16.getClass();
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[51, -14, 108, -124, 123, -15, 66, 88, -100, -103, -6, 56, -4, -4, 3, -69]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-80, -4, 116, -98, -68, 115, -117, 84, 83, 118, 19, 54, 85, 117, -94, -95]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, -4, 116, -98, -68, 115, -117, 84, 83, 118, 19, 54, 85, 117, -94, -95]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-125, -126, 32, 58, -111, -52, 61, 125, 24, -32, 92, 27, 121, -37, 0, -120]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-27, -100, -35, -10, 55, -114, -33, -103, 118, -48, 99, -60, -125, 79, -40, 42, -40, 15, 89, -127, 17, 104, -75, -121, -83, -86, -7, -22, -23, 37, -35, 91, 51, -14, 108, -124, 123, -15, 66, 88, -100, -103, -6, 56, -4, -4, 3, -69]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[51, -14, 108, -124, 123, -15, 66, 88, -100, -103, -6, 56, -4, -4, 3, -69]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[89, -104, -98, -46, 97, 100, 77, 106, 116, -51, 37, -3, 57, 116, 87, 115, -21, 19, -42, 21, 63, 107, 110, 67, 125, 73, -91, -110, -128, -88, 33, -84, 109, 51, -6, 55, -127, -108, -85, -5, -58, 83, -92, 118, 55, -54, -30, -104, 104, -3, -77, 44, -33, 124, 100, 47, 44, 80, -67, 25, 114, 25, 64, -116, -27, 93, -4, -119, 17, 101, 113, -13, 91, -121, 110, 22, 116, 36, 93, 24, 31, -15, 95, 27, 109, -118, 101, 66, 3, 40, -39, -69, -81, 28, 62, -33, 51, -14, 108, -124, 123, -15, 66, 88, -100, -103, -6, 56, -4, -4, 3, -69]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-23, -71, -122, 0, -110, -88, -43, -109, -89, 20, -52, 24, 67, 59, 1, 34, 69, -128, 36, -104, -36, 51, 19, 13, 87, 85, 127, 97, -63, -36, -121, -75, 51, -14, 108, -124, 123, -15, 66, 88, -100, -103, -6, 56, -4, -4, 3, -69]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "E9B9860092A8D593A714CC18433B012245802498DC33130D57557F61C1DC87B533F26C847BF142589C99FA38FCFC03BB" + "'", str17, "E9B9860092A8D593A714CC18433B012245802498DC33130D57557F61C1DC87B533F26C847BF142589C99FA38FCFC03BB");
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey21);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey21);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey21);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey21);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray51 = new byte[] {};
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray51);
        javax.crypto.SecretKey secretKey53 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey53);
        javax.crypto.SecretKey secretKey57 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray58 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey57);
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey57);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey57);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray51, secretKey67);
        byte[] byteArray72 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey67);
        java.lang.String str73 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey67);
        byte[] byteArray74 = new byte[] {};
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray74);
        javax.crypto.SecretKey secretKey80 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey80);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey80);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey80);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray74, secretKey80);
        java.lang.String str86 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey80);
        java.lang.String str87 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey80);
        javax.crypto.SecretKey secretKey92 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey92);
        byte[] byteArray94 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey92);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey92);
        byte[] byteArray96 = com.thealgorithms.ciphers.AESEncryption.encryptText("4C7CB59394E72B69F45D1E2AA0FA780F751F16EB8BA56483F94BE11F79E67ECF9F3D63109C0B2FE7578E64352135EA2938A7C6A88E392EEE5475858750DD388554589950EEE0DA54A320B42765ED7287E5C011BDFE31C693EA9C58289A153ED33DE270921AF017460D3499ED48FBE503", secretKey92);
        java.lang.String str97 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey92);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-128, 75, -59, -105, 115, 5, 27, -120, 26, -93, 106, 5, -21, -60, -51, 115]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[44, 122, 1, 63, -53, -38, 125, -1, 67, -51, -46, 52, -44, -83, -98, 25]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-51, -87, -32, -58, 103, 68, -100, 57, 34, 18, 59, 90, 8, 46, 49, -32]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-22, -101, -28, -20, 54, 24, -100, -24, -49, 111, 65, -128, -35, -81, -127, 89]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-100, 121, -101, -3, 47, -95, 40, -27, -76, -112, 12, -81, 11, 110, 109, -94, 41, -7, 66, 6, 126, -76, -10, 28, -73, -120, 126, -123, -55, -23, -90, -13, -92, -39, -62, 100, -86, 3, 113, 21, 51, 74, 25, 80, -64, -122, -72, 118, 113, -122, -52, -126, -111, -10, -70, 114, -128, 71, 3, -77, 31, 122, 65, -101, 8, -117, -18, 22, -21, 34, -76, 101, 116, 38, -123, 54, -103, 94, 86, 55, 17, 93, 12, 112, 107, 10, -126, -24, 7, -117, 75, 28, 25, -63, 122, 60, -51, -87, -32, -58, 103, 68, -100, 57, 34, 18, 59, 90, 8, 46, 49, -32]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-38, 74, -58, 75, 0, 86, -119, -6, -93, 20, 54, 48, -65, -128, 10, -24, -128, 42, -92, 42, 46, 77, 77, 77, 114, 61, 33, 41, 119, 108, -1, 88, -8, 56, 125, 12, 84, 73, -54, -8, -73, -31, -37, -41, 0, 80, -106, 56, -109, -44, -59, -124, 124, 44, -61, 49, -22, -6, -115, 71, -26, 104, 102, -126, 47, 3, -43, 88, -91, 84, 45, 75, 46, -14, -8, 32, 103, -41, 105, -111, 9, 62, 77, -26, -52, -51, 71, -25, 57, -32, -102, -20, -98, 63, 63, 33, -51, -87, -32, -58, 103, 68, -100, 57, 34, 18, 59, 90, 8, 46, 49, -32]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-45, 44, -17, -19, -106, -42, -73, -82, 4, -76, -48, -46, -26, 107, -107, 105]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[61, 47, -25, -43, -16, 116, 37, -47, -93, 73, -52, 14, 93, 53, -100, -121]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[38, 40, -115, 61, 39, -18, 104, 88, 32, 3, 58, 87, -15, -37, 28, -11]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[80, -12, -107, -105, 10, 55, 126, -80, 78, -96, 66, 18, 100, -71, 97, -61]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(secretKey57);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[101, -73, -63, 59, -8, -27, -40, 6, -47, 34, -98, 69, 21, -109, 26, -50]");
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-48, 94, 32, -45, 42, -48, 55, 17, -118, 50, -74, -44, 119, -42, 19, 42]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-62, 22, -83, -45, -72, 30, -42, -34, 31, 108, 62, 69, -47, 65, -68, -17]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-18, -112, 33, -109, 47, 80, 3, 84, -17, 5, 28, 23, -34, -35, 85, -44]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(byteArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[45, -86, 54, -73, 76, -60, 93, -121, 6, 64, -11, -100, 84, -31, -10, 57, 110, 39, -71, 28, -86, -72, 39, -46, -24, 88, -23, -10, 16, -18, 47, -73, -62, 22, -83, -45, -72, 30, -42, -34, 31, 108, 62, 69, -47, 65, -68, -17]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(secretKey80);
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[103, 57, -11, -100, 102, -62, 11, -47, -105, -117, 78, 93, 104, 16, -122, 77]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[6, -124, -73, 7, -44, 53, -29, 59, -27, -4, 99, -12, 0, 86, 36, 77]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[6, -124, -73, 7, -44, 53, -29, 59, -27, -4, 99, -12, 0, 86, 36, 77]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[93, -93, 23, 117, 113, 47, -97, -81, -96, 20, -85, 60, 25, 62, -68, 35]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(secretKey92);
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[-72, 60, -115, 48, -9, 81, 51, 74, 26, 73, -25, 125, 78, -101, -12, -8]");
        org.junit.Assert.assertNotNull(byteArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[90, 18, 22, 52, -65, -55, -35, -37, 54, -81, -8, 31, 46, -7, -50, 55]");
        org.junit.Assert.assertNotNull(byteArray95);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray95), "[64, -29, -21, -90, 60, -114, -1, 54, 2, -35, 44, 80, -86, -68, 1, 94]");
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey19);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey19);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey19);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("B000344257A31FAA366D4032AD364323", secretKey19);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[83, -51, -35, -54, -19, 15, -52, -112, 10, -75, -75, 120, -111, 115, -6, 70]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-99, -23, -122, -75, -108, 2, -115, 97, 113, 48, -71, 23, -12, 56, 43, -112]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[18, 38, 124, 59, 67, -40, 127, 118, 38, -17, 49, 0, 119, 106, 125, 2]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-19, -78, 25, 96, -112, 50, 88, 4, 6, 1, -34, 92, 116, -72, 39, 36]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-19, -107, 105, 99, -124, 11, -103, 1, -89, -68, -16, -12, -52, 16, 94, -22, 116, 112, -66, 60, -17, -67, -8, 32, -99, 55, 48, -122, 53, 0, -31, -102, 18, 38, 124, 59, 67, -40, 127, 118, 38, -17, 49, 0, 119, 106, 125, 2]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[93, -65, -72, -31, 121, 50, 38, 43, -37, 110, -103, 78, 35, -126, -34, -8, -66, -7, 6, -59, 92, -44, -28, 104, -48, 101, -102, -32, -11, 39, -46, 114, 18, 38, 124, 59, 67, -40, 127, 118, 38, -17, 49, 0, 119, 106, 125, 2]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-29, 32, -60, 3, 3, 69, -54, -96, 52, -102, 26, 12, 29, 10, -67, -37, -127, 43, 61, 91, -78, 52, 56, -57, -102, 63, 30, 55, -42, -117, 33, 6, 18, 38, 124, 59, 67, -40, 127, 118, 38, -17, 49, 0, 119, 106, 125, 2]");
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey22);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("A79D3E8918DFEAB28D239053B528200E", secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey22);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("07348ECD51EED5BD08687C6F83217330C5264FED1BBC550113DDC7F394CCE711D7EB0FE5866936479D357810CBAFA3B3", secretKey22);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("2733CF51A4C2AD7AE1784E8370333630E75EFEB46B4ABCAE4F4E79D5FC0C949E75086B52493DE875A718A56003C40796", secretKey22);
        byte[] byteArray34 = new byte[] {};
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        javax.crypto.SecretKey secretKey36 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey36);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey40);
        byte[] byteArray44 = new byte[] {};
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray44);
        javax.crypto.SecretKey secretKey46 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str47 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey46);
        javax.crypto.SecretKey secretKey50 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey50);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey50);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray44, secretKey50);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey50);
        byte[] byteArray56 = new byte[] {};
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray56);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey58);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey62);
        byte[] byteArray66 = new byte[] {};
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray66);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey68);
        javax.crypto.SecretKey secretKey72 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey72);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey72);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray66, secretKey72);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray56, secretKey72);
        byte[] byteArray77 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey72);
        java.lang.String str78 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey72);
        byte[] byteArray79 = new byte[] {};
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray79);
        javax.crypto.SecretKey secretKey85 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey85);
        byte[] byteArray87 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey85);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey85);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray79, secretKey85);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray34, secretKey85);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("649A0B31811C16EA1DD354E91C799D674A01F117A63128F5748C1E7B59504A0FFF58A48EACF9243FBE89ED95ACB6152E", secretKey85);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray32, secretKey85);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-58, 2, -41, 115, -45, 93, -30, -79, -85, -6, -29, -112, -74, -37, -3, 92]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-81, 27, -111, 68, -94, 14, 3, -64, -38, -50, 13, -45, 39, -84, 53, 90]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[86, -50, 64, 0, 81, 96, -126, 26, 104, -18, -28, -59, -107, 15, -43, -21]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-5, -17, -34, -78, -102, -60, 27, -67, 5, 35, 52, 20, -48, 127, -108, -118, 65, -48, 45, 107, -48, -75, 24, 126, -68, 56, -96, 68, 55, -94, -88, -7, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[35, 19, 122, -40, -45, 105, 74, 114, -70, 50, 26, -38, 32, -27, 81, 36, 73, -83, 31, 26, 53, 64, 48, 20, -95, -17, -37, 103, 100, -105, 88, 70, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-55, -94, 90, 89, -14, -40, 77, -51, -21, -119, -7, -89, -118, -90, -24, -11, 35, -73, -126, -33, -125, 109, -110, 11, -51, -8, 47, -59, -66, -50, 92, 70, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[96, -113, -30, 12, -127, 73, 66, 10, 97, 58, -14, -24, -79, -82, 33, -75, -31, -27, 51, 76, -110, -62, 122, 84, -27, -100, 80, -122, -22, -91, -82, 30, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-99, 126, 77, -32, -86, -88, 71, -25, 107, 37, 77, 45, -19, -119, -10, 46, 96, 126, 56, 17, -125, 27, 62, 93, 51, -115, -42, -34, -80, -18, -71, 84, -126, 36, 63, -33, 76, 96, -112, 29, -103, -14, 96, 126, 74, -120, 29, -125, -83, -50, -125, -59, 61, -65, -114, 55, -127, 79, 53, 116, 59, -88, 96, -17, -59, 61, -67, -124, -123, 52, 46, 68, -81, 44, 101, -85, 80, 114, 53, 7, -109, 92, 98, -93, 19, -61, 94, -62, 56, -108, 34, 112, 18, -51, 110, 81, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[24, -82, -43, -43, -88, -39, -18, -85, 96, -10, 33, -72, -72, 75, -53, 110, 94, -59, -9, -72, -40, -16, -7, 53, 62, -115, -100, 80, -89, 29, 89, -93, -118, 111, -20, -35, 68, 51, 30, 53, -81, 0, 120, -1, -93, -60, -103, -50, -28, -61, -17, 27, 92, -23, 88, -71, -4, 10, -121, -60, -112, 10, -70, -5, -4, -117, 43, -100, 57, -115, 59, -80, 119, 70, -10, -5, -72, -94, -83, 15, -1, 2, 111, 63, 127, -46, -106, -104, -95, -122, 11, -16, -99, 27, -42, -10, 80, -128, -18, -107, 118, 43, 20, 125, 45, -91, -59, 41, 34, 58, -128, -66]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(secretKey36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[113, -91, -70, 116, -25, -1, -87, 94, 74, 36, -71, 75, 72, 84, -21, 12]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[1, 103, 57, 117, -67, 37, 85, 74, 64, -119, -27, -81, 51, -34, 63, -100]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(secretKey46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(secretKey50);
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[-128, -112, -27, -86, 43, 62, -90, 91, -36, -81, -25, -117, -15, -9, -50, 11]");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[38, -52, 10, -73, -108, 71, -114, 2, -94, -61, 126, -103, -25, -49, 24, 76]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[80, -11, 5, 113, 15, -3, -78, 49, -19, 126, -5, -101, -35, 90, 37, -82]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[-71, -23, -91, 76, 95, -50, 73, 29, -67, 67, -91, -21, 4, -124, -16, -88]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey72);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-113, 80, -46, 78, 59, -16, -4, 87, 83, 107, 23, 88, 99, 20, 113, -19]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[102, -120, -101, 104, 25, -74, 41, 104, 112, -107, -88, 82, -122, -24, -82, -82]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[19, 17, 8, 85, 71, -17, -127, -75, 52, -21, 38, -31, 31, 94, 73, -45, 60, 17, 119, -107, -97, -76, -31, -88, -111, -113, -14, -83, -38, 92, -126, -2, -113, 80, -46, 78, 59, -16, -4, 87, 83, 107, 23, 88, 99, 20, 113, -19]");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(secretKey85);
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-42, -126, 95, 3, 30, 8, 27, 64, 7, -58, -117, 65, 124, -107, -50, -36]");
        org.junit.Assert.assertNotNull(byteArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[126, 4, -48, 44, -7, -117, 66, 117, -105, 19, 27, 106, -106, -32, -83, 72]");
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[126, 4, -48, 44, -7, -117, 66, 117, -105, 19, 27, 106, -106, -32, -83, 72]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-68, -77, 92, 18, 104, 37, -21, 13, -6, 27, -60, 53, -96, -84, -95, -25]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[58, 53, -82, 55, -122, 123, 0, -4, -27, 117, 53, -50, -114, 1, -117, 123, -88, 54, -36, 43, 46, 68, -14, -1, -64, 25, -51, 15, -41, -50, -73, 49, -98, 59, -127, 117, 45, -86, -86, -61, -33, 52, 7, 124, -57, 116, 77, -63, 12, -60, 51, 10, -70, 95, 108, 65, 119, 39, -35, -21, 126, -32, 69, 103, -118, -34, 45, -46, 100, -7, 48, -77, 14, -80, 61, 84, -73, -53, 41, 29, -26, 89, 60, -128, 1, 35, -85, -128, 55, 73, -45, -23, 82, -91, -106, -22, -42, -126, 95, 3, 30, 8, 27, 64, 7, -58, -117, 65, 124, -107, -50, -36]");
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-107, 69, 33, -53, -12, -65, 66, -84, -97, -69, -95, -125, 71, -74, 23, -34]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-19, 84, -60, -81, 119, 71, 47, 116, -117, -25, 7, -63, 1, 34, -15, -83]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[39, 53, -34, 87, 78, 48, 53, -19, 25, -41, 53, 45, -36, -122, 78, -117, 90, 123, 56, -35, -23, -45, -35, 81, -57, -82, -116, -93, 113, -12, 118, 109, 55, -97, -3, 84, -29, -40, 89, -9, -75, -101, 86, 93, -47, 45, 99, 89, -125, 71, 24, -35, -106, 81, 8, 96, 116, -16, -29, -33, 71, -54, -46, -95, -20, 5, -40, 67, -75, 27, -117, -62, -102, 52, 89, 69, 64, -80, -125, -30, 102, -7, 28, -5, 47, 60, -107, -58, -62, -16, 103, 67, 27, 107, -16, -8, -107, 69, 33, -53, -12, -65, 66, -84, -97, -69, -95, -125, 71, -74, 23, -34]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-107, 69, 33, -53, -12, -65, 66, -84, -97, -69, -95, -125, 71, -74, 23, -34]");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "954521CBF4BF42AC9FBBA18347B617DE" + "'", str14, "954521CBF4BF42AC9FBBA18347B617DE");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "954521CBF4BF42AC9FBBA18347B617DE" + "'", str15, "954521CBF4BF42AC9FBBA18347B617DE");
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey14);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey14);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey14);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-4, -86, -119, -15, -84, -20, -30, 111, -78, 65, 5, -119, 102, 23, -27, -99]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[19, 122, 50, -22, -115, -39, 102, 86, 104, -69, 23, 126, 116, -40, -119, -85]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-10, 66, -68, 31, -26, 11, -5, -15, -114, -7, 29, 8, 8, 36, 37, 38]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-31, -87, -90, -102, 20, 105, -104, 119, 109, -50, 10, 56, 44, -28, 114, 87, 86, -5, -95, 106, 118, -85, 72, 115, 123, -47, 14, -54, -115, 22, 75, 72, -22, 120, 76, -29, 25, -81, -8, -72, -51, 83, -100, 38, -68, 23, -70, -93]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B", secretKey3);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[127, -111, -5, 70, -26, 84, 14, -123, 88, 25, 92, -45, -112, 66, 17, -33, 57, 36, 110, -18, 66, -106, 68, -73, 80, 86, 79, -66, 112, -75, -9, -87, -68, 1, 102, 17, -50, 3, -59, -18, -128, 83, 113, -17, 105, 119, -32, -9, -84, 100, -17, 97, -72, 122, 51, 109, -62, 40, -92, 40, 98, 38, -97, -77, -11, -54, 90, 36, -28, 68, -68, 123, 8, 13, 126, -5, 65, 37, 88, -8, 76, 76, 98, -80, 104, -5, -44, -54, 20, -118, 50, 93, 45, 21, 103, -116, 11, 121, 70, 61, 111, -86, -11, -46, -101, -47, 62, -89, -127, -48, 5, 17]");
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("92F54AE4FE184CBC8F73AD1F837CCBEE", secretKey8);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey23);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey23);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("03E2C425E3DAD652F88E6633233CDFC03060A44593E002D2D792F86AB7F88CF845871E1715648FCA95C35BCAD6EA8FBF", secretKey23);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey23);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[76, 69, -56, -62, -57, -5, 57, 62, 98, 82, -70, 105, -49, 84, -29, 18]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-66, -96, -30, 40, -98, -3, -88, -34, -73, 69, 86, -26, -40, -10, -51, -116, -67, -120, -29, -17, 78, -46, 31, 55, 49, -37, 34, -3, 73, 14, 31, -30, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-104, -87, 118, 123, -42, 23, 81, -127, -41, 50, -24, -99, -69, -8, 53, 28, 74, 80, 35, 94, -23, -91, -115, 96, 25, -15, 90, 10, 118, -100, -41, 67, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-66, -96, -30, 40, -98, -3, -88, -34, -73, 69, 86, -26, -40, -10, -51, -116, -67, -120, -29, -17, 78, -46, 31, 55, 49, -37, 34, -3, 73, 14, 31, -30, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[82, -70, -10, 112, -60, -14, 6, 83, -38, -119, -49, -33, 2, 121, -103, -77, 119, -98, -40, 68, 48, 104, -58, 44, -62, 63, 112, 106, 57, 94, -31, -123, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-99, 8, 13, -75, 10, 36, -101, 54, -118, 22, 86, 46, -74, 62, 56, -124, -75, 117, -47, 37, 74, -117, 89, -14, 40, -36, -119, -103, -70, -82, 91, 26, -119, 36, -77, -53, -36, -41, -105, -45, -34, -103, 59, 10, 115, 14, 59, -30, 100, 115, -31, 95, -124, 34, -89, 17, 8, 83, -8, -13, 104, 96, -54, -119, 19, -119, 63, -3, -2, -94, 75, -51, 91, -2, 78, -101, -23, -67, 70, -59, -88, 41, -2, 49, -12, -74, -89, 98, -126, -76, 104, -76, 74, -45, 83, -12, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[82, -70, -10, 112, -60, -14, 6, 83, -38, -119, -49, -33, 2, 121, -103, -77, 119, -98, -40, 68, 48, 104, -58, 44, -62, 63, 112, 106, 57, 94, -31, -123, -28, 12, 103, 14, -64, -31, -57, 57, -120, -111, 21, -35, 54, 62, 110, 115]");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[125, 59, 77, -14, 0, 56, -91, 122, -55, -44, 63, -44, -102, -101, 120, 43]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[77, -64, -94, 81, 31, -11, -69, -42, -25, 61, 73, -110, 106, 23, 52, -5]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[77, -64, -94, 81, 31, -11, -69, -42, -25, 61, 73, -110, 106, 23, 52, -5]");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-16, 75, 82, -46, 59, 61, -93, 65, -86, -104, 14, 97, 96, -121, 119, -60]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[37, -2, 50, -57, 91, 82, -18, 19, -84, -10, -109, 74, 99, 8, 102, -80, -104, -27, 28, 60, 73, 126, 63, -46, 127, 59, 12, -102, -48, -14, -18, 121, 125, 59, 77, -14, 0, 56, -91, 122, -55, -44, 63, -44, -102, -101, 120, 43]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[92, 126, -97, 63, 64, 22, 78, 87, 92, -115, 95, 124, -34, -91, 88, 51, -93, 20, -45, 58, -81, -14, 49, -15, -114, 114, 50, -45, -66, -88, 124, -89, 42, 60, 37, 30, 63, 113, -90, 23, -71, 33, -49, 71, 21, -91, 107, -127, -36, -24, 72, -81, 107, 48, -76, 8, -24, -54, 124, -107, 68, -71, 127, -21, 23, -81, 115, 47, -118, -24, -14, 19, 76, 38, 53, 99, 69, 81, -39, -70, 18, -18, 24, 3, -125, -86, 119, 85, -14, 25, 110, -122, -64, -17, 111, -3, 125, 59, 77, -14, 0, 56, -91, 122, -55, -44, 63, -44, -102, -101, 120, 43]");
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey7);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey7);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey7);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey7);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("070460A2F2B5E0941DA33A2D8AA7D525F7F36C98919A74C9CC7901F078A4B30A9395E71BBDBC5DAFBE06437048D23008", secretKey7);
        byte[] byteArray17 = new byte[] {};
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey19);
        javax.crypto.SecretKey secretKey23 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey23);
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey23);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey23);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey29);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey33);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        java.lang.String str39 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray17);
        javax.crypto.SecretKey secretKey44 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey44);
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey44);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey44);
        byte[] byteArray48 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey44);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray17, secretKey44);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey44);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey44);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey44);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-54, 106, -8, 106, -100, 58, 50, -121, 68, -5, 65, 13, 9, 93, -33, -15]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[95, 38, 50, 39, -13, 57, 103, 78, 72, 102, -18, 9, 123, -127, -33, -21, 9, 73, 101, 101, -55, -36, 114, -27, -12, -105, -31, -11, 66, 105, 24, -23, 111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[50, 86, 116, -16, 19, 74, 104, -124, 11, 86, -8, 19, 111, 55, 68, -95, 9, 21, 63, -87, 10, 25, 111, -99, -89, -110, 12, 19, -68, 40, 43, 126, 111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-72, -36, -68, -34, -49, -10, 90, 16, -76, 45, -3, -128, 53, -19, -101, -99, 110, -8, -91, 55, 119, -45, -60, 72, -47, -16, 101, 16, 108, -127, 103, 31, 111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[50, 86, 116, -16, 19, 74, 104, -124, 11, 86, -8, 19, 111, 55, 68, -95, 9, 21, 63, -87, 10, 25, 111, -99, -89, -110, 12, 19, -68, 40, 43, 126, 111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[13, -114, -87, -4, 14, 63, -99, -108, 56, 112, -31, 22, 76, -118, 71, -88, 76, -2, 40, 91, 24, 24, 68, -89, -37, 32, -48, -111, -55, -122, -8, -104, 95, -43, 19, 1, 61, -121, 56, -124, -98, -115, 64, -64, -90, 30, -60, -104, 31, -117, -17, -104, 22, 52, 82, -45, -98, 73, 43, 119, -96, -99, 92, 47, 44, 36, -111, 3, -105, 60, -76, -54, 108, -86, -77, -108, -109, 60, 18, 62, -14, 0, 57, -113, -36, -93, -58, -90, -80, -63, 84, -50, 49, -20, 46, 38, 111, 28, -104, 22, -23, -83, -35, -69, -123, -89, -64, -112, 76, 96, -113, 97]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(secretKey23);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[18, 116, 122, -125, 79, -115, 93, 38, -70, -108, 58, -69, 93, -114, -49, 88]");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-22, 50, -108, -96, 97, -45, 35, -102, 2, 47, 29, -25, -113, -116, -44, 55]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-106, 107, -102, 94, 20, 1, -72, -90, -41, -20, -81, 62, 32, -101, 126, -69]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[97, 42, -65, -32, -103, 97, -38, 115, 95, 117, 8, -15, 82, 118, 48, -105]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(secretKey44);
        org.junit.Assert.assertNotNull(byteArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-2, 49, 62, 120, 6, 83, 119, 109, 74, 96, -30, 43, 66, -97, 32, -66]");
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[38, 7, 123, 27, 45, -63, 81, 43, 99, 92, -71, -97, 99, -96, 109, -73, -116, 97, 122, 92, -42, 20, 22, -19, 6, -20, 121, 103, 108, -120, -49, -47, -78, 36, -25, 85, -127, -83, -92, 95, 92, 9, 127, 65, -64, -100, 114, 14]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-78, 36, -25, 85, -127, -83, -92, 95, 92, 9, 127, 65, -64, -100, 114, 14]");
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[4, 5, -23, -91, 81, 83, 84, 4, -60, 28, 41, -88, -109, 85, 107, 66, 48, -118, -123, 26, -66, 125, 119, 112, 35, 96, -45, 37, 66, 77, -46, 8, -78, 36, -25, 85, -127, -83, -92, 95, 92, 9, 127, 65, -64, -100, 114, 14]");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[110, 101, 83, 77, 124, -61, 80, 69, 87, -32, -103, 93, 43, -45, -79, -58, 109, 126, -14, -109, 21, 87, 8, -5, 53, -119, -123, 53, -5, 55, -92, -90, 44, -3, 37, 28, 34, 16, -55, -21, 76, -38, 71, -97, -8, -95, 77, 86, 57, -49, -38, 26, 120, 121, 29, -7, -74, 39, -102, -71, -110, -106, 74, -11, 35, 45, 49, -104, -33, 96, 89, 84, -88, 53, 97, -112, -48, 121, 38, 88, 82, 98, 120, 55, 111, -26, -64, 30, -43, -5, 23, 84, -99, -43, 98, -47, -78, 36, -25, 85, -127, -83, -92, 95, 92, 9, 127, 65, -64, -100, 114, 14]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[4, 5, -23, -91, 81, 83, 84, 4, -60, 28, 41, -88, -109, 85, 107, 66, 48, -118, -123, 26, -66, 125, 119, 112, 35, 96, -45, 37, 66, 77, -46, 8, -78, 36, -25, 85, -127, -83, -92, 95, 92, 9, 127, 65, -64, -100, 114, 14]");
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray6 = new byte[] {};
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey8);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey12);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey12);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey22);
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey22);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey22);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey22);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("5C13AA20ADB6591E27C0BD582D4D153135734E15AD218F70897B6D3424478CA48CE79AE82AD97E95311C0430C19D9855", secretKey22);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray30);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-98, 110, 99, 114, -107, -39, 28, -56, 13, -106, 0, 116, -118, 56, -1, 1]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-119, -1, 67, -120, 57, -100, 30, 19, -6, 120, -118, -71, 52, -102, -55, 41]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[92, 15, -128, 55, 86, -112, 43, -40, -117, -15, 111, -85, -113, 6, -38, 116]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[8, 36, -125, 49, -73, 120, 78, 62, -90, -19, 21, 99, 23, -106, 63, -65]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[97, -103, 8, -116, -25, -103, -95, -24, 48, 37, -55, 34, -128, 102, 78, 83, -48, 10, 99, -112, -14, -101, -8, -92, -6, 71, 44, -58, -5, 6, -99, 127, 92, 15, -128, 55, 86, -112, 43, -40, -117, -15, 111, -85, -113, 6, -38, 116]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[64, -26, -104, -34, 68, -12, -92, -121, 91, -17, 86, -34, -99, 30, 104, 78, -49, 40, -38, 6, 74, -53, -2, 90, 62, 42, 82, -6, -36, -100, 116, -27, -122, 81, 81, 69, -52, 109, -16, 95, 71, -33, -31, -39, 105, -110, 83, -46, 122, -35, 63, -77, -20, 65, -127, -126, 17, 56, -103, -82, -78, -103, 126, -122, -41, 29, -105, -63, 10, -25, -128, -77, -116, 92, 47, 44, -59, -94, -91, -10, -113, -42, 14, 123, 94, -128, -57, -85, 69, -49, 2, 88, 97, -8, 13, -112, 92, 15, -128, 55, 86, -112, 43, -40, -117, -15, 111, -85, -113, 6, -38, 116]");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[111, 88, 20, -14, -125, -120, -22, -48, 95, -102, -59, 32, 95, 126, 82, 13, 61, -17, -40, -117, -108, 39, -47, -27, -11, -54, 122, -11, -41, 69, 87, -16, -98, -54, -42, -120, 105, -44, -17, 91, 46, -100, 50, -54, -74, 3, -86, 48, 102, -75, 61, -74, -104, 108, -99, 21, 56, 54, -64, 94, 8, 17, 83, -43, -2, 74, -104, 21, 80, -34, -90, -97, -31, -124, 72, 8, -62, 20, 85, 95, 77, 96, 104, -92, 92, -13, 2, 69, 46, -51, -2, -80, 114, 83, -34, 20, 92, 15, -128, 55, 86, -112, 43, -40, -117, -15, 111, -85, -113, 6, -38, 116]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "6F5814F28388EAD05F9AC5205F7E520D3DEFD88B9427D1E5F5CA7AF5D74557F09ECAD68869D4EF5B2E9C32CAB603AA3066B53DB6986C9D153836C05E081153D5FE4A981550DEA69FE1844808C214555F4D6068A45CF302452ECDFEB07253DE145C0F803756902BD88BF16FAB8F06DA74" + "'", str31, "6F5814F28388EAD05F9AC5205F7E520D3DEFD88B9427D1E5F5CA7AF5D74557F09ECAD68869D4EF5B2E9C32CAB603AA3066B53DB6986C9D153836C05E081153D5FE4A981550DEA69FE1844808C214555F4D6068A45CF302452ECDFEB07253DE145C0F803756902BD88BF16FAB8F06DA74");
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey26);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[48, -107, -87, 126, -25, -103, 91, 46, 75, -47, -55, 11, 40, 96, -49, 6]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[110, 3, 75, 27, -9, 121, 92, -80, -86, 90, 66, -39, -15, 75, -79, 42]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[91, 86, -98, 25, 41, -81, -95, 99, -128, 70, 11, -117, 105, 106, -63, 72]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[38, -38, 20, 113, 34, 62, 120, -55, 20, 114, -25, 71, -49, 1, -40, -26]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[88, -46, 92, -112, -95, -2, -59, 35, -73, 51, -4, 56, -56, 10, -4, 104]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[105, 89, -37, 7, 91, 10, -126, -123, -65, 14, -77, 124, -50, 70, 94, -122]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[105, 89, -37, 7, 91, 10, -126, -123, -65, 14, -77, 124, -50, 70, 94, -122]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[60, 39, 35, -24, -15, 119, 107, -113, 9, 125, -111, 63, 86, 18, -117, -120, 79, -19, 21, 123, 105, -113, -97, 101, 87, -63, 57, -68, -4, -68, -43, 94, 12, 113, -50, -91, -104, -24, 51, 97, -78, -128, 0, 34, 111, -52, 59, -128, 118, -4, 21, 24, -103, -8, -61, 29, 29, 7, -48, -48, 92, 73, -46, 40, -60, 10, -116, 39, 37, -61, 48, -117, -99, -4, 30, -50, 68, 96, 101, -43, 12, -26, 123, -59, 37, 91, 120, -70, 124, -49, 108, -3, 7, -32, 36, 95, 88, -46, 92, -112, -95, -2, -59, 35, -73, 51, -4, 56, -56, 10, -4, 104]");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "3C2723E8F1776B8F097D913F56128B884FED157B698F9F6557C139BCFCBCD55E0C71CEA598E83361B28000226FCC3B8076FC151899F8C31D1D07D0D05C49D228C40A8C2725C3308B9DFC1ECE446065D50CE67BC5255B78BA7CCF6CFD07E0245F58D25C90A1FEC523B733FC38C80AFC68" + "'", str32, "3C2723E8F1776B8F097D913F56128B884FED157B698F9F6557C139BCFCBCD55E0C71CEA598E83361B28000226FCC3B8076FC151899F8C31D1D07D0D05C49D228C40A8C2725C3308B9DFC1ECE446065D50CE67BC5255B78BA7CCF6CFD07E0245F58D25C90A1FEC523B733FC38C80AFC68");
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("859B3FA722C372255FE30D8C636CD8405F9F730B2F82910FBDE3CFDC474CF456F33A22EDB46C16DB9298451E252DC0F7", secretKey8);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey8);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("DC8849DD069307467A3E5F11E95BF34C", secretKey8);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey39);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey39);
        java.lang.String str45 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey39);
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey39);
        byte[] byteArray47 = new byte[] {};
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray47);
        byte[] byteArray52 = new byte[] {};
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray52);
        javax.crypto.SecretKey secretKey54 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey54);
        javax.crypto.SecretKey secretKey58 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray59 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey58);
        byte[] byteArray60 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey58);
        java.lang.String str61 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey58);
        byte[] byteArray62 = new byte[] {};
        java.lang.String str63 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray62);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str65 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey64);
        javax.crypto.SecretKey secretKey68 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey68);
        byte[] byteArray70 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey68);
        java.lang.String str71 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray62, secretKey68);
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray52, secretKey68);
        byte[] byteArray73 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey68);
        byte[] byteArray74 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey68);
        java.lang.String str75 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray47, secretKey68);
        java.lang.String str76 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey68);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[96, -103, 116, -18, -24, 17, -125, 36, 82, -84, -45, -8, -68, -34, 82, 83]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-100, -52, 41, -7, -120, -92, 10, -69, -104, -70, -77, 89, 19, -119, 108, 66]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-100, -52, 41, -7, -120, -92, 10, -69, -104, -70, -77, 89, 19, -119, 108, 66]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[126, -82, -62, 57, 66, 103, -119, 82, 83, -14, 17, -57, -88, 73, 78, 70]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-66, -115, 18, 88, -46, 28, -22, -38, -8, -95, 24, -93, 80, 85, 90, -115, 66, 24, -70, -127, 34, -107, 38, 48, 44, 28, 19, 68, -54, -14, 38, -3, 96, -103, 116, -18, -24, 17, -125, 36, 82, -84, -45, -8, -68, -34, 82, 83]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[28, 105, -120, -102, 15, 86, -120, 78, -84, 47, -95, -107, 105, 13, 88, -13, 68, -80, 83, -75, -116, 37, 33, -103, 112, 10, -128, 59, -59, 29, 40, 7, 23, -45, 49, 83, -39, 69, -77, 37, 51, 37, -123, 111, -89, -27, -90, 64, 51, 37, -52, 66, -113, -60, -12, -102, -124, 86, -118, -106, -49, 120, 100, 124, -123, -99, -32, -5, -120, 62, 110, -108, -83, 117, -25, -82, -125, -70, 13, 120, -4, 12, 21, 49, 119, 33, -57, 115, 124, -19, 89, -26, 18, -42, -55, 29, 96, -103, 116, -18, -24, 17, -125, 36, 82, -84, -45, -8, -68, -34, 82, 83]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[22, 91, -82, 89, -38, 81, -29, -116, -55, -73, -25, -35, 78, 83, 27, -15, 97, 20, -41, 125, 121, 38, 72, -100, 54, -124, -18, 88, -19, -21, 97, 94, 96, -103, 116, -18, -24, 17, -125, 36, 82, -84, -45, -8, -68, -34, 82, 83]");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "165BAE59DA51E38CC9B7E7DD4E531BF16114D77D7926489C3684EE58EDEB615E609974EEE811832452ACD3F8BCDE5253" + "'", str17, "165BAE59DA51E38CC9B7E7DD4E531BF16114D77D7926489C3684EE58EDEB615E609974EEE811832452ACD3F8BCDE5253");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-122, -59, -32, 27, 91, 61, -123, 90, -125, -125, 106, 55, 29, 58, 47, 39]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[12, 23, 80, -81, 70, -30, 74, -60, 86, 63, -84, -58, 73, -37, 4, 18]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[9, 115, 28, 123, 114, -43, -88, 52, 104, -76, 116, -40, 86, -76, 22, 73]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[19, 17, 110, 61, -96, -89, 35, 57, 55, -14, 110, -110, 119, -88, -37, 105]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[6, -39, -128, -66, 36, -19, -66, 14, -95, 19, -80, 13, 46, -7, 38, -28, 25, -108, 48, -45, -102, -12, 111, -55, -76, -7, 120, 67, -23, 15, 40, 70, 107, -84, -21, 22, 117, 103, 50, -29, 45, -72, 118, 113, 80, -56, -90, 49, -106, -124, -60, -81, 56, -79, -3, -22, 26, 94, -59, -85, 51, -13, -42, -119, -97, -91, -38, 34, -63, 36, 53, 114, 57, -9, -28, -80, -97, 114, -54, -4, -107, 84, -64, -81, -56, 77, -23, -98, -92, 119, -26, 7, -43, 29, -2, 36, 9, 115, 28, 123, 114, -43, -88, 52, 104, -76, 116, -40, 86, -76, 22, 73]");
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-86, -112, 8, 114, 35, 71, -125, -44, 46, -113, -82, -44, -69, -31, -69, 56, 77, -46, -41, -38, -33, 55, 18, 32, -90, -81, 112, 124, 3, -9, -13, -41, 16, 7, 99, 47, -5, -101, 64, -36, 105, -71, 44, -10, -121, -6, -2, 3, -43, -89, -121, 34, 70, 69, 2, -83, 51, 2, -62, -50, 65, 22, -16, -73, 6, -25, -60, 51, 35, 94, -12, -86, -125, -122, -52, 74, -107, -95, -82, 0, -30, 7, -117, 36, 82, 68, 67, -101, -105, 115, -84, 12, -73, 7, 45, -126, 9, 115, 28, 123, 114, -43, -88, 52, 104, -76, 116, -40, 86, -76, 22, 73]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(secretKey54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(secretKey58);
        org.junit.Assert.assertNotNull(byteArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[-109, 18, -68, 99, -88, -7, 90, -117, 26, 112, 121, -40, 101, 21, -56, -61]");
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[-11, -62, -28, -109, -102, 80, -93, -127, 100, 48, -61, -59, -99, -94, -62, 50]");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray62), "[]");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(secretKey68);
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[79, 44, -4, 89, -110, 77, 124, 19, -17, 45, 12, 100, 114, 37, -12, 53]");
        org.junit.Assert.assertNotNull(byteArray70);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[30, 42, 39, 124, 6, 118, 5, -46, -51, 75, -10, -59, -46, -64, 51, 83]");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-72, 88, 20, 53, 28, 58, -20, -19, 34, -31, -11, 58, -22, -13, -6, -87, -66, 36, -123, -17, 127, 100, -42, 104, -46, 66, -96, 100, 51, -115, 90, -105, 79, 44, -4, 89, -110, 77, 124, 19, -17, 45, 12, 100, 114, 37, -12, 53]");
        org.junit.Assert.assertNotNull(byteArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-63, -12, -19, 75, -104, -114, -48, -25, 111, 3, -89, -90, -72, 16, 46, -13, -66, 16, 82, 113, 66, 91, -17, 91, -89, -80, 101, 105, -106, -56, -8, 62, -62, -47, 117, -71, -67, 73, -28, 50, -95, 22, -43, 55, -39, 102, 52, -32, 86, -77, -116, 118, -26, -26, -66, 32, 27, -46, -37, -53, -31, -82, -79, -54, -17, -87, 10, 37, -125, 99, -13, -87, -70, 27, -19, 4, -109, -64, 76, -121, -8, 14, -26, -81, 90, 61, 17, 88, 28, 3, -44, 63, -65, -72, 29, -42, 79, 44, -4, 89, -110, 77, 124, 19, -17, 45, 12, 100, 114, 37, -12, 53]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey17);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray22);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("6566D0469D4956CB5AB75EF7230BC4F5", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray22, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[4, 22, 121, 126, 18, -86, 33, -80, -82, 36, 66, -22, 9, -75, -53, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[72, 18, -14, 8, 105, -28, 74, -110, -40, -14, 87, -84, -28, -97, 66, -99]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-56, 4, 110, -4, 25, -46, -76, 19, 47, -30, -103, 86, -75, -101, -1, 90]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[23, 96, -11, 108, -4, -9, 102, 111, -109, 21, 44, -29, 108, 108, 113, -121]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[106, 62, 28, -70, 70, 16, -90, 23, 27, -29, 58, -13, -66, -127, -84, -38, 43, -12, -122, -56, 122, -46, 75, -3, 53, 85, -7, -41, 125, -57, 112, -70, -56, 4, 110, -4, 25, -46, -76, 19, 47, -30, -103, 86, -75, -101, -1, 90]");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "6A3E1CBA4610A6171BE33AF3BE81ACDA2BF486C87AD24BFD3555F9D77DC770BAC8046EFC19D2B4132FE29956B59BFF5A" + "'", str23, "6A3E1CBA4610A6171BE33AF3BE81ACDA2BF486C87AD24BFD3555F9D77DC770BAC8046EFC19D2B4132FE29956B59BFF5A");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[9, 113, 49, -67, -114, 113, -72, 101, -85, 100, 8, -11, 41, -71, 127, -22]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-59, 70, -122, 72, -20, 23, 58, 54, -16, 102, 26, 53, 83, -9, 57, -54]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 27, -4, 111, -109, -121, -119, 28, -117, -125, 111, 102, 20, 43, -70, 57, -108, 103, 75, -25, 45, 79, 80, -63, 48, 67, -106, -100, -34, -10, -24, 4, 9, 113, 49, -67, -114, 113, -72, 101, -85, 100, 8, -11, 41, -71, 127, -22]");
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey18);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("948F55B865EDCEAFAC352FC53FB6DD63C57EC080B3BD1C3E38EB7903E902D33781D05F6316F9A939EE82B9078848D40B", secretKey18);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-120, 109, -45, 66, -41, 85, 34, -85, 90, -76, -2, -11, -88, 15, -66, 23]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-91, 103, -121, -118, 68, -10, -22, 118, -128, -39, -63, 86, 112, -7, 2, 37]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-11, 108, -126, 3, 36, 10, -101, -97, -7, -80, -95, -76, -94, 48, 103, -76]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-23, -62, -123, 67, -97, 119, -11, 36, -103, -120, 40, -26, -22, -27, -9, 30]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[64, -101, 45, -25, 111, -54, -101, -107, -30, 25, -101, 119, -27, 113, -87, 55, -9, -75, -95, -71, -99, -41, 72, 121, -90, 20, -44, -106, -32, -14, -59, -81, -11, 108, -126, 3, 36, 10, -101, -97, -7, -80, -95, -76, -94, 48, 103, -76]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-104, -12, 49, 56, 6, 102, 4, 103, 42, 82, -104, -117, 95, -63, 14, 70, 75, -80, -47, 119, -75, -39, 78, -107, 49, -91, -10, 85, -5, -81, -77, -27, 101, -84, -24, 46, -100, -11, 85, -23, 98, -78, 57, -91, -27, 92, -16, -78, 86, -127, 101, -3, -60, -80, -3, -81, 81, -125, -89, -20, -122, 43, -37, -114, 60, -62, 117, -93, 70, 19, -74, 110, -63, 58, -31, 120, 113, -8, -28, 78, -38, 79, 80, -18, -13, 103, -94, 36, 43, 22, -67, 29, 57, -86, 78, -91, -11, 108, -126, 3, 36, 10, -101, -97, -7, -80, -95, -76, -94, 48, 103, -76]");
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.Class<?> wildcardClass13 = byteArray0.getClass();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[49, -3, -25, -126, 37, 113, -51, -109, -70, -80, -26, -107, 125, 43, -69, 17]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-29, 45, -36, 47, -82, -100, -79, -64, 41, -13, 1, 112, -66, 2, -46, -68]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-29, 45, -36, 47, -82, -100, -79, -64, 41, -13, 1, 112, -66, 2, -46, -68]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-40, -5, 126, 29, -7, -97, 110, 115, -47, 68, 121, -72, 34, -99, -18, 37]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey9);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("AAF5261A0B5DEACC15D86E3230645D5389B255FF7AFF2E7DD96B66D14AB8D8943EBF5F4CD0A73518646E46E3EA596C99", secretKey9);
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey9);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey9);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-95, 37, -84, 80, -88, -86, -110, 109, 69, 50, 75, 70, 11, 50, 70, -91]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-95, 37, -84, 80, -88, -86, -110, 109, 69, 50, 75, 70, 11, 50, 70, -91]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-38, 46, -124, 56, 41, -1, -86, 117, 78, -56, 44, 115, -65, 77, 8, -17]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-26, 60, 114, 82, -63, 61, -26, -65, -71, -34, 126, 127, -75, -105, -84, 78, 90, 67, 15, 50, -23, 3, 117, -27, 52, 126, -43, -20, -107, 35, 105, -54, 67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-26, 60, 114, 82, -63, 61, -26, -65, -71, -34, 126, 127, -75, -105, -84, 78, 90, 67, 15, 50, -23, 3, 117, -27, 52, 126, -43, -20, -107, 35, 105, -54, 67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-85, 116, 88, -7, 42, -16, 26, 25, 33, 54, 105, -127, -102, -122, -21, 41, 47, 85, 50, 81, -16, -72, -111, -61, 35, -27, 92, 112, 96, 44, -89, 104, -69, 42, 94, 42, 78, 13, 12, -28, -20, -60, -46, 117, -56, -16, 120, 18, 50, -12, -56, -56, -17, 18, 102, 29, -21, -86, -115, -82, 35, 68, 94, -79, -96, 58, -9, 94, -126, 28, 100, 81, 45, 93, 59, 51, 49, 46, -37, 42, 0, 108, -15, 3, -107, 36, 41, 115, -113, -67, -81, -70, 59, 19, 9, 94, 67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-21, -64, 28, -24, 31, -29, 83, -61, -111, 52, -73, -36, 98, -125, -42, 11, -50, -5, -85, 4, 9, 17, 81, -41, -47, 64, -103, -48, -21, 87, -6, -49, -30, -123, 41, 46, 88, 63, -12, -103, 54, 124, -50, -105, 64, -38, -34, 40, -72, -77, 79, -125, -61, -42, 89, 94, -113, -20, 110, 91, -24, 111, -17, -24, 113, -112, 76, 112, -96, -77, -5, 66, -40, 68, 68, 116, 10, 1, 76, -99, -36, 31, 79, -107, -18, 98, -2, -60, -120, -9, -17, 108, -48, 17, 25, 32, 67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[47, -98, 120, 116, -98, 27, -28, -59, -108, -65, 27, 98, -33, -93, 99, -90, 73, -50, -86, -60, -7, -84, 45, 106, -49, 112, -69, -120, -68, -114, -29, 2, 67, 115, 45, 15, 66, 41, -23, -75, 115, -35, 91, 49, 112, 74, 51, -48]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2F9E78749E1BE4C594BF1B62DFA363A649CEAAC4F9AC2D6ACF70BB88BC8EE30243732D0F4229E9B573DD5B31704A33D0" + "'", str19, "2F9E78749E1BE4C594BF1B62DFA363A649CEAAC4F9AC2D6ACF70BB88BC8EE30243732D0F4229E9B573DD5B31704A33D0");
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        javax.crypto.SecretKey secretKey1 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray2 = com.thealgorithms.ciphers.AESEncryption.encryptText("F98F577291A0A257FA124508CA3E5B679C8B247A3C3374B5269A80CA6A3DD1638D84656708121A25B146AA2C64858FFD", secretKey1);
            org.junit.Assert.fail("Expected exception of type java.security.InvalidKeyException; message: No installed provider supports this key: (null)");
        } catch (java.security.InvalidKeyException e) {
            // Expected exception.
        }
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray27 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey26);
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey26);
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey26);
        byte[] byteArray33 = new byte[] {};
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray33);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey35);
        javax.crypto.SecretKey secretKey39 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey39);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey39);
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey39);
        byte[] byteArray43 = new byte[] {};
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray43);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey45);
        javax.crypto.SecretKey secretKey49 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey49);
        byte[] byteArray51 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey49);
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray43, secretKey49);
        java.lang.String str53 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray33, secretKey49);
        byte[] byteArray54 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey49);
        byte[] byteArray55 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey49);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey49);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray61 = new byte[] {};
        java.lang.String str62 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray61);
        javax.crypto.SecretKey secretKey63 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str64 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey63);
        javax.crypto.SecretKey secretKey67 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey67);
        byte[] byteArray69 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey67);
        java.lang.String str70 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey67);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        java.lang.String str81 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray61, secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("7D391A41B960AE5E8A4F9D8BF4547709259C98D6E568CE7099FCCA46E971FE07B7A6E2F1914DF2F9D314F0DA5A8A8FEE", secretKey77);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey77);
        byte[] byteArray86 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey77);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[11, 70, -1, 94, 77, 40, -103, -117, 42, -69, -69, -79, -83, 67, -1, -33]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, 109, -34, -110, -61, 61, 7, -29, -90, 124, 69, -124, -32, -71, 105, 69]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[124, -76, 70, 28, 25, -30, 21, 48, 54, 7, -122, -26, 118, 89, 64, -33]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[92, -20, 24, 81, 26, 70, -3, 75, -110, -21, 105, 63, -46, 117, -48, 84]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertNotNull(byteArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[9, -20, -116, 63, -108, 76, -79, 51, -52, -93, -10, -100, 73, 87, -61, 27]");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[83, 8, -89, -84, -29, -105, 120, 88, -31, 48, 108, 0, 1, -30, -68, 47]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[83, 8, -89, -84, -29, -105, 120, 88, -31, 48, 108, 0, 1, -30, -68, 47]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey39);
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[95, 41, 56, -77, -70, 40, -37, -81, 62, -89, 6, -109, -82, -81, 11, -71]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[17, 5, 97, 69, 76, 98, -50, 35, 3, 22, 82, 101, -31, -56, 59, 53]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey49);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-87, 30, 22, -46, -69, -31, 125, -32, 110, 55, 40, -110, -115, 59, 5, -19]");
        org.junit.Assert.assertNotNull(byteArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[95, 73, 118, -92, 98, 74, 37, -34, -86, -77, -41, 102, 127, -127, -86, -31]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(byteArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[112, -111, -97, 32, -93, 17, -78, -36, -52, 15, 13, 9, -115, 115, 63, -52, 42, 114, 127, -122, -2, 1, 1, 90, -19, 81, 54, 110, -62, -93, -66, -11, -87, 30, 22, -46, -69, -31, 125, -32, 110, 55, 40, -110, -115, 59, 5, -19]");
        org.junit.Assert.assertNotNull(byteArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-106, 41, 88, -39, -104, 63, -17, 64, -68, 68, 26, -116, -115, 71, -64, -49, 98, -112, 37, 111, -71, -94, -110, 106, 45, 54, 44, -110, -62, -15, 125, -31, -87, 30, 22, -46, -69, -31, 125, -32, 110, 55, 40, -110, -115, 59, 5, -19]");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(secretKey63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(secretKey67);
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-6, -72, 106, -88, -118, -36, 25, -9, -77, -92, 3, 2, -59, 6, 108, -42]");
        org.junit.Assert.assertNotNull(byteArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-43, 11, -125, -36, -113, -28, 12, 29, 8, 47, -17, -73, 95, 10, 41, -115]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[52, 115, -27, -50, 109, -75, 123, 95, -95, 83, 3, 43, -54, 75, -101, 81]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[98, -16, -18, 97, 46, 69, 77, -16, 56, -51, -58, 80, -12, -105, -17, -105]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[74, -13, -94, -118, -100, 120, -96, -91, -103, -60, 28, -71, 114, -20, -119, -85, 126, -38, 98, 10, -74, -45, 121, 64, -22, 13, -96, 1, 88, -117, -62, 79, 52, 115, -27, -50, 109, -75, 123, 95, -95, 83, 3, 43, -54, 75, -101, 81]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[79, -46, 112, -99, -119, -7, 98, 21, -18, -82, -58, 47, -34, -65, 37, -96, 62, 71, 60, 32, 93, -23, 3, 93, 122, -80, 18, 96, -80, 35, -40, 76, 52, 115, -27, -50, 109, -75, 123, 95, -95, 83, 3, 43, -54, 75, -101, 81]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[101, -75, 66, -65, 102, -5, -103, -121, 97, 58, 74, 33, -27, -117, -83, 40, 0, -65, -75, 13, 77, -58, -12, -55, 83, -5, 89, 62, 3, -70, -59, 0, -30, 8, 50, 45, 9, 109, 73, 83, -33, 27, 27, -20, -82, 20, 34, -121, 19, -24, -126, 97, -96, 72, -86, 115, -95, 12, 59, -1, 93, -59, 118, 67, -34, 6, 103, 18, 55, 114, -40, 66, 103, 104, 51, 36, -58, 38, -98, -107, 107, 96, -103, -21, -123, 71, 62, -42, -41, -127, 44, 53, 110, -89, -126, 106, 52, 115, -27, -50, 109, -75, 123, 95, -95, 83, 3, 43, -54, 75, -101, 81]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(byteArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-113, 59, 24, 44, 49, 104, 66, 27, -2, 71, 103, 22, -76, -29, 71, 97, -27, 46, 47, 23, 25, -61, 77, 97, -110, -100, 112, 36, 63, 79, 2, 74, 52, 115, -27, -50, 109, -75, 123, 95, -95, 83, 3, 43, -54, 75, -101, 81]");
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-85, 113, -95, 86, 33, -104, 67, 89, 17, -27, 48, -42, -68, -103, 6, -65]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-8, -111, -28, -10, -99, 101, 73, 23, -29, -13, -9, -20, -115, -90, 22, -22]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-8, -111, -28, -10, -99, 101, 73, 23, -29, -13, -9, -20, -115, -90, 22, -22]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[19, 18, -55, -107, -7, 72, 81, -25, -23, -113, 81, 88, 11, 18, -23, -16]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-19, -91, -85, 61, -57, -40, 63, 28, -54, 93, -87, -109, 84, 118, -50, -77, 74, -88, 51, 85, 103, -128, 62, 125, 109, -26, 74, -28, 50, -76, 104, 98, -85, 113, -95, 86, 33, -104, 67, 89, 17, -27, 48, -42, -68, -103, 6, -65]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-85, 113, -95, 86, 33, -104, 67, 89, 17, -27, 48, -42, -68, -103, 6, -65]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "AB71A1562198435911E530D6BC9906BF" + "'", str13, "AB71A1562198435911E530D6BC9906BF");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "AB71A1562198435911E530D6BC9906BF" + "'", str14, "AB71A1562198435911E530D6BC9906BF");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "AB71A1562198435911E530D6BC9906BF" + "'", str15, "AB71A1562198435911E530D6BC9906BF");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AB71A1562198435911E530D6BC9906BF" + "'", str16, "AB71A1562198435911E530D6BC9906BF");
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        byte[] byteArray15 = new byte[] {};
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey17);
        javax.crypto.SecretKey secretKey21 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey21);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey21);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey21);
        byte[] byteArray25 = new byte[] {};
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray25);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey27);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey31);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey31);
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray25, secretKey31);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey31);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray15);
        javax.crypto.SecretKey secretKey40 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey40);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey40);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray15, secretKey40);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey40);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey40);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-95, 56, 85, 33, -106, 107, -76, 39, -62, 62, 111, 38, 97, -30, -85, 118]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[65, -22, -47, -59, -116, 73, 14, -100, 91, -101, -104, -118, 8, -120, 5, -11]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[65, -22, -47, -59, -116, 73, 14, -100, 91, -101, -104, -118, 8, -120, 5, -11]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[29, 49, -27, -113, 105, -13, 117, -84, 55, -1, 19, 115, 4, -35, 41, -25]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[22, 16, -51, 11, 86, 29, -85, 111, 96, 24, -10, 90, 108, -112, 36, 72, 12, 17, 49, 112, 98, -21, -3, 51, 104, 53, -4, -49, -75, -83, 91, 30, -95, 56, 85, 33, -106, 107, -76, 39, -62, 62, 111, 38, 97, -30, -85, 118]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[22, 16, -51, 11, 86, 29, -85, 111, 96, 24, -10, 90, 108, -112, 36, 72, 12, 17, 49, 112, 98, -21, -3, 51, 104, 53, -4, -49, -75, -83, 91, 30, -95, 56, 85, 33, -106, 107, -76, 39, -62, 62, 111, 38, 97, -30, -85, 118]");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1610CD0B561DAB6F6018F65A6C9024480C11317062EBFD336835FCCFB5AD5B1EA1385521966BB427C23E6F2661E2AB76" + "'", str13, "1610CD0B561DAB6F6018F65A6C9024480C11317062EBFD336835FCCFB5AD5B1EA1385521966BB427C23E6F2661E2AB76");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(secretKey21);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[36, -85, 1, -85, 74, 27, 6, -49, 56, -127, -108, 109, 25, 35, -67, -56]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[48, 52, -120, -70, 53, -114, 50, 45, -128, 121, 97, -72, -40, -23, 18, 92]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-41, -38, 97, 113, -58, 33, -16, 56, 108, -76, 62, -32, -126, 61, -86, -93]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-117, -94, 5, 4, 72, 0, 96, -93, -18, -41, 113, 85, -125, 115, -120, -64]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey40);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-3, 27, -102, -21, 45, -29, -20, -39, 26, -5, 53, 113, -106, -127, -36, -66]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[70, -42, 109, -106, 118, -61, 127, 30, 54, 68, -105, 122, 9, 8, -59, -71]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[70, -42, 109, -106, 118, -61, 127, 30, 54, 68, -105, 122, 9, 8, -59, -71]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("9ABF397D6057C9AD0B38009D0CCFBE51ADC7566E9704550B09E93906B2FBFA8F2122BE3C93129344DF760C05FAEFA39C601617B2FAF90AF3ED5C0EF946C6C661D40A4CD239A32E5E441836A6A137A1776E1F8907566775B9CD1E71E1212BF32D33D495DAF7541979A6CDD11037F175C39A3DA67CEA732B0158B06265AD2FBBF9B341CA265D90846B5AFB295F4DF223F3590B2B8F768DDA6E75305545B69AC202676BCFB7F1C25F78B1894E0BA74296F70518A8361336175CA6D8CF5D7035D943945099FD8036287CBFA0C5D4CB85FB5128DC4D5FC7CE477F45E176B16E7B6DA8FB4B4C3019C21D478CD30166C478070A", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        byte[] byteArray9 = new byte[] {};
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey11);
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray9);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray9, secretKey20);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("2C94B0A68BD148E927053D07F8C32A15D62043EE3B2BAEDADE62954D40623689583E908896795C556F39EEF8FC3C6DFDC7F6569A07E8DD8687024B0756A8EBE652F7F7056461C0326A9FC33549206634", secretKey20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray6, secretKey20);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[127, 49, -108, -41, 10, 92, 30, 36, -62, -72, 30, 16, -9, 5, 61, 69]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[124, -124, -110, -13, 40, -36, 26, -22, 10, 21, -127, 21, -13, 30, -25, -29, -12, 39, 8, -127, 83, -33, -30, -45, -100, -110, -99, 19, 46, -10, 82, -49, 67, -66, -126, -104, 109, -20, 60, -118, 103, -16, -21, -56, 94, 74, -41, 54]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "7B5D691D6D8AE8C496D08DE42EB8CAF91FBDA12580408643D4F0BDB61FE5CADF8257E312B57AFF776599CA7AAAB4BACADC0CAFC8A8BDA0E7C0FB477D028754E2C2DB8C5895A34B50D7646A355C0B59DF8EB4453FDCE2C6D81DCD95E51E444C8689E44C5875CC8862520D265597EC9BD9933F45F48A1AF489A8C995B9DC6701A50127D486EE138899E1D3E5DF163CFEDDEEA91680E93A2FBAE4B617F6658DFAC91AC1884D0DD7358ACECF0D92C00D193318ED97717CA57BB013F773FE4867E87F3987F99BBFF49C05764845A66B34ECB05A42797646D302222BAEC52A3078768FFAA41E1B10E84FF8A95AE05DEECFFBF2AB7EE9A55D3BFD04853BEC43439375524CEAD5D531FA08809544F2D6C0D5DB7BD74936E068751AE10739083A68671C92F15CB6F0EF7AB19C9638E6532BB67AFD2938A5423DA5F4F42B2B5540FDCD2A2DEF49C1B501E1A6A4AE0D0300AB2C0901B5341F68592F5238077094D19A8F70E180BB60BC52C06717C4AE65C0EAE68FD7FD609A60F81FF1E7768133886E3C6BDEFBE822DEFC0594990CF4695C098E4F1D60C35AEACC4CBAD1CB99E38A85A7B1ACFB659BC029AFE9C0C255C6098F153931C599BAAA01CCAC8176231ECCD672991688B355B08CC1187A114CA86DC475D2E811ED477074C9E91FEBC2D60F741D8CF043BE82986DEC3C8A67F0EBC85E4AD736" + "'", str7, "7B5D691D6D8AE8C496D08DE42EB8CAF91FBDA12580408643D4F0BDB61FE5CADF8257E312B57AFF776599CA7AAAB4BACADC0CAFC8A8BDA0E7C0FB477D028754E2C2DB8C5895A34B50D7646A355C0B59DF8EB4453FDCE2C6D81DCD95E51E444C8689E44C5875CC8862520D265597EC9BD9933F45F48A1AF489A8C995B9DC6701A50127D486EE138899E1D3E5DF163CFEDDEEA91680E93A2FBAE4B617F6658DFAC91AC1884D0DD7358ACECF0D92C00D193318ED97717CA57BB013F773FE4867E87F3987F99BBFF49C05764845A66B34ECB05A42797646D302222BAEC52A3078768FFAA41E1B10E84FF8A95AE05DEECFFBF2AB7EE9A55D3BFD04853BEC43439375524CEAD5D531FA08809544F2D6C0D5DB7BD74936E068751AE10739083A68671C92F15CB6F0EF7AB19C9638E6532BB67AFD2938A5423DA5F4F42B2B5540FDCD2A2DEF49C1B501E1A6A4AE0D0300AB2C0901B5341F68592F5238077094D19A8F70E180BB60BC52C06717C4AE65C0EAE68FD7FD609A60F81FF1E7768133886E3C6BDEFBE822DEFC0594990CF4695C098E4F1D60C35AEACC4CBAD1CB99E38A85A7B1ACFB659BC029AFE9C0C255C6098F153931C599BAAA01CCAC8176231ECCD672991688B355B08CC1187A114CA86DC475D2E811ED477074C9E91FEBC2D60F741D8CF043BE82986DEC3C8A67F0EBC85E4AD736");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[101, -86, -118, 54, -36, -4, -44, 124, -58, -59, 123, -83, 0, 21, -11, -28]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-39, 71, 92, 56, -13, 113, -65, 118, 99, 105, -46, 91, 38, -108, 120, 103]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-39, 71, 92, 56, -13, 113, -65, 118, 99, 105, -46, 91, 38, -108, 120, 103]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[62, -29, 75, 126, 120, -110, -42, -102, 90, 32, -123, -20, 22, 5, -71, 2, -106, -108, -22, -38, -16, -49, -105, 109, -68, 114, -78, -108, -21, -128, 123, -69, -115, 105, -41, 33, 96, -19, -57, 15, 26, 4, 101, -2, -124, -128, 46, -5, 2, -18, 42, -89, 93, 45, 111, 80, -41, 81, 29, 71, -13, 80, -41, 21, 127, -38, 56, -78, 50, -110, -113, -34, -94, -5, -91, -45, 107, -95, 19, 78, 91, 50, 76, 37, 37, -91, -97, 99, 9, 83, 114, 45, -59, 107, 61, -47, 66, 0, -53, 31, -69, -73, -88, -40, -48, -51, -62, -123, -50, 94, -15, -79, -19, -74, 119, 96, 126, 59, -50, 41, -65, -72, -28, -120, -46, 105, -118, 8, -5, -64, -86, 32, -27, 124, 36, -72, 1, -112, 57, 19, 34, -116, -5, -27, -52, 68, -104, 127, -21, 91, 107, 32, 44, 103, 105, 86, 21, -91, -8, 82, 101, -86, -118, 54, -36, -4, -44, 124, -58, -59, 123, -83, 0, 21, -11, -28]");
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = new byte[] {};
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey13);
        javax.crypto.SecretKey secretKey17 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey17);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey17);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey17);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey17);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey28 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey28);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey28);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey28);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey28);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey28);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey28);
        java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray34);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-77, -57, 91, -47, 124, -37, 120, -111, -84, -57, 92, -77, -115, -51, 112, 111]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[113, 59, 5, -42, 95, -97, 65, 53, 48, -2, -111, 57, -124, 49, 85, 66]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey17);
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-122, -9, 36, 52, -8, -83, -1, -99, -59, -6, 103, -25, -6, 48, -111, -35]");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[60, 83, -98, -88, 30, 6, 11, 47, 54, 28, 45, 27, 95, -23, 27, 43]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey28);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-5, -111, 54, -32, -123, 44, -126, 39, -14, -35, -97, -17, -123, -87, 111, -120]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[86, -88, -30, -80, 78, 59, -27, 57, 80, -36, 52, 63, 1, 28, -109, -109, -39, -55, 111, -127, 46, 59, 88, -14, 125, 96, 24, -19, 29, -117, 64, -90, 30, 81, 78, 28, 84, -53, -27, -9, -92, 106, -122, -77, 27, 48, -52, -101]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[30, 81, 78, 28, 84, -53, -27, -9, -92, 106, -122, -77, 27, 48, -52, -101]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[46, 42, -103, -6, -115, -78, -28, 33, -5, -24, 86, 10, 70, 8, 55, -81, 21, 81, 69, 1, 117, 73, 123, 62, -16, -111, 76, -75, -83, 33, -125, -88, 30, 81, 78, 28, 84, -53, -27, -9, -92, 106, -122, -77, 27, 48, -52, -101]");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[38, -30, 113, -26, -112, 46, 63, 6, 110, -1, 101, 114, -6, -103, -1, -27, -2, 83, 70, 89, 125, -47, -102, -104, 19, 127, 103, 59, -80, -84, -22, 54, -11, 15, -88, 72, 101, 104, -7, 108, 71, -60, -117, 16, 41, 100, 68, -16, 25, 29, 115, -71, -80, -92, 55, 40, -124, 103, 121, -86, -77, 77, 33, -67, 43, -114, -8, 3, -22, 67, -65, 30, -25, -57, -109, -39, -127, 115, -18, -84, -30, 99, 115, -53, -3, -53, 127, -111, 35, -49, -89, 39, -14, 28, 12, 67, 30, 81, 78, 28, 84, -53, -27, -9, -92, 106, -122, -77, 27, 48, -52, -101]");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "26E271E6902E3F066EFF6572FA99FFE5FE5346597DD19A98137F673BB0ACEA36F50FA8486568F96C47C48B10296444F0191D73B9B0A43728846779AAB34D21BD2B8EF803EA43BF1EE7C793D98173EEACE26373CBFDCB7F9123CFA727F21C0C431E514E1C54CBE5F7A46A86B31B30CC9B" + "'", str35, "26E271E6902E3F066EFF6572FA99FFE5FE5346597DD19A98137F673BB0ACEA36F50FA8486568F96C47C48B10296444F0191D73B9B0A43728846779AAB34D21BD2B8EF803EA43BF1EE7C793D98173EEACE26373CBFDCB7F9123CFA727F21C0C431E514E1C54CBE5F7A46A86B31B30CC9B");
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        byte[] byteArray7 = new byte[] {};
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray7);
        javax.crypto.SecretKey secretKey13 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey13);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray7, secretKey13);
        java.lang.String str18 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey13);
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("2C94B0A68BD148E927053D07F8C32A15D62043EE3B2BAEDADE62954D40623689583E908896795C556F39EEF8FC3C6DFDC7F6569A07E8DD8687024B0756A8EBE652F7F7056461C0326A9FC33549206634", secretKey13);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey13);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey13);
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[76, -67, 20, -18, 41, -108, -77, -107, 49, 85, 78, 31, 67, -97, -69, 69]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-52, -106, 103, -34, -26, -24, -20, -34, -22, 3, 101, -2, 106, 52, 35, 119]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-52, -106, 103, -34, -26, -24, -20, -34, -22, 3, 101, -2, 106, 52, 35, 119]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[14, -66, -47, -95, -79, 86, -73, 54, -82, -8, -114, 88, 62, 111, 127, -103, -100, 44, -93, 94, -98, 126, -19, 67, 26, -41, -12, -55, 34, -8, -78, -8, -101, -71, -23, 126, -110, 69, -123, 67, 81, -80, -19, 34, 111, -78, 34, -116, -11, 32, 32, -75, -95, -126, -96, 61, -14, -45, 24, -80, 99, -91, 40, -80, 81, -40, -101, -78, -30, 58, -4, -31, 15, -103, 12, -52, 48, 49, -86, -9, 12, -97, 103, 38, 24, -34, -109, 55, -111, 109, 17, 125, 45, -103, -6, -38, 111, -94, -17, -72, -101, -19, -50, -59, 104, 39, 2, -125, 118, -78, 35, 48, 15, 120, 78, -23, -68, 117, -10, -25, 59, -127, -30, 95, 3, 99, -109, -64, -115, 95, -43, -102, -94, 30, 101, -29, -80, -112, 30, 75, 42, 120, -56, -57, -19, -88, -57, -25, 26, -41, 7, -120, -7, -111, 88, 40, 58, -66, -14, -94, 76, -67, 20, -18, 41, -108, -77, -107, 49, 85, 78, 31, 67, -97, -69, 69]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[76, -67, 20, -18, 41, -108, -77, -107, 49, 85, 78, 31, 67, -97, -69, 69]");
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray13 = new byte[] {};
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray13);
        javax.crypto.SecretKey secretKey15 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str16 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey15);
        javax.crypto.SecretKey secretKey19 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey19);
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey19);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey19);
        byte[] byteArray23 = new byte[] {};
        java.lang.String str24 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray23);
        javax.crypto.SecretKey secretKey25 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey25);
        javax.crypto.SecretKey secretKey29 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey29);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey29);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray23, secretKey29);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray13, secretKey29);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey29);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey29);
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey29);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("056D28120B0BC5166DBCA35F717E2EDB9B3FFEF3C83FEA305311638C98EBADE57E45C9B8219840128572566DF9D812D649F58A01F3FD09B4E1EF12B2DD28E3B1173409ED4539F696F74916A90CB2331DBE62C26825C187110052D1D38170082E1E17BE37AD39D03A469A19636B1187A0", secretKey29);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        byte[] byteArray49 = new byte[] {};
        java.lang.String str50 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray49);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str52 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey51);
        javax.crypto.SecretKey secretKey55 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray56 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey55);
        byte[] byteArray57 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey55);
        java.lang.String str58 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray49, secretKey55);
        java.lang.String str59 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey55);
        java.lang.String str60 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey64 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey64);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        byte[] byteArray67 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey64);
        java.lang.String str68 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey64);
        byte[] byteArray71 = new byte[] {};
        java.lang.String str72 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray71);
        javax.crypto.SecretKey secretKey73 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str74 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey73);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        java.lang.String str80 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey77);
        byte[] byteArray81 = new byte[] {};
        java.lang.String str82 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray81);
        javax.crypto.SecretKey secretKey83 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str84 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey83);
        javax.crypto.SecretKey secretKey87 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray88 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey87);
        byte[] byteArray89 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey87);
        java.lang.String str90 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray81, secretKey87);
        java.lang.String str91 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray71, secretKey87);
        byte[] byteArray92 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey87);
        byte[] byteArray93 = com.thealgorithms.ciphers.AESEncryption.encryptText("B2CAF8B0F60E463EA102369524D82DEE", secretKey87);
        java.lang.String str94 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey87);
        byte[] byteArray95 = com.thealgorithms.ciphers.AESEncryption.encryptText("54C0FC78BF063B0DFBED364C0B73AE108F0FA4E51AF3F15B6E596D1E717AFB9D68644AD695EA929AAA6E3EC0A9AC38C3DE5238463A76C51A84D701158ECF4E6D963092C1B1014DC11A2A28C1512593D3311C7D841BDA04972E123CB638A260D813E74D7F1DEC184CE34D9AB559D987A7", secretKey87);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str96 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray37, secretKey87);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-11, 98, 32, -89, -84, 116, 24, -25, -105, 47, -88, 83, -18, -66, 16, -45]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[114, 46, 118, 90, -8, 122, -119, -89, -53, 54, 65, -76, -74, 49, 1, 123]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(secretKey15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(secretKey19);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[42, -98, 46, -19, -103, 8, -100, -17, 24, 44, 68, -44, -46, -7, 117, -105]");
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-48, -18, -120, -9, -16, -26, -128, -30, -127, 40, 123, -32, -58, -61, 71, 43]");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(secretKey25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(secretKey29);
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[98, 14, 89, -100, -57, 52, 118, 41, -92, -83, -94, -84, -75, 57, 55, 101]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[5, 52, -101, -57, -16, -11, -17, 57, 69, 10, 81, 3, -80, -85, 48, -74]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-32, 21, -56, 97, -125, -83, 3, -128, -74, 3, -39, 95, 58, -7, 21, -42, -37, 110, -57, 83, 59, -13, -13, 112, -65, 41, -9, 99, -44, 103, 118, -29, 98, 14, 89, -100, -57, 52, 118, 41, -92, -83, -94, -84, -75, 57, 55, 101]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-14, -97, 1, 73, -67, 99, -16, 124, 49, -35, -61, -114, -49, 42, 120, -19, 110, 32, -43, -47, 72, 92, -26, -124, 54, -55, 52, 63, 82, -106, 23, 28, -112, 75, 121, -71, -97, -78, -15, -113, -31, -117, -87, 25, 122, -89, 84, -9, 104, -58, 105, 83, -94, 0, -116, 85, -15, 101, 83, -50, 38, 9, 122, 96, -111, 23, 57, -6, 103, -105, -102, -27, -114, 70, -59, -64, 111, -99, -77, -117, -21, -108, 117, 55, 18, -104, 1, -108, 74, -9, -35, 17, -75, -108, 58, -51, 98, 14, 89, -100, -57, 52, 118, 41, -92, -83, -94, -84, -75, 57, 55, 101]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[7, 121, 56, 70, 90, -122, 120, 12, -96, 56, -17, 114, 73, -55, -80, -93]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[71, 48, 14, 41, 23, -53, -66, 55, 17, 48, 91, 65, -74, -21, 6, 28]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(secretKey55);
        org.junit.Assert.assertNotNull(byteArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-114, -116, -45, -49, 79, -126, 52, -100, -52, 42, -127, 96, 32, -11, -49, -115]");
        org.junit.Assert.assertNotNull(byteArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[-15, 86, 69, -86, 113, 38, 76, -43, 80, -34, -41, 21, -6, -12, -123, -17]");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(secretKey64);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-102, -86, -44, -2, 20, -37, -5, -3, -16, 92, -97, -56, -70, -52, -126, 109]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[-19, -109, -80, -65, 10, 126, 9, -94, 104, 121, 56, 101, -26, -92, 126, 116]");
        org.junit.Assert.assertNotNull(byteArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-19, -109, -80, -65, 10, 126, 9, -94, 104, 121, 56, 101, -26, -92, 126, 116]");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(secretKey73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-58, -108, 104, -80, -76, 110, 76, -10, -33, -121, -27, -65, -71, -9, 108, -47]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[51, 55, 113, 13, -14, -91, 89, -9, 38, 5, -29, -70, 125, 86, -116, 28]");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(secretKey83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(secretKey87);
        org.junit.Assert.assertNotNull(byteArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray88), "[53, -115, -4, -17, -18, 112, 34, 33, -14, 35, -56, -103, 56, -93, -6, -9]");
        org.junit.Assert.assertNotNull(byteArray89);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-53, -119, -74, -27, 18, 31, -53, -64, 57, 104, 79, -14, 65, 74, 105, 32]");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(byteArray92);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray92), "[29, -110, 109, -126, 122, -98, 9, 74, -49, -78, 44, 85, -48, 116, 88, -79, -20, 106, -12, -127, -122, 126, -102, 51, -24, 96, -121, 113, -96, -32, -72, 11, 53, -115, -4, -17, -18, 112, 34, 33, -14, 35, -56, -103, 56, -93, -6, -9]");
        org.junit.Assert.assertNotNull(byteArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray93), "[72, 111, -82, 92, 93, 110, 46, -34, 127, 91, -28, -122, -98, -110, 23, 57, -110, -100, 123, 46, -50, 7, -10, 89, -96, -106, -103, -96, -24, -122, -107, 29, 53, -115, -4, -17, -18, 112, 34, 33, -14, 35, -56, -103, 56, -93, -6, -9]");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(byteArray95);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        byte[] byteArray5 = new byte[] {};
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray5);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey7);
        javax.crypto.SecretKey secretKey11 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey11);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey11);
        java.lang.String str14 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray5, secretKey11);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey11);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey11);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey11);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey11);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("67095D74C4E7E2D3BC82C543832E2F0C", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey27);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(secretKey11);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-123, 80, 43, -47, 28, -56, 112, 107, -89, -45, 3, 9, 44, -128, 44, 49]");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[5, 61, -71, -49, -9, 127, 48, 106, -42, -15, -116, 7, 76, 73, 79, 58]");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-42, -9, -82, -6, 64, -73, 26, 102, -17, -100, 95, 125, -54, -45, 42, -11, 4, 26, -67, -68, 76, -71, -98, 122, 69, 86, -49, 60, -97, 95, 62, -93, 21, -19, 25, -61, 89, 63, -33, -118, 120, 45, 8, 4, 0, 84, -108, 111, 44, -79, -52, -55, 17, -65, -3, -4, 53, -115, 50, 71, 29, 103, 83, 2, -12, -34, -122, 120, 36, -37, -1, -89, 53, 35, 124, 78, -53, 87, 125, 78, 96, -127, 30, -2, -44, -121, 62, -65, 61, -91, 98, -73, -40, -7, 84, -58, -123, 80, 43, -47, 28, -56, 112, 107, -89, -45, 3, 9, 44, -128, 44, 49]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-5, -8, 35, -9, 36, -21, -54, -28, -37, 11, -4, -33, -105, -40, -71, 3, -108, -63, -26, 117, 105, -76, -121, 25, 48, -116, -61, -67, -103, 89, -8, 62, -59, -84, 65, -58, 54, 67, 80, 64, -74, -90, -5, -95, -30, 58, 24, 76, -68, 124, 44, 25, 35, -68, -67, -45, 51, 60, -111, 48, -1, 74, -43, 46, -20, -79, 72, 29, 13, -99, 44, 59, -33, -46, 24, -49, -39, -117, -66, 32, 18, -28, -112, 112, 3, 42, -26, 4, -119, 17, 46, 60, 90, 73, 59, 109, -123, 80, 43, -47, 28, -56, 112, 107, -89, -45, 3, 9, 44, -128, 44, 49]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 12, 120, -21, 8, 39, 93, -27, 73, -46, -65, 51, -28, -97, -73, -112, 8, -101, -3, 85, 99, 116, -90, 74, -97, 126, -84, 124, -47, 12, 99, -64, 79, -61, 125, 63, -114, 96, 51, 17, -60, 76, -7, -23, -98, -127, -64, -16, 52, -42, 59, 47, 68, -72, 23, -74, 91, -44, 31, 60, 98, 120, 17, -99, 84, 101, -96, 16, 33, 9, 22, -14, -46, 74, 68, -74, 0, 34, 87, -34, 30, -42, -115, 60, 63, 107, -111, 17, -98, -112, 61, 47, -28, 92, 58, 65, -123, 80, 43, -47, 28, -56, 112, 107, -89, -45, 3, 9, 44, -128, 44, 49]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "000C78EB08275DE549D2BF33E49FB790089BFD556374A64A9F7EAC7CD10C63C04FC37D3F8E603311C44CF9E99E81C0F034D63B2F44B817B65BD41F3C6278119D5465A010210916F2D24A44B6002257DE1ED68D3C3F6B91119E903D2FE45C3A4185502BD11CC8706BA7D303092C802C31" + "'", str19, "000C78EB08275DE549D2BF33E49FB790089BFD556374A64A9F7EAC7CD10C63C04FC37D3F8E603311C44CF9E99E81C0F034D63B2F44B817B65BD41F3C6278119D5465A010210916F2D24A44B6002257DE1ED68D3C3F6B91119E903D2FE45C3A4185502BD11CC8706BA7D303092C802C31");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[84, 89, -1, -113, -26, -47, 58, -112, -66, 119, 119, -111, -37, -40, -62, -25]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-97, -118, -43, 71, 59, -15, -90, -47, -3, 40, 24, -81, -31, 87, -61, -98, 20, -45, 1, 32, -20, -14, -123, 2, -25, 21, 116, -21, 46, -72, 76, -11, -77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-69, -36, -59, 56, -128, 123, 7, 105, 66, -128, -70, -47, -106, -79, -82, -46, -33, -67, -1, -69, 100, 1, 119, -109, -116, 43, 77, -110, 94, -100, 87, -103, -77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-23, 117, -63, 8, 118, 87, -42, -63, 33, 48, -106, -46, 2, -26, 9, -87, -86, 53, -29, -60, -96, 39, 42, -51, 113, 48, 91, -120, -41, -108, -109, 19, -77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
        org.junit.Assert.assertNotNull(byteArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-69, -36, -59, 56, -128, 123, 7, 105, 66, -128, -70, -47, -106, -79, -82, -46, -33, -67, -1, -69, 100, 1, 119, -109, -116, 43, 77, -110, 94, -100, 87, -103, -77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[120, -112, 38, -93, -127, 72, 36, 119, -44, 84, 40, 87, 125, -113, -10, -35, 103, -75, -35, 123, 49, -45, -90, -70, -59, 47, 106, 124, -20, -12, 59, -99, 122, 56, 30, -67, 58, 88, -113, -62, 3, -24, -91, 72, -58, -118, -50, -119, 118, 13, 86, 22, 35, 105, 47, -62, -116, -11, 28, 117, 124, -106, -13, -66, -24, 104, 95, -69, -113, 55, 76, 73, -125, 115, 38, -122, -9, -125, 72, -67, -99, -33, -66, 27, -63, -52, 72, 96, -49, -69, 123, 65, -71, 126, 74, 20, -77, 3, 127, 116, 2, -111, -21, 37, 12, -98, -59, -45, -56, -88, -17, -70]");
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        byte[] byteArray8 = new byte[] {};
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey10 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey10);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey14);
        byte[] byteArray16 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey14);
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey14);
        byte[] byteArray18 = new byte[] {};
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray18);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey20);
        javax.crypto.SecretKey secretKey24 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray25 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey24);
        byte[] byteArray26 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey24);
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray18, secretKey24);
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey24);
        java.lang.String str29 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray8);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray34 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey33);
        byte[] byteArray35 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey33);
        java.lang.String str37 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray8, secretKey33);
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("367819364EA565B049CC3454A828CA207A1892FAF57FDBA521743B6C458D845399949DDEE5F226FB00F179D9F6D3BD4F", secretKey33);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey33);
        byte[] byteArray40 = com.thealgorithms.ciphers.AESEncryption.encryptText("A49FDF77E57DC2913DF500262485164A8405DF4639FF4E7F448AAB6FCA2849D8FBC69D26E71CA7CF4094870E4BE180C0", secretKey33);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey33);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("939F45C8FF41774463D90EF8BF4D970DF7EDC56D2F7E3245E1B056979BE6C77E7FCBA745DDCBA0EC741E04268AADCE82", secretKey33);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("A7AA7633B416425E062B93EBAFC3E8F101756308309966014899E4F66D0E6FC06B9672B995918912ED8FBEA822A3F72BCA34B52403C7ADE10911410F1AE4DBFB362294A3B5935663881A3BB078393FC11A1FEDC30261D485A164A23F55FBFA3B822465E8211CEB1082C9CD771F644DC53666DB2500D7D50F1D27D031854BA1565A032F2CBC9B24F2580DFAFF7863C62BC91B1332B1759C78379C527C7EEF4C514AA5EB71146E8FEFB8F49B0B2BD4780CAE70D4B246A57B164DE90C05EB9C9766C91A43B3A950F7609639BF23475DF36E5D0A36491A59C81036C86E2F66FA9A505937EA2B82A3A9BD4C4472155AA7749B", secretKey33);
        byte[] byteArray44 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey33);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("13E1C3A12E3725151210B93CF77EEBE0092B05FAA2B558F8199BA9EB1B821832C1881AB108F54628CC68B377506260206BA8E8F9F82F67AE98754B54F72C6A10072507D603E2574DDF5DCF516A932C067EFA35AEFBB148EB1A38A273B347C7354BCEA32E8C277478ECAA861C2981D893", secretKey33);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(secretKey10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-122, 27, 112, 62, -1, 106, -73, 38, -95, -80, -108, -33, 32, -75, 69, -1]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-42, 75, -28, -58, 88, 94, 47, 107, -22, 85, -80, -67, -8, -37, -109, 83]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(secretKey24);
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[57, 117, -64, 13, 105, -7, 61, -78, -76, -10, 67, -75, -70, 99, -119, 3]");
        org.junit.Assert.assertNotNull(byteArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[42, 67, -77, -25, -7, 43, 111, -36, -113, -124, 64, -40, -12, -127, 61, -81]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertNotNull(byteArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-38, -11, 37, -15, 14, 35, -27, -59, -77, 111, 79, -103, 117, 104, 60, -87]");
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-38, -11, 37, -15, 14, 35, -27, -59, -77, 111, 79, -103, 117, 104, 60, -87]");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[44, -60, 12, -80, -116, -123, 19, 126, -63, 29, -77, 120, 12, -45, -5, -64, 46, -12, -46, -123, -97, -17, -79, 109, -27, -94, 97, -116, -87, 54, -6, -121, 74, 31, 109, 57, 26, -106, 57, -5, -86, -83, 33, 112, 8, -7, -41, -16, -82, -65, -55, -125, 80, 124, -98, -54, 121, 45, -91, -37, 61, -65, -62, 102, 22, 117, 5, -12, 4, 83, 95, -65, -12, -2, -94, 118, 10, -76, -100, -109, -62, 98, 69, 49, -84, 94, -91, -25, -20, 116, 18, -122, -2, 36, 87, -119, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[35, 32, -43, -64, 27, -110, -23, 35, 52, -98, 21, 85, 123, -33, -115, 51, -75, -55, 98, -111, -12, -34, -66, -42, -75, -110, -14, -18, 65, 34, -100, 79, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[90, 28, 24, -76, -1, -108, 11, 57, 114, 53, 97, -7, 38, 101, -80, -125, -16, 82, 112, 66, 72, -88, 10, 65, -112, 91, -30, -40, -45, -126, 112, 28, 15, -5, -101, 63, 45, 11, 13, 74, -107, 19, 77, -97, -5, -39, 0, 7, 73, -94, -90, 51, 89, 96, 58, -104, 7, 94, 76, -123, 74, -106, 27, 7, 30, -38, -59, 54, -76, -24, 67, 0, 30, -107, 89, 42, 33, 20, 23, -7, 66, -61, -82, -49, 22, 70, 114, 12, -83, -125, -91, -79, 28, 60, 58, -67, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[78, -53, -67, 39, 50, -6, -41, -74, 22, -51, 51, -118, -20, -56, -70, -108, 64, -80, -111, 43, 122, 43, 99, 22, -99, 8, 104, 61, -2, 81, -67, -90, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[122, -3, -68, -79, 22, -36, 55, -8, -32, 15, 55, -89, -94, -75, -36, -91, -112, 94, 28, -75, -47, -38, 38, -106, -101, 14, -10, 31, 84, -92, 45, 59, 16, -103, 81, -64, 21, -14, 35, -69, -11, -74, 86, -106, 12, 29, 82, 0, -77, -36, -88, 109, -70, 91, -68, -39, 107, 126, -108, -66, -98, 43, -114, -106, 32, -43, 1, 104, -103, 86, -18, 7, -102, -39, 120, 38, 101, 21, -98, -37, -66, 124, 28, -106, -117, -35, 114, 83, -3, -46, -28, 72, -109, -100, 75, -121, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-128, -90, -81, -23, 105, -74, -63, 60, 101, -80, 89, -35, -68, -95, -29, 74, 8, 39, 10, 16, -16, 113, -92, 116, -32, -3, -96, -75, -38, 31, -8, -108, 98, -5, -92, 75, 29, 95, -41, 77, -83, 62, 53, 87, 126, 79, 75, 104]");
        org.junit.Assert.assertNotNull(byteArray45);
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey7);
        byte[] byteArray14 = new byte[] {};
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray14);
        javax.crypto.SecretKey secretKey20 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray21 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey20);
        byte[] byteArray22 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey20);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey20);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey20);
        javax.crypto.SecretKey secretKey26 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str27 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey26);
        byte[] byteArray29 = new byte[] {};
        java.lang.String str30 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray29);
        javax.crypto.SecretKey secretKey31 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey31);
        javax.crypto.SecretKey secretKey35 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray36 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey35);
        byte[] byteArray37 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey35);
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey35);
        byte[] byteArray39 = new byte[] {};
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray39);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str42 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey41);
        javax.crypto.SecretKey secretKey45 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray46 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey45);
        byte[] byteArray47 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey45);
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray39, secretKey45);
        java.lang.String str49 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray29, secretKey45);
        byte[] byteArray50 = com.thealgorithms.ciphers.AESEncryption.encryptText("F8978B6DB94C1D96D189E8487A199096", secretKey45);
        java.lang.String str51 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey45);
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("E5C008BE18D409F18E1FDFF7E0F828B0", secretKey45);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray11, secretKey45);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-21, 18, 0, 99, -6, 21, -21, -53, -9, 45, 22, -120, 106, 23, -93, -118]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-50, -106, 26, -13, 81, 18, 117, 52, 0, 73, -23, 83, -122, -61, -121, -42]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[18, 96, -90, 2, 115, -18, 30, 87, -123, 108, 124, 25, 41, 58, -16, -43, 125, -61, 91, -27, -33, 51, 112, -40, 8, -34, 62, 47, -10, -42, 20, -87, -21, 18, 0, 99, -6, 21, -21, -53, -9, 45, 22, -120, 106, 23, -93, -118]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey20);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[47, 39, 0, -50, 65, -25, 27, -88, -115, 64, 113, -72, 45, -5, -88, 22]");
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-10, -14, 58, -89, -27, 118, 60, -84, -16, 25, -80, -77, -50, 122, -106, -41]");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-10, -14, 58, -89, -27, 118, 60, -84, -16, 25, -80, -77, -50, 122, -106, -41]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-7, 65, -102, 60, -65, -41, 4, 2, -66, -32, -63, 93, 124, -16, -103, 64]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(secretKey26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(secretKey31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey35);
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-73, 95, 8, -60, -13, 22, 33, -102, -108, 5, 4, -89, 48, -100, -81, -1]");
        org.junit.Assert.assertNotNull(byteArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-80, 16, -116, 112, -28, 35, -14, -30, 94, -28, -35, -96, -67, 107, 26, -49]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(secretKey45);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-55, -97, -29, 60, -20, 84, -7, 10, -105, -103, -120, 30, 80, -48, -65, 104]");
        org.junit.Assert.assertNotNull(byteArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[49, 2, 105, 97, -8, 10, -65, -14, -105, 118, -109, -25, -39, 105, 123, -58]");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-35, 5, 102, 9, -82, 123, 20, -57, -88, -95, 94, 5, 20, -13, 102, -116, 45, 43, 37, 75, -52, 72, 23, 82, -18, 53, -120, 37, 67, 73, -37, -66, -55, -97, -29, 60, -20, 84, -7, 10, -105, -103, -120, 30, 80, -48, -65, 104]");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-51, 57, 28, -115, 3, -83, -66, -62, -32, -95, -67, -19, 48, -125, -16, -10, 15, 77, 13, -11, 47, 72, -92, 75, -82, -104, 103, 50, -100, 6, -89, 62, -55, -97, -29, 60, -20, 84, -7, 10, -105, -103, -120, 30, 80, -48, -65, 104]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-46, 79, -71, -73, -69, -26, -121, 4, 19, 94, -122, -19, -53, -85, 90, -74, -13, 1, -124, 76, -5, -114, 38, -7, 51, -63, -99, -116, -120, -127, 91, 121, -55, -97, -29, 60, -20, 84, -7, 10, -105, -103, -120, 30, 80, -48, -65, 104]");
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        byte[] byteArray0 = new byte[] {};
        java.lang.String str1 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey2 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey2);
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey6);
        byte[] byteArray10 = new byte[] {};
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray10);
        javax.crypto.SecretKey secretKey12 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey12);
        javax.crypto.SecretKey secretKey16 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray17 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey16);
        byte[] byteArray18 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey16);
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray10, secretKey16);
        java.lang.String str20 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey16);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray31 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey27);
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey27);
        java.lang.String str33 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray0);
        byte[] byteArray35 = new byte[] {};
        java.lang.String str36 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str38 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey37);
        javax.crypto.SecretKey secretKey41 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey41);
        byte[] byteArray43 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey41);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey41);
        byte[] byteArray45 = new byte[] {};
        java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray45);
        javax.crypto.SecretKey secretKey47 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str48 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey47);
        javax.crypto.SecretKey secretKey51 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray52 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey51);
        byte[] byteArray53 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey51);
        java.lang.String str54 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray45, secretKey51);
        java.lang.String str55 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey51);
        java.lang.String str56 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        java.lang.String str57 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray35);
        javax.crypto.SecretKey secretKey62 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray63 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey62);
        byte[] byteArray64 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey62);
        byte[] byteArray65 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey62);
        byte[] byteArray66 = com.thealgorithms.ciphers.AESEncryption.encryptText("0D3551530CB380B8A56954BF45ADD930", secretKey62);
        java.lang.String str67 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray35, secretKey62);
        byte[] byteArray68 = com.thealgorithms.ciphers.AESEncryption.encryptText("38E364CEEC5FA0C425FB6C7CBEF7549556550B227467013C105D857A98E42575B0DE47B0C2B2D1F9D97EEBB04C3DF3C0", secretKey62);
        java.lang.String str69 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey62);
        javax.crypto.SecretKey secretKey77 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray78 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray79 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        byte[] byteArray80 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey77);
        byte[] byteArray81 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey77);
        byte[] byteArray82 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey77);
        byte[] byteArray83 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey77);
        byte[] byteArray84 = com.thealgorithms.ciphers.AESEncryption.encryptText("AEE5FA144F30FAD4206F8CEA8141BCB3", secretKey77);
        java.lang.String str85 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray0, secretKey77);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(secretKey2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[63, -102, -5, 109, 63, 59, 83, -78, -97, -1, 18, 20, 62, -27, 98, -112]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-41, -107, 12, 54, -113, 45, 41, -80, -126, 72, 72, -115, -4, 29, 10, -112]");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(secretKey12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey16);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[4, -124, -90, -69, -100, 83, 57, -60, -117, 69, -37, 5, -66, -44, 15, 119]");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[103, 107, -10, 87, -43, -84, -85, -87, -44, 124, 18, -13, -75, -44, 113, 7]");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-76, 12, -33, -20, 73, -18, 41, 47, -124, -19, 94, 89, -6, 4, -89, -57]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[1, -46, 58, -17, 7, 88, -19, -26, -111, 95, 112, 113, -81, 27, -13, 27, 9, -68, -58, -86, 114, 56, 127, -29, 30, 117, -127, -100, 71, 115, 86, -55, -96, -125, -18, -93, 67, -82, 7, -49, 105, 75, 100, -112, 62, 5, -59, -95]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-96, -125, -18, -93, 67, -82, 7, -49, 105, 75, 100, -112, 62, 5, -59, -95]");
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-69, 120, -33, -82, 41, 77, 91, 52, -49, -109, 82, 77, -116, 111, -85, -124, -9, -34, 73, -49, -79, -121, 58, 76, -81, -72, -76, -83, -122, 18, 50, 87, -96, -125, -18, -93, 67, -82, 7, -49, 105, 75, 100, -112, 62, 5, -59, -95]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(secretKey41);
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-62, -15, -4, -43, 44, 51, -101, 59, 115, 19, -20, -69, -16, -47, 44, -27]");
        org.junit.Assert.assertNotNull(byteArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[85, -22, 36, -31, 57, 71, -113, -18, -59, -111, 104, -73, 104, -13, -66, 76]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(secretKey47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(secretKey51);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[-113, 60, -74, 91, -72, 52, 86, 114, 93, 113, -103, 114, 106, -47, 26, 116]");
        org.junit.Assert.assertNotNull(byteArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-24, -69, 6, -54, -2, 2, -25, 117, -105, 20, 20, 85, 48, -63, -107, -122]");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(secretKey62);
        org.junit.Assert.assertNotNull(byteArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[116, -56, -118, 125, 49, 10, -35, 55, -6, 124, -120, 15, -89, 115, -79, -75]");
        org.junit.Assert.assertNotNull(byteArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[94, 123, 116, -37, 28, -5, 37, 67, -14, 74, 14, -74, -77, 98, -93, -128, 118, -72, 83, 82, 11, -21, 17, 52, 56, -70, 113, -111, 37, -81, 93, -43, 105, 122, 87, -70, -102, -5, 25, -93, 96, -59, -2, 122, -74, -35, -62, 126]");
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[105, 122, 87, -70, -102, -5, 25, -93, 96, -59, -2, 122, -74, -35, -62, 126]");
        org.junit.Assert.assertNotNull(byteArray66);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[126, 10, -14, -110, 62, 27, 33, 26, -90, -77, -44, -103, 61, -48, -67, -11, -68, 33, -128, -37, 86, 120, 18, 54, 1, 16, -128, 8, 113, 110, 97, -83, 105, 122, 87, -70, -102, -5, 25, -93, 96, -59, -2, 122, -74, -35, -62, 126]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(byteArray68);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-120, 3, 23, -80, -118, -1, 51, 9, -29, -125, -77, 97, 112, -68, 30, -41, 40, -118, -57, -51, -41, -20, -38, -47, 7, -101, 71, 101, 92, 11, 41, -4, -121, 41, -21, -73, -65, 112, -106, 98, -40, 93, 21, 80, 74, 106, -75, 71, 7, -34, -89, -80, -112, -125, -97, -122, 117, 77, 45, 31, -126, 91, 83, -121, -109, -4, -24, 68, -113, -19, 64, -86, 87, 109, -53, -58, 99, 18, -31, 95, 83, 85, -109, 16, -118, -72, -40, 116, 114, -31, -59, -5, 39, -37, 20, 92, 105, 122, 87, -70, -102, -5, 25, -93, 96, -59, -2, 122, -74, -35, -62, 126]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(secretKey77);
        org.junit.Assert.assertNotNull(byteArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[-12, 85, -63, -117, -86, -58, -38, -106, -116, 21, 89, 60, 35, -95, 121, -11]");
        org.junit.Assert.assertNotNull(byteArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-42, -19, -42, 3, -116, -106, -108, -83, -17, -123, 72, 44, 127, -94, 85, -46]");
        org.junit.Assert.assertNotNull(byteArray80);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray80), "[-42, -19, -42, 3, -116, -106, -108, -83, -17, -123, 72, 44, 127, -94, 85, -46]");
        org.junit.Assert.assertNotNull(byteArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[79, -85, 106, -4, 54, 77, 122, 91, 46, 86, -61, -114, 2, -29, -41, 17]");
        org.junit.Assert.assertNotNull(byteArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[-35, -77, -27, -39, -122, -14, -36, 101, 41, 63, -1, -93, 70, 109, -115, -27, 6, 90, -22, -76, -123, -4, -120, 5, 8, -125, -81, 21, 80, 95, -45, -45, -12, 85, -63, -117, -86, -58, -38, -106, -116, 21, 89, 60, 35, -95, 121, -11]");
        org.junit.Assert.assertNotNull(byteArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[-12, 85, -63, -117, -86, -58, -38, -106, -116, 21, 89, 60, 35, -95, 121, -11]");
        org.junit.Assert.assertNotNull(byteArray84);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[23, 43, 82, 116, -118, 67, 66, -111, -17, -22, 8, 13, -42, 3, 124, 11, 115, -69, -97, 15, 64, 20, -30, -98, 3, -13, 68, 125, 18, -103, 119, 121, -12, 85, -63, -117, -86, -58, -38, -106, -116, 21, 89, 60, 35, -95, 121, -11]");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        byte[] byteArray1 = new byte[] {};
        java.lang.String str2 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray1);
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey3);
        javax.crypto.SecretKey secretKey7 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey7);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey7);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray1, secretKey7);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("DD88CD307028E597622CB2B8397F043C63D0C576FDDFED31A51AE7D0BD94F816D94367356ED35BEE3A319CDE8315C714", secretKey7);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray11);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey7);
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-127, 30, -118, 39, 86, -120, -20, 87, 82, 119, -93, -64, -106, -107, 29, -57]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-119, -77, -121, 69, -14, -69, -57, 64, -30, -100, -21, 83, -42, -49, 44, 100]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-59, 50, 78, -97, -107, -41, 60, 67, -81, 4, 63, 74, 16, 127, 36, 37, 16, 94, -102, -9, -95, 17, -68, -60, 95, 90, -21, -14, 62, 0, -77, -80, -110, 20, -121, -79, 26, -38, -27, 12, -111, 91, -102, 109, 1, -103, 98, -119, 41, -107, 14, -120, 4, -59, 64, 120, 34, -90, 15, 51, 91, -113, -119, 110, 56, 108, -103, -72, -45, -42, 59, -10, -8, 117, -119, 116, 101, 63, -31, 126, 63, 10, -51, 72, -88, 18, 113, -57, -76, 16, 70, 55, 19, 37, 26, -101, -127, 30, -118, 39, 86, -120, -20, 87, 82, 119, -93, -64, -106, -107, 29, -57]");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "C5324E9F95D73C43AF043F4A107F2425105E9AF7A111BCC45F5AEBF23E00B3B0921487B11ADAE50C915B9A6D0199628929950E8804C5407822A60F335B8F896E386C99B8D3D63BF6F8758974653FE17E3F0ACD48A81271C7B410463713251A9B811E8A275688EC575277A3C096951DC7" + "'", str12, "C5324E9F95D73C43AF043F4A107F2425105E9AF7A111BCC45F5AEBF23E00B3B0921487B11ADAE50C915B9A6D0199628929950E8804C5407822A60F335B8F896E386C99B8D3D63BF6F8758974653FE17E3F0ACD48A81271C7B410463713251A9B811E8A275688EC575277A3C096951DC7");
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey4 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str5 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey4);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str11 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray12 = new byte[] {};
        java.lang.String str13 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray12);
        javax.crypto.SecretKey secretKey14 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str15 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey14);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray19 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey18);
        byte[] byteArray20 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey18);
        java.lang.String str21 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray12, secretKey18);
        java.lang.String str22 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey18);
        java.lang.String str23 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey27 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray28 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey27);
        byte[] byteArray29 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        byte[] byteArray30 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey27);
        java.lang.String str31 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey27);
        byte[] byteArray32 = com.thealgorithms.ciphers.AESEncryption.encryptText("874C1ABC41E7DA15C71402804E822BF60FACA979F1C70ECE26BEC8B6AA195F89C6611C285685CF841D1D7170ED2B3509E2856D9929F99ABA8162B7DC51B00495A3B512A40652FBEDEBC184576404ED2FAA18F7A90781B2ABB6D615CB456DC8CE4EAE816191F5720A811002A58E8D14A4", secretKey27);
        byte[] byteArray33 = com.thealgorithms.ciphers.AESEncryption.encryptText("32AFC3AF352522613622535E2D41EDA06D0D19DAB2A5F4D8826E7703D4225A3BC575E88190213C1FE994C41689EAA77DEE404F0A720295B7B8B358450B601B0DE4E3364834A9D1B5F9BDDEDC357E20BB9DF24FF39908DFBD5D07B491A9410E3253F332E840C969C57850E90AC1899789D2308536BEB63A9514C726BC5163C3A3458DB2E8451F2729826750147FECFD141FADA79E96CE3572F8CBDC1EA19E9386F6204B726D5DE8490EB87D7F66998E8286FC06A1308D76EC73E1BB788E312FFF9702C49A446B79962DFEA8B369DD47D3E399C9A42A0978A1684E3E7D67B032C3C82EFB99617E2DD7DFB09669CB30CC06", secretKey27);
        java.lang.Class<?> wildcardClass34 = secretKey27.getClass();
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(secretKey4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[107, 38, 124, 94, 0, -72, 14, 90, 114, -75, -41, -125, -15, 15, -102, 126]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-13, 29, 96, 58, 104, -99, -97, -115, 61, -39, -50, 118, -80, -6, 80, -123]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(secretKey14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[127, -103, 117, -9, 116, -113, -114, 92, 104, 66, -81, 56, -72, 115, -124, 77]");
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-20, -77, -107, 9, 89, -114, 6, -121, -13, -108, -14, -102, -8, 16, 71, -54]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(secretKey27);
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[109, -102, 46, -20, 120, 50, -109, 107, 48, -58, 0, -99, -1, -45, -59, -59]");
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[51, -14, 0, -2, -113, 118, -87, 111, 124, 43, -37, -104, 53, -96, -41, -42]");
        org.junit.Assert.assertNotNull(byteArray30);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[51, -14, 0, -2, -113, 118, -87, 111, 124, 43, -37, -104, 53, -96, -41, -42]");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        javax.crypto.SecretKey secretKey3 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray4 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey3);
        byte[] byteArray5 = com.thealgorithms.ciphers.AESEncryption.encryptText("B325257ADDB5571317C0E4758FF05C01", secretKey3);
        byte[] byteArray6 = com.thealgorithms.ciphers.AESEncryption.encryptText("F93FD573E44C5EEFEE4BE8F0ED9A177F88AA88DCA97E8DF401B7E7236C351A7B4E9CA4DC6AF3BD2DD16B6DA5BF730BE2E653C2FA0039393E992EA6BC14BC905BB90407E56B32C8E521F3E912C5D8D2607EA52D46D2D5815D65250B4D8F07320A1528D6FC63507BBA30E55751734D9CBD", secretKey3);
        java.lang.String str7 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str8 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str9 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        java.lang.String str10 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray6);
        org.junit.Assert.assertNotNull(secretKey3);
        org.junit.Assert.assertNotNull(byteArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[21, -120, 43, 93, 110, -109, -94, -29, 28, 24, -60, 102, 82, 109, -30, -50]");
        org.junit.Assert.assertNotNull(byteArray5);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[-80, 99, -41, -78, 14, -114, -118, 127, 1, -39, -11, -49, 25, -7, -125, 8, 68, -33, -22, 38, -57, 81, -67, -114, 72, -76, -41, -126, 70, -55, -73, 99, 122, 42, -14, -119, 0, 53, 7, -51, -112, 41, 86, -51, -11, -111, -78, 29]");
        org.junit.Assert.assertNotNull(byteArray6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D" + "'", str7, "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D" + "'", str8, "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D" + "'", str9, "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D" + "'", str10, "5F725044156E140E68B68997FCFF9D542F32CF7386C37A7818DA19B9B69436B83E7ED0F978F5C2C2135FDC1BF6CEF163201D5CA0C4F433884BCC120D6C009E47ABB219AAD025E570B2BA2D2532E3EDDF069EDFCBE6601F5F8DF54D82AAD7C2E499C191725E032F8791CD7BCAC9C0EFA6C46F94C5AD93B9A4AD560286E6180A51502C3EFB9D24EF066C19959C3B3355C9A0A3EC26B930EB5A15F6AFC3D1F4EA2370A56BC346FA6127A7D5CE30E274149C21C88F6448938B90CF9C32577889300A31D26006054A522D163A989A0FA08AF8D1D06BA38538DBED002811049300CEE17A2AF289003507CD902956CDF591B21D");
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        byte[] byteArray2 = new byte[] {};
        java.lang.String str3 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray2);
        javax.crypto.SecretKey secretKey8 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey8);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey8);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray2, secretKey8);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("\ufffd\037\ufffd\ufffd\ufffdk\027\016\ufffd\ufffd\ufffd", secretKey8);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("C4F06E3828C0DBCD49045273C56C9A49FB3569148E12A1F85C09E5AA0E250F59730F0F974E3E4AB8791B454B8F286CFA", secretKey8);
        byte[] byteArray16 = new byte[] {};
        java.lang.String str17 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        javax.crypto.SecretKey secretKey18 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str19 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey18);
        javax.crypto.SecretKey secretKey22 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray23 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey22);
        byte[] byteArray24 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey22);
        java.lang.String str25 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey22);
        java.lang.String str26 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray16);
        byte[] byteArray27 = new byte[] {};
        java.lang.String str28 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray27);
        byte[] byteArray31 = new byte[] {};
        java.lang.String str32 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray31);
        javax.crypto.SecretKey secretKey33 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str34 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey33);
        javax.crypto.SecretKey secretKey37 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray38 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey37);
        byte[] byteArray39 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey37);
        java.lang.String str40 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray31, secretKey37);
        byte[] byteArray41 = com.thealgorithms.ciphers.AESEncryption.encryptText("878281F4F2CAC5FAF54A7F56FAD44BD7EB6E36428B6AE8AE05C3003657944DEF4FC1831B888AB14F9622755704E5DEEB", secretKey37);
        byte[] byteArray42 = com.thealgorithms.ciphers.AESEncryption.encryptText("4E086B414F516E318E8C2C5474CDCF112AEEE7FD5B313EB7B24DCF09009BB5FF5C2D1F7B3E6D1A83B1D0D08495C520B7", secretKey37);
        java.lang.String str43 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray27, secretKey37);
        java.lang.String str44 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray16, secretKey37);
        byte[] byteArray45 = com.thealgorithms.ciphers.AESEncryption.encryptText("0FC9098F338D8832EF85F275586A5724A69E95445F24AE5DF37C5AD9A640C459213687E7450C277086EF89F8F50E79AFFDBBF2653165056EA962A34E87CCA032D189314B8674093722E939FC86926F004B4B95C8A0CB0A167D96B6BE5AFDABF9EB4E6BAE5D3D9E874095F3FB04EF4B2C", secretKey37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray14, secretKey37);
            org.junit.Assert.fail("Expected exception of type javax.crypto.BadPaddingException; message: Given final block not properly padded. Such issues can arise if a bad key is used during decryption.");
        } catch (javax.crypto.BadPaddingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey8);
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[40, -99, 47, 106, -90, -109, 117, 81, -43, -61, 98, 91, -99, 61, -125, 6]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-10, -64, -123, 96, -75, -111, 68, -29, -4, 108, -121, -34, -74, -19, -122, -13]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-10, -64, -123, 96, -75, -111, 68, -29, -4, 108, -121, -34, -74, -19, -122, -13]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[67, -113, -87, -51, -43, -41, 88, 55, -26, -20, -18, 24, 80, 4, -72, 5, -39, -94, 5, 97, -71, -126, 101, 54, -127, -49, 14, 31, -76, 40, -38, -76]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-17, -111, 55, 13, -113, -113, 105, -91, -53, 81, 99, -12, 12, 41, -68, -51, -93, 16, -10, -41, 31, -47, -86, -62, 59, -1, 68, 91, -45, -54, 51, -15, -22, 65, -22, -103, -62, -77, 2, 120, 101, 69, 65, 117, -102, 47, 83, -24, -92, 37, 99, 127, -115, 35, -30, 121, -44, -81, -22, 18, 10, 12, 24, 59, 35, 7, 94, -28, -1, -37, -64, 106, 126, -102, -46, -95, -26, -37, 53, 95, 78, 29, 45, -81, -70, -26, 12, 65, -84, -78, 75, 83, 58, -123, -117, -5, 40, -99, 47, 106, -90, -109, 117, 81, -43, -61, 98, 91, -99, 61, -125, 6]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(secretKey18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(secretKey22);
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-95, -120, 62, -86, -123, -43, 42, 106, 19, 23, 61, -85, -94, 6, -44, 62]");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-84, -111, 94, 36, -65, 1, -44, -44, -37, 110, 102, 85, 25, 12, -26, 11]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(secretKey33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(secretKey37);
        org.junit.Assert.assertNotNull(byteArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-81, 4, -124, 58, -20, -19, -57, -76, -102, -109, -27, 111, -28, -86, -113, 14]");
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[28, 114, -3, -83, 66, 118, 11, -15, -16, 57, -127, -86, -97, -96, 94, -110]");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-102, -18, 51, -125, -109, 97, 25, -106, -102, -46, 43, -83, 25, 39, -36, 83, 5, -125, -67, 95, -13, 86, -107, 102, 101, -60, -29, 31, 51, 17, 118, -19, 27, 98, 39, -87, 81, -86, 82, 14, 49, 30, -14, 79, -39, 12, -44, -111, 123, 26, -109, -46, 19, 32, -32, 18, -12, 90, 98, -80, -75, 32, 89, -70, -10, -31, -25, 15, 75, -23, 84, 125, -79, -62, 25, 28, -29, -123, 35, -31, 10, 28, 115, -95, -8, 3, 62, 100, 10, -77, 87, -124, 25, -95, -36, 113, -81, 4, -124, 58, -20, -19, -57, -76, -102, -109, -27, 111, -28, -86, -113, 14]");
        org.junit.Assert.assertNotNull(byteArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-103, -29, 91, 56, 79, -60, 30, 45, -34, -64, 101, -46, 7, -88, -43, 74, 97, 28, 15, -54, 3, 91, 11, 13, 106, -38, -50, 42, 93, 67, 13, 63, -28, -20, -53, 82, -85, -34, -49, 16, -11, 51, 125, -123, 74, -53, -60, -14, 69, -8, 77, -18, -105, -32, 41, 95, -67, 104, 124, 58, 6, 53, -49, 49, -110, -100, -71, -84, -35, 102, 21, 101, -79, -68, 100, -1, -75, -64, 10, 34, 60, 6, 5, -72, 52, -58, -60, -40, 76, -1, 72, 99, 126, -59, 93, 15, -81, 4, -124, 58, -20, -19, -57, -76, -102, -109, -27, 111, -28, -86, -113, 14]");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(byteArray45);
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        javax.crypto.SecretKey secretKey6 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray7 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey6);
        byte[] byteArray8 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray9 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey6);
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("0101FF", secretKey6);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        byte[] byteArray12 = com.thealgorithms.ciphers.AESEncryption.encryptText("152117DAACDAF8BFC1C2DD7CD2BB7638", secretKey6);
        java.lang.Class<?> wildcardClass13 = byteArray12.getClass();
        org.junit.Assert.assertNotNull(secretKey6);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[14, 126, 57, -14, -12, 95, -126, -81, -78, 44, 88, -8, -94, 81, -80, 84]");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[100, -124, -102, 94, 38, -82, 36, 5, 7, 27, -46, -103, -101, -106, -32, -100]");
        org.junit.Assert.assertNotNull(byteArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, -124, -102, 94, 38, -82, 36, 5, 7, 27, -46, -103, -101, -106, -32, -100]");
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[97, -118, 45, -15, 103, -23, -44, 89, 72, -13, -105, -30, 87, 10, -101, -33]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-18, 37, 16, 71, -64, -117, 65, 22, -42, -21, -104, 48, -99, -31, 99, -16, 4, -70, 109, 89, -113, -115, 18, 24, 33, -17, -67, -90, -23, 81, 44, 112, 14, 126, 57, -14, -12, 95, -126, -81, -78, 44, 88, -8, -94, 81, -80, 84]");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-18, 37, 16, 71, -64, -117, 65, 22, -42, -21, -104, 48, -99, -31, 99, -16, 4, -70, 109, 89, -113, -115, 18, 24, 33, -17, -67, -90, -23, 81, 44, 112, 14, 126, 57, -14, -12, 95, -126, -81, -78, 44, 88, -8, -94, 81, -80, 84]");
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        byte[] byteArray3 = new byte[] {};
        java.lang.String str4 = com.thealgorithms.ciphers.AESEncryption.bytesToHex(byteArray3);
        javax.crypto.SecretKey secretKey5 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        java.lang.String str6 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey5);
        javax.crypto.SecretKey secretKey9 = com.thealgorithms.ciphers.AESEncryption.getSecretEncryptionKey();
        byte[] byteArray10 = com.thealgorithms.ciphers.AESEncryption.encryptText("", secretKey9);
        byte[] byteArray11 = com.thealgorithms.ciphers.AESEncryption.encryptText("hi!", secretKey9);
        java.lang.String str12 = com.thealgorithms.ciphers.AESEncryption.decryptText(byteArray3, secretKey9);
        byte[] byteArray13 = com.thealgorithms.ciphers.AESEncryption.encryptText("498D03E786F118C8F5FB6987881F808EBC05EBFD5AAAB7E7DA66904BE55A5BECD62D9F370A9FB4920270BF98EFBF71D6", secretKey9);
        byte[] byteArray14 = com.thealgorithms.ciphers.AESEncryption.encryptText("73ECAADDCE133D98557DD6C3A8AA9D65", secretKey9);
        byte[] byteArray15 = com.thealgorithms.ciphers.AESEncryption.encryptText("1F71210B7E2A15D14FC479D177EDC91BACE1B490C25A022F3EDCB69AB0A719D274C8DFB92A67A7A3BFB6D9B33A61940A", secretKey9);
        java.lang.Class<?> wildcardClass16 = secretKey9.getClass();
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(secretKey5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(secretKey9);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[59, 69, -6, 11, 35, -25, -15, 95, -60, -124, 17, 93, -91, -74, 42, -123]");
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-105, 43, 126, -7, 22, -22, 63, -46, 91, 37, -42, 27, -48, 120, -71, -87]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-53, -66, 81, 107, -104, -103, 69, 41, -51, 56, 25, -61, -51, -23, -53, -102, 36, -124, 122, -27, -30, -83, 85, 25, 30, 115, -75, 104, 115, 120, -126, 69, -103, 125, -83, 24, -27, -47, 110, 112, 40, 34, 114, -120, -25, 98, -67, -118, -47, 89, -38, 125, 75, 91, 103, -80, -70, -15, 109, 48, 43, -24, 4, -84, 105, -102, 113, -5, 16, -116, -79, 5, 110, -109, 53, -44, -11, -123, 40, 25, -25, 39, 67, -21, -61, -96, 88, 103, -67, -16, -121, 41, -41, 75, -113, -60, 59, 69, -6, 11, 35, -25, -15, 95, -60, -124, 17, 93, -91, -74, 42, -123]");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-95, -40, 60, -23, -128, 47, 98, 74, -110, -15, 50, 33, 5, 30, 56, -99, -3, -125, 33, 77, -37, 124, 110, 118, -60, -19, -89, -6, -43, 90, 124, 83, 59, 69, -6, 11, 35, -25, -15, 95, -60, -124, 17, 93, -91, -74, 42, -123]");
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-68, -98, -50, 59, 63, -105, -30, 77, 79, -110, 104, 125, -121, 12, 69, -126, -21, -81, -84, 123, -54, 45, 110, -4, -101, -41, -21, 77, -6, -48, -67, 75, -29, -113, 63, -2, 13, -88, 35, -104, 97, 108, 88, -28, 56, 85, -101, 45, 69, 115, 88, 4, -85, 72, 105, 89, -63, 13, 56, -4, 55, 104, 39, 4, 70, 122, 72, -27, -76, 119, -26, -117, -123, -24, -99, -9, 92, -23, 100, -63, -62, 116, -99, 77, 54, -8, -31, 59, 45, -12, -17, 50, -59, -17, -27, -61, 59, 69, -6, 11, 35, -25, -15, 95, -60, -124, 17, 93, -91, -74, 42, -123]");
        org.junit.Assert.assertNotNull(wildcardClass16);
    }
}

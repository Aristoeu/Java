package Permutation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass11 = constantDescArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = collectionArray1.getClass();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { wildcardClass4, wildcardClass9, wildcardClass14 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.util.List<java.lang.reflect.Type[]> typeArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.lang.Class<?> wildcardClass18 = typeArrayList17.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(typeArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.Object[]> objArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass90 = wildcardClassOfFieldArray85.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(objArrayList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArrayList33.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassOfFieldArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray3 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray5 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[][] typeArray6 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray7 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray10 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray11 = new java.lang.reflect.Type[][][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][] typeArray12 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray15 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray16 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray17 = new java.lang.reflect.Type[][][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray19 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray20 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][] typeArray24 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray25 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray28 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray29 = new java.lang.reflect.Type[][][] { typeArray24, typeArray25, typeArray26, typeArray27, typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray32 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray33 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray35 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31, typeArray32, typeArray33, typeArray34 };
        java.lang.reflect.Type[][][][] typeArray36 = new java.lang.reflect.Type[][][][] { typeArray5, typeArray11, typeArray17, typeArray23, typeArray29, typeArray35 };
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.lang.Class<?> wildcardClass40 = typeArrayList39.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArrayList37);
        org.junit.Assert.assertNotNull(typeArrayList38);
        org.junit.Assert.assertNotNull(typeArrayList39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][]) listArray10;
        java.util.List[][][][] listArray13 = new java.util.List[4][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass25 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(objArrayList17);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = genericDeclarationArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayIterableArrayList59.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(constantDescArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass15 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(charSequenceArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArrayList1.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass7 = constantDescArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass31 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.lang.Class<?> wildcardClass15 = strArray13.getClass();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.io.Serializable[]> serializableArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray18);
        java.lang.Class<?> wildcardClass21 = strArray18.getClass();
        java.util.List[][][] listArray23 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray24 = (java.util.List<java.lang.String[]>[][][]) listArray23;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray24);
        java.lang.Class<?> wildcardClass26 = strArrayListArray24.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[4];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClass12;
        wildcardClassOfFieldArray29[1] = wildcardClass15;
        wildcardClassOfFieldArray29[2] = wildcardClass21;
        wildcardClassOfFieldArray29[3] = wildcardClass26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray29);
        java.lang.Class<?> wildcardClass39 = wildcardClassOfFieldArrayList38.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(serializableArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(listArray23);
        org.junit.Assert.assertNotNull(strArrayListArray24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray85);
        java.util.List<java.io.Serializable[]> serializableArrayList90 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass91 = wildcardClassOfFieldArray85.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList89);
        org.junit.Assert.assertNotNull(serializableArrayList90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass19 = wildcardClassArrayList18.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = genericDeclarationArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass34 = strArrayList33.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.lang.String[][][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][]) listArray10;
        java.util.List[][][][] listArray13 = new java.util.List[4][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass25 = strArrayListArrayList24.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass69 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = constantDescArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass34 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList96 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass97 = collectionArrayList96.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(collectionArrayList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArrayList5.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.lang.String[][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] { strArray15, strArray16, strArray17, strArray18, strArray19, strArray20 };
        java.lang.String[][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray21, strArray28 };
        java.lang.String[][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][] { strArray30, strArray31, strArray32, strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][] { strArray37, strArray38, strArray39, strArray40, strArray41, strArray42 };
        java.lang.String[][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][] { strArray36, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][] { strArray14, strArray29, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.lang.Class<?> wildcardClass48 = strArrayList47.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(strArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass13 = constantDescArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(constantDescArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeDescriptorArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassOfFieldArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass5 = strArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayListArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayListArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArrayList25.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassOfFieldArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass26 = permutationArray20.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(permutationArrayList22);
        org.junit.Assert.assertNotNull(permutationArrayList23);
        org.junit.Assert.assertNotNull(permutationArrayList24);
        org.junit.Assert.assertNotNull(permutationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClassOfFieldArray8;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray19;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray22 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray23 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray22;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray20;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray23;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray37 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray38 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray37;
        wildcardClassOfFieldArray38[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray38[1] = wildcardClassOfFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray44 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray45 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray44;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClassOfFieldArray45;
        wildcardClassOfFieldArray51[1] = wildcardClassOfFieldArray48;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray57 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray58 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray57;
        wildcardClassOfFieldArray58[0] = wildcardClassOfFieldArray51;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray62 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray63 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray62;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray65 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray66 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray65;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClassOfFieldArray63;
        wildcardClassOfFieldArray69[1] = wildcardClassOfFieldArray66;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray75 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray76 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray75;
        wildcardClassOfFieldArray76[0] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray80 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray81 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray80;
        wildcardClassOfFieldArray81[0] = wildcardClassOfFieldArray58;
        wildcardClassOfFieldArray81[1] = wildcardClassOfFieldArray76;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray87 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray88 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray87;
        wildcardClassOfFieldArray88[0] = wildcardClassOfFieldArray38;
        wildcardClassOfFieldArray88[1] = wildcardClassOfFieldArray81;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray94 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray95 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray94;
        wildcardClassOfFieldArray95[0] = wildcardClassOfFieldArray88;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray95);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList99 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray95);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(ofFieldArray22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray23);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(ofFieldArray37);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray38);
        org.junit.Assert.assertNotNull(ofFieldArray44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray45);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray57);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray58);
        org.junit.Assert.assertNotNull(ofFieldArray62);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray63);
        org.junit.Assert.assertNotNull(ofFieldArray65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray75);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray76);
        org.junit.Assert.assertNotNull(ofFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray81);
        org.junit.Assert.assertNotNull(ofFieldArray87);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray88);
        org.junit.Assert.assertNotNull(ofFieldArray94);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray95);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList98);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList99);
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(charSequenceArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayIterableArrayList15.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] { constableArray0 };
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray3 = new java.lang.constant.Constable[][] { constableArray2 };
        java.lang.constant.Constable[] constableArray4 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] { constableArray4 };
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.lang.constant.Constable[][][] constableArray8 = new java.lang.constant.Constable[][][] { constableArray1, constableArray3, constableArray5, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass10 = constableArrayList9.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass17 = strArrayList16.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass67 = wildcardClassArrayList66.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClassOfFieldArray8;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray19;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray22 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray23 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray22;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray20;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray23;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray37 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray38 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray37;
        wildcardClassOfFieldArray38[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray38[1] = wildcardClassOfFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray44 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray45 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray44;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClassOfFieldArray45;
        wildcardClassOfFieldArray51[1] = wildcardClassOfFieldArray48;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray57 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray58 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray57;
        wildcardClassOfFieldArray58[0] = wildcardClassOfFieldArray51;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray62 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray63 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray62;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray65 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray66 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray65;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClassOfFieldArray63;
        wildcardClassOfFieldArray69[1] = wildcardClassOfFieldArray66;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray75 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray76 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray75;
        wildcardClassOfFieldArray76[0] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray80 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray81 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray80;
        wildcardClassOfFieldArray81[0] = wildcardClassOfFieldArray58;
        wildcardClassOfFieldArray81[1] = wildcardClassOfFieldArray76;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray87 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray88 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray87;
        wildcardClassOfFieldArray88[0] = wildcardClassOfFieldArray38;
        wildcardClassOfFieldArray88[1] = wildcardClassOfFieldArray81;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray94 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray95 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray94;
        wildcardClassOfFieldArray95[0] = wildcardClassOfFieldArray88;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray95);
        java.lang.Class<?> wildcardClass99 = wildcardClassOfFieldArrayList98.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(ofFieldArray22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray23);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(ofFieldArray37);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray38);
        org.junit.Assert.assertNotNull(ofFieldArray44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray45);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray57);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray58);
        org.junit.Assert.assertNotNull(ofFieldArray62);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray63);
        org.junit.Assert.assertNotNull(ofFieldArray65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray75);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray76);
        org.junit.Assert.assertNotNull(ofFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray81);
        org.junit.Assert.assertNotNull(ofFieldArray87);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray88);
        org.junit.Assert.assertNotNull(ofFieldArray94);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray95);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassOfFieldArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = annotatedElementArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.lang.constant.Constable[][] constableArray0 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray2 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray3 = new java.lang.constant.Constable[][][] { constableArray0, constableArray1, constableArray2 };
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray6 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray7 = new java.lang.constant.Constable[][][] { constableArray4, constableArray5, constableArray6 };
        java.lang.constant.Constable[][][][] constableArray8 = new java.lang.constant.Constable[][][][] { constableArray3, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass12 = constableArray8.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList86 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass87 = typeDescriptorArrayList86.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass34 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] { constableArray0 };
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray3 = new java.lang.constant.Constable[][] { constableArray2 };
        java.lang.constant.Constable[] constableArray4 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] { constableArray4 };
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.lang.constant.Constable[][][] constableArray8 = new java.lang.constant.Constable[][][] { constableArray1, constableArray3, constableArray5, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass11 = constableArray8.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray7, permutationArray8, permutationArray9, permutationArray10, permutationArray11, permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray14, permutationArray15, permutationArray16, permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray21, permutationArray22, permutationArray23, permutationArray24, permutationArray25, permutationArray26 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6, permutationArray13, permutationArray20, permutationArray27 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray28);
        java.lang.Class<?> wildcardClass30 = permutationArray28.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = collectionArrayList60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArrayList34);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass65 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArrayList59.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass5 = strArray3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass34 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass8 = objArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray0);
        java.lang.Class<?> wildcardClass3 = serializableArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(serializableArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass69 = wildcardClassOfFieldArrayList68.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass11 = strArrayIterableArrayList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = annotatedElementArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass8 = permutationArrayList7.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = genericDeclarationArrayList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(charSequenceArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass20 = strArrayList19.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass8 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.io.Serializable[][]> serializableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(serializableArrayList15);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(strArrayList56);
        org.junit.Assert.assertNotNull(strArrayList57);
        org.junit.Assert.assertNotNull(strArrayList58);
        org.junit.Assert.assertNotNull(strArrayList59);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.lang.Object[]> objArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray11);
        java.lang.Class<?> wildcardClass22 = strArrayListArray11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(objArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass21 = strArrayListArrayList20.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray26);
        java.lang.Class<?> wildcardClass29 = objArrayList28.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = constableArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayListArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayListArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.util.List<java.lang.String[][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList87 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass89 = wildcardClassOfFieldArrayList88.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList87);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass75 = strArrayListArrayList74.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] { constableArray0 };
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray3 = new java.lang.constant.Constable[][] { constableArray2 };
        java.lang.constant.Constable[] constableArray4 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] { constableArray4 };
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.lang.constant.Constable[][][] constableArray8 = new java.lang.constant.Constable[][][] { constableArray1, constableArray3, constableArray5, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass10 = constableArray8.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayListArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = serializableArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(collectionArrayList59);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList60);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass37 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass68 = wildcardClassArrayList67.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.lang.constant.Constable[][][][] constableArray0 = new java.lang.constant.Constable[][][][] {};
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(constableArray0);
        java.lang.Class<?> wildcardClass2 = constableArrayList1.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass9 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass5 = permutationArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayListArrayList15.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass13 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassOfFieldArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.lang.String[][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] { strArray15, strArray16, strArray17, strArray18, strArray19, strArray20 };
        java.lang.String[][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray21, strArray28 };
        java.lang.String[][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][] { strArray30, strArray31, strArray32, strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][] { strArray37, strArray38, strArray39, strArray40, strArray41, strArray42 };
        java.lang.String[][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][] { strArray36, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][] { strArray14, strArray29, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.lang.Class<?> wildcardClass47 = strArray45.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][][][][] classArray14 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][][][][]) classArray14;
        java.lang.Class[][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][] classArray20 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][][][][] classArray27 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][][][][]) classArray27;
        java.lang.Class[][][][][][][][] classArray30 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][][][][]) classArray30;
        java.lang.Class[][][][][][][][][] classArray33 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][][][][] classArray40 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][][][][]) classArray40;
        java.lang.Class[][][][][][][][] classArray43 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][][][][]) classArray43;
        java.lang.Class[][][][][][][][][] classArray46 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][][] classArray53 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][][]) classArray53;
        java.lang.Class[][][][][][][][] classArray56 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray57 = (java.lang.Class<?>[][][][][][][][]) classArray56;
        java.lang.Class[][][][][][][][][] classArray59 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray60 = (java.lang.Class<?>[][][][][][][][][]) classArray59;
        wildcardClassArray60[0] = wildcardClassArray54;
        wildcardClassArray60[1] = wildcardClassArray57;
        java.lang.Class[][][][][][][][] classArray66 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray67 = (java.lang.Class<?>[][][][][][][][]) classArray66;
        java.lang.Class[][][][][][][][] classArray69 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray70 = (java.lang.Class<?>[][][][][][][][]) classArray69;
        java.lang.Class[][][][][][][][][] classArray72 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray73 = (java.lang.Class<?>[][][][][][][][][]) classArray72;
        wildcardClassArray73[0] = wildcardClassArray67;
        wildcardClassArray73[1] = wildcardClassArray70;
        java.lang.Class[][][][][][][][][][] classArray79 = new java.lang.Class[6][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray80 = (java.lang.Class<?>[][][][][][][][][][]) classArray79;
        wildcardClassArray80[0] = wildcardClassArray8;
        wildcardClassArray80[1] = wildcardClassArray21;
        wildcardClassArray80[2] = wildcardClassArray34;
        wildcardClassArray80[3] = wildcardClassArray47;
        wildcardClassArray80[4] = wildcardClassArray60;
        wildcardClassArray80[5] = wildcardClassArray73;
        java.lang.Class[][][][][][][][][][][] classArray94 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray95 = (java.lang.Class<?>[][][][][][][][][][][]) classArray94;
        wildcardClassArray95[0] = wildcardClassArray80;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray95);
        java.lang.Class<?> wildcardClass99 = wildcardClassArrayList98.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClassArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClassArray60);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(wildcardClassArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClassArray70);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClassArray73);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(wildcardClassArray80);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(wildcardClassArray95);
        org.junit.Assert.assertNotNull(wildcardClassArrayList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList47 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass48 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        java.io.Serializable[] serializableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable[]> serializableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(serializableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        wildcardClassOfFieldArray11[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray11[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray11[2] = wildcardClassOfFieldArray8;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray11);
        java.lang.Class<?> wildcardClass19 = wildcardClassOfFieldArrayList18.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList64 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass66 = typeArrayList65.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(typeArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray3, permutationArray7 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.lang.Class<?> wildcardClass10 = permutationArrayList9.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass45 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        java.util.List<java.lang.String[]>[][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayCollectionArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList94 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass95 = collectionArrayList94.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(collectionArrayList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] { strArray0 };
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray2 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][] typeArray3 = new java.lang.reflect.Type[][][][] { typeArray2 };
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray6 = new java.lang.reflect.Type[][][] { typeArray4, typeArray5 };
        java.lang.reflect.Type[][][][] typeArray7 = new java.lang.reflect.Type[][][][] { typeArray6 };
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray10 = new java.lang.reflect.Type[][][] { typeArray8, typeArray9 };
        java.lang.reflect.Type[][][][] typeArray11 = new java.lang.reflect.Type[][][][] { typeArray10 };
        java.lang.reflect.Type[][][][][] typeArray12 = new java.lang.reflect.Type[][][][][] { typeArray3, typeArray7, typeArray11 };
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray15 = new java.lang.reflect.Type[][][] { typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][] typeArray16 = new java.lang.reflect.Type[][][][] { typeArray15 };
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray19 = new java.lang.reflect.Type[][][] { typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][] typeArray20 = new java.lang.reflect.Type[][][][] { typeArray19 };
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray21, typeArray22 };
        java.lang.reflect.Type[][][][] typeArray24 = new java.lang.reflect.Type[][][][] { typeArray23 };
        java.lang.reflect.Type[][][][][] typeArray25 = new java.lang.reflect.Type[][][][][] { typeArray16, typeArray20, typeArray24 };
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray28 = new java.lang.reflect.Type[][][] { typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][] typeArray29 = new java.lang.reflect.Type[][][][] { typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray32 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][] typeArray33 = new java.lang.reflect.Type[][][][] { typeArray32 };
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray35 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray36 = new java.lang.reflect.Type[][][] { typeArray34, typeArray35 };
        java.lang.reflect.Type[][][][] typeArray37 = new java.lang.reflect.Type[][][][] { typeArray36 };
        java.lang.reflect.Type[][][][][] typeArray38 = new java.lang.reflect.Type[][][][][] { typeArray29, typeArray33, typeArray37 };
        java.lang.reflect.Type[][] typeArray39 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray40 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray41 = new java.lang.reflect.Type[][][] { typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][] typeArray42 = new java.lang.reflect.Type[][][][] { typeArray41 };
        java.lang.reflect.Type[][] typeArray43 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray44 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray45 = new java.lang.reflect.Type[][][] { typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][] typeArray46 = new java.lang.reflect.Type[][][][] { typeArray45 };
        java.lang.reflect.Type[][] typeArray47 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray48 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray49 = new java.lang.reflect.Type[][][] { typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][] typeArray50 = new java.lang.reflect.Type[][][][] { typeArray49 };
        java.lang.reflect.Type[][][][][] typeArray51 = new java.lang.reflect.Type[][][][][] { typeArray42, typeArray46, typeArray50 };
        java.lang.reflect.Type[][] typeArray52 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray53 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray54 = new java.lang.reflect.Type[][][] { typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][] typeArray55 = new java.lang.reflect.Type[][][][] { typeArray54 };
        java.lang.reflect.Type[][] typeArray56 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray57 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray58 = new java.lang.reflect.Type[][][] { typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][] typeArray59 = new java.lang.reflect.Type[][][][] { typeArray58 };
        java.lang.reflect.Type[][] typeArray60 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray61 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray62 = new java.lang.reflect.Type[][][] { typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][] typeArray63 = new java.lang.reflect.Type[][][][] { typeArray62 };
        java.lang.reflect.Type[][][][][] typeArray64 = new java.lang.reflect.Type[][][][][] { typeArray55, typeArray59, typeArray63 };
        java.lang.reflect.Type[][] typeArray65 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray66 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray67 = new java.lang.reflect.Type[][][] { typeArray65, typeArray66 };
        java.lang.reflect.Type[][][][] typeArray68 = new java.lang.reflect.Type[][][][] { typeArray67 };
        java.lang.reflect.Type[][] typeArray69 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray70 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray71 = new java.lang.reflect.Type[][][] { typeArray69, typeArray70 };
        java.lang.reflect.Type[][][][] typeArray72 = new java.lang.reflect.Type[][][][] { typeArray71 };
        java.lang.reflect.Type[][] typeArray73 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray74 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray75 = new java.lang.reflect.Type[][][] { typeArray73, typeArray74 };
        java.lang.reflect.Type[][][][] typeArray76 = new java.lang.reflect.Type[][][][] { typeArray75 };
        java.lang.reflect.Type[][][][][] typeArray77 = new java.lang.reflect.Type[][][][][] { typeArray68, typeArray72, typeArray76 };
        java.lang.reflect.Type[][][][][][] typeArray78 = new java.lang.reflect.Type[][][][][][] { typeArray12, typeArray25, typeArray38, typeArray51, typeArray64, typeArray77 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(typeArray78);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList80 = com.thealgorithms.backtracking.Permutation.permutation(typeArray78);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList81 = com.thealgorithms.backtracking.Permutation.permutation(typeArray78);
        java.lang.Class<?> wildcardClass82 = typeArray78.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArrayList79);
        org.junit.Assert.assertNotNull(typeArrayList80);
        org.junit.Assert.assertNotNull(typeArrayList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(constableArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArray7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = serializableArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        java.lang.String[][][][][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass18 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray10, permutationArray11, permutationArray12, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray15, permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray20, permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray9, permutationArray14, permutationArray19, permutationArray24 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArrayList26);
        org.junit.Assert.assertNotNull(permutationArrayList27);
        org.junit.Assert.assertNotNull(permutationArrayList28);
        org.junit.Assert.assertNotNull(permutationArrayList29);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.lang.Class<?> wildcardClass53 = strArray48.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(constableArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeDescriptorArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass11 = strComparableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass10 = typeArrayList9.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass11 = permutationArrayList10.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayIterableArrayList9.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass23 = strArrayListArrayList22.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(strArrayListArrayList21);
        org.junit.Assert.assertNotNull(strArrayListArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.lang.Class<?> wildcardClass16 = genericDeclarationArray14.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] { strArray3 };
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] { strArray8 };
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] { strArray13 };
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.lang.Class<?> wildcardClass22 = strArray20.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass12 = strArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.Object[]> objArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = objArrayList29.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(objArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray8;
        java.util.List[][][] listArray19 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        java.util.List[][][] listArray22 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray23 = (java.util.List<java.lang.String[]>[][][]) listArray22;
        java.util.List[][][][] listArray25 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray20;
        strArrayListArray26[1] = strArrayListArray23;
        java.util.List[][][][][] listArray32 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray33 = (java.util.List<java.lang.String[]>[][][][][]) listArray32;
        strArrayListArray33[0] = strArrayListArray26;
        java.util.List[][][] listArray37 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][][]) listArray37;
        java.util.List[][][] listArray40 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][]) listArray40;
        java.util.List[][][][] listArray43 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][]) listArray43;
        strArrayListArray44[0] = strArrayListArray38;
        strArrayListArray44[1] = strArrayListArray41;
        java.util.List[][][][][] listArray50 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray51 = (java.util.List<java.lang.String[]>[][][][][]) listArray50;
        strArrayListArray51[0] = strArrayListArray44;
        java.util.List[][][][][][] listArray55 = new java.util.List[3][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray56 = (java.util.List<java.lang.String[]>[][][][][][]) listArray55;
        strArrayListArray56[0] = strArrayListArray15;
        strArrayListArray56[1] = strArrayListArray33;
        strArrayListArray56[2] = strArrayListArray51;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.lang.Class<?> wildcardClass68 = strArrayListArray56.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray50);
        org.junit.Assert.assertNotNull(strArrayListArray51);
        org.junit.Assert.assertNotNull(listArray55);
        org.junit.Assert.assertNotNull(strArrayListArray56);
        org.junit.Assert.assertNotNull(strArrayListArrayList63);
        org.junit.Assert.assertNotNull(strArrayListArrayList64);
        org.junit.Assert.assertNotNull(strArrayListArrayList65);
        org.junit.Assert.assertNotNull(strArrayListArrayList66);
        org.junit.Assert.assertNotNull(strArrayListArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = typeDescriptorArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass15 = charSequenceArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(charSequenceArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        java.lang.String[] strArray15 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.lang.Class<?> wildcardClass17 = strArray15.getClass();
        java.lang.String[] strArray25 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArray25);
        java.lang.Class<?> wildcardClass27 = strArrayList26.getClass();
        java.lang.constant.Constable[] constableArray28 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass27 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass17;
        wildcardClassOfFieldArray33[1] = wildcardClass30;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray33);
        java.lang.Class<?> wildcardClass39 = wildcardClassOfFieldArrayList38.getClass();
        java.lang.String[] strArray42 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(strArray42);
        java.lang.Class<?> wildcardClass44 = strArrayList43.getClass();
        java.lang.String[] strArray50 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.String[] strArray57 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArray57);
        java.lang.String[] strArray64 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(strArray64);
        java.util.List[] listArray67 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray68 = (java.util.List<java.lang.String[]>[]) listArray67;
        strArrayListArray68[0] = strArrayList51;
        strArrayListArray68[1] = strArrayList58;
        strArrayListArray68[2] = strArrayList65;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList77 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass79 = strArrayListArrayList78.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray80 = new java.lang.reflect.GenericDeclaration[] { wildcardClass12, wildcardClass39, wildcardClass44, wildcardClass79 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList81 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray80);
        java.lang.Class<?> wildcardClass82 = genericDeclarationArrayList81.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArrayList58);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArrayList65);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(strArrayListArrayList76);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList77);
        org.junit.Assert.assertNotNull(strArrayListArrayList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(genericDeclarationArray80);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] { strArray0 };
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass37 = wildcardClassOfFieldArrayList36.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.lang.reflect.Type[][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][] { typeArray12, typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray3, typeArray7, typeArray11, typeArray15 };
        java.lang.reflect.Type[][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][] { typeArray17, typeArray18, typeArray19 };
        java.lang.reflect.Type[][][][][][][][] typeArray21 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray22 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray23 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][][][][] { typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][][][][] typeArray25 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray26 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray27 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray28 = new java.lang.reflect.Type[][][][][][][][][] { typeArray25, typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][][][][][] typeArray29 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray30 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray31 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray32 = new java.lang.reflect.Type[][][][][][][][][] { typeArray29, typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray33 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray20, typeArray24, typeArray28, typeArray32 };
        java.lang.reflect.Type[][][][][][][][] typeArray34 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray35 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray36 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray37 = new java.lang.reflect.Type[][][][][][][][][] { typeArray34, typeArray35, typeArray36 };
        java.lang.reflect.Type[][][][][][][][] typeArray38 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray39 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray40 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray41 = new java.lang.reflect.Type[][][][][][][][][] { typeArray38, typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][][][][][] typeArray42 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray43 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray44 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray45 = new java.lang.reflect.Type[][][][][][][][][] { typeArray42, typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][][][][][] typeArray46 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray47 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray48 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray49 = new java.lang.reflect.Type[][][][][][][][][] { typeArray46, typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray50 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray37, typeArray41, typeArray45, typeArray49 };
        java.lang.reflect.Type[][][][][][][][] typeArray51 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray52 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray53 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray54 = new java.lang.reflect.Type[][][][][][][][][] { typeArray51, typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][][][][][] typeArray55 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray56 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray57 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray58 = new java.lang.reflect.Type[][][][][][][][][] { typeArray55, typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][][][][][] typeArray59 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray60 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray61 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray62 = new java.lang.reflect.Type[][][][][][][][][] { typeArray59, typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][][][][][] typeArray63 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray64 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray65 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray66 = new java.lang.reflect.Type[][][][][][][][][] { typeArray63, typeArray64, typeArray65 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray67 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray54, typeArray58, typeArray62, typeArray66 };
        java.lang.reflect.Type[][][][][][][][][][][] typeArray68 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray16, typeArray33, typeArray50, typeArray67 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArrayList69.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass21 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] { strArray3 };
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] { strArray8 };
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] { strArray13 };
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(strArrayList24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(strArrayList26);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass8 = permutationArrayList7.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] { typeArray0 };
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] { typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[][]> serializableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArrayListArray14);
        java.lang.Class<?> wildcardClass28 = serializableArrayList27.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(serializableArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<java.io.Serializable[]> serializableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass56 = permutationArray50.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(serializableArrayList52);
        org.junit.Assert.assertNotNull(permutationArrayList53);
        org.junit.Assert.assertNotNull(permutationArrayList54);
        org.junit.Assert.assertNotNull(permutationArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray85);
        java.util.List<java.io.Serializable[]> serializableArrayList90 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass92 = wildcardClassOfFieldArrayList91.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList89);
        org.junit.Assert.assertNotNull(serializableArrayList90);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList96 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass97 = strArrayListArray86.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(collectionArrayList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass44 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass58 = strArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(strArrayList56);
        org.junit.Assert.assertNotNull(strArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray5, typeArray6, typeArray7, typeArray8 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray10, typeArray11, typeArray12, typeArray13 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray15, typeArray16, typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][][][][] { typeArray4, typeArray9, typeArray14, typeArray19 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray20, permutationArray24, permutationArray28, permutationArray32 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray34, permutationArray35, permutationArray36 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray38, permutationArray39, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray45 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray42, permutationArray43, permutationArray44 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray46 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray47 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray48 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray46, permutationArray47, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray37, permutationArray41, permutationArray45, permutationArray49 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray52 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray53 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray54 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray51, permutationArray52, permutationArray53 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray55 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray56 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray57 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray58 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray55, permutationArray56, permutationArray57 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray60 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray61 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray62 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray59, permutationArray60, permutationArray61 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray63 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray64 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray65 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray66 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray63, permutationArray64, permutationArray65 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray67 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray54, permutationArray58, permutationArray62, permutationArray66 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray68 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray16, permutationArray33, permutationArray50, permutationArray67 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray68);
        java.lang.Class<?> wildcardClass70 = permutationArray68.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray46);
        org.junit.Assert.assertNotNull(permutationArray47);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray52);
        org.junit.Assert.assertNotNull(permutationArray53);
        org.junit.Assert.assertNotNull(permutationArray54);
        org.junit.Assert.assertNotNull(permutationArray55);
        org.junit.Assert.assertNotNull(permutationArray56);
        org.junit.Assert.assertNotNull(permutationArray57);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray60);
        org.junit.Assert.assertNotNull(permutationArray61);
        org.junit.Assert.assertNotNull(permutationArray62);
        org.junit.Assert.assertNotNull(permutationArray63);
        org.junit.Assert.assertNotNull(permutationArray64);
        org.junit.Assert.assertNotNull(permutationArray65);
        org.junit.Assert.assertNotNull(permutationArray66);
        org.junit.Assert.assertNotNull(permutationArray67);
        org.junit.Assert.assertNotNull(permutationArray68);
        org.junit.Assert.assertNotNull(permutationArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassOfFieldArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray4, permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray11, permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray16, permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray15, permutationArray20 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray22, permutationArray23, permutationArray24, permutationArray25 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray27, permutationArray28, permutationArray29, permutationArray30 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray26, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray33, permutationArray34, permutationArray35, permutationArray36 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray38, permutationArray39, permutationArray40, permutationArray41 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray37, permutationArray42 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray45 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray46 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray47 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray48 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray44, permutationArray45, permutationArray46, permutationArray47 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray52 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray53 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray49, permutationArray50, permutationArray51, permutationArray52 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray54 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray48, permutationArray53 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray55 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10, permutationArray21, permutationArray32, permutationArray43, permutationArray54 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray55);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray55);
        java.lang.Class<?> wildcardClass58 = permutationArrayList57.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray46);
        org.junit.Assert.assertNotNull(permutationArray47);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray52);
        org.junit.Assert.assertNotNull(permutationArray53);
        org.junit.Assert.assertNotNull(permutationArray54);
        org.junit.Assert.assertNotNull(permutationArray55);
        org.junit.Assert.assertNotNull(permutationArrayList56);
        org.junit.Assert.assertNotNull(permutationArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.lang.Class<?> wildcardClass5 = permutationArray3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass20 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        java.util.List[][][][][] listArray12 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][] listArray17 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][]) listArray17;
        java.util.List[][][][][] listArray20 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][] listArray25 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        java.util.List[][][][][] listArray28 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][] listArray33 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][]) listArray33;
        java.util.List[][][][][] listArray36 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][] listArray41 = new java.util.List[5][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass57 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = constableArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(annotatedElementArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = collectionArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Iterable[] iterableArray7 = new java.lang.Iterable[1];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.lang.String[]>[] strArrayIterableArray8 = (java.lang.Iterable<java.lang.String[]>[]) iterableArray7;
        strArrayIterableArray8[0] = strArrayList5;
        java.lang.Iterable[][] iterableArray12 = new java.lang.Iterable[1][];
        @SuppressWarnings("unchecked")
        java.lang.Iterable<java.lang.String[]>[][] strArrayIterableArray13 = (java.lang.Iterable<java.lang.String[]>[][]) iterableArray12;
        strArrayIterableArray13[0] = strArrayIterableArray8;
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArrayIterableArray13);
        java.lang.Class<?> wildcardClass17 = strArrayIterableArrayList16.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(iterableArray7);
        org.junit.Assert.assertNotNull(strArrayIterableArray8);
        org.junit.Assert.assertNotNull(iterableArray12);
        org.junit.Assert.assertNotNull(strArrayIterableArray13);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass5 = strArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(constableArrayList17);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList6);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][] { typeArray0 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][] { typeArray2 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][] { typeArray4 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][][][][] { typeArray6 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][][][] { typeArray8 };
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray1, typeArray3, typeArray5, typeArray7, typeArray9 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(typeArray10);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(typeArray10);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray10);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.lang.Class<?> wildcardClass5 = typeArray1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = annotatedElementArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(typeArrayList33);
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = constableArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = annotatedElementArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList28);
        org.junit.Assert.assertNotNull(objArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray7, permutationArray8, permutationArray9, permutationArray10, permutationArray11, permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray6, permutationArray13 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray14);
        java.lang.Class<?> wildcardClass16 = permutationArrayList15.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass11 = collectionArrayList10.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(collectionArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[][] strArray30 = new java.lang.String[][] { strArray5, strArray11, strArray17, strArray23, strArray29 };
        java.util.List<java.lang.String[][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.util.List<java.lang.String[][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.lang.Class<?> wildcardClass33 = strArray30.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = typeDescriptorArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass32 = strArrayListArrayList31.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.lang.String[][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] { strArray15, strArray16, strArray17, strArray18, strArray19, strArray20 };
        java.lang.String[][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray21, strArray28 };
        java.lang.String[][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][] { strArray30, strArray31, strArray32, strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][] { strArray37, strArray38, strArray39, strArray40, strArray41, strArray42 };
        java.lang.String[][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][] { strArray36, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][] { strArray14, strArray29, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.lang.Class<?> wildcardClass49 = strArrayList48.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(strArrayList47);
        org.junit.Assert.assertNotNull(strArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[1][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        strArrayListArray10[0] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray10;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray15);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray15);
        java.lang.Class<?> wildcardClass20 = strArrayListArray15.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray6, permutationArray7, permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray12, permutationArray13, permutationArray14, permutationArray15, permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray18, permutationArray19, permutationArray20, permutationArray21, permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray24, permutationArray25, permutationArray26, permutationArray27, permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass34 = permutationArray30.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(permutationArrayList32);
        org.junit.Assert.assertNotNull(permutationArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = constableArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass36 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList64 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass66 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = genericDeclarationArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = annotatedElementArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass14 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.util.List<java.lang.String[][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass53 = strArrayList52.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(constableArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass5 = strArray3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = typeArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass35 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(strArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][][][][] classArray14 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][][][][]) classArray14;
        java.lang.Class[][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][] classArray20 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][][][][] classArray27 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][][][][]) classArray27;
        java.lang.Class[][][][][][][][] classArray30 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][][][][]) classArray30;
        java.lang.Class[][][][][][][][][] classArray33 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][][][][] classArray40 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][][][][]) classArray40;
        java.lang.Class[][][][][][][][] classArray43 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][][][][]) classArray43;
        java.lang.Class[][][][][][][][][] classArray46 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][][] classArray53 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][][]) classArray53;
        java.lang.Class[][][][][][][][] classArray56 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray57 = (java.lang.Class<?>[][][][][][][][]) classArray56;
        java.lang.Class[][][][][][][][][] classArray59 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray60 = (java.lang.Class<?>[][][][][][][][][]) classArray59;
        wildcardClassArray60[0] = wildcardClassArray54;
        wildcardClassArray60[1] = wildcardClassArray57;
        java.lang.Class[][][][][][][][] classArray66 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray67 = (java.lang.Class<?>[][][][][][][][]) classArray66;
        java.lang.Class[][][][][][][][] classArray69 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray70 = (java.lang.Class<?>[][][][][][][][]) classArray69;
        java.lang.Class[][][][][][][][][] classArray72 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray73 = (java.lang.Class<?>[][][][][][][][][]) classArray72;
        wildcardClassArray73[0] = wildcardClassArray67;
        wildcardClassArray73[1] = wildcardClassArray70;
        java.lang.Class[][][][][][][][][][] classArray79 = new java.lang.Class[6][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray80 = (java.lang.Class<?>[][][][][][][][][][]) classArray79;
        wildcardClassArray80[0] = wildcardClassArray8;
        wildcardClassArray80[1] = wildcardClassArray21;
        wildcardClassArray80[2] = wildcardClassArray34;
        wildcardClassArray80[3] = wildcardClassArray47;
        wildcardClassArray80[4] = wildcardClassArray60;
        wildcardClassArray80[5] = wildcardClassArray73;
        java.lang.Class[][][][][][][][][][][] classArray94 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray95 = (java.lang.Class<?>[][][][][][][][][][][]) classArray94;
        wildcardClassArray95[0] = wildcardClassArray80;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray95);
        java.lang.Class<?> wildcardClass99 = wildcardClassArray95.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClassArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClassArray60);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(wildcardClassArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClassArray70);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClassArray73);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(wildcardClassArray80);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(wildcardClassArray95);
        org.junit.Assert.assertNotNull(wildcardClassArrayList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArrayList25.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.lang.Class<?> wildcardClass17 = wildcardClassOfFieldArrayList16.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass22 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = typeArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass34 = constableArrayList33.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass64 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(strArrayListArrayList62);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.lang.Class<?> wildcardClass16 = wildcardClassOfFieldArray8.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray10, permutationArray11, permutationArray12, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] { permutationArray4, permutationArray9, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = typeArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass17 = strArrayList16.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass36 = wildcardClassOfFieldArrayList35.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass28 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass23 = typeArrayList22.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(typeArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass21 = wildcardClassOfFieldArrayList20.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArrayList8.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[][]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray0);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.lang.Class<?> wildcardClass18 = wildcardClassOfFieldArray8.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.io.Serializable[]> serializableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass32 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(serializableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray8);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray8);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray8);
        java.util.List<java.lang.constant.Constable[]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray8);
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray8);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList5;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass31 = strArrayListArrayList30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray2, permutationArray5, permutationArray8, permutationArray11, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass19 = permutationArray15.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(permutationArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass18 = wildcardClassOfFieldArrayList17.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = collectionArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        java.util.List[][][][][] listArray12 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][] listArray17 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][]) listArray17;
        java.util.List[][][][][] listArray20 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][] listArray25 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        java.util.List[][][][][] listArray28 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][] listArray33 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][]) listArray33;
        java.util.List[][][][][] listArray36 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][] listArray41 = new java.util.List[5][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass54 = strArrayListArrayList53.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass32 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        com.thealgorithms.backtracking.Permutation[][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray20 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray21 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray25 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray26 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray30 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray31 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray32 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray33 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray34 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] { permutationArray36 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray37);
        java.lang.Class<?> wildcardClass39 = permutationArrayList38.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.lang.constant.Constable[][][][] constableArray0 = new java.lang.constant.Constable[][][][] {};
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(constableArray0);
        java.lang.Class<?> wildcardClass2 = constableArray0.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayIterableArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass11 = constableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.lang.Class<?> wildcardClass35 = wildcardClassArrayList34.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass8 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = genericDeclarationArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray8;
        java.util.List[][][] listArray19 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        java.util.List[][][] listArray22 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray23 = (java.util.List<java.lang.String[]>[][][]) listArray22;
        java.util.List[][][][] listArray25 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray20;
        strArrayListArray26[1] = strArrayListArray23;
        java.util.List[][][][][] listArray32 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray33 = (java.util.List<java.lang.String[]>[][][][][]) listArray32;
        strArrayListArray33[0] = strArrayListArray26;
        java.util.List[][][] listArray37 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][][]) listArray37;
        java.util.List[][][] listArray40 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][]) listArray40;
        java.util.List[][][][] listArray43 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][]) listArray43;
        strArrayListArray44[0] = strArrayListArray38;
        strArrayListArray44[1] = strArrayListArray41;
        java.util.List[][][][][] listArray50 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray51 = (java.util.List<java.lang.String[]>[][][][][]) listArray50;
        strArrayListArray51[0] = strArrayListArray44;
        java.util.List[][][][][][] listArray55 = new java.util.List[3][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray56 = (java.util.List<java.lang.String[]>[][][][][][]) listArray55;
        strArrayListArray56[0] = strArrayListArray15;
        strArrayListArray56[1] = strArrayListArray33;
        strArrayListArray56[2] = strArrayListArray51;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.lang.Class<?> wildcardClass66 = strArrayListArrayList65.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray50);
        org.junit.Assert.assertNotNull(strArrayListArray51);
        org.junit.Assert.assertNotNull(listArray55);
        org.junit.Assert.assertNotNull(strArrayListArray56);
        org.junit.Assert.assertNotNull(strArrayListArrayList63);
        org.junit.Assert.assertNotNull(strArrayListArrayList64);
        org.junit.Assert.assertNotNull(strArrayListArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass8 = permutationArray1.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = genericDeclarationArrayList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass70 = typeArrayList69.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass14 = charSequenceArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(charSequenceArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass66 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass15 = strArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.thealgorithms.backtracking.Permutation[][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray20 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray21 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray25 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray26 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray30 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray31 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray32 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray33 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray34 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] { permutationArray36 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray37);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArrayList38);
        org.junit.Assert.assertNotNull(permutationArrayList39);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = constableArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass14 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass12 = strArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[3][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass23 = strArrayListArray11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(strArrayListArrayList21);
        org.junit.Assert.assertNotNull(strArrayListArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = serializableArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass20 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Object[]> objArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = objArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(objArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][] { strArray12, strArray13, strArray14, strArray15 };
        java.lang.String[][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray5, strArray11, strArray17 };
        java.lang.String[][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][][][] { strArray19, strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][][][][] { strArray23 };
        java.lang.String[][][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray25, strArray26, strArray27, strArray28 };
        java.lang.String[][][][][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][][][][] { strArray29 };
        java.lang.String[][][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][][][] { strArray31, strArray32, strArray33, strArray34 };
        java.lang.String[][][][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][][][] { strArray35 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray24, strArray30, strArray36 };
        java.lang.String[][][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][][][] { strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][][][] { strArray42 };
        java.lang.String[][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray46 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray47 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray48 = new java.lang.String[][][][][][][][][][][][][][] { strArray44, strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][][][][][][][] { strArray48 };
        java.lang.String[][][][][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray51 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray52 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray53 = new java.lang.String[][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][] strArray54 = new java.lang.String[][][][][][][][][][][][][][] { strArray50, strArray51, strArray52, strArray53 };
        java.lang.String[][][][][][][][][][][][][][][] strArray55 = new java.lang.String[][][][][][][][][][][][][][][] { strArray54 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray56 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray43, strArray49, strArray55 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray57 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray18, strArray37, strArray56 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArray57);
        java.lang.Class<?> wildcardClass59 = strArray57.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass10 = objArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass18 = strArrayListArrayList17.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[][]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(annotatedElementArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.io.Serializable[][]> serializableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArray28);
        java.lang.Class<?> wildcardClass32 = serializableArrayList31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(serializableArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayIterableArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass21 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = constableArrayList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = constableArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(constableArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList96 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList97 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.io.Serializable[][]> serializableArrayList98 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) strArrayListArray86);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList99 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray86);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(collectionArrayList96);
        org.junit.Assert.assertNotNull(collectionArrayList97);
        org.junit.Assert.assertNotNull(serializableArrayList98);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList99);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass31 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(serializableArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
        org.junit.Assert.assertNotNull(serializableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(serializableArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassOfFieldArrayList8.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray5, permutationArray6, permutationArray7, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray10, permutationArray11, permutationArray12, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray15, permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray20, permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray9, permutationArray14, permutationArray19, permutationArray24 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray25);
        java.lang.Class<?> wildcardClass27 = permutationArray25.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }
}


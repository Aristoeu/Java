package Permutation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] { strArray3 };
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] { strArray8 };
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] { strArray13 };
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.lang.Class<?> wildcardClass25 = strArray20.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(strArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray5);
        java.lang.Class<?> wildcardClass8 = constableArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass55 = strArrayList54.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass11 = charSequenceArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(charSequenceArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = collectionArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.reflect.Type[][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.lang.Class<?> wildcardClass6 = typeArray3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray1 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray2 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray3 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray5 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][] strArray7 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray8 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray9 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray10 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray11 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray12 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][] strArray14 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray15 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray16 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray17 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray18 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray20 = new java.lang.String[][][][][] { strArray14, strArray15, strArray16, strArray17, strArray18, strArray19 };
        java.lang.String[][][][] strArray21 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray22 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray23 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray25 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray26 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray27 = new java.lang.String[][][][][] { strArray21, strArray22, strArray23, strArray24, strArray25, strArray26 };
        java.lang.String[][][][] strArray28 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray29 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray30 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray31 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray32 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray33 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray34 = new java.lang.String[][][][][] { strArray28, strArray29, strArray30, strArray31, strArray32, strArray33 };
        java.lang.String[][][][][][] strArray35 = new java.lang.String[][][][][][] { strArray6, strArray13, strArray20, strArray27, strArray34 };
        java.lang.String[][][][] strArray36 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray37 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray38 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray40 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray41 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray42 = new java.lang.String[][][][][] { strArray36, strArray37, strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][] strArray43 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray44 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray46 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray47 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray48 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray49 = new java.lang.String[][][][][] { strArray43, strArray44, strArray45, strArray46, strArray47, strArray48 };
        java.lang.String[][][][] strArray50 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray51 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray52 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray53 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray54 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray55 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray56 = new java.lang.String[][][][][] { strArray50, strArray51, strArray52, strArray53, strArray54, strArray55 };
        java.lang.String[][][][] strArray57 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray58 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray59 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray60 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray61 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray62 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray63 = new java.lang.String[][][][][] { strArray57, strArray58, strArray59, strArray60, strArray61, strArray62 };
        java.lang.String[][][][] strArray64 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray65 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray67 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray68 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray69 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray70 = new java.lang.String[][][][][] { strArray64, strArray65, strArray66, strArray67, strArray68, strArray69 };
        java.lang.String[][][][][][] strArray71 = new java.lang.String[][][][][][] { strArray42, strArray49, strArray56, strArray63, strArray70 };
        java.lang.String[][][][][][][] strArray72 = new java.lang.String[][][][][][][] { strArray35, strArray71 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.util.List<java.lang.String[][][][][][][]> strArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.lang.Class<?> wildcardClass77 = strArrayList76.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArrayList73);
        org.junit.Assert.assertNotNull(strArrayList74);
        org.junit.Assert.assertNotNull(strArrayList75);
        org.junit.Assert.assertNotNull(strArrayList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass96 = strArrayListArray86.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = genericDeclarationArrayList24.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = strArrayListArrayList61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass50 = strArrayList49.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass7 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayCollectionArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = genericDeclarationArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass77 = strArrayListArray68.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(strArrayListArrayList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass84 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass35 = strArrayListArray30.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass64 = wildcardClassArrayList63.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(collectionArrayList59);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayIterableArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.io.Serializable[]> serializableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(serializableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass32 = strArrayList31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass58 = strArray50.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(strArrayList56);
        org.junit.Assert.assertNotNull(strArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass14 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = genericDeclarationArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = typeDescriptorArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = collectionArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArrayList35.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.lang.String[][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = typeDescriptorArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayCollectionArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(objArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass7 = collectionArray1.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList4);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList5);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = constableArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][] { typeArray3, typeArray7, typeArray11 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.lang.Class<?> wildcardClass15 = typeArray12.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(constableArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeDescriptorArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strComparableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.lang.String[][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] { strArray15, strArray16, strArray17, strArray18, strArray19, strArray20 };
        java.lang.String[][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray21, strArray28 };
        java.lang.String[][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][] { strArray30, strArray31, strArray32, strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][] { strArray37, strArray38, strArray39, strArray40, strArray41, strArray42 };
        java.lang.String[][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][] { strArray36, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][] { strArray14, strArray29, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.lang.Class<?> wildcardClass48 = strArray45.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(strArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList64 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass65 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(typeArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = annotatedElementArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass34 = strArrayList33.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayIterableArrayList9.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass27 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass77 = strArrayListArrayList76.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(strArrayListArrayList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = collectionArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.util.List<java.lang.String[][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass54 = strArray48.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(constableArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeDescriptorArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(objArrayList4);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayCollectionArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass67 = typeArrayList66.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray4 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray6, strArray7 };
        java.lang.String[][][][][][] strArray9 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray11 = new java.lang.String[][][][][][][] { strArray9, strArray10 };
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray13 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] { strArray12, strArray13 };
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray2, strArray5, strArray8, strArray11, strArray14 };
        java.util.List<java.lang.String[][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.lang.Class<?> wildcardClass19 = strArrayList18.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.lang.String[][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass15 = strArray12.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = typeDescriptorArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = typeDescriptorArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.Iterable<java.lang.String[]>[][][] strArrayIterableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayIterableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass25 = permutationArrayList24.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(permutationArrayList22);
        org.junit.Assert.assertNotNull(permutationArrayList23);
        org.junit.Assert.assertNotNull(permutationArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayCollectionArrayList36.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass10 = charSequenceArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass76 = strArrayListArrayList75.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass32 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass84 = wildcardClassOfFieldArrayList83.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass48 = permutationArrayList47.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(permutationArrayList44);
        org.junit.Assert.assertNotNull(permutationArrayList45);
        org.junit.Assert.assertNotNull(permutationArrayList46);
        org.junit.Assert.assertNotNull(permutationArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass11 = charSequenceArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(charSequenceArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass29 = strArrayList28.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayCollectionArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList32);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassOfFieldArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = genericDeclarationArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassOfFieldArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.constant.Constable[]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = collectionArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass34 = strArrayListArrayList33.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = typeDescriptorArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassArrayList31);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = typeArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassOfFieldArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(serializableArrayList29);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = genericDeclarationArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassOfFieldArray5.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = ofFieldArray7;
        wildcardClassOfFieldArray14[3] = ofFieldArray10;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArrayList23.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = collectionArrayList61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray11 = new java.lang.String[][] { strArray10 };
        java.lang.String[][][] strArray12 = new java.lang.String[][][] { strArray2, strArray5, strArray8, strArray11 };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray14 };
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray18 = new java.lang.String[][] { strArray17 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray21 = new java.lang.String[][] { strArray20 };
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray24 = new java.lang.String[][] { strArray23 };
        java.lang.String[][][] strArray25 = new java.lang.String[][][] { strArray15, strArray18, strArray21, strArray24 };
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray28 = new java.lang.String[][] { strArray27 };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray30 };
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray34 = new java.lang.String[][] { strArray33 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        java.lang.String[][][] strArray38 = new java.lang.String[][][] { strArray28, strArray31, strArray34, strArray37 };
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] { strArray12, strArray25, strArray38 };
        java.util.List<java.lang.String[][][][]> strArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(strArray39);
        java.lang.Class<?> wildcardClass41 = strArrayList40.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArrayList40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassOfFieldArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = ofFieldArray7;
        wildcardClassOfFieldArray14[3] = ofFieldArray10;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassOfFieldArrayList24.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray2, permutationArray5, permutationArray8, permutationArray11, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass17 = permutationArrayList16.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass36 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = constableArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = annotatedElementArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.lang.Class<?> wildcardClass15 = wildcardClassOfFieldArray8.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass17 = strArray12.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList87 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass88 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassOfFieldArrayList9.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassOfFieldArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.Object[]> objArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(objArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.constant.Constable[][] constableArray0 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray2 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray3 = new java.lang.constant.Constable[][][] { constableArray0, constableArray1, constableArray2 };
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray6 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray7 = new java.lang.constant.Constable[][][] { constableArray4, constableArray5, constableArray6 };
        java.lang.constant.Constable[][][][] constableArray8 = new java.lang.constant.Constable[][][][] { constableArray3, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.Object[]> objArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) constableArray8);
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(objArrayList12);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass10 = constableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][] { typeArray3, typeArray7, typeArray11 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArrayList13.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.String[][][][][][][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass6 = permutationArrayList5.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = typeDescriptorArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.lang.Class<?> wildcardClass15 = strArray13.getClass();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.io.Serializable[]> serializableArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray18);
        java.lang.Class<?> wildcardClass21 = strArray18.getClass();
        java.util.List[][][] listArray23 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray24 = (java.util.List<java.lang.String[]>[][][]) listArray23;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray24);
        java.lang.Class<?> wildcardClass26 = strArrayListArray24.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[4];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClass12;
        wildcardClassOfFieldArray29[1] = wildcardClass15;
        wildcardClassOfFieldArray29[2] = wildcardClass21;
        wildcardClassOfFieldArray29[3] = wildcardClass26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray29);
        java.lang.Class<?> wildcardClass39 = wildcardClassOfFieldArray29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(serializableArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(listArray23);
        org.junit.Assert.assertNotNull(strArrayListArray24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass34 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray4 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray6, strArray7 };
        java.lang.String[][][][][][] strArray9 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray11 = new java.lang.String[][][][][][][] { strArray9, strArray10 };
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray13 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] { strArray12, strArray13 };
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray2, strArray5, strArray8, strArray11, strArray14 };
        java.util.List<java.lang.String[][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.lang.Class<?> wildcardClass19 = strArray15.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass69 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayIterableArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass10 = charSequenceArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.lang.Class<?> wildcardClass52 = constableArrayList51.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(constableArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass8 = strArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassOfFieldArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = serializableArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(serializableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass10 = strArray7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList77 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass78 = strArrayListArrayList77.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(strArrayListArrayList76);
        org.junit.Assert.assertNotNull(strArrayListArrayList77);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass67 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.util.List<java.lang.String[][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayIterableArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArrayList34);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass8 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.lang.Class<?> wildcardClass53 = constableArrayList52.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(constableArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass34 = strArrayList33.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.lang.Class<?> wildcardClass10 = strArrayListArrayList9.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = genericDeclarationArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass8 = objArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = constableArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = annotatedElementArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] { permutation8 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray1, permutationArray3, permutationArray5, permutationArray7, permutationArray9 };
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] { permutation13 };
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] { permutation15 };
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation17 };
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray20 = new com.thealgorithms.backtracking.Permutation[] { permutation19 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray14, permutationArray16, permutationArray18, permutationArray20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] { permutation22 };
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] { permutation26 };
        com.thealgorithms.backtracking.Permutation permutation28 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] { permutation28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] { permutation30 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray23, permutationArray25, permutationArray27, permutationArray29, permutationArray31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] { permutation33 };
        com.thealgorithms.backtracking.Permutation permutation35 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray36 = new com.thealgorithms.backtracking.Permutation[] { permutation35 };
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation37 };
        com.thealgorithms.backtracking.Permutation permutation39 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray40 = new com.thealgorithms.backtracking.Permutation[] { permutation39 };
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation41 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray34, permutationArray36, permutationArray38, permutationArray40, permutationArray42 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray10, permutationArray21, permutationArray32, permutationArray43 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray44);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray44);
        java.lang.Class<?> wildcardClass47 = permutationArray44.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArrayList45);
        org.junit.Assert.assertNotNull(permutationArrayList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass7 = permutationArrayList6.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass10 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass6 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constantDescArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.util.List<java.lang.String[][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList53 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(constableArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(constableArrayList53);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = genericDeclarationArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass6 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassOfFieldArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass51 = strArrayList50.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = genericDeclarationArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.lang.reflect.Type[][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][] { typeArray12, typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray3, typeArray7, typeArray11, typeArray15 };
        java.lang.reflect.Type[][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][] { typeArray17, typeArray18, typeArray19 };
        java.lang.reflect.Type[][][][][][][][] typeArray21 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray22 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray23 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][][][][] { typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][][][][] typeArray25 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray26 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray27 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray28 = new java.lang.reflect.Type[][][][][][][][][] { typeArray25, typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][][][][][] typeArray29 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray30 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray31 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray32 = new java.lang.reflect.Type[][][][][][][][][] { typeArray29, typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray33 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray20, typeArray24, typeArray28, typeArray32 };
        java.lang.reflect.Type[][][][][][][][] typeArray34 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray35 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray36 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray37 = new java.lang.reflect.Type[][][][][][][][][] { typeArray34, typeArray35, typeArray36 };
        java.lang.reflect.Type[][][][][][][][] typeArray38 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray39 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray40 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray41 = new java.lang.reflect.Type[][][][][][][][][] { typeArray38, typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][][][][][] typeArray42 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray43 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray44 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray45 = new java.lang.reflect.Type[][][][][][][][][] { typeArray42, typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][][][][][] typeArray46 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray47 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray48 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray49 = new java.lang.reflect.Type[][][][][][][][][] { typeArray46, typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray50 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray37, typeArray41, typeArray45, typeArray49 };
        java.lang.reflect.Type[][][][][][][][] typeArray51 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray52 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray53 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray54 = new java.lang.reflect.Type[][][][][][][][][] { typeArray51, typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][][][][][] typeArray55 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray56 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray57 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray58 = new java.lang.reflect.Type[][][][][][][][][] { typeArray55, typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][][][][][] typeArray59 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray60 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray61 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray62 = new java.lang.reflect.Type[][][][][][][][][] { typeArray59, typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][][][][][] typeArray63 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray64 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray65 = new java.lang.reflect.Type[][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray66 = new java.lang.reflect.Type[][][][][][][][][] { typeArray63, typeArray64, typeArray65 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray67 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray54, typeArray58, typeArray62, typeArray66 };
        java.lang.reflect.Type[][][][][][][][][][][] typeArray68 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray16, typeArray33, typeArray50, typeArray67 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray68.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList47 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass49 = wildcardClassOfFieldArrayList48.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray2 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray4 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[][][][][] typeArray6 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray7 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray8 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray9 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray10 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][] typeArray12 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray13 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray14 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray15 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray16 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][] { typeArray5, typeArray11, typeArray17 };
        java.lang.reflect.Type[][][][][] typeArray19 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray20 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray21 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray22 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray23 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][] { typeArray19, typeArray20, typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][] typeArray25 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray26 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray27 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray28 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray29 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray30 = new java.lang.reflect.Type[][][][][][] { typeArray25, typeArray26, typeArray27, typeArray28, typeArray29 };
        java.lang.reflect.Type[][][][][] typeArray31 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray32 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray33 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray34 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray35 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray36 = new java.lang.reflect.Type[][][][][][] { typeArray31, typeArray32, typeArray33, typeArray34, typeArray35 };
        java.lang.reflect.Type[][][][][][][] typeArray37 = new java.lang.reflect.Type[][][][][][][] { typeArray24, typeArray30, typeArray36 };
        java.lang.reflect.Type[][][][][] typeArray38 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray39 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray40 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray41 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray42 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray43 = new java.lang.reflect.Type[][][][][][] { typeArray38, typeArray39, typeArray40, typeArray41, typeArray42 };
        java.lang.reflect.Type[][][][][] typeArray44 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray45 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray46 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray47 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray48 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray49 = new java.lang.reflect.Type[][][][][][] { typeArray44, typeArray45, typeArray46, typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][][] typeArray50 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray51 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray52 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray53 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray54 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray55 = new java.lang.reflect.Type[][][][][][] { typeArray50, typeArray51, typeArray52, typeArray53, typeArray54 };
        java.lang.reflect.Type[][][][][][][] typeArray56 = new java.lang.reflect.Type[][][][][][][] { typeArray43, typeArray49, typeArray55 };
        java.lang.reflect.Type[][][][][] typeArray57 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray58 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray59 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray60 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray61 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray62 = new java.lang.reflect.Type[][][][][][] { typeArray57, typeArray58, typeArray59, typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][][] typeArray63 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray64 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray65 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray66 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray67 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray68 = new java.lang.reflect.Type[][][][][][] { typeArray63, typeArray64, typeArray65, typeArray66, typeArray67 };
        java.lang.reflect.Type[][][][][] typeArray69 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray70 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray71 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray72 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray73 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray74 = new java.lang.reflect.Type[][][][][][] { typeArray69, typeArray70, typeArray71, typeArray72, typeArray73 };
        java.lang.reflect.Type[][][][][][][] typeArray75 = new java.lang.reflect.Type[][][][][][][] { typeArray62, typeArray68, typeArray74 };
        java.lang.reflect.Type[][][][][][][][] typeArray76 = new java.lang.reflect.Type[][][][][][][][] { typeArray18, typeArray37, typeArray56, typeArray75 };
        java.lang.reflect.Type[][][][][][][][][] typeArray77 = new java.lang.reflect.Type[][][][][][][][][] { typeArray76 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArrayList78.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArrayList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = genericDeclarationArrayList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = typeArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayListArray6.getClass();
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.Class<?> wildcardClass16 = collectionArray13.getClass();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.lang.Class<?> wildcardClass21 = strArrayList20.getClass();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { wildcardClass16, wildcardClass21, wildcardClass26 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArrayList28.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray30 = new java.lang.invoke.TypeDescriptor[] { wildcardClass11, wildcardClass29 };
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray30);
        java.lang.Class<?> wildcardClass32 = typeDescriptorArrayList31.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeDescriptorArray30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = typeArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArrayList27.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Object[]> objArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList35);
        org.junit.Assert.assertNotNull(objArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass68 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = genericDeclarationArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray6, permutationArray7, permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray12, permutationArray13, permutationArray14, permutationArray15, permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray18, permutationArray19, permutationArray20, permutationArray21, permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray24, permutationArray25, permutationArray26, permutationArray27, permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass33 = permutationArray30.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(permutationArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = collectionArray1.getClass();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { wildcardClass4, wildcardClass9, wildcardClass14 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.util.List<java.lang.reflect.Type[]> typeArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.lang.Class<?> wildcardClass18 = typeArray15.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(typeArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(objArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = constableArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = typeArrayList24.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray2 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass34 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass12 = strArrayListArrayList11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList37 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList36);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList37);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.lang.Class<?> wildcardClass15 = strArray13.getClass();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.io.Serializable[]> serializableArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray18);
        java.lang.Class<?> wildcardClass21 = strArray18.getClass();
        java.util.List[][][] listArray23 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray24 = (java.util.List<java.lang.String[]>[][][]) listArray23;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray24);
        java.lang.Class<?> wildcardClass26 = strArrayListArray24.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[4];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClass12;
        wildcardClassOfFieldArray29[1] = wildcardClass15;
        wildcardClassOfFieldArray29[2] = wildcardClass21;
        wildcardClassOfFieldArray29[3] = wildcardClass26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray29);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray29);
        java.lang.Class<?> wildcardClass40 = wildcardClassOfFieldArrayList39.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(serializableArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(listArray23);
        org.junit.Assert.assertNotNull(strArrayListArray24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass12 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][]) listArray10;
        java.util.List[][][][] listArray13 = new java.util.List[4][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass24 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray1 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray2 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray3 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray5 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][] strArray7 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray8 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray9 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray10 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray11 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray12 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][] strArray14 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray15 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray16 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray17 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray18 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray20 = new java.lang.String[][][][][] { strArray14, strArray15, strArray16, strArray17, strArray18, strArray19 };
        java.lang.String[][][][] strArray21 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray22 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray23 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray25 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray26 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray27 = new java.lang.String[][][][][] { strArray21, strArray22, strArray23, strArray24, strArray25, strArray26 };
        java.lang.String[][][][] strArray28 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray29 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray30 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray31 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray32 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray33 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray34 = new java.lang.String[][][][][] { strArray28, strArray29, strArray30, strArray31, strArray32, strArray33 };
        java.lang.String[][][][][][] strArray35 = new java.lang.String[][][][][][] { strArray6, strArray13, strArray20, strArray27, strArray34 };
        java.lang.String[][][][] strArray36 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray37 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray38 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray40 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray41 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray42 = new java.lang.String[][][][][] { strArray36, strArray37, strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][] strArray43 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray44 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray46 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray47 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray48 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray49 = new java.lang.String[][][][][] { strArray43, strArray44, strArray45, strArray46, strArray47, strArray48 };
        java.lang.String[][][][] strArray50 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray51 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray52 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray53 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray54 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray55 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray56 = new java.lang.String[][][][][] { strArray50, strArray51, strArray52, strArray53, strArray54, strArray55 };
        java.lang.String[][][][] strArray57 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray58 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray59 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray60 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray61 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray62 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray63 = new java.lang.String[][][][][] { strArray57, strArray58, strArray59, strArray60, strArray61, strArray62 };
        java.lang.String[][][][] strArray64 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray65 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray67 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray68 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray69 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray70 = new java.lang.String[][][][][] { strArray64, strArray65, strArray66, strArray67, strArray68, strArray69 };
        java.lang.String[][][][][][] strArray71 = new java.lang.String[][][][][][] { strArray42, strArray49, strArray56, strArray63, strArray70 };
        java.lang.String[][][][][][][] strArray72 = new java.lang.String[][][][][][][] { strArray35, strArray71 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.lang.Class<?> wildcardClass74 = strArrayList73.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArrayList73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = serializableArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(serializableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray1);
        java.lang.Class<?> wildcardClass7 = serializableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strComparableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.util.List<java.lang.String[][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][]) listArray10;
        java.util.List[][][][] listArray13 = new java.util.List[4][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass27 = strArrayListArrayList26.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strComparableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strComparableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass28 = strArrayListArrayList27.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass20 = wildcardClassArrayList19.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass8 = charSequenceArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(serializableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = typeDescriptorArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass67 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass87 = wildcardClassOfFieldArrayList86.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass17 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(objArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.Object[]> objArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass90 = objArrayList89.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(objArrayList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][] { typeArray3, typeArray7, typeArray11 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(serializableArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass10 = permutationArrayList9.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArrayList34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.String[][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeDescriptorArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArrayList59.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayIterableArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = typeDescriptorArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass7 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArrayList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = genericDeclarationArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray85);
        java.util.List<java.io.Serializable[]> serializableArrayList90 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass92 = wildcardClassOfFieldArray85.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList89);
        org.junit.Assert.assertNotNull(serializableArrayList90);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.lang.Class<?> wildcardClass19 = genericDeclarationArray14.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(annotatedElementArrayList16);
        org.junit.Assert.assertNotNull(annotatedElementArrayList17);
        org.junit.Assert.assertNotNull(annotatedElementArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassOfFieldArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassOfFieldArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass16 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass96 = collectionArrayList95.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][] listArray7 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][]) listArray7;
        java.util.List[][][] listArray10 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][]) listArray10;
        java.util.List[][][][] listArray13 = new java.util.List[4][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass26 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArrayList25.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass57 = strArray50.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(strArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = typeArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = collectionArrayList7.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass14 = strComparableArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray2 = new java.lang.String[][] { strArray1 };
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray5 = new java.lang.String[][] { strArray4 };
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray8 = new java.lang.String[][] { strArray7 };
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray11 = new java.lang.String[][] { strArray10 };
        java.lang.String[][][] strArray12 = new java.lang.String[][][] { strArray2, strArray5, strArray8, strArray11 };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray14 };
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray18 = new java.lang.String[][] { strArray17 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray21 = new java.lang.String[][] { strArray20 };
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray24 = new java.lang.String[][] { strArray23 };
        java.lang.String[][][] strArray25 = new java.lang.String[][][] { strArray15, strArray18, strArray21, strArray24 };
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray28 = new java.lang.String[][] { strArray27 };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray30 };
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray34 = new java.lang.String[][] { strArray33 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!" };
        java.lang.String[][] strArray37 = new java.lang.String[][] { strArray36 };
        java.lang.String[][][] strArray38 = new java.lang.String[][][] { strArray28, strArray31, strArray34, strArray37 };
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] { strArray12, strArray25, strArray38 };
        java.util.List<java.lang.String[][][][]> strArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(strArray39);
        java.util.List<java.lang.String[][][][]> strArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(strArray39);
        java.lang.Class<?> wildcardClass42 = strArray39.getClass();
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArrayList40);
        org.junit.Assert.assertNotNull(strArrayList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass9 = permutationArrayList8.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass9 = serializableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass51 = strArray48.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][][][][] classArray14 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][][][][]) classArray14;
        java.lang.Class[][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][] classArray20 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][][][][] classArray27 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][][][][]) classArray27;
        java.lang.Class[][][][][][][][] classArray30 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][][][][]) classArray30;
        java.lang.Class[][][][][][][][][] classArray33 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][][][][] classArray40 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][][][][]) classArray40;
        java.lang.Class[][][][][][][][] classArray43 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][][][][]) classArray43;
        java.lang.Class[][][][][][][][][] classArray46 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][][] classArray53 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][][]) classArray53;
        java.lang.Class[][][][][][][][] classArray56 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray57 = (java.lang.Class<?>[][][][][][][][]) classArray56;
        java.lang.Class[][][][][][][][][] classArray59 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray60 = (java.lang.Class<?>[][][][][][][][][]) classArray59;
        wildcardClassArray60[0] = wildcardClassArray54;
        wildcardClassArray60[1] = wildcardClassArray57;
        java.lang.Class[][][][][][][][] classArray66 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray67 = (java.lang.Class<?>[][][][][][][][]) classArray66;
        java.lang.Class[][][][][][][][] classArray69 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray70 = (java.lang.Class<?>[][][][][][][][]) classArray69;
        java.lang.Class[][][][][][][][][] classArray72 = new java.lang.Class[2][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray73 = (java.lang.Class<?>[][][][][][][][][]) classArray72;
        wildcardClassArray73[0] = wildcardClassArray67;
        wildcardClassArray73[1] = wildcardClassArray70;
        java.lang.Class[][][][][][][][][][] classArray79 = new java.lang.Class[6][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray80 = (java.lang.Class<?>[][][][][][][][][][]) classArray79;
        wildcardClassArray80[0] = wildcardClassArray8;
        wildcardClassArray80[1] = wildcardClassArray21;
        wildcardClassArray80[2] = wildcardClassArray34;
        wildcardClassArray80[3] = wildcardClassArray47;
        wildcardClassArray80[4] = wildcardClassArray60;
        wildcardClassArray80[5] = wildcardClassArray73;
        java.lang.Class[][][][][][][][][][][] classArray94 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray95 = (java.lang.Class<?>[][][][][][][][][][][]) classArray94;
        wildcardClassArray95[0] = wildcardClassArray80;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray95);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList99 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray95);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray56);
        org.junit.Assert.assertNotNull(wildcardClassArray57);
        org.junit.Assert.assertNotNull(classArray59);
        org.junit.Assert.assertNotNull(wildcardClassArray60);
        org.junit.Assert.assertNotNull(classArray66);
        org.junit.Assert.assertNotNull(wildcardClassArray67);
        org.junit.Assert.assertNotNull(classArray69);
        org.junit.Assert.assertNotNull(wildcardClassArray70);
        org.junit.Assert.assertNotNull(classArray72);
        org.junit.Assert.assertNotNull(wildcardClassArray73);
        org.junit.Assert.assertNotNull(classArray79);
        org.junit.Assert.assertNotNull(wildcardClassArray80);
        org.junit.Assert.assertNotNull(classArray94);
        org.junit.Assert.assertNotNull(wildcardClassArray95);
        org.junit.Assert.assertNotNull(wildcardClassArrayList98);
        org.junit.Assert.assertNotNull(typeArrayList99);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.reflect.Type[][][][] typeArray0 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][] typeArray1 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][] typeArray2 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] { typeArray0, typeArray1, typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass30 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.lang.Class<?> wildcardClass17 = genericDeclarationArrayList16.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = constableArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        java.util.List[][][][][] listArray12 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][] listArray17 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][]) listArray17;
        java.util.List[][][][][] listArray20 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][] listArray25 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        java.util.List[][][][][] listArray28 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][] listArray33 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][]) listArray33;
        java.util.List[][][][][] listArray36 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][] listArray41 = new java.util.List[5][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass55 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass48 = permutationArray42.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(permutationArrayList44);
        org.junit.Assert.assertNotNull(permutationArrayList45);
        org.junit.Assert.assertNotNull(permutationArrayList46);
        org.junit.Assert.assertNotNull(permutationArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassOfFieldArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList95 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList96 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.util.List<java.util.Collection[][][]> collectionArrayList97 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray86);
        java.lang.Class<?> wildcardClass98 = collectionArrayList97.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(collectionArrayList95);
        org.junit.Assert.assertNotNull(collectionArrayList96);
        org.junit.Assert.assertNotNull(collectionArrayList97);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList26);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray5);
        java.lang.Class<?> wildcardClass9 = constableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = constableArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass19 = strArrayList18.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.lang.Class<?> wildcardClass18 = annotatedElementArrayList17.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(annotatedElementArrayList16);
        org.junit.Assert.assertNotNull(annotatedElementArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayIterableArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.lang.Class<?> wildcardClass17 = annotatedElementArrayList16.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(annotatedElementArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass10 = strArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = genericDeclarationArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] { wildcardClass13 };
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) genericDeclarationArray14);
        java.lang.Class<?> wildcardClass19 = annotatedElementArrayList18.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(annotatedElementArrayList16);
        org.junit.Assert.assertNotNull(annotatedElementArrayList17);
        org.junit.Assert.assertNotNull(annotatedElementArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.io.Serializable[][]> serializableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(serializableArrayList12);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass17 = strArrayCollectionArrayList16.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(objArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArrayList35.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass89 = wildcardClassOfFieldArrayList88.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = genericDeclarationArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass31 = serializableArrayList30.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(serializableArrayList28);
        org.junit.Assert.assertNotNull(strArrayListArrayList29);
        org.junit.Assert.assertNotNull(serializableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = annotatedElementArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(annotatedElementArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray2 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray4 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[][][][][] typeArray6 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray7 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray8 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray9 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray10 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][] typeArray12 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray13 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray14 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray15 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray16 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][] { typeArray5, typeArray11, typeArray17 };
        java.lang.reflect.Type[][][][][] typeArray19 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray20 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray21 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray22 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray23 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][] { typeArray19, typeArray20, typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][] typeArray25 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray26 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray27 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray28 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray29 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray30 = new java.lang.reflect.Type[][][][][][] { typeArray25, typeArray26, typeArray27, typeArray28, typeArray29 };
        java.lang.reflect.Type[][][][][] typeArray31 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray32 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray33 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray34 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray35 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray36 = new java.lang.reflect.Type[][][][][][] { typeArray31, typeArray32, typeArray33, typeArray34, typeArray35 };
        java.lang.reflect.Type[][][][][][][] typeArray37 = new java.lang.reflect.Type[][][][][][][] { typeArray24, typeArray30, typeArray36 };
        java.lang.reflect.Type[][][][][] typeArray38 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray39 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray40 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray41 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray42 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray43 = new java.lang.reflect.Type[][][][][][] { typeArray38, typeArray39, typeArray40, typeArray41, typeArray42 };
        java.lang.reflect.Type[][][][][] typeArray44 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray45 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray46 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray47 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray48 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray49 = new java.lang.reflect.Type[][][][][][] { typeArray44, typeArray45, typeArray46, typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][][] typeArray50 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray51 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray52 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray53 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray54 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray55 = new java.lang.reflect.Type[][][][][][] { typeArray50, typeArray51, typeArray52, typeArray53, typeArray54 };
        java.lang.reflect.Type[][][][][][][] typeArray56 = new java.lang.reflect.Type[][][][][][][] { typeArray43, typeArray49, typeArray55 };
        java.lang.reflect.Type[][][][][] typeArray57 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray58 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray59 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray60 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray61 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray62 = new java.lang.reflect.Type[][][][][][] { typeArray57, typeArray58, typeArray59, typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][][] typeArray63 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray64 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray65 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray66 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray67 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray68 = new java.lang.reflect.Type[][][][][][] { typeArray63, typeArray64, typeArray65, typeArray66, typeArray67 };
        java.lang.reflect.Type[][][][][] typeArray69 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray70 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray71 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray72 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray73 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray74 = new java.lang.reflect.Type[][][][][][] { typeArray69, typeArray70, typeArray71, typeArray72, typeArray73 };
        java.lang.reflect.Type[][][][][][][] typeArray75 = new java.lang.reflect.Type[][][][][][][] { typeArray62, typeArray68, typeArray74 };
        java.lang.reflect.Type[][][][][][][][] typeArray76 = new java.lang.reflect.Type[][][][][][][][] { typeArray18, typeArray37, typeArray56, typeArray75 };
        java.lang.reflect.Type[][][][][][][][][] typeArray77 = new java.lang.reflect.Type[][][][][][][][][] { typeArray76 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(typeArray77);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(typeArray77);
        java.lang.Class<?> wildcardClass80 = typeArrayList79.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArrayList78);
        org.junit.Assert.assertNotNull(typeArrayList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray8;
        java.util.List[][][] listArray19 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        java.util.List[][][] listArray22 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray23 = (java.util.List<java.lang.String[]>[][][]) listArray22;
        java.util.List[][][][] listArray25 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray20;
        strArrayListArray26[1] = strArrayListArray23;
        java.util.List[][][][][] listArray32 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray33 = (java.util.List<java.lang.String[]>[][][][][]) listArray32;
        strArrayListArray33[0] = strArrayListArray26;
        java.util.List[][][] listArray37 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][][]) listArray37;
        java.util.List[][][] listArray40 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][]) listArray40;
        java.util.List[][][][] listArray43 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][]) listArray43;
        strArrayListArray44[0] = strArrayListArray38;
        strArrayListArray44[1] = strArrayListArray41;
        java.util.List[][][][][] listArray50 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray51 = (java.util.List<java.lang.String[]>[][][][][]) listArray50;
        strArrayListArray51[0] = strArrayListArray44;
        java.util.List[][][][][][] listArray55 = new java.util.List[3][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray56 = (java.util.List<java.lang.String[]>[][][][][][]) listArray55;
        strArrayListArray56[0] = strArrayListArray15;
        strArrayListArray56[1] = strArrayListArray33;
        strArrayListArray56[2] = strArrayListArray51;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.lang.Class<?> wildcardClass65 = strArrayListArray56.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray50);
        org.junit.Assert.assertNotNull(strArrayListArray51);
        org.junit.Assert.assertNotNull(listArray55);
        org.junit.Assert.assertNotNull(strArrayListArray56);
        org.junit.Assert.assertNotNull(strArrayListArrayList63);
        org.junit.Assert.assertNotNull(strArrayListArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass6 = constableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = genericDeclarationArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.util.List[][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = strArrayListArrayList60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassOfFieldArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = annotatedElementArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(annotatedElementArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass16 = strArrayList15.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = typeArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] { typeArray0 };
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] { typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass5 = strArray3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }
}


package Permutation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(serializableArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArrayList34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass34 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass37 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList35);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[1][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[1][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        strArrayListArray10[0] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray10;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray15);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray15);
        java.lang.Class<?> wildcardClass20 = strArrayListArrayList19.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = typeDescriptorArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Object[]> objArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(objArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass87 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = strArrayIterableArrayList61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass35 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(constableArrayList33);
        org.junit.Assert.assertNotNull(constableArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass35 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(constableArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList70 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList69);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList70);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List[][][][][][] listArray4 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][]) listArray4;
        java.util.List[][][][][][] listArray7 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][]) listArray7;
        java.util.List[][][][][][] listArray10 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][]) listArray10;
        java.util.List[][][][][][][] listArray13 = new java.util.List[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List[][][][][][][][] listArray24 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray14;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray25);
        java.lang.Class<?> wildcardClass29 = strArrayListArrayList28.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList32);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass11 = strArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = serializableArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(serializableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArrayList23.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass10 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.io.Serializable[][]> serializableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(serializableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass85 = typeDescriptorArrayList84.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(objArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayIterableArrayList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[][]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray0);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(typeArrayList34);
        org.junit.Assert.assertNotNull(typeArrayList35);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayListArrayList9.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        java.util.List[][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass19 = strArrayListArrayList18.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray3 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray5 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[][] typeArray6 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray7 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray10 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray11 = new java.lang.reflect.Type[][][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][] typeArray12 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray15 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray16 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray17 = new java.lang.reflect.Type[][][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray19 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray20 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][] typeArray24 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray25 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray28 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray29 = new java.lang.reflect.Type[][][] { typeArray24, typeArray25, typeArray26, typeArray27, typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray32 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray33 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray35 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31, typeArray32, typeArray33, typeArray34 };
        java.lang.reflect.Type[][][][] typeArray36 = new java.lang.reflect.Type[][][][] { typeArray5, typeArray11, typeArray17, typeArray23, typeArray29, typeArray35 };
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArrayList37.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArrayList37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = genericDeclarationArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(constableArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass10 = charSequenceArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(strArrayListArrayList28);
        org.junit.Assert.assertNotNull(objArrayList29);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArrayList16.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass70 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        java.lang.String[][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray5);
        java.lang.Class<?> wildcardClass11 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][] listArray9 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][]) listArray9;
        java.util.List[][][][][][][] listArray12 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][] listArray17 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][]) listArray17;
        java.util.List[][][][][][][] listArray20 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][] listArray25 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][]) listArray25;
        java.util.List[][][][][][][] listArray28 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][] listArray33 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][]) listArray33;
        java.util.List[][][][][][][] listArray36 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][] listArray41 = new java.util.List[5][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass33 = wildcardClassOfFieldArrayList32.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray1, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray5 };
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray11, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray4, permutationArray9, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass18 = permutationArray15.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassOfFieldArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = genericDeclarationArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassOfFieldArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray2 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray4 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray5 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(objArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Object[]> objArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(objArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.lang.Class<?> wildcardClass8 = strArray4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass19 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = typeArrayList32.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayIterableArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = collectionArrayList60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(collectionArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray3, permutationArray7 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(permutationArrayList10);
        org.junit.Assert.assertNotNull(permutationArrayList11);
        org.junit.Assert.assertNotNull(permutationArrayList12);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(serializableArrayList12);
        org.junit.Assert.assertNotNull(constantDescArrayList13);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] { typeArray0 };
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] { typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray3 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray5 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[][] typeArray6 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray7 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray10 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray11 = new java.lang.reflect.Type[][][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][] typeArray12 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray15 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray16 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray17 = new java.lang.reflect.Type[][][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray19 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray20 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][] typeArray24 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray25 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray28 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray29 = new java.lang.reflect.Type[][][] { typeArray24, typeArray25, typeArray26, typeArray27, typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray32 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray33 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray35 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31, typeArray32, typeArray33, typeArray34 };
        java.lang.reflect.Type[][][][] typeArray36 = new java.lang.reflect.Type[][][][] { typeArray5, typeArray11, typeArray17, typeArray23, typeArray29, typeArray35 };
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(typeArray36);
        java.lang.Class<?> wildcardClass41 = typeArray36.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArrayList37);
        org.junit.Assert.assertNotNull(typeArrayList38);
        org.junit.Assert.assertNotNull(typeArrayList39);
        org.junit.Assert.assertNotNull(typeArrayList40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.io.Serializable[][]> serializableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(serializableArrayList15);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray5, typeArray6, typeArray7, typeArray8 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray10, typeArray11, typeArray12, typeArray13 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray15, typeArray16, typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray21 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray22 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray23 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray24 = new java.lang.reflect.Type[][][][][][][][][][][][][][] { typeArray20, typeArray21, typeArray22, typeArray23 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray25 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray4, typeArray9, typeArray14, typeArray19, typeArray24 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray26 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] { typeArray25 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(typeArray26);
        java.lang.Class<?> wildcardClass29 = typeArrayList28.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(serializableArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(strArrayListArrayList62);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray8);
        java.util.List<java.io.Serializable[][]> serializableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray8);
        java.lang.Class<?> wildcardClass15 = serializableArrayList14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(serializableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList34);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList35);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][] { typeArray0 };
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] { typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.lang.Class<?> wildcardClass9 = permutationArray5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        java.lang.reflect.Type[][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass9 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass70 = wildcardClassOfFieldArrayList69.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass27 = permutationArray20.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(permutationArrayList22);
        org.junit.Assert.assertNotNull(permutationArrayList23);
        org.junit.Assert.assertNotNull(permutationArrayList24);
        org.junit.Assert.assertNotNull(permutationArrayList25);
        org.junit.Assert.assertNotNull(permutationArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = genericDeclarationArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = serializableArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray29 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray30 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray29;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray32;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray35 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray36 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray35;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray38 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray39 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray38;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray41 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray42 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray41;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray44 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray45 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray44;
        wildcardClassOfFieldArray45[0] = wildcardClassOfFieldArray30;
        wildcardClassOfFieldArray45[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray45[2] = wildcardClassOfFieldArray36;
        wildcardClassOfFieldArray45[3] = wildcardClassOfFieldArray39;
        wildcardClassOfFieldArray45[4] = wildcardClassOfFieldArray42;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][] ofFieldArray57 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray58 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]) ofFieldArray57;
        wildcardClassOfFieldArray58[0] = wildcardClassOfFieldArray17;
        wildcardClassOfFieldArray58[1] = wildcardClassOfFieldArray45;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray58);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray58);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(ofFieldArray35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray36);
        org.junit.Assert.assertNotNull(ofFieldArray38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray39);
        org.junit.Assert.assertNotNull(ofFieldArray41);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray42);
        org.junit.Assert.assertNotNull(ofFieldArray44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray45);
        org.junit.Assert.assertNotNull(ofFieldArray57);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray58);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList64);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = typeDescriptorArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArrayList3.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray5);
        java.lang.Class<?> wildcardClass7 = permutationArray5.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][] { strArray12, strArray13, strArray14, strArray15 };
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][] { strArray5, strArray11, strArray17 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.lang.Class<?> wildcardClass22 = strArray18.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass68 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.lang.Class<?> wildcardClass7 = permutationArray3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList85 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList87 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList87);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass36 = strArrayListArrayList35.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(strArrayListArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList69 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList70 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList71 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList72 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList68);
        org.junit.Assert.assertNotNull(typeArrayList69);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList70);
        org.junit.Assert.assertNotNull(typeArrayList71);
        org.junit.Assert.assertNotNull(typeArrayList72);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass69 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList66);
        org.junit.Assert.assertNotNull(typeArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.lang.Class<?> wildcardClass15 = strArray13.getClass();
        java.lang.String[] strArray18 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.util.List<java.io.Serializable[]> serializableArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray18);
        java.lang.Class<?> wildcardClass21 = strArray18.getClass();
        java.util.List[][][] listArray23 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray24 = (java.util.List<java.lang.String[]>[][][]) listArray23;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray24);
        java.lang.Class<?> wildcardClass26 = strArrayListArray24.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[4];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClass12;
        wildcardClassOfFieldArray29[1] = wildcardClass15;
        wildcardClassOfFieldArray29[2] = wildcardClass21;
        wildcardClassOfFieldArray29[3] = wildcardClass26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray29);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList39 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray29);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList40 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray29);
        java.lang.Class<?> wildcardClass41 = wildcardClassOfFieldArray29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(serializableArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(listArray23);
        org.junit.Assert.assertNotNull(strArrayListArray24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList39);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][][] listArray4 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][] listArray9 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][]) listArray9;
        java.util.List[][][][][] listArray12 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][] listArray17 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][]) listArray17;
        java.util.List[][][][][] listArray20 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][] listArray25 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        java.util.List[][][][][] listArray28 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][] listArray33 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][]) listArray33;
        java.util.List[][][][][] listArray36 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][] listArray41 = new java.util.List[5][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass56 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass7 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][] listArray9 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][]) listArray9;
        java.util.List[][][][][][][] listArray12 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][] listArray17 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][]) listArray17;
        java.util.List[][][][][][][] listArray20 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][] listArray25 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][]) listArray25;
        java.util.List[][][][][][][] listArray28 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][] listArray33 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][]) listArray33;
        java.util.List[][][][][][][] listArray36 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][] listArray41 = new java.util.List[5][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass54 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        java.util.List[][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] { typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassOfFieldArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass6 = constableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass32 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.lang.Class<?> wildcardClass6 = strArray3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] { typeArray3, typeArray7, typeArray11 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass18 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass59 = strArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(strArrayList54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(strArrayList56);
        org.junit.Assert.assertNotNull(strArrayList57);
        org.junit.Assert.assertNotNull(strArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(strArrayList23);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArrayList34);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[] strArray29 = new java.lang.String[] { "", "", "", "", "hi!" };
        java.lang.String[][] strArray30 = new java.lang.String[][] { strArray5, strArray11, strArray17, strArray23, strArray29 };
        java.util.List<java.lang.String[][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.util.List<java.lang.String[][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray30);
        java.lang.Class<?> wildcardClass33 = strArrayList32.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList68 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList67);
        org.junit.Assert.assertNotNull(typeArrayList68);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        java.lang.String[][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray7, strArray8 };
        java.lang.String[][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray10, strArray11 };
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray9, strArray12 };
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray14);
        java.lang.Class<?> wildcardClass18 = strArray14.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = constableArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        java.util.List[][][][][][][][] listArray1 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray1;
        java.util.List[][][][][][][][] listArray4 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        java.util.List[][][][][][][][][] listArray10 = new java.util.List[3][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.lang.Class<?> wildcardClass20 = strArrayListArray11.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass23 = wildcardClassOfFieldArrayList22.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strComparableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        java.lang.reflect.Type[][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass8 = permutationArrayList7.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass16 = strArrayList15.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.lang.Class<?> wildcardClass18 = wildcardClassArrayList17.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass24 = typeArrayList23.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = genericDeclarationArrayList29.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] { typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray3);
        java.lang.Class<?> wildcardClass6 = serializableArrayList5.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassOfFieldArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass17 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(strComparableArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(charSequenceArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        java.lang.reflect.Type[][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][] { typeArray0, typeArray1, typeArray2 };
        java.lang.reflect.Type[][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][] { typeArray4, typeArray5, typeArray6 };
        java.lang.reflect.Type[][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][] { typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][] { typeArray3, typeArray7, typeArray11 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(typeArray12);
        java.lang.Class<?> wildcardClass16 = typeArrayList15.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass19 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<java.io.Serializable[]> serializableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(serializableArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strComparableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        java.util.List[][][][][][][][][][][] listArray7 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][][][][][][] listArray14 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray14;
        java.util.List[][][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][][] listArray20 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray15;
        strArrayListArray21[1] = strArrayListArray18;
        java.util.List[][][][][][][][][][] listArray27 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray28 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray27;
        java.util.List[][][][][][][][][][] listArray30 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray31 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray30;
        java.util.List[][][][][][][][][][][] listArray33 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray33;
        strArrayListArray34[0] = strArrayListArray28;
        strArrayListArray34[1] = strArrayListArray31;
        java.util.List[][][][][][][][][][] listArray40 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray40;
        java.util.List[][][][][][][][][][] listArray43 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray43;
        java.util.List[][][][][][][][][][][] listArray46 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray46;
        strArrayListArray47[0] = strArrayListArray41;
        strArrayListArray47[1] = strArrayListArray44;
        java.util.List[][][][][][][][][][] listArray53 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray54 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray53;
        java.util.List[][][][][][][][][][] listArray56 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray57 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray56;
        java.util.List[][][][][][][][][][][] listArray59 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray60 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray59;
        strArrayListArray60[0] = strArrayListArray54;
        strArrayListArray60[1] = strArrayListArray57;
        java.util.List[][][][][][][][][][] listArray66 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray67 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray66;
        java.util.List[][][][][][][][][][] listArray69 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray70 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray69;
        java.util.List[][][][][][][][][][][] listArray72 = new java.util.List[2][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray72;
        strArrayListArray73[0] = strArrayListArray67;
        strArrayListArray73[1] = strArrayListArray70;
        java.util.List[][][][][][][][][][][][] listArray79 = new java.util.List[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray80 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray79;
        strArrayListArray80[0] = strArrayListArray8;
        strArrayListArray80[1] = strArrayListArray21;
        strArrayListArray80[2] = strArrayListArray34;
        strArrayListArray80[3] = strArrayListArray47;
        strArrayListArray80[4] = strArrayListArray60;
        strArrayListArray80[5] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList95 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList96 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray80);
        java.lang.Class<?> wildcardClass97 = strArrayListArray80.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray27);
        org.junit.Assert.assertNotNull(strArrayListArray28);
        org.junit.Assert.assertNotNull(listArray30);
        org.junit.Assert.assertNotNull(strArrayListArray31);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray53);
        org.junit.Assert.assertNotNull(strArrayListArray54);
        org.junit.Assert.assertNotNull(listArray56);
        org.junit.Assert.assertNotNull(strArrayListArray57);
        org.junit.Assert.assertNotNull(listArray59);
        org.junit.Assert.assertNotNull(strArrayListArray60);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray79);
        org.junit.Assert.assertNotNull(strArrayListArray80);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(strArrayListArrayList95);
        org.junit.Assert.assertNotNull(strArrayListArrayList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassOfFieldArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        java.lang.Class[][][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray5);
        java.lang.Class<?> wildcardClass12 = strArrayListArray5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9, strArray11 };
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.util.List<java.lang.String[][][][][][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass18 = strArrayList17.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass65 = wildcardClassArrayList64.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = genericDeclarationArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass10 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass28 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(strArrayListArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass35 = constableArrayList34.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(constableArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strComparableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strComparableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray7, permutationArray8, permutationArray9, permutationArray10, permutationArray11, permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][] { permutationArray6, permutationArray13 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray14);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray14);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArrayList15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray2, permutationArray5, permutationArray8, permutationArray11, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<java.io.Serializable[][]> serializableArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray15);
        java.lang.Class<?> wildcardClass19 = permutationArray15.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(serializableArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(typeArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = objArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList28);
        org.junit.Assert.assertNotNull(objArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass23 = typeArrayList22.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(typeArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        java.util.List[][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        java.lang.reflect.Type[][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray7 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray8 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray9 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray5, typeArray6, typeArray7, typeArray8 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray10 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray11 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray12 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray13 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray14 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray10, typeArray11, typeArray12, typeArray13 };
        java.lang.reflect.Type[][][][][][][][][][] typeArray15 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray16 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray17 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][] typeArray18 = new java.lang.reflect.Type[][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][] typeArray19 = new java.lang.reflect.Type[][][][][][][][][][][] { typeArray15, typeArray16, typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][][][][][][][][][] typeArray20 = new java.lang.reflect.Type[][][][][][][][][][][][] { typeArray4, typeArray9, typeArray14, typeArray19 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(typeArray20);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(typeArray20);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(typeArray20);
        java.lang.Class<?> wildcardClass24 = typeArrayList23.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArrayList21);
        org.junit.Assert.assertNotNull(typeArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.io.Serializable[][]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray6);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass22 = wildcardClassArray11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(typeArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(charSequenceArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassOfFieldArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] { typeArray4 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = collectionArrayList60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass7 = permutationArrayList6.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList47 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList49 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass50 = typeDescriptorArrayList49.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList48);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList62 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass63 = collectionArrayList62.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(collectionArrayList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList66 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass67 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassArrayList66);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass85 = wildcardClassOfFieldArrayList84.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] { typeArray0 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray10;
        wildcardClassOfFieldArray11[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray11[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray11[2] = wildcardClassOfFieldArray8;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList19);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
        org.junit.Assert.assertNotNull(typeArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(typeArrayList34);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][] { typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass4 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList37);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList39);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArrayList3.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        java.lang.String[][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass49 = wildcardClassOfFieldArrayList48.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][][][] listArray25 = new java.util.List[3][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray5;
        strArrayListArray26[1] = strArrayListArray13;
        strArrayListArray26[2] = strArrayListArray21;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray26);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray26);
        java.lang.Class<?> wildcardClass35 = strArrayListArrayList34.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList15);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        java.lang.String[][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray2, strArray5 };
        java.lang.String[][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][] { strArray6 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.util.List<java.lang.String[][][][][][][][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(strArrayList12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strArrayList15);
        org.junit.Assert.assertNotNull(strArrayList16);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray0 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray2 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray6 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray8 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray1, strArray3, strArray5, strArray7, strArray9 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray11 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray13 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray15 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray17 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] { strArray19 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray12, strArray14, strArray16, strArray18, strArray20 };
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][] { strArray10, strArray21 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.lang.Class<?> wildcardClass24 = strArray22.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[2][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayListArrayList15);
        org.junit.Assert.assertNotNull(strArrayListArrayList16);
        org.junit.Assert.assertNotNull(strArrayListArrayList17);
        org.junit.Assert.assertNotNull(strArrayListArrayList18);
        org.junit.Assert.assertNotNull(strArrayListArrayList19);
        org.junit.Assert.assertNotNull(strArrayListArrayList20);
        org.junit.Assert.assertNotNull(strArrayListArrayList21);
        org.junit.Assert.assertNotNull(strArrayListArrayList22);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(strArrayListArrayList62);
        org.junit.Assert.assertNotNull(strArrayListArrayList63);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayListArrayList10);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = constableArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray6, permutationArray7, permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray12, permutationArray13, permutationArray14, permutationArray15, permutationArray16 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray18, permutationArray19, permutationArray20, permutationArray21, permutationArray22 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray24, permutationArray25, permutationArray26, permutationArray27, permutationArray28 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][][][][][] { permutationArray5, permutationArray11, permutationArray17, permutationArray23, permutationArray29 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][]> permutationArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray30);
        java.lang.Class<?> wildcardClass35 = permutationArrayList34.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArrayList31);
        org.junit.Assert.assertNotNull(permutationArrayList32);
        org.junit.Assert.assertNotNull(permutationArrayList33);
        org.junit.Assert.assertNotNull(permutationArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass12 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray1 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray3 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray4 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][] typeArray5 = new java.lang.reflect.Type[][][][][][][][][][][][][][] {};
        java.lang.reflect.Type[][][][][][][][][][][][][][][] typeArray6 = new java.lang.reflect.Type[][][][][][][][][][][][][][][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4, typeArray5 };
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(typeArray6);
        java.util.List<java.io.Serializable[][]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) typeArray6);
        java.lang.Class<?> wildcardClass9 = serializableArrayList8.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass35 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray16);
        java.lang.Class<?> wildcardClass20 = permutationArray16.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(permutationArrayList18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList16);
        org.junit.Assert.assertNotNull(constableArrayList17);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        com.thealgorithms.backtracking.Permutation[][][][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        java.lang.String[][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass39 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList37);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strComparableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(typeArrayList17);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(collectionArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]) ofFieldArray47;
        wildcardClassOfFieldArray48[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray48[1] = wildcardClassOfFieldArray37;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.lang.Class<?> wildcardClass55 = wildcardClassOfFieldArrayList54.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeDescriptorArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassOfFieldArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = genericDeclarationArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Object[]> objArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = objArrayList32.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(objArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = constableArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList67 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.lang.Class<?> wildcardClass69 = wildcardClassArrayList68.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList66);
        org.junit.Assert.assertNotNull(wildcardClassArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray5);
        java.lang.Class<?> wildcardClass10 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList15 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass17 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass11 = strComparableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList62 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(serializableArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList62);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList63);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = typeArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(constableArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassArrayList29);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = typeArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList61 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(serializableArrayList60);
        org.junit.Assert.assertNotNull(strArrayListArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        java.lang.String[][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] { strArray4 };
        java.lang.String[][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][] { strArray6, strArray7, strArray8, strArray9 };
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] { strArray10 };
        java.lang.String[][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][] { strArray12, strArray13, strArray14, strArray15 };
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] { strArray16 };
        java.lang.String[][][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][][] { strArray5, strArray11, strArray17 };
        java.util.List<java.lang.String[][][][][][][][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray18);
        java.lang.Class<?> wildcardClass20 = strArray18.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][] listArray28 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][][][][] listArray33 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray33;
        java.util.List[][][][][][][][][][] listArray36 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][][][][] listArray41 = new java.util.List[5][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass54 = strArrayListArray42.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Object[]> objArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList21 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.lang.Class<?> wildcardClass24 = typeArrayList23.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(objArrayList20);
        org.junit.Assert.assertNotNull(typeArrayList21);
        org.junit.Assert.assertNotNull(wildcardClassArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray47;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray50;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray48;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray60[2] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[3] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][] ofFieldArray70 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][] wildcardClassOfFieldArray71 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) ofFieldArray70;
        wildcardClassOfFieldArray71[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray71[1] = wildcardClassOfFieldArray37;
        wildcardClassOfFieldArray71[2] = wildcardClassOfFieldArray60;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray71;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList86 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList87 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass88 = wildcardClassOfFieldArrayList87.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray70);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray71);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList86);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][][] listArray28 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][][][][][][][] listArray33 = new java.util.List[4][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray33;
        strArrayListArray34[0] = strArrayListArray5;
        strArrayListArray34[1] = strArrayListArray13;
        strArrayListArray34[2] = strArrayListArray21;
        strArrayListArray34[3] = strArrayListArray29;
        java.util.List[][][][][][][][][][] listArray44 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray44;
        java.util.List[][][][][][][][][][][] listArray47 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray48 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray47;
        strArrayListArray48[0] = strArrayListArray45;
        java.util.List[][][][][][][][][][] listArray52 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray52;
        java.util.List[][][][][][][][][][][] listArray55 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray56 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray55;
        strArrayListArray56[0] = strArrayListArray53;
        java.util.List[][][][][][][][][][] listArray60 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray61 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray60;
        java.util.List[][][][][][][][][][][] listArray63 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray64 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray63;
        strArrayListArray64[0] = strArrayListArray61;
        java.util.List[][][][][][][][][][] listArray68 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray69 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray68;
        java.util.List[][][][][][][][][][][] listArray71 = new java.util.List[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray72 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray71;
        strArrayListArray72[0] = strArrayListArray69;
        java.util.List[][][][][][][][][][][][] listArray76 = new java.util.List[4][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray77 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray76;
        strArrayListArray77[0] = strArrayListArray48;
        strArrayListArray77[1] = strArrayListArray56;
        strArrayListArray77[2] = strArrayListArray64;
        strArrayListArray77[3] = strArrayListArray72;
        java.util.List[][][][][][][][][][][][][] listArray87 = new java.util.List[2][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][] strArrayListArray88 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][]) listArray87;
        strArrayListArray88[0] = strArrayListArray34;
        strArrayListArray88[1] = strArrayListArray77;
        java.util.List[][][][][][][][][][][][][][] listArray94 = new java.util.List[1][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][] strArrayListArray95 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]) listArray94;
        strArrayListArray95[0] = strArrayListArray88;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][]> strArrayListArrayList98 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray95);
        java.lang.Class<?> wildcardClass99 = strArrayListArray95.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray47);
        org.junit.Assert.assertNotNull(strArrayListArray48);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray55);
        org.junit.Assert.assertNotNull(strArrayListArray56);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray68);
        org.junit.Assert.assertNotNull(strArrayListArray69);
        org.junit.Assert.assertNotNull(listArray71);
        org.junit.Assert.assertNotNull(strArrayListArray72);
        org.junit.Assert.assertNotNull(listArray76);
        org.junit.Assert.assertNotNull(strArrayListArray77);
        org.junit.Assert.assertNotNull(listArray87);
        org.junit.Assert.assertNotNull(strArrayListArray88);
        org.junit.Assert.assertNotNull(listArray94);
        org.junit.Assert.assertNotNull(strArrayListArray95);
        org.junit.Assert.assertNotNull(strArrayListArrayList98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList65 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList66 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList67 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList70 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][]) wildcardClassArray54);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(typeArrayList65);
        org.junit.Assert.assertNotNull(typeArrayList66);
        org.junit.Assert.assertNotNull(typeArrayList67);
        org.junit.Assert.assertNotNull(wildcardClassArrayList68);
        org.junit.Assert.assertNotNull(wildcardClassArrayList69);
        org.junit.Assert.assertNotNull(typeArrayList70);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray7;
        wildcardClassOfFieldArray8[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray8[1] = wildcardClassOfFieldArray5;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray14;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray21[1] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray31;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray40 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray41 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray40;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray43 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray44 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray43;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray46 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray47 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray46;
        wildcardClassOfFieldArray47[0] = wildcardClassOfFieldArray41;
        wildcardClassOfFieldArray47[1] = wildcardClassOfFieldArray44;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray53 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray54 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray53;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray56 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray57 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray56;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][] ofFieldArray59 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray60 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][]) ofFieldArray59;
        wildcardClassOfFieldArray60[0] = wildcardClassOfFieldArray54;
        wildcardClassOfFieldArray60[1] = wildcardClassOfFieldArray57;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray67[1] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray67[2] = wildcardClassOfFieldArray34;
        wildcardClassOfFieldArray67[3] = wildcardClassOfFieldArray47;
        wildcardClassOfFieldArray67[4] = wildcardClassOfFieldArray60;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList78 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray67);
        java.lang.Class<?> wildcardClass79 = wildcardClassOfFieldArrayList78.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray40);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray41);
        org.junit.Assert.assertNotNull(ofFieldArray43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray44);
        org.junit.Assert.assertNotNull(ofFieldArray46);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray47);
        org.junit.Assert.assertNotNull(ofFieldArray53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray54);
        org.junit.Assert.assertNotNull(ofFieldArray56);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray57);
        org.junit.Assert.assertNotNull(ofFieldArray59);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray60);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList78);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.util.List<java.lang.String[][][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        java.util.List<java.lang.String[][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray3);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray1, permutationArray3 };
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray5 };
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray6, permutationArray8 };
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray11, permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray4, permutationArray9, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(permutationArrayList18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List[][][] listArray4 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List[][][][][] listArray14 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray15 = (java.util.List<java.lang.String[]>[][][][][]) listArray14;
        strArrayListArray15[0] = strArrayListArray8;
        java.util.List[][][] listArray19 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        java.util.List[][][] listArray22 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray23 = (java.util.List<java.lang.String[]>[][][]) listArray22;
        java.util.List[][][][] listArray25 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray20;
        strArrayListArray26[1] = strArrayListArray23;
        java.util.List[][][][][] listArray32 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray33 = (java.util.List<java.lang.String[]>[][][][][]) listArray32;
        strArrayListArray33[0] = strArrayListArray26;
        java.util.List[][][] listArray37 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][][]) listArray37;
        java.util.List[][][] listArray40 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][][]) listArray40;
        java.util.List[][][][] listArray43 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][][][]) listArray43;
        strArrayListArray44[0] = strArrayListArray38;
        strArrayListArray44[1] = strArrayListArray41;
        java.util.List[][][][][] listArray50 = new java.util.List[1][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray51 = (java.util.List<java.lang.String[]>[][][][][]) listArray50;
        strArrayListArray51[0] = strArrayListArray44;
        java.util.List[][][][][][] listArray55 = new java.util.List[3][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray56 = (java.util.List<java.lang.String[]>[][][][][][]) listArray55;
        strArrayListArray56[0] = strArrayListArray15;
        strArrayListArray56[1] = strArrayListArray33;
        strArrayListArray56[2] = strArrayListArray51;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray56);
        java.lang.Class<?> wildcardClass64 = strArrayListArrayList63.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray14);
        org.junit.Assert.assertNotNull(strArrayListArray15);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray50);
        org.junit.Assert.assertNotNull(strArrayListArray51);
        org.junit.Assert.assertNotNull(listArray55);
        org.junit.Assert.assertNotNull(strArrayListArray56);
        org.junit.Assert.assertNotNull(strArrayListArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        java.lang.String[][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass10 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(permutationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList31);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(constableArrayList15);
        org.junit.Assert.assertNotNull(constableArrayList16);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = typeArrayList31.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(typeArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = typeDescriptorArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[][] {};
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray0, genericDeclarationArray1 };
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray2);
        java.lang.Class<?> wildcardClass5 = genericDeclarationArrayList4.getClass();
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList3);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Object[]> objArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(objArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][] classArray13 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray13;
        java.lang.Class[][][][][][][][][][][][][] classArray16 = new java.lang.Class[5][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray17 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray16;
        wildcardClassArray17[0] = wildcardClassArray2;
        wildcardClassArray17[1] = wildcardClassArray5;
        wildcardClassArray17[2] = wildcardClassArray8;
        wildcardClassArray17[3] = wildcardClassArray11;
        wildcardClassArray17[4] = wildcardClassArray14;
        java.lang.Class[][][][][][][][][][][][] classArray29 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray30 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray29;
        java.lang.Class[][][][][][][][][][][][] classArray32 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray33 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray32;
        java.lang.Class[][][][][][][][][][][][] classArray35 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray36 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray35;
        java.lang.Class[][][][][][][][][][][][] classArray38 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray39 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray38;
        java.lang.Class[][][][][][][][][][][][] classArray41 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray42 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray41;
        java.lang.Class[][][][][][][][][][][][][] classArray44 = new java.lang.Class[5][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray45 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray44;
        wildcardClassArray45[0] = wildcardClassArray30;
        wildcardClassArray45[1] = wildcardClassArray33;
        wildcardClassArray45[2] = wildcardClassArray36;
        wildcardClassArray45[3] = wildcardClassArray39;
        wildcardClassArray45[4] = wildcardClassArray42;
        java.lang.Class[][][][][][][][][][][][][][] classArray57 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray58 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray57;
        wildcardClassArray58[0] = wildcardClassArray17;
        wildcardClassArray58[1] = wildcardClassArray45;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray58);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList64 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray58);
        java.lang.Class<?> wildcardClass65 = wildcardClassArray58.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(classArray29);
        org.junit.Assert.assertNotNull(wildcardClassArray30);
        org.junit.Assert.assertNotNull(classArray32);
        org.junit.Assert.assertNotNull(wildcardClassArray33);
        org.junit.Assert.assertNotNull(classArray35);
        org.junit.Assert.assertNotNull(wildcardClassArray36);
        org.junit.Assert.assertNotNull(classArray38);
        org.junit.Assert.assertNotNull(wildcardClassArray39);
        org.junit.Assert.assertNotNull(classArray41);
        org.junit.Assert.assertNotNull(wildcardClassArray42);
        org.junit.Assert.assertNotNull(classArray44);
        org.junit.Assert.assertNotNull(wildcardClassArray45);
        org.junit.Assert.assertNotNull(classArray57);
        org.junit.Assert.assertNotNull(wildcardClassArray58);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass10 = strArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass35 = strArrayCollectionArrayList34.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        java.util.List[][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray2, permutationArray5, permutationArray8, permutationArray11, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass20 = permutationArray15.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(permutationArrayList18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(charSequenceArrayList10);
        org.junit.Assert.assertNotNull(constantDescArrayList11);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = typeArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray5);
        java.util.List<java.lang.String[]> strArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(strArrayList11);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = typeArrayList15.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList36 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.lang.Class<?> wildcardClass38 = wildcardClassArrayList37.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(wildcardClassArrayList36);
        org.junit.Assert.assertNotNull(wildcardClassArrayList37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(objArrayList4);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList5);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray10 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        strArrayListArray11[0] = strArrayList8;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray11);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray11);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList15);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList59 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList60 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList62 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList59);
        org.junit.Assert.assertNotNull(strArrayListArrayList60);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList61);
        org.junit.Assert.assertNotNull(collectionArrayList62);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList63);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.io.Serializable[]> serializableArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(serializableArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList7);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass32 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray0, permutationArray1, permutationArray2, permutationArray3, permutationArray4, permutationArray5 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray7, permutationArray8, permutationArray9, permutationArray10, permutationArray11, permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray14, permutationArray15, permutationArray16, permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray21, permutationArray22, permutationArray23, permutationArray24, permutationArray25, permutationArray26 };
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6, permutationArray13, permutationArray20, permutationArray27 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray28);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray28);
        java.lang.Class<?> wildcardClass31 = permutationArray28.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArrayList29);
        org.junit.Assert.assertNotNull(permutationArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass8 = constableArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][] listArray28 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][][][][] listArray33 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray33;
        java.util.List[][][][][][][][][][] listArray36 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][][][][] listArray41 = new java.util.List[5][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass55 = strArrayListArrayList54.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = genericDeclarationArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(annotatedElementArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        java.lang.Class[][][][][][] classArray1 = new java.lang.Class[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        java.util.Collection[][] collectionArray0 = new java.util.Collection[][] {};
        java.util.List<java.util.Collection[][]> collectionArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray0);
        org.junit.Assert.assertNotNull(collectionArray0);
        org.junit.Assert.assertNotNull(collectionArrayList1);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        java.lang.Class[][][][][] classArray1 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        java.lang.Class[][][][][][] classArray7 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.lang.Class[][][][][] classArray14 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray15 = (java.lang.Class<?>[][][][][]) classArray14;
        java.lang.Class[][][][][] classArray17 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][]) classArray17;
        java.lang.Class[][][][][][] classArray20 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray15;
        wildcardClassArray21[1] = wildcardClassArray18;
        java.lang.Class[][][][][] classArray27 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray28 = (java.lang.Class<?>[][][][][]) classArray27;
        java.lang.Class[][][][][] classArray30 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray31 = (java.lang.Class<?>[][][][][]) classArray30;
        java.lang.Class[][][][][][] classArray33 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray34 = (java.lang.Class<?>[][][][][][]) classArray33;
        wildcardClassArray34[0] = wildcardClassArray28;
        wildcardClassArray34[1] = wildcardClassArray31;
        java.lang.Class[][][][][] classArray40 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray41 = (java.lang.Class<?>[][][][][]) classArray40;
        java.lang.Class[][][][][] classArray43 = new java.lang.Class[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray44 = (java.lang.Class<?>[][][][][]) classArray43;
        java.lang.Class[][][][][][] classArray46 = new java.lang.Class[2][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][] wildcardClassArray47 = (java.lang.Class<?>[][][][][][]) classArray46;
        wildcardClassArray47[0] = wildcardClassArray41;
        wildcardClassArray47[1] = wildcardClassArray44;
        java.lang.Class[][][][][][][] classArray53 = new java.lang.Class[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][] wildcardClassArray54 = (java.lang.Class<?>[][][][][][][]) classArray53;
        wildcardClassArray54[0] = wildcardClassArray8;
        wildcardClassArray54[1] = wildcardClassArray21;
        wildcardClassArray54[2] = wildcardClassArray34;
        wildcardClassArray54[3] = wildcardClassArray47;
        java.util.List<java.lang.Class<?>[][][][][][][]> wildcardClassArrayList63 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray54);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList64 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) wildcardClassArray54);
        java.lang.Class<?> wildcardClass65 = wildcardClassArray54.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray27);
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(classArray30);
        org.junit.Assert.assertNotNull(wildcardClassArray31);
        org.junit.Assert.assertNotNull(classArray33);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(classArray40);
        org.junit.Assert.assertNotNull(wildcardClassArray41);
        org.junit.Assert.assertNotNull(classArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
        org.junit.Assert.assertNotNull(classArray46);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(classArray53);
        org.junit.Assert.assertNotNull(wildcardClassArray54);
        org.junit.Assert.assertNotNull(wildcardClassArrayList63);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.lang.Class<?> wildcardClass9 = strArray4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        java.lang.String[][][][][][][][][][][][][][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray4 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray6, strArray7 };
        java.lang.String[][][][][][] strArray9 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray11 = new java.lang.String[][][][][][][] { strArray9, strArray10 };
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray13 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] { strArray12, strArray13 };
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray2, strArray5, strArray8, strArray11, strArray14 };
        java.util.List<java.lang.String[][][][][][][][]> strArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray15);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArrayList16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArrayList19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(strArrayList21);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        java.lang.Class[][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(typeArrayList25);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = annotatedElementArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(annotatedElementArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray1 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][] { strArray0, strArray1 };
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][] { strArray3, strArray4 };
        java.lang.String[][][][][][][][] strArray6 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][] { strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray10 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][] { strArray9, strArray10 };
        java.lang.String[][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][] { strArray2, strArray5, strArray8, strArray11 };
        java.lang.String[][][][][][][][] strArray13 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][] { strArray13, strArray14 };
        java.lang.String[][][][][][][][] strArray16 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray17 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][] { strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray20 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][] { strArray19, strArray20 };
        java.lang.String[][][][][][][][] strArray22 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray22, strArray23 };
        java.lang.String[][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][] { strArray15, strArray18, strArray21, strArray24 };
        java.lang.String[][][][][][][][] strArray26 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray27 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][] { strArray26, strArray27 };
        java.lang.String[][][][][][][][] strArray29 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray30 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][] { strArray29, strArray30 };
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray33 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][] { strArray32, strArray33 };
        java.lang.String[][][][][][][][] strArray35 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][] { strArray35, strArray36 };
        java.lang.String[][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][] { strArray28, strArray31, strArray34, strArray37 };
        java.lang.String[][][][][][][][] strArray39 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][] { strArray39, strArray40 };
        java.lang.String[][][][][][][][] strArray42 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray43 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][] { strArray42, strArray43 };
        java.lang.String[][][][][][][][] strArray45 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray46 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray47 = new java.lang.String[][][][][][][][][] { strArray45, strArray46 };
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray49 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][] { strArray48, strArray49 };
        java.lang.String[][][][][][][][][][] strArray51 = new java.lang.String[][][][][][][][][][] { strArray41, strArray44, strArray47, strArray50 };
        java.lang.String[][][][][][][][] strArray52 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray53 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray54 = new java.lang.String[][][][][][][][][] { strArray52, strArray53 };
        java.lang.String[][][][][][][][] strArray55 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray56 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray57 = new java.lang.String[][][][][][][][][] { strArray55, strArray56 };
        java.lang.String[][][][][][][][] strArray58 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray59 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray60 = new java.lang.String[][][][][][][][][] { strArray58, strArray59 };
        java.lang.String[][][][][][][][] strArray61 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray62 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray63 = new java.lang.String[][][][][][][][][] { strArray61, strArray62 };
        java.lang.String[][][][][][][][][][] strArray64 = new java.lang.String[][][][][][][][][][] { strArray54, strArray57, strArray60, strArray63 };
        java.lang.String[][][][][][][][] strArray65 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray66 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray67 = new java.lang.String[][][][][][][][][] { strArray65, strArray66 };
        java.lang.String[][][][][][][][] strArray68 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray69 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray70 = new java.lang.String[][][][][][][][][] { strArray68, strArray69 };
        java.lang.String[][][][][][][][] strArray71 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray72 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray73 = new java.lang.String[][][][][][][][][] { strArray71, strArray72 };
        java.lang.String[][][][][][][][] strArray74 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][] strArray75 = new java.lang.String[][][][][][][][] {};
        java.lang.String[][][][][][][][][] strArray76 = new java.lang.String[][][][][][][][][] { strArray74, strArray75 };
        java.lang.String[][][][][][][][][][] strArray77 = new java.lang.String[][][][][][][][][][] { strArray67, strArray70, strArray73, strArray76 };
        java.lang.String[][][][][][][][][][][] strArray78 = new java.lang.String[][][][][][][][][][][] { strArray12, strArray25, strArray38, strArray51, strArray64, strArray77 };
        java.util.List<java.lang.String[][][][][][][][][][][]> strArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(strArray78);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertNotNull(strArrayList79);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.lang.Class<?> wildcardClass24 = wildcardClassArrayList23.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(wildcardClassArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(typeArrayList22);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList11);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        java.lang.Class[][][][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray26[2] = wildcardClassOfFieldArray21;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray34 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray35 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray34;
        wildcardClassOfFieldArray35[0] = wildcardClassOfFieldArray26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList39 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList40 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.lang.Class<?> wildcardClass42 = wildcardClassOfFieldArrayList41.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList39);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList40);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList17);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Object[]> objArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray47);
        java.lang.Class<?> wildcardClass62 = objArrayList61.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(collectionArrayList60);
        org.junit.Assert.assertNotNull(objArrayList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.util.List<java.lang.constant.Constable[]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray5);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        java.lang.String[][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray6 = new java.lang.String[][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][][][][][][][][][] strArray7 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray8 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray9 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray10 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray11 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray12 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray13 = new java.lang.String[][][][][][][][][][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][][][][][][][] strArray14 = new java.lang.String[][][][][][][][][][][][][][] { strArray6, strArray13 };
        java.lang.String[][][][][][][][][][][][] strArray15 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray16 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray17 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray18 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray19 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray21 = new java.lang.String[][][][][][][][][][][][][] { strArray15, strArray16, strArray17, strArray18, strArray19, strArray20 };
        java.lang.String[][][][][][][][][][][][] strArray22 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray23 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray25 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray26 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray27 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray28 = new java.lang.String[][][][][][][][][][][][][] { strArray22, strArray23, strArray24, strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][][][][][][][][] strArray29 = new java.lang.String[][][][][][][][][][][][][][] { strArray21, strArray28 };
        java.lang.String[][][][][][][][][][][][] strArray30 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray31 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray32 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray33 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray34 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray35 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray36 = new java.lang.String[][][][][][][][][][][][][] { strArray30, strArray31, strArray32, strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][][][][][][] strArray37 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray38 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray39 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray40 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray41 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][] strArray42 = new java.lang.String[][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][] strArray43 = new java.lang.String[][][][][][][][][][][][][] { strArray37, strArray38, strArray39, strArray40, strArray41, strArray42 };
        java.lang.String[][][][][][][][][][][][][][] strArray44 = new java.lang.String[][][][][][][][][][][][][][] { strArray36, strArray43 };
        java.lang.String[][][][][][][][][][][][][][][] strArray45 = new java.lang.String[][][][][][][][][][][][][][][] { strArray14, strArray29, strArray44 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray45);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArrayList46);
        org.junit.Assert.assertNotNull(strArrayList47);
        org.junit.Assert.assertNotNull(strArrayList48);
        org.junit.Assert.assertNotNull(strArrayList49);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeDescriptorArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass16 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        java.lang.reflect.Type[][][][][][][][][][][][][] typeArray0 = new java.lang.reflect.Type[][][][][][][][][][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass5 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][] classArray10 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][]) classArray10;
        java.lang.Class[][][][][][][][][] classArray13 = new java.lang.Class[4][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray14 = (java.lang.Class<?>[][][][][][][][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][][][][][][][]> wildcardClassArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][]) wildcardClassArray14);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        java.util.List[][][][][][][][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        java.lang.String[][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray2 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray3 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][] strArray4 = new java.lang.String[][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][] strArray5 = new java.lang.String[][][][][][][][][][][][][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[][]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = serializableArrayList5.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        java.lang.Class[][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][] classArray7 = new java.lang.Class[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][]) classArray7;
        java.lang.Class[][][][][][][][][][] classArray10 = new java.lang.Class[3][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray11 = (java.lang.Class<?>[][][][][][][][][][]) classArray10;
        wildcardClassArray11[0] = wildcardClassArray2;
        wildcardClassArray11[1] = wildcardClassArray5;
        wildcardClassArray11[2] = wildcardClassArray8;
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList19 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]> wildcardClassOfFieldArrayList20 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.Class<?>[][][][][][][][][][]> wildcardClassArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList22 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][]> typeArrayList23 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][]) wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
        org.junit.Assert.assertNotNull(typeArrayList19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList20);
        org.junit.Assert.assertNotNull(wildcardClassArrayList21);
        org.junit.Assert.assertNotNull(typeArrayList22);
        org.junit.Assert.assertNotNull(typeArrayList23);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass18 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]) ofFieldArray10;
        wildcardClassOfFieldArray11[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray11[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray11[2] = wildcardClassOfFieldArray8;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][]> wildcardClassOfFieldArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray11);
        java.lang.Class<?> wildcardClass19 = wildcardClassOfFieldArray11.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray3 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray7 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray9 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray13 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray2, permutationArray5, permutationArray8, permutationArray11, permutationArray14 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.util.List<java.io.Serializable[][]> serializableArrayList18 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[][]) permutationArray15);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList19 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray15);
        java.lang.Class<?> wildcardClass20 = permutationArrayList19.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArrayList16);
        org.junit.Assert.assertNotNull(permutationArrayList17);
        org.junit.Assert.assertNotNull(serializableArrayList18);
        org.junit.Assert.assertNotNull(permutationArrayList19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass5 = permutationArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][] listArray25 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray25;
        java.util.List[][][][][][][][][][] listArray28 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray29 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray28;
        strArrayListArray29[0] = strArrayListArray26;
        java.util.List[][][][][][][][][] listArray33 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray34 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray33;
        java.util.List[][][][][][][][][][] listArray36 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray37 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray36;
        strArrayListArray37[0] = strArrayListArray34;
        java.util.List[][][][][][][][][][][] listArray41 = new java.util.List[5][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray42 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray41;
        strArrayListArray42[0] = strArrayListArray5;
        strArrayListArray42[1] = strArrayListArray13;
        strArrayListArray42[2] = strArrayListArray21;
        strArrayListArray42[3] = strArrayListArray29;
        strArrayListArray42[4] = strArrayListArray37;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray42);
        java.lang.Class<?> wildcardClass56 = strArrayListArrayList55.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(listArray28);
        org.junit.Assert.assertNotNull(strArrayListArray29);
        org.junit.Assert.assertNotNull(listArray33);
        org.junit.Assert.assertNotNull(strArrayListArray34);
        org.junit.Assert.assertNotNull(listArray36);
        org.junit.Assert.assertNotNull(strArrayListArray37);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(strArrayListArrayList53);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass14 = constantDescArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(constantDescArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList5);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList6);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList7);
        org.junit.Assert.assertNotNull(typeArrayList8);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(serializableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][][]> strArrayIterableArrayList94 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][][]) strArrayListArray86);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList94);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList61 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList62 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass63 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(serializableArrayList60);
        org.junit.Assert.assertNotNull(collectionArrayList61);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        java.lang.Class[][][][] classArray1 = new java.lang.Class[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][]) classArray1;
        java.lang.Class[][][][][] classArray4 = new java.lang.Class[1][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray2 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][] typeArray3 = new java.lang.reflect.Type[][][][] { typeArray2 };
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray6 = new java.lang.reflect.Type[][][] { typeArray4, typeArray5 };
        java.lang.reflect.Type[][][][] typeArray7 = new java.lang.reflect.Type[][][][] { typeArray6 };
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray10 = new java.lang.reflect.Type[][][] { typeArray8, typeArray9 };
        java.lang.reflect.Type[][][][] typeArray11 = new java.lang.reflect.Type[][][][] { typeArray10 };
        java.lang.reflect.Type[][][][][] typeArray12 = new java.lang.reflect.Type[][][][][] { typeArray3, typeArray7, typeArray11 };
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray15 = new java.lang.reflect.Type[][][] { typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][] typeArray16 = new java.lang.reflect.Type[][][][] { typeArray15 };
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray19 = new java.lang.reflect.Type[][][] { typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][] typeArray20 = new java.lang.reflect.Type[][][][] { typeArray19 };
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray21, typeArray22 };
        java.lang.reflect.Type[][][][] typeArray24 = new java.lang.reflect.Type[][][][] { typeArray23 };
        java.lang.reflect.Type[][][][][] typeArray25 = new java.lang.reflect.Type[][][][][] { typeArray16, typeArray20, typeArray24 };
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray28 = new java.lang.reflect.Type[][][] { typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][] typeArray29 = new java.lang.reflect.Type[][][][] { typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray32 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][] typeArray33 = new java.lang.reflect.Type[][][][] { typeArray32 };
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray35 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray36 = new java.lang.reflect.Type[][][] { typeArray34, typeArray35 };
        java.lang.reflect.Type[][][][] typeArray37 = new java.lang.reflect.Type[][][][] { typeArray36 };
        java.lang.reflect.Type[][][][][] typeArray38 = new java.lang.reflect.Type[][][][][] { typeArray29, typeArray33, typeArray37 };
        java.lang.reflect.Type[][] typeArray39 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray40 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray41 = new java.lang.reflect.Type[][][] { typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][] typeArray42 = new java.lang.reflect.Type[][][][] { typeArray41 };
        java.lang.reflect.Type[][] typeArray43 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray44 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray45 = new java.lang.reflect.Type[][][] { typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][] typeArray46 = new java.lang.reflect.Type[][][][] { typeArray45 };
        java.lang.reflect.Type[][] typeArray47 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray48 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray49 = new java.lang.reflect.Type[][][] { typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][] typeArray50 = new java.lang.reflect.Type[][][][] { typeArray49 };
        java.lang.reflect.Type[][][][][] typeArray51 = new java.lang.reflect.Type[][][][][] { typeArray42, typeArray46, typeArray50 };
        java.lang.reflect.Type[][] typeArray52 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray53 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray54 = new java.lang.reflect.Type[][][] { typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][] typeArray55 = new java.lang.reflect.Type[][][][] { typeArray54 };
        java.lang.reflect.Type[][] typeArray56 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray57 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray58 = new java.lang.reflect.Type[][][] { typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][] typeArray59 = new java.lang.reflect.Type[][][][] { typeArray58 };
        java.lang.reflect.Type[][] typeArray60 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray61 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray62 = new java.lang.reflect.Type[][][] { typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][] typeArray63 = new java.lang.reflect.Type[][][][] { typeArray62 };
        java.lang.reflect.Type[][][][][] typeArray64 = new java.lang.reflect.Type[][][][][] { typeArray55, typeArray59, typeArray63 };
        java.lang.reflect.Type[][] typeArray65 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray66 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray67 = new java.lang.reflect.Type[][][] { typeArray65, typeArray66 };
        java.lang.reflect.Type[][][][] typeArray68 = new java.lang.reflect.Type[][][][] { typeArray67 };
        java.lang.reflect.Type[][] typeArray69 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray70 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray71 = new java.lang.reflect.Type[][][] { typeArray69, typeArray70 };
        java.lang.reflect.Type[][][][] typeArray72 = new java.lang.reflect.Type[][][][] { typeArray71 };
        java.lang.reflect.Type[][] typeArray73 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray74 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray75 = new java.lang.reflect.Type[][][] { typeArray73, typeArray74 };
        java.lang.reflect.Type[][][][] typeArray76 = new java.lang.reflect.Type[][][][] { typeArray75 };
        java.lang.reflect.Type[][][][][] typeArray77 = new java.lang.reflect.Type[][][][][] { typeArray68, typeArray72, typeArray76 };
        java.lang.reflect.Type[][][][][][] typeArray78 = new java.lang.reflect.Type[][][][][][] { typeArray12, typeArray25, typeArray38, typeArray51, typeArray64, typeArray77 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArray78.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArrayList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(typeArrayList15);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        java.util.List[][][][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass26 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(objArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass47 = wildcardClassOfFieldArrayList46.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray4 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray1, permutationArray3, permutationArray5 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray6);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][]> permutationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray6);
        java.lang.Class<?> wildcardClass9 = permutationArray6.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(permutationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList14);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList15);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        java.util.List[][][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass10 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassArrayList7);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass33 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        java.lang.Class[][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][]) classArray1;
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[][][][][][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[][][][][][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList11);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][]> strArrayListArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass9 = strArrayListArrayList8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(strArrayListArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(strArrayListArrayList7);
        org.junit.Assert.assertNotNull(collectionArrayList8);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(charSequenceArrayList11);
        org.junit.Assert.assertNotNull(strComparableArrayList12);
        org.junit.Assert.assertNotNull(objArrayList13);
        org.junit.Assert.assertNotNull(strArrayList14);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        java.util.List[][][][][][][][][] listArray1 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray1;
        java.util.List[][][][][][][][][][] listArray4 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray4;
        strArrayListArray5[0] = strArrayListArray2;
        java.util.List[][][][][][][][][] listArray9 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray10 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray9;
        java.util.List[][][][][][][][][][] listArray12 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray13 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray12;
        strArrayListArray13[0] = strArrayListArray10;
        java.util.List[][][][][][][][][] listArray17 = new java.util.List[0][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][] strArrayListArray18 = (java.util.List<java.lang.String[]>[][][][][][][][][]) listArray17;
        java.util.List[][][][][][][][][][] listArray20 = new java.util.List[1][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][] strArrayListArray21 = (java.util.List<java.lang.String[]>[][][][][][][][][][]) listArray20;
        strArrayListArray21[0] = strArrayListArray18;
        java.util.List[][][][][][][][][][][] listArray25 = new java.util.List[3][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][][][][] strArrayListArray26 = (java.util.List<java.lang.String[]>[][][][][][][][][][][]) listArray25;
        strArrayListArray26[0] = strArrayListArray5;
        strArrayListArray26[1] = strArrayListArray13;
        strArrayListArray26[2] = strArrayListArray21;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray26);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray26);
        java.lang.Class<?> wildcardClass35 = strArrayListArray26.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(listArray12);
        org.junit.Assert.assertNotNull(strArrayListArray13);
        org.junit.Assert.assertNotNull(listArray17);
        org.junit.Assert.assertNotNull(strArrayListArray18);
        org.junit.Assert.assertNotNull(listArray20);
        org.junit.Assert.assertNotNull(strArrayListArray21);
        org.junit.Assert.assertNotNull(listArray25);
        org.junit.Assert.assertNotNull(strArrayListArray26);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(serializableArrayList8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray24 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray25 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray24;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray27 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray28 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray27;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray30 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray31 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray30;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][]) ofFieldArray33;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][] ofFieldArray36 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray37 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][]) ofFieldArray36;
        wildcardClassOfFieldArray37[0] = wildcardClassOfFieldArray25;
        wildcardClassOfFieldArray37[1] = wildcardClassOfFieldArray28;
        wildcardClassOfFieldArray37[2] = wildcardClassOfFieldArray31;
        wildcardClassOfFieldArray37[3] = wildcardClassOfFieldArray34;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][][][][] ofFieldArray47 = new java.lang.invoke.TypeDescriptor.OfField[2][][][][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray48 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]) ofFieldArray47;
        wildcardClassOfFieldArray48[0] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray48[1] = wildcardClassOfFieldArray37;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray48);
        java.lang.Class<?> wildcardClass55 = wildcardClassOfFieldArray48.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray24);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray25);
        org.junit.Assert.assertNotNull(ofFieldArray27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray28);
        org.junit.Assert.assertNotNull(ofFieldArray30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray31);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(ofFieldArray36);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray37);
        org.junit.Assert.assertNotNull(ofFieldArray47);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray48);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList53);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
        org.junit.Assert.assertNotNull(wildcardClassArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray1 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray4 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray5 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray6 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray8 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray12 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray13 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray16 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray17 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray18 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray17, permutationArray18, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray22 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray23 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray25 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray26 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray27 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray30 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray31 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray33 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray20, permutationArray24, permutationArray28, permutationArray32 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray34 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray35 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray37 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray34, permutationArray35, permutationArray36 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray38 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray38, permutationArray39, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray45 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray42, permutationArray43, permutationArray44 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray46 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray47 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray48 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray46, permutationArray47, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray37, permutationArray41, permutationArray45, permutationArray49 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray51 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray52 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray53 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray54 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray51, permutationArray52, permutationArray53 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray55 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray56 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray57 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray58 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray55, permutationArray56, permutationArray57 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray60 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray61 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray62 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray59, permutationArray60, permutationArray61 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray63 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray64 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray65 = new com.thealgorithms.backtracking.Permutation[][][][] {};
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray66 = new com.thealgorithms.backtracking.Permutation[][][][][] { permutationArray63, permutationArray64, permutationArray65 };
        com.thealgorithms.backtracking.Permutation[][][][][][] permutationArray67 = new com.thealgorithms.backtracking.Permutation[][][][][][] { permutationArray54, permutationArray58, permutationArray62, permutationArray66 };
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray68 = new com.thealgorithms.backtracking.Permutation[][][][][][][] { permutationArray16, permutationArray33, permutationArray50, permutationArray67 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList69 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray68);
        java.lang.Class<?> wildcardClass70 = permutationArrayList69.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray46);
        org.junit.Assert.assertNotNull(permutationArray47);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray52);
        org.junit.Assert.assertNotNull(permutationArray53);
        org.junit.Assert.assertNotNull(permutationArray54);
        org.junit.Assert.assertNotNull(permutationArray55);
        org.junit.Assert.assertNotNull(permutationArray56);
        org.junit.Assert.assertNotNull(permutationArray57);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray60);
        org.junit.Assert.assertNotNull(permutationArray61);
        org.junit.Assert.assertNotNull(permutationArray62);
        org.junit.Assert.assertNotNull(permutationArray63);
        org.junit.Assert.assertNotNull(permutationArray64);
        org.junit.Assert.assertNotNull(permutationArray65);
        org.junit.Assert.assertNotNull(permutationArray66);
        org.junit.Assert.assertNotNull(permutationArray67);
        org.junit.Assert.assertNotNull(permutationArray68);
        org.junit.Assert.assertNotNull(permutationArrayList69);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        java.lang.Class[][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][] classArray4 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.lang.Class[][][][][][][][][][] classArray9 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray10 = (java.lang.Class<?>[][][][][][][][][][]) classArray9;
        java.lang.Class[][][][][][][][][][][] classArray12 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray13 = (java.lang.Class<?>[][][][][][][][][][][]) classArray12;
        wildcardClassArray13[0] = wildcardClassArray10;
        java.lang.Class[][][][][][][][][][] classArray17 = new java.lang.Class[0][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][] wildcardClassArray18 = (java.lang.Class<?>[][][][][][][][][][]) classArray17;
        java.lang.Class[][][][][][][][][][][] classArray20 = new java.lang.Class[1][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][] wildcardClassArray21 = (java.lang.Class<?>[][][][][][][][][][][]) classArray20;
        wildcardClassArray21[0] = wildcardClassArray18;
        java.lang.Class[][][][][][][][][][][][] classArray25 = new java.lang.Class[3][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][] wildcardClassArray26 = (java.lang.Class<?>[][][][][][][][][][][][]) classArray25;
        wildcardClassArray26[0] = wildcardClassArray5;
        wildcardClassArray26[1] = wildcardClassArray13;
        wildcardClassArray26[2] = wildcardClassArray21;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][]> wildcardClassArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray26);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]> wildcardClassOfFieldArrayList35 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][]) wildcardClassArray26);
        java.util.List<java.lang.reflect.Type[][][][][][][][][][][][]> typeArrayList36 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][][][][][][][][][]) wildcardClassArray26);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray9);
        org.junit.Assert.assertNotNull(wildcardClassArray10);
        org.junit.Assert.assertNotNull(classArray12);
        org.junit.Assert.assertNotNull(wildcardClassArray13);
        org.junit.Assert.assertNotNull(classArray17);
        org.junit.Assert.assertNotNull(wildcardClassArray18);
        org.junit.Assert.assertNotNull(classArray20);
        org.junit.Assert.assertNotNull(wildcardClassArray21);
        org.junit.Assert.assertNotNull(classArray25);
        org.junit.Assert.assertNotNull(wildcardClassArray26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList33);
        org.junit.Assert.assertNotNull(wildcardClassArrayList34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList35);
        org.junit.Assert.assertNotNull(typeArrayList36);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass31 = wildcardClassArrayList30.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(typeArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(annotatedElementArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassArrayList5);
        org.junit.Assert.assertNotNull(serializableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList10);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][][][][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        java.lang.Class[][][][][][][][][][][][][] classArray1 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray2 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray1;
        java.lang.Class[][][][][][][][][][][][][] classArray4 = new java.lang.Class[0][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][][][][][][][][][][]) classArray4;
        java.lang.Class[][][][][][][][][][][][][][] classArray7 = new java.lang.Class[2][][][][][][][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][][][][][][][][][][][] wildcardClassArray8 = (java.lang.Class<?>[][][][][][][][][][][][][][]) classArray7;
        wildcardClassArray8[0] = wildcardClassArray2;
        wildcardClassArray8[1] = wildcardClassArray5;
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]> wildcardClassOfFieldArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][][][][][][][]) wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        java.util.List<java.lang.Class<?>[][][][][][][][][][][][][][]> wildcardClassArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList13);
        org.junit.Assert.assertNotNull(wildcardClassArrayList14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList15);
        org.junit.Assert.assertNotNull(wildcardClassArrayList16);
        org.junit.Assert.assertNotNull(wildcardClassArrayList17);
        org.junit.Assert.assertNotNull(wildcardClassArrayList18);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        java.lang.String[][][][][][][][][][][][][][][][][][][] strArray0 = new java.lang.String[][][][][][][][][][][][][][][][][][][] {};
        java.lang.String[][][][][][][][][][][][][][][][][][][][] strArray1 = new java.lang.String[][][][][][][][][][][][][][][][][][][][] { strArray0 };
        java.util.List<java.lang.String[][][][][][][][][][][][][][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass10 = typeDescriptorArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(typeArrayList12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
    }
}


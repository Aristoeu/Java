package Permutation;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.CharSequence[] charSequenceArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.CharSequence[]> charSequenceArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(charSequenceArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.lang.constant.Constable[][] constableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.constant.Constable[][]> constableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(constableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = strArrayCollectionArrayList3.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = collectionArray1.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = collectionArray1.getClass();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { wildcardClass4, wildcardClass9, wildcardClass14 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass92 = collectionArrayList91.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass4 = collectionArray1.getClass();
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { wildcardClass4, wildcardClass9, wildcardClass14 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArrayList16.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass55 = strArrayListArrayList54.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass92 = collectionArray90.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass6 = constantDescArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass5 = collectionArray1.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass3 = strArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass5 = strArrayCollectionArrayList4.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass3 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass4 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass30 = strArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayIterableArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass5 = strComparableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass9 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.lang.Class<?> wildcardClass10 = serializableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass10 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayCollectionArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayListArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass7 = charSequenceArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArrayList11.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass5 = charSequenceArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = constantDescArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass84 = wildcardClassOfFieldArrayList83.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.lang.Iterable<java.lang.String[]>[] strArrayIterableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayIterableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArrayList1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.util.List<java.util.Collection[][]> collectionArrayList92 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass93 = collectionArray90.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(collectionArrayList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.util.List<java.util.Collection[][]> collectionArrayList92 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass93 = collectionArrayList92.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(collectionArrayList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArrayList25.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass3 = permutationArray1.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass5 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass56 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray24.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass30 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass53 = permutationArray50.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(permutationArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArrayList12.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<java.io.Serializable[]> serializableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray50);
        java.lang.Class<?> wildcardClass53 = serializableArrayList52.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(serializableArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass53 = permutationArrayList52.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(permutationArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass28 = wildcardClassOfFieldArrayList27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass74 = strArrayListArray68.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass22 = permutationArray20.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass44 = wildcardClassOfFieldArrayList43.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass45 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass11 = strArrayListArray6.getClass();
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.Class<?> wildcardClass16 = collectionArray13.getClass();
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.lang.Class<?> wildcardClass21 = strArrayList20.getClass();
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { wildcardClass16, wildcardClass21, wildcardClass26 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArrayList28.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray30 = new java.lang.invoke.TypeDescriptor[] { wildcardClass11, wildcardClass29 };
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray30);
        java.lang.Class<?> wildcardClass32 = typeDescriptorArray30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeDescriptorArray30);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass27 = typeArray24.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass86 = wildcardClassOfFieldArrayList85.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass28 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass75 = strArrayListArray68.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass31 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArrayList56.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.lang.Class<?> wildcardClass94 = strArrayListArrayList93.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass44 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass56 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.lang.constant.Constable[][] constableArray0 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray2 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray3 = new java.lang.constant.Constable[][][] { constableArray0, constableArray1, constableArray2 };
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray6 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray7 = new java.lang.constant.Constable[][][] { constableArray4, constableArray5, constableArray6 };
        java.lang.constant.Constable[][][][] constableArray8 = new java.lang.constant.Constable[][][][] { constableArray3, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass10 = constableArrayList9.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArrayList3.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArrayList2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass22 = permutationArrayList21.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass45 = permutationArray42.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(permutationArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.lang.constant.Constable[][] constableArray0 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray2 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray3 = new java.lang.constant.Constable[][][] { constableArray0, constableArray1, constableArray2 };
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray6 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray7 = new java.lang.constant.Constable[][][] { constableArray4, constableArray5, constableArray6 };
        java.lang.constant.Constable[][][][] constableArray8 = new java.lang.constant.Constable[][][][] { constableArray3, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass11 = constableArray8.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass28 = typeArray24.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass45 = wildcardClassOfFieldArrayList44.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass7 = charSequenceArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.lang.constant.Constable[][] constableArray0 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray1 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray2 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray3 = new java.lang.constant.Constable[][][] { constableArray0, constableArray1, constableArray2 };
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray5 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][] constableArray6 = new java.lang.constant.Constable[][] {};
        java.lang.constant.Constable[][][] constableArray7 = new java.lang.constant.Constable[][][] { constableArray4, constableArray5, constableArray6 };
        java.lang.constant.Constable[][][][] constableArray8 = new java.lang.constant.Constable[][][][] { constableArray3, constableArray7 };
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray8);
        java.lang.Class<?> wildcardClass11 = constableArrayList10.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass52 = permutationArrayList51.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass46 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.List<java.lang.String[]>[][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass7 = objArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Collection[][] collectionArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Collection[][]> collectionArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayIterableArrayList13.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass6 = serializableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.lang.String[][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass31 = constableArrayList30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass6 = constableArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass26 = wildcardClassOfFieldArrayList25.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass56 = strArrayListArrayList55.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass52 = permutationArray50.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass33 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.io.Serializable[]> serializableArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) typeArray24);
        java.lang.Class<?> wildcardClass27 = typeArray24.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(serializableArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        com.thealgorithms.backtracking.Permutation[][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayCollectionArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass3 = constableArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArrayList56.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass11 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(constableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass86 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass8 = strArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] { permutation8 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray10 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray1, permutationArray3, permutationArray5, permutationArray7, permutationArray9 };
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] { permutation13 };
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] { permutation15 };
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation17 };
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray20 = new com.thealgorithms.backtracking.Permutation[] { permutation19 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray21 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray14, permutationArray16, permutationArray18, permutationArray20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] { permutation22 };
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] { permutation26 };
        com.thealgorithms.backtracking.Permutation permutation28 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] { permutation28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] { permutation30 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray23, permutationArray25, permutationArray27, permutationArray29, permutationArray31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] { permutation33 };
        com.thealgorithms.backtracking.Permutation permutation35 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray36 = new com.thealgorithms.backtracking.Permutation[] { permutation35 };
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation37 };
        com.thealgorithms.backtracking.Permutation permutation39 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray40 = new com.thealgorithms.backtracking.Permutation[] { permutation39 };
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation41 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray43 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray34, permutationArray36, permutationArray38, permutationArray40, permutationArray42 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray10, permutationArray21, permutationArray32, permutationArray43 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray44);
        java.lang.Class<?> wildcardClass46 = permutationArray44.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass25 = strArrayListArrayList24.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = collectionArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass85 = wildcardClassOfFieldArrayList84.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass7 = constantDescArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass48 = wildcardClassOfFieldArrayList47.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.lang.Class<?> wildcardClass10 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass32 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.util.List<java.lang.Object[]> objArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) constableArray7);
        java.lang.Class<?> wildcardClass11 = objArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(objArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.lang.reflect.Type[][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass74 = strArrayListArrayList73.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass31 = strArrayListArrayList30.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.lang.Object[] objArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Object[]> objArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(objArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArrayList1.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass45 = permutationArrayList44.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(permutationArrayList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass29 = wildcardClassOfFieldArray17.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass8 = charSequenceArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass56 = collectionArrayList55.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = constantDescArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass47 = wildcardClassOfFieldArrayList46.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(constantDescArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass28 = typeDescriptorArrayList27.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass27 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(strArrayListArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass46 = wildcardClassOfFieldArrayList45.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass29 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass13 = constableArray10.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.List<java.lang.String[]>[][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray4);
        java.lang.Class<?> wildcardClass7 = strComparableArrayList6.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray8 = new java.lang.invoke.TypeDescriptor[] { wildcardClass1, wildcardClass7 };
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass10 = permutation9.getClass();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray13);
        java.lang.Class<?> wildcardClass16 = strComparableArrayList15.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray17 = new java.lang.invoke.TypeDescriptor[] { wildcardClass10, wildcardClass16 };
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass19 = permutation18.getClass();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray22);
        java.lang.Class<?> wildcardClass25 = strComparableArrayList24.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray26 = new java.lang.invoke.TypeDescriptor[] { wildcardClass19, wildcardClass25 };
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass28 = permutation27.getClass();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray31);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray31);
        java.lang.Class<?> wildcardClass34 = strComparableArrayList33.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray35 = new java.lang.invoke.TypeDescriptor[] { wildcardClass28, wildcardClass34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass37 = permutation36.getClass();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(strArray40);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList42 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray40);
        java.lang.Class<?> wildcardClass43 = strComparableArrayList42.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray44 = new java.lang.invoke.TypeDescriptor[] { wildcardClass37, wildcardClass43 };
        com.thealgorithms.backtracking.Permutation permutation45 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass46 = permutation45.getClass();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray49);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray49);
        java.lang.Class<?> wildcardClass52 = strComparableArrayList51.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray53 = new java.lang.invoke.TypeDescriptor[] { wildcardClass46, wildcardClass52 };
        java.lang.invoke.TypeDescriptor[][] typeDescriptorArray54 = new java.lang.invoke.TypeDescriptor[][] { typeDescriptorArray8, typeDescriptorArray17, typeDescriptorArray26, typeDescriptorArray35, typeDescriptorArray44, typeDescriptorArray53 };
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray54);
        java.lang.Class<?> wildcardClass56 = typeDescriptorArray54.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeDescriptorArray8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strComparableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeDescriptorArray17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(strComparableArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeDescriptorArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strComparableArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeDescriptorArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArrayList41);
        org.junit.Assert.assertNotNull(strComparableArrayList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeDescriptorArray44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strComparableArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(typeDescriptorArray53);
        org.junit.Assert.assertNotNull(typeDescriptorArray54);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass5 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.String[][][]> strArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.lang.Class<?> wildcardClass33 = strArrayList32.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(constableArrayList30);
        org.junit.Assert.assertNotNull(strArrayList31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.lang.constant.Constable[][][][][] constableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(constableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(charSequenceArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = objArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(objArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass29 = wildcardClassOfFieldArrayList28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass6 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strComparableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList84 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass85 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.lang.reflect.Type[][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass26 = strArrayListArrayList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass9 = charSequenceArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList46 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass48 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList46);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.util.List<java.io.Serializable[]> serializableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) constableArray7);
        java.util.List<java.lang.Object[]> objArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) constableArray7);
        java.lang.Class<?> wildcardClass11 = constableArray7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(serializableArrayList9);
        org.junit.Assert.assertNotNull(objArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass33 = strArrayCollectionArrayList32.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<java.io.Serializable[]> serializableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray50);
        java.lang.Class<?> wildcardClass53 = permutationArray50.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(serializableArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.List[] listArray1 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray2 = (java.util.List<java.lang.String[]>[]) listArray1;
        java.util.List[] listArray4 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray5 = (java.util.List<java.lang.String[]>[]) listArray4;
        java.util.List[] listArray7 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        java.util.List[] listArray10 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray11 = (java.util.List<java.lang.String[]>[]) listArray10;
        java.util.List[] listArray13 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray14 = (java.util.List<java.lang.String[]>[]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        strArrayListArray17[0] = listArray1;
        strArrayListArray17[1] = strArrayListArray5;
        strArrayListArray17[2] = listArray7;
        strArrayListArray17[3] = strArrayListArray11;
        strArrayListArray17[4] = strArrayListArray14;
        java.util.List[] listArray29 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray30 = (java.util.List<java.lang.String[]>[]) listArray29;
        java.util.List[] listArray32 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray33 = (java.util.List<java.lang.String[]>[]) listArray32;
        java.util.List[] listArray35 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray36 = (java.util.List<java.lang.String[]>[]) listArray35;
        java.util.List[] listArray38 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray39 = (java.util.List<java.lang.String[]>[]) listArray38;
        java.util.List[] listArray41 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray42 = (java.util.List<java.lang.String[]>[]) listArray41;
        java.util.List[][] listArray44 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray45 = (java.util.List<java.lang.String[]>[][]) listArray44;
        strArrayListArray45[0] = listArray29;
        strArrayListArray45[1] = strArrayListArray33;
        strArrayListArray45[2] = listArray35;
        strArrayListArray45[3] = strArrayListArray39;
        strArrayListArray45[4] = strArrayListArray42;
        java.util.List[] listArray57 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray58 = (java.util.List<java.lang.String[]>[]) listArray57;
        java.util.List[] listArray60 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray61 = (java.util.List<java.lang.String[]>[]) listArray60;
        java.util.List[] listArray63 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray64 = (java.util.List<java.lang.String[]>[]) listArray63;
        java.util.List[] listArray66 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray67 = (java.util.List<java.lang.String[]>[]) listArray66;
        java.util.List[] listArray69 = new java.util.List[0];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray70 = (java.util.List<java.lang.String[]>[]) listArray69;
        java.util.List[][] listArray72 = new java.util.List[5][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray73 = (java.util.List<java.lang.String[]>[][]) listArray72;
        strArrayListArray73[0] = listArray57;
        strArrayListArray73[1] = strArrayListArray61;
        strArrayListArray73[2] = listArray63;
        strArrayListArray73[3] = strArrayListArray67;
        strArrayListArray73[4] = strArrayListArray70;
        java.util.List[][][] listArray85 = new java.util.List[3][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray86 = (java.util.List<java.lang.String[]>[][][]) listArray85;
        strArrayListArray86[0] = strArrayListArray17;
        strArrayListArray86[1] = strArrayListArray45;
        strArrayListArray86[2] = strArrayListArray73;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList93 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList94 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray86);
        java.lang.Class<?> wildcardClass95 = strArrayListArrayList94.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(listArray32);
        org.junit.Assert.assertNotNull(strArrayListArray33);
        org.junit.Assert.assertNotNull(listArray35);
        org.junit.Assert.assertNotNull(strArrayListArray36);
        org.junit.Assert.assertNotNull(listArray38);
        org.junit.Assert.assertNotNull(strArrayListArray39);
        org.junit.Assert.assertNotNull(listArray41);
        org.junit.Assert.assertNotNull(strArrayListArray42);
        org.junit.Assert.assertNotNull(listArray44);
        org.junit.Assert.assertNotNull(strArrayListArray45);
        org.junit.Assert.assertNotNull(listArray57);
        org.junit.Assert.assertNotNull(strArrayListArray58);
        org.junit.Assert.assertNotNull(listArray60);
        org.junit.Assert.assertNotNull(strArrayListArray61);
        org.junit.Assert.assertNotNull(listArray63);
        org.junit.Assert.assertNotNull(strArrayListArray64);
        org.junit.Assert.assertNotNull(listArray66);
        org.junit.Assert.assertNotNull(strArrayListArray67);
        org.junit.Assert.assertNotNull(listArray69);
        org.junit.Assert.assertNotNull(strArrayListArray70);
        org.junit.Assert.assertNotNull(listArray72);
        org.junit.Assert.assertNotNull(strArrayListArray73);
        org.junit.Assert.assertNotNull(listArray85);
        org.junit.Assert.assertNotNull(strArrayListArray86);
        org.junit.Assert.assertNotNull(strArrayListArrayList93);
        org.junit.Assert.assertNotNull(strArrayListArrayList94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass27 = typeArrayList26.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(typeArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.io.Serializable[]> serializableArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) typeArray24);
        java.lang.Class<?> wildcardClass27 = serializableArrayList26.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(serializableArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.lang.Class<?>[][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass4 = permutationArray1.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.String[] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList85 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass86 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass27 = wildcardClassOfFieldArrayList26.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = constableArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray1 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][][] typeArray2 = new java.lang.reflect.Type[][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass4 = constableArrayList3.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass55 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArrayList1.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass5 = constableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass34 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray4);
        java.lang.Class<?> wildcardClass8 = permutationArrayList7.getClass();
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(permutationArrayList6);
        org.junit.Assert.assertNotNull(permutationArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass18 = strArray16.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.String[][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassOfFieldArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArrayList1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass44 = permutationArrayList43.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.lang.reflect.Type[][][][][][][] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[][][][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.lang.reflect.Type[][][][] typeArray0 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][] typeArray1 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][] typeArray2 = new java.lang.reflect.Type[][][][] {};
        java.lang.reflect.Type[][][][][] typeArray3 = new java.lang.reflect.Type[][][][][] { typeArray0, typeArray1, typeArray2 };
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray4);
        java.lang.Class<?> wildcardClass7 = strComparableArrayList6.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray8 = new java.lang.invoke.TypeDescriptor[] { wildcardClass1, wildcardClass7 };
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass10 = permutation9.getClass();
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArray13);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray13);
        java.lang.Class<?> wildcardClass16 = strComparableArrayList15.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray17 = new java.lang.invoke.TypeDescriptor[] { wildcardClass10, wildcardClass16 };
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass19 = permutation18.getClass();
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArray22);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray22);
        java.lang.Class<?> wildcardClass25 = strComparableArrayList24.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray26 = new java.lang.invoke.TypeDescriptor[] { wildcardClass19, wildcardClass25 };
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass28 = permutation27.getClass();
        java.lang.String[] strArray31 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(strArray31);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray31);
        java.lang.Class<?> wildcardClass34 = strComparableArrayList33.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray35 = new java.lang.invoke.TypeDescriptor[] { wildcardClass28, wildcardClass34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass37 = permutation36.getClass();
        java.lang.String[] strArray40 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(strArray40);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList42 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray40);
        java.lang.Class<?> wildcardClass43 = strComparableArrayList42.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray44 = new java.lang.invoke.TypeDescriptor[] { wildcardClass37, wildcardClass43 };
        com.thealgorithms.backtracking.Permutation permutation45 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass46 = permutation45.getClass();
        java.lang.String[] strArray49 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray49);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray49);
        java.lang.Class<?> wildcardClass52 = strComparableArrayList51.getClass();
        java.lang.invoke.TypeDescriptor[] typeDescriptorArray53 = new java.lang.invoke.TypeDescriptor[] { wildcardClass46, wildcardClass52 };
        java.lang.invoke.TypeDescriptor[][] typeDescriptorArray54 = new java.lang.invoke.TypeDescriptor[][] { typeDescriptorArray8, typeDescriptorArray17, typeDescriptorArray26, typeDescriptorArray35, typeDescriptorArray44, typeDescriptorArray53 };
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray54);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(typeDescriptorArray54);
        java.lang.Class<?> wildcardClass57 = typeDescriptorArray54.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeDescriptorArray8);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArrayList14);
        org.junit.Assert.assertNotNull(strComparableArrayList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeDescriptorArray17);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArrayList23);
        org.junit.Assert.assertNotNull(strComparableArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeDescriptorArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArrayList32);
        org.junit.Assert.assertNotNull(strComparableArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeDescriptorArray35);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArrayList41);
        org.junit.Assert.assertNotNull(strComparableArrayList42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeDescriptorArray44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strComparableArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(typeDescriptorArray53);
        org.junit.Assert.assertNotNull(typeDescriptorArray54);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList55);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.lang.String[][][][][][][][][][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][][][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        com.thealgorithms.backtracking.Permutation[][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass11 = typeArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass46 = permutationArrayList45.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(permutationArrayList44);
        org.junit.Assert.assertNotNull(permutationArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = objArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass85 = wildcardClassOfFieldArray80.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = collectionArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = constableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.lang.Object[]> objArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass27 = objArrayList26.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(strArrayListArrayList25);
        org.junit.Assert.assertNotNull(objArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass6 = strArrayList5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass32 = wildcardClassOfFieldArrayList31.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = constantDescArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArray2.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass3 = constableArrayList2.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass12 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassOfFieldArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass11 = constantDescArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.List[][] listArray1 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][]) listArray1;
        java.util.List[][] listArray4 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][]) listArray4;
        java.util.List[][] listArray7 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][]) listArray7;
        java.util.List[][] listArray10 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][]) listArray10;
        java.util.List[][] listArray13 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][]) listArray13;
        java.util.List[][] listArray16 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray17 = (java.util.List<java.lang.String[]>[][]) listArray16;
        java.util.List[][][] listArray19 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray2;
        strArrayListArray20[1] = strArrayListArray5;
        strArrayListArray20[2] = strArrayListArray8;
        strArrayListArray20[3] = strArrayListArray11;
        strArrayListArray20[4] = strArrayListArray14;
        strArrayListArray20[5] = strArrayListArray17;
        java.util.List[][] listArray34 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray35 = (java.util.List<java.lang.String[]>[][]) listArray34;
        java.util.List[][] listArray37 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray38 = (java.util.List<java.lang.String[]>[][]) listArray37;
        java.util.List[][] listArray40 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray41 = (java.util.List<java.lang.String[]>[][]) listArray40;
        java.util.List[][] listArray43 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray44 = (java.util.List<java.lang.String[]>[][]) listArray43;
        java.util.List[][] listArray46 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        java.util.List[][] listArray49 = new java.util.List[0][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray50 = (java.util.List<java.lang.String[]>[][]) listArray49;
        java.util.List[][][] listArray52 = new java.util.List[6][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray53 = (java.util.List<java.lang.String[]>[][][]) listArray52;
        strArrayListArray53[0] = strArrayListArray35;
        strArrayListArray53[1] = strArrayListArray38;
        strArrayListArray53[2] = strArrayListArray41;
        strArrayListArray53[3] = strArrayListArray44;
        strArrayListArray53[4] = strArrayListArray47;
        strArrayListArray53[5] = strArrayListArray50;
        java.util.List[][][][] listArray67 = new java.util.List[2][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray68 = (java.util.List<java.lang.String[]>[][][][]) listArray67;
        strArrayListArray68[0] = strArrayListArray20;
        strArrayListArray68[1] = strArrayListArray53;
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList74 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.util.List<java.util.List<java.lang.String[]>[][][][]> strArrayListArrayList75 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray68);
        java.lang.Class<?> wildcardClass76 = strArrayListArray68.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(listArray16);
        org.junit.Assert.assertNotNull(strArrayListArray17);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray34);
        org.junit.Assert.assertNotNull(strArrayListArray35);
        org.junit.Assert.assertNotNull(listArray37);
        org.junit.Assert.assertNotNull(strArrayListArray38);
        org.junit.Assert.assertNotNull(listArray40);
        org.junit.Assert.assertNotNull(strArrayListArray41);
        org.junit.Assert.assertNotNull(listArray43);
        org.junit.Assert.assertNotNull(strArrayListArray44);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(listArray49);
        org.junit.Assert.assertNotNull(strArrayListArray50);
        org.junit.Assert.assertNotNull(listArray52);
        org.junit.Assert.assertNotNull(strArrayListArray53);
        org.junit.Assert.assertNotNull(listArray67);
        org.junit.Assert.assertNotNull(strArrayListArray68);
        org.junit.Assert.assertNotNull(strArrayListArrayList73);
        org.junit.Assert.assertNotNull(strArrayListArrayList74);
        org.junit.Assert.assertNotNull(strArrayListArrayList75);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass29 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList27);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] { strArray3 };
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] { strArray8 };
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] { strArray13 };
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.lang.Class<?> wildcardClass22 = strArrayList21.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.lang.Class<?> wildcardClass5 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass18 = strArrayList17.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = collectionArrayList5.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray8 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArray8);
        java.util.List<java.io.Serializable[]> serializableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray8);
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray8);
        java.util.List<java.lang.constant.Constable[]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray8);
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray8);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList5;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass31 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArrayList9);
        org.junit.Assert.assertNotNull(serializableArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.String[][] strArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String[][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass3 = typeArray0.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArrayList3.getClass();
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] { wildcardClass4, 100 };
        java.lang.constant.Constable[][] constableArray7 = new java.lang.constant.Constable[][] { constableArray6 };
        java.util.List<java.lang.constant.Constable[][]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(constableArray7);
        java.lang.Class<?> wildcardClass9 = constableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass13 = strArrayIterableArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        java.lang.Class<?> wildcardClass1 = permutation0.getClass();
        java.lang.String[] strArray4 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray4);
        java.util.List[] listArray7 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray8 = (java.util.List<java.lang.String[]>[]) listArray7;
        strArrayListArray8[0] = strArrayList5;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray8);
        java.lang.Class<?> wildcardClass13 = strArrayCollectionArrayList12.getClass();
        java.util.Collection[] collectionArray15 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray16 = (java.util.Collection<java.lang.String[]>[]) collectionArray15;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList17 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray15);
        java.lang.Class<?> wildcardClass18 = collectionArray15.getClass();
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.lang.Class<?> wildcardClass23 = strArrayList22.getClass();
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass28 = strArrayList27.getClass();
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { wildcardClass18, wildcardClass23, wildcardClass28 };
        java.util.List<java.lang.reflect.Type[]> typeArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArrayList30.getClass();
        java.lang.String[] strArray34 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList35 = com.thealgorithms.backtracking.Permutation.permutation(strArray34);
        java.lang.Class<?> wildcardClass36 = strArray34.getClass();
        java.lang.String[] strArray44 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(strArray44);
        java.lang.Class<?> wildcardClass46 = strArrayList45.getClass();
        java.lang.constant.Constable[] constableArray47 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass46 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList48 = com.thealgorithms.backtracking.Permutation.permutation(constableArray47);
        java.lang.Class<?> wildcardClass49 = constableArray47.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray51 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray52 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray51;
        wildcardClassOfFieldArray52[0] = wildcardClass36;
        wildcardClassOfFieldArray52[1] = wildcardClass49;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray52);
        java.lang.Class<?> wildcardClass58 = wildcardClassOfFieldArray52.getClass();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList62 = com.thealgorithms.backtracking.Permutation.permutation(strArray61);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList63 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray61);
        java.lang.Class<?> wildcardClass64 = strArray61.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray66 = new java.lang.invoke.TypeDescriptor.OfField[5];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray67 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray66;
        wildcardClassOfFieldArray67[0] = wildcardClass1;
        wildcardClassOfFieldArray67[1] = wildcardClass13;
        wildcardClassOfFieldArray67[2] = wildcardClass31;
        wildcardClassOfFieldArray67[3] = wildcardClass58;
        wildcardClassOfFieldArray67[4] = wildcardClass64;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray79 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray80 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray79;
        wildcardClassOfFieldArray80[0] = wildcardClassOfFieldArray67;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList83 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList84 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList85 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassOfFieldArray80);
        java.lang.Class<?> wildcardClass86 = typeDescriptorArrayList85.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList11);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(collectionArray15);
        org.junit.Assert.assertNotNull(strArrayCollectionArray16);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArrayList35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArrayList45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(constableArray47);
        org.junit.Assert.assertNotNull(constableArrayList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(ofFieldArray51);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray52);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArrayList62);
        org.junit.Assert.assertNotNull(strComparableArrayList63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(ofFieldArray66);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray67);
        org.junit.Assert.assertNotNull(ofFieldArray79);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray80);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList83);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList84);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(serializableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.lang.Class<?> wildcardClass9 = objArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(objArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray2);
        java.lang.Class<?> wildcardClass5 = serializableArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass52 = strArray50.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = constantDescArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass6 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass5 = strArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.util.List<java.util.Collection[][]> collectionArrayList92 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass93 = collectionArray90.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray94 = new java.lang.reflect.GenericDeclaration[] { wildcardClass93 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray95 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray94 };
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList96 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray95);
        java.lang.Class<?> wildcardClass97 = genericDeclarationArrayList96.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(collectionArrayList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(genericDeclarationArray94);
        org.junit.Assert.assertNotNull(genericDeclarationArray95);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassOfFieldArrayList24.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList30 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass32 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = typeDescriptorArrayList12.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass11 = strArrayList10.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass15 = constableArray10.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass29 = objArrayList28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArrayList29.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] { permutation3, permutation4 };
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] { permutation6, permutation7 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray9 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray2, permutationArray5, permutationArray8 };
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] { permutation10, permutation11 };
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray15, permutationArray18 };
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation21 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] { permutation20, permutation21 };
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] { permutation23, permutation24 };
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray22, permutationArray25, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray32 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31 };
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] { permutation33, permutation34 };
        com.thealgorithms.backtracking.Permutation permutation36 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] { permutation36, permutation37 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray39 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray32, permutationArray35, permutationArray38 };
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray42 = new com.thealgorithms.backtracking.Permutation[] { permutation40, permutation41 };
        com.thealgorithms.backtracking.Permutation permutation43 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation44 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray45 = new com.thealgorithms.backtracking.Permutation[] { permutation43, permutation44 };
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray48 = new com.thealgorithms.backtracking.Permutation[] { permutation46, permutation47 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray49 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray42, permutationArray45, permutationArray48 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray50 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray9, permutationArray19, permutationArray29, permutationArray39, permutationArray49 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.util.List<java.io.Serializable[]> serializableArrayList52 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray50);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray50);
        java.lang.Class<?> wildcardClass54 = permutationArray50.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArray45);
        org.junit.Assert.assertNotNull(permutationArray48);
        org.junit.Assert.assertNotNull(permutationArray49);
        org.junit.Assert.assertNotNull(permutationArray50);
        org.junit.Assert.assertNotNull(permutationArrayList51);
        org.junit.Assert.assertNotNull(serializableArrayList52);
        org.junit.Assert.assertNotNull(permutationArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArrayList30.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass8 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = typeDescriptorArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.lang.Class<?> wildcardClass4 = wildcardClassArrayList3.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeDescriptorArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = wildcardClassArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][] typeArray1 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][][][] typeArray2 = new java.lang.reflect.Type[][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass6 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass24 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList51 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray48);
        java.lang.Class<?> wildcardClass52 = strArray48.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(constableArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = ofFieldArray7;
        wildcardClassOfFieldArray14[3] = ofFieldArray10;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.io.Serializable[]> serializableArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray14);
        java.lang.Class<?> wildcardClass26 = serializableArrayList25.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(serializableArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArrayList57.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray3 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1, permutationArray2 };
        com.thealgorithms.backtracking.Permutation[] permutationArray4 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray5 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray7 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray4, permutationArray5, permutationArray6 };
        com.thealgorithms.backtracking.Permutation[] permutationArray8 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray9 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray10 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray11 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray8, permutationArray9, permutationArray10 };
        com.thealgorithms.backtracking.Permutation[] permutationArray12 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray14 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray15 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray12, permutationArray13, permutationArray14 };
        com.thealgorithms.backtracking.Permutation[] permutationArray16 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray17 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray18 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray19 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray16, permutationArray17, permutationArray18 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray22 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray23 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray24 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray22, permutationArray23 };
        com.thealgorithms.backtracking.Permutation[] permutationArray25 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray26 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray27 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray28 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray25, permutationArray26, permutationArray27 };
        com.thealgorithms.backtracking.Permutation[] permutationArray29 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray30 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray31 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray32 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray29, permutationArray30, permutationArray31 };
        com.thealgorithms.backtracking.Permutation[] permutationArray33 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray34 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray35 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray36 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray33, permutationArray34, permutationArray35 };
        com.thealgorithms.backtracking.Permutation[] permutationArray37 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray38 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray39 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray40 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray37, permutationArray38, permutationArray39 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray41 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray24, permutationArray28, permutationArray32, permutationArray36, permutationArray40 };
        com.thealgorithms.backtracking.Permutation[][][][] permutationArray42 = new com.thealgorithms.backtracking.Permutation[][][][] { permutationArray20, permutationArray41 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][]> permutationArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray42);
        java.lang.Class<?> wildcardClass44 = permutationArray42.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray4);
        org.junit.Assert.assertNotNull(permutationArray5);
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray8);
        org.junit.Assert.assertNotNull(permutationArray9);
        org.junit.Assert.assertNotNull(permutationArray10);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray12);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray16);
        org.junit.Assert.assertNotNull(permutationArray17);
        org.junit.Assert.assertNotNull(permutationArray18);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray22);
        org.junit.Assert.assertNotNull(permutationArray23);
        org.junit.Assert.assertNotNull(permutationArray24);
        org.junit.Assert.assertNotNull(permutationArray25);
        org.junit.Assert.assertNotNull(permutationArray26);
        org.junit.Assert.assertNotNull(permutationArray27);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray30);
        org.junit.Assert.assertNotNull(permutationArray31);
        org.junit.Assert.assertNotNull(permutationArray32);
        org.junit.Assert.assertNotNull(permutationArray33);
        org.junit.Assert.assertNotNull(permutationArray34);
        org.junit.Assert.assertNotNull(permutationArray35);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray37);
        org.junit.Assert.assertNotNull(permutationArray38);
        org.junit.Assert.assertNotNull(permutationArray39);
        org.junit.Assert.assertNotNull(permutationArray40);
        org.junit.Assert.assertNotNull(permutationArray41);
        org.junit.Assert.assertNotNull(permutationArray42);
        org.junit.Assert.assertNotNull(permutationArrayList43);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.lang.String[][][] strArray0 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray2 = new java.lang.String[][][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] { strArray0, strArray1, strArray2, strArray3 };
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] { strArray4 };
        java.util.List<java.lang.String[][][][][]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.Class<?> wildcardClass7 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArrayList33.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray3 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2 };
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation6 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray7 = new com.thealgorithms.backtracking.Permutation[] { permutation4, permutation5, permutation6 };
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray11 = new com.thealgorithms.backtracking.Permutation[] { permutation8, permutation9, permutation10 };
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation13 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation14 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray15 = new com.thealgorithms.backtracking.Permutation[] { permutation12, permutation13, permutation14 };
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray19 = new com.thealgorithms.backtracking.Permutation[] { permutation16, permutation17, permutation18 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray20 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray3, permutationArray7, permutationArray11, permutationArray15, permutationArray19 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray20);
        java.lang.Class<?> wildcardClass23 = permutationArrayList22.getClass();
        org.junit.Assert.assertNotNull(permutationArray3);
        org.junit.Assert.assertNotNull(permutationArray7);
        org.junit.Assert.assertNotNull(permutationArray11);
        org.junit.Assert.assertNotNull(permutationArray15);
        org.junit.Assert.assertNotNull(permutationArray19);
        org.junit.Assert.assertNotNull(permutationArray20);
        org.junit.Assert.assertNotNull(permutationArrayList21);
        org.junit.Assert.assertNotNull(permutationArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass14 = constableArrayList13.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(constableArrayList12);
        org.junit.Assert.assertNotNull(constableArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass4 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.lang.reflect.Type[][] typeArray0 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray2 = new java.lang.reflect.Type[][][] { typeArray0, typeArray1 };
        java.lang.reflect.Type[][][][] typeArray3 = new java.lang.reflect.Type[][][][] { typeArray2 };
        java.lang.reflect.Type[][] typeArray4 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray6 = new java.lang.reflect.Type[][][] { typeArray4, typeArray5 };
        java.lang.reflect.Type[][][][] typeArray7 = new java.lang.reflect.Type[][][][] { typeArray6 };
        java.lang.reflect.Type[][] typeArray8 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray9 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray10 = new java.lang.reflect.Type[][][] { typeArray8, typeArray9 };
        java.lang.reflect.Type[][][][] typeArray11 = new java.lang.reflect.Type[][][][] { typeArray10 };
        java.lang.reflect.Type[][][][][] typeArray12 = new java.lang.reflect.Type[][][][][] { typeArray3, typeArray7, typeArray11 };
        java.lang.reflect.Type[][] typeArray13 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray14 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray15 = new java.lang.reflect.Type[][][] { typeArray13, typeArray14 };
        java.lang.reflect.Type[][][][] typeArray16 = new java.lang.reflect.Type[][][][] { typeArray15 };
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray18 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray19 = new java.lang.reflect.Type[][][] { typeArray17, typeArray18 };
        java.lang.reflect.Type[][][][] typeArray20 = new java.lang.reflect.Type[][][][] { typeArray19 };
        java.lang.reflect.Type[][] typeArray21 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray22 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray23 = new java.lang.reflect.Type[][][] { typeArray21, typeArray22 };
        java.lang.reflect.Type[][][][] typeArray24 = new java.lang.reflect.Type[][][][] { typeArray23 };
        java.lang.reflect.Type[][][][][] typeArray25 = new java.lang.reflect.Type[][][][][] { typeArray16, typeArray20, typeArray24 };
        java.lang.reflect.Type[][] typeArray26 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray27 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray28 = new java.lang.reflect.Type[][][] { typeArray26, typeArray27 };
        java.lang.reflect.Type[][][][] typeArray29 = new java.lang.reflect.Type[][][][] { typeArray28 };
        java.lang.reflect.Type[][] typeArray30 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray31 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray32 = new java.lang.reflect.Type[][][] { typeArray30, typeArray31 };
        java.lang.reflect.Type[][][][] typeArray33 = new java.lang.reflect.Type[][][][] { typeArray32 };
        java.lang.reflect.Type[][] typeArray34 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray35 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray36 = new java.lang.reflect.Type[][][] { typeArray34, typeArray35 };
        java.lang.reflect.Type[][][][] typeArray37 = new java.lang.reflect.Type[][][][] { typeArray36 };
        java.lang.reflect.Type[][][][][] typeArray38 = new java.lang.reflect.Type[][][][][] { typeArray29, typeArray33, typeArray37 };
        java.lang.reflect.Type[][] typeArray39 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray40 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray41 = new java.lang.reflect.Type[][][] { typeArray39, typeArray40 };
        java.lang.reflect.Type[][][][] typeArray42 = new java.lang.reflect.Type[][][][] { typeArray41 };
        java.lang.reflect.Type[][] typeArray43 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray44 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray45 = new java.lang.reflect.Type[][][] { typeArray43, typeArray44 };
        java.lang.reflect.Type[][][][] typeArray46 = new java.lang.reflect.Type[][][][] { typeArray45 };
        java.lang.reflect.Type[][] typeArray47 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray48 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray49 = new java.lang.reflect.Type[][][] { typeArray47, typeArray48 };
        java.lang.reflect.Type[][][][] typeArray50 = new java.lang.reflect.Type[][][][] { typeArray49 };
        java.lang.reflect.Type[][][][][] typeArray51 = new java.lang.reflect.Type[][][][][] { typeArray42, typeArray46, typeArray50 };
        java.lang.reflect.Type[][] typeArray52 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray53 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray54 = new java.lang.reflect.Type[][][] { typeArray52, typeArray53 };
        java.lang.reflect.Type[][][][] typeArray55 = new java.lang.reflect.Type[][][][] { typeArray54 };
        java.lang.reflect.Type[][] typeArray56 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray57 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray58 = new java.lang.reflect.Type[][][] { typeArray56, typeArray57 };
        java.lang.reflect.Type[][][][] typeArray59 = new java.lang.reflect.Type[][][][] { typeArray58 };
        java.lang.reflect.Type[][] typeArray60 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray61 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray62 = new java.lang.reflect.Type[][][] { typeArray60, typeArray61 };
        java.lang.reflect.Type[][][][] typeArray63 = new java.lang.reflect.Type[][][][] { typeArray62 };
        java.lang.reflect.Type[][][][][] typeArray64 = new java.lang.reflect.Type[][][][][] { typeArray55, typeArray59, typeArray63 };
        java.lang.reflect.Type[][] typeArray65 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray66 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray67 = new java.lang.reflect.Type[][][] { typeArray65, typeArray66 };
        java.lang.reflect.Type[][][][] typeArray68 = new java.lang.reflect.Type[][][][] { typeArray67 };
        java.lang.reflect.Type[][] typeArray69 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray70 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray71 = new java.lang.reflect.Type[][][] { typeArray69, typeArray70 };
        java.lang.reflect.Type[][][][] typeArray72 = new java.lang.reflect.Type[][][][] { typeArray71 };
        java.lang.reflect.Type[][] typeArray73 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray74 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][][] typeArray75 = new java.lang.reflect.Type[][][] { typeArray73, typeArray74 };
        java.lang.reflect.Type[][][][] typeArray76 = new java.lang.reflect.Type[][][][] { typeArray75 };
        java.lang.reflect.Type[][][][][] typeArray77 = new java.lang.reflect.Type[][][][][] { typeArray68, typeArray72, typeArray76 };
        java.lang.reflect.Type[][][][][][] typeArray78 = new java.lang.reflect.Type[][][][][][] { typeArray12, typeArray25, typeArray38, typeArray51, typeArray64, typeArray77 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList79 = com.thealgorithms.backtracking.Permutation.permutation(typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArrayList79.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArrayList79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass52 = strArrayList51.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray2);
        java.lang.Class<?> wildcardClass5 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.Class<?>[][][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][][][][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = genericDeclarationArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArrayList59.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] { permutation0 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray1);
        java.lang.Class<?> wildcardClass5 = permutationArray1.getClass();
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[0];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray25;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray28 = new java.lang.invoke.TypeDescriptor.OfField[1][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray29 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray28;
        wildcardClassOfFieldArray29[0] = wildcardClassOfFieldArray26;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray33 = new java.lang.invoke.TypeDescriptor.OfField[4][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray34 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray33;
        wildcardClassOfFieldArray34[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray34[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray34[2] = wildcardClassOfFieldArray21;
        wildcardClassOfFieldArray34[3] = wildcardClassOfFieldArray29;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList43 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList44 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList45 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray34);
        java.util.List<java.lang.Object[]> objArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassOfFieldArray34);
        java.lang.Class<?> wildcardClass47 = wildcardClassOfFieldArray34.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray29);
        org.junit.Assert.assertNotNull(ofFieldArray33);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList43);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList44);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList45);
        org.junit.Assert.assertNotNull(objArrayList46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray5);
        java.lang.Class<?> wildcardClass9 = strArray5.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[4][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        wildcardClassOfFieldArray14[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray14[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray14[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray14[3] = wildcardClassOfFieldArray11;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]> wildcardClassOfFieldArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray14);
        java.lang.Class<?> wildcardClass24 = wildcardClassOfFieldArray14.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.lang.Class<?>[][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass8 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(strArrayListArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList2 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(constableArrayList2);
        org.junit.Assert.assertNotNull(constableArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass4 = strArrayListArrayList3.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.util.List<java.lang.String[][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = constableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray4;
        wildcardClassOfFieldArray5[0] = wildcardClassOfFieldArray2;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray9 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray10 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray9;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray12 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray13 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray12;
        wildcardClassOfFieldArray13[0] = wildcardClassOfFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray17 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray18 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray17;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray20 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray21 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray20;
        wildcardClassOfFieldArray21[0] = wildcardClassOfFieldArray18;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray25 = new java.lang.invoke.TypeDescriptor.OfField[3][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray26 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray25;
        wildcardClassOfFieldArray26[0] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray26[1] = wildcardClassOfFieldArray13;
        wildcardClassOfFieldArray26[2] = wildcardClassOfFieldArray21;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray34 = new java.lang.invoke.TypeDescriptor.OfField[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray35 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray34;
        wildcardClassOfFieldArray35[0] = wildcardClassOfFieldArray26;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray35);
        java.lang.Class<?> wildcardClass39 = wildcardClassOfFieldArray35.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray9);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray10);
        org.junit.Assert.assertNotNull(ofFieldArray12);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray13);
        org.junit.Assert.assertNotNull(ofFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray18);
        org.junit.Assert.assertNotNull(ofFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray21);
        org.junit.Assert.assertNotNull(ofFieldArray25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray26);
        org.junit.Assert.assertNotNull(ofFieldArray34);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray35);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass12 = strComparableArrayList11.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList14 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList13);
        org.junit.Assert.assertNotNull(strArrayListArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.List<java.lang.String[]>[] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass4 = permutationArrayList3.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strComparableArrayList6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(strComparableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.lang.invoke.TypeDescriptor.OfField[][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]) ofFieldArray1;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray2);
        java.lang.Class<?> wildcardClass5 = wildcardClassOfFieldArrayList4.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass34 = strArrayListArrayList33.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass26 = typeDescriptorArrayList25.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArrayList30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray9 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray15 = new java.lang.String[][] { strArray4, strArray9, strArray14 };
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray31 = new java.lang.String[][] { strArray20, strArray25, strArray30 };
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "hi!", "hi!", "" };
        java.lang.String[][] strArray47 = new java.lang.String[][] { strArray36, strArray41, strArray46 };
        java.lang.String[][][] strArray48 = new java.lang.String[][][] { strArray15, strArray31, strArray47 };
        java.util.List<java.lang.String[][][]> strArrayList49 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList50 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.util.List<java.lang.String[][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray48);
        java.lang.Class<?> wildcardClass52 = strArray48.getClass();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArrayList49);
        org.junit.Assert.assertNotNull(strArrayList50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray5 = new java.lang.reflect.Type[][] { typeArray0, typeArray1, typeArray2, typeArray3, typeArray4 };
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray11 = new java.lang.reflect.Type[][] { typeArray6, typeArray7, typeArray8, typeArray9, typeArray10 };
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray17 = new java.lang.reflect.Type[][] { typeArray12, typeArray13, typeArray14, typeArray15, typeArray16 };
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] {};
        java.lang.reflect.Type[][] typeArray23 = new java.lang.reflect.Type[][] { typeArray18, typeArray19, typeArray20, typeArray21, typeArray22 };
        java.lang.reflect.Type[][][] typeArray24 = new java.lang.reflect.Type[][][] { typeArray5, typeArray11, typeArray17, typeArray23 };
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.util.List<java.io.Serializable[]> serializableArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) typeArray24);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(typeArray24);
        java.lang.Class<?> wildcardClass28 = typeArrayList27.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArrayList25);
        org.junit.Assert.assertNotNull(serializableArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass14 = strArrayListArray6.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList56 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass57 = collectionArrayList56.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(collectionArrayList56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray5);
        java.lang.Class<?> wildcardClass9 = strComparableArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList13);
        org.junit.Assert.assertNotNull(typeArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass54 = strArrayList53.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass4 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.thealgorithms.backtracking.Permutation[][][][][][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][][][][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][][][][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(annotatedElementArrayList6);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass30 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.lang.String[][][][][][][][] strArray0 = new java.lang.String[][][][][][][][] {};
        java.util.List<java.lang.String[][][][][][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass2 = strArrayList1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.lang.String[] strArray7 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray7);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        java.lang.constant.Constable[] constableArray10 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass9 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.util.Collection[] collectionArray13 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray14 = (java.util.Collection<java.lang.String[]>[]) collectionArray13;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList15 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList16 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray13);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(strArray24);
        java.lang.Class<?> wildcardClass26 = strArrayList25.getClass();
        java.lang.constant.Constable[] constableArray27 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass26 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(constableArray27);
        java.util.Collection[] collectionArray29 = new java.util.Collection[] { constableArrayList11, strArrayCollectionArrayList16, constableArrayList28 };
        java.lang.String[] strArray37 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList38 = com.thealgorithms.backtracking.Permutation.permutation(strArray37);
        java.lang.Class<?> wildcardClass39 = strArrayList38.getClass();
        java.lang.constant.Constable[] constableArray40 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass39 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList41 = com.thealgorithms.backtracking.Permutation.permutation(constableArray40);
        java.util.Collection[] collectionArray43 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray44 = (java.util.Collection<java.lang.String[]>[]) collectionArray43;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList45 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList46 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray43);
        java.lang.String[] strArray54 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArray54);
        java.lang.Class<?> wildcardClass56 = strArrayList55.getClass();
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass56 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(constableArray57);
        java.util.Collection[] collectionArray59 = new java.util.Collection[] { constableArrayList41, strArrayCollectionArrayList46, constableArrayList58 };
        java.lang.String[] strArray67 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList68 = com.thealgorithms.backtracking.Permutation.permutation(strArray67);
        java.lang.Class<?> wildcardClass69 = strArrayList68.getClass();
        java.lang.constant.Constable[] constableArray70 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass69 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList71 = com.thealgorithms.backtracking.Permutation.permutation(constableArray70);
        java.util.Collection[] collectionArray73 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray74 = (java.util.Collection<java.lang.String[]>[]) collectionArray73;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList75 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList76 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray73);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList85 = com.thealgorithms.backtracking.Permutation.permutation(strArray84);
        java.lang.Class<?> wildcardClass86 = strArrayList85.getClass();
        java.lang.constant.Constable[] constableArray87 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass86 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(constableArray87);
        java.util.Collection[] collectionArray89 = new java.util.Collection[] { constableArrayList71, strArrayCollectionArrayList76, constableArrayList88 };
        java.util.Collection[][] collectionArray90 = new java.util.Collection[][] { collectionArray29, collectionArray59, collectionArray89 };
        java.util.List<java.util.Collection[][]> collectionArrayList91 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.util.List<java.util.Collection[][]> collectionArrayList92 = com.thealgorithms.backtracking.Permutation.permutation(collectionArray90);
        java.lang.Class<?> wildcardClass93 = collectionArray90.getClass();
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray94 = new java.lang.reflect.GenericDeclaration[] { wildcardClass93 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray95 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray94 };
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList96 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray95);
        java.lang.Class<?> wildcardClass97 = genericDeclarationArray95.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(collectionArray13);
        org.junit.Assert.assertNotNull(strArrayCollectionArray14);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList15);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList16);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArrayList25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArrayList28);
        org.junit.Assert.assertNotNull(collectionArray29);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArrayList38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArrayList41);
        org.junit.Assert.assertNotNull(collectionArray43);
        org.junit.Assert.assertNotNull(strArrayCollectionArray44);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList45);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList46);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArrayList55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArrayList58);
        org.junit.Assert.assertNotNull(collectionArray59);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArrayList68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(constableArray70);
        org.junit.Assert.assertNotNull(constableArrayList71);
        org.junit.Assert.assertNotNull(collectionArray73);
        org.junit.Assert.assertNotNull(strArrayCollectionArray74);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList75);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList76);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(strArrayList85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertNotNull(constableArray87);
        org.junit.Assert.assertNotNull(constableArrayList88);
        org.junit.Assert.assertNotNull(collectionArray89);
        org.junit.Assert.assertNotNull(collectionArray90);
        org.junit.Assert.assertNotNull(collectionArrayList91);
        org.junit.Assert.assertNotNull(collectionArrayList92);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(genericDeclarationArray94);
        org.junit.Assert.assertNotNull(genericDeclarationArray95);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = genericDeclarationArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.lang.Class<?> wildcardClass3 = strArray0.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.lang.Class<?>[][][][] wildcardClassArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass7 = typeArrayList6.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(typeArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.lang.reflect.Type[] typeArray0 = new java.lang.reflect.Type[] {};
        java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass2 = typeArrayList1.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass7 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass6 = annotatedElementArrayList5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = genericDeclarationArrayList28.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = constableArrayList11.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass4 = typeArrayList3.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList34 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass35 = strArrayListArrayList34.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(strArrayListArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.lang.Iterable<java.lang.String[]>[][]> strArrayIterableArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayIterableArrayList58.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][]) ofFieldArray16;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][][][] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[6][][][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray20[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray20[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray20[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray20[4] = wildcardClassOfFieldArray14;
        wildcardClassOfFieldArray20[5] = wildcardClassOfFieldArray17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArrayList33.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = collectionArrayList6.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][][] listArray10 = new java.util.List[3][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][][]) listArray10;
        strArrayListArray11[0] = strArrayListArray2;
        strArrayListArray11[1] = strArrayListArray5;
        strArrayListArray11[2] = strArrayListArray8;
        java.util.List[][][][][][] listArray19 = new java.util.List[1][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray20 = (java.util.List<java.lang.String[]>[][][][][][]) listArray19;
        strArrayListArray20[0] = strArrayListArray11;
        java.util.List[][][][][][][] listArray24 = new java.util.List[1][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray25 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray24;
        strArrayListArray25[0] = strArrayListArray20;
        java.util.List[][][][][][][][] listArray29 = new java.util.List[1][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray30 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray29;
        strArrayListArray30[0] = strArrayListArray25;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray30);
        java.lang.Class<?> wildcardClass34 = strArrayListArray30.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray19);
        org.junit.Assert.assertNotNull(strArrayListArray20);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(listArray29);
        org.junit.Assert.assertNotNull(strArrayListArray30);
        org.junit.Assert.assertNotNull(strArrayListArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) strArray1);
        java.util.List<java.lang.String[][]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass9 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(strArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass11 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(charSequenceArrayList7);
        org.junit.Assert.assertNotNull(strComparableArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(constantDescArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(collectionArrayList5);
        org.junit.Assert.assertNotNull(collectionArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.List[][][][] listArray1 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][]) listArray1;
        java.util.List[][][][] listArray4 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][]) listArray4;
        java.util.List[][][][] listArray7 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][]) listArray7;
        java.util.List[][][][] listArray10 = new java.util.List[0][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][] strArrayListArray11 = (java.util.List<java.lang.String[]>[][][][]) listArray10;
        java.util.List[][][][][] listArray13 = new java.util.List[4][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray14 = (java.util.List<java.lang.String[]>[][][][][]) listArray13;
        strArrayListArray14[0] = strArrayListArray2;
        strArrayListArray14[1] = strArrayListArray5;
        strArrayListArray14[2] = strArrayListArray8;
        strArrayListArray14[3] = strArrayListArray11;
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList24 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray14);
        java.lang.Class<?> wildcardClass25 = strArrayListArray14.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(listArray10);
        org.junit.Assert.assertNotNull(strArrayListArray11);
        org.junit.Assert.assertNotNull(listArray13);
        org.junit.Assert.assertNotNull(strArrayListArray14);
        org.junit.Assert.assertNotNull(strArrayListArrayList23);
        org.junit.Assert.assertNotNull(strArrayListArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.lang.Class<?> wildcardClass31 = strArrayListArray23.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList55 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList58 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.io.Serializable[]> serializableArrayList60 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArrayListArray47);
        java.lang.Class<?> wildcardClass61 = serializableArrayList60.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(strArrayListArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(collectionArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(serializableArrayList60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.util.Collection[] collectionArray1 = new java.util.Collection[0];
        @SuppressWarnings("unchecked")
        java.util.Collection<java.lang.String[]>[] strArrayCollectionArray2 = (java.util.Collection<java.lang.String[]>[]) collectionArray1;
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList3 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) collectionArray1);
        java.lang.Class<?> wildcardClass6 = strArrayCollectionArrayList5.getClass();
        org.junit.Assert.assertNotNull(collectionArray1);
        org.junit.Assert.assertNotNull(strArrayCollectionArray2);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList3);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList4);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.Object[]> objArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray26);
        java.lang.Class<?> wildcardClass29 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(objArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass12 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass29 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArrayListArray2);
        java.lang.Class<?> wildcardClass7 = strArrayListArray2.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(strArrayListArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList57 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.lang.Class<?> wildcardClass58 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(collectionArrayList57);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArrayList30.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass14 = typeDescriptorArrayList13.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.List<java.lang.String[]>[][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.util.List<java.lang.String[][][][]> strArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.String[][][][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray0);
        java.util.List<java.lang.constant.Constable[][][][]> constableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][][]) strArray0);
        java.lang.Class<?> wildcardClass5 = constableArrayList4.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArrayList1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(constableArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.List[][][][][][] listArray1 = new java.util.List[0][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = strArrayListArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(strArrayListArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = typeDescriptorArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass31 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass9 = charSequenceArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(objArrayList6);
        org.junit.Assert.assertNotNull(strComparableArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass11 = annotatedElementArrayList10.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList9);
        org.junit.Assert.assertNotNull(annotatedElementArrayList10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass5 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(constableArrayList8);
        org.junit.Assert.assertNotNull(charSequenceArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.lang.Class<?> wildcardClass13 = charSequenceArrayList12.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(charSequenceArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.String[][][][][][] strArray0 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray1 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray2 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray3 = new java.lang.String[][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][][] strArray4 = new java.lang.String[][][][][][][][] { strArray3 };
        java.lang.String[][][][][][] strArray5 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray6 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] { strArray5, strArray6, strArray7 };
        java.lang.String[][][][][][][][] strArray9 = new java.lang.String[][][][][][][][] { strArray8 };
        java.lang.String[][][][][][] strArray10 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray12 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] { strArray10, strArray11, strArray12 };
        java.lang.String[][][][][][][][] strArray14 = new java.lang.String[][][][][][][][] { strArray13 };
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray16 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][] strArray17 = new java.lang.String[][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] { strArray15, strArray16, strArray17 };
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray18 };
        java.lang.String[][][][][][][][][] strArray20 = new java.lang.String[][][][][][][][][] { strArray4, strArray9, strArray14, strArray19 };
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList21 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.util.List<java.lang.String[][][][][][][][][]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray20);
        java.lang.Class<?> wildcardClass23 = strArray20.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArrayList21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        com.thealgorithms.backtracking.Permutation[] permutationArray0 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[] permutationArray1 = new com.thealgorithms.backtracking.Permutation[] {};
        com.thealgorithms.backtracking.Permutation[][] permutationArray2 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray0, permutationArray1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[][]> permutationArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass6 = permutationArray2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArray1);
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(permutationArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.lang.String[][][][] strArray0 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray1 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray2 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray3 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray4 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray5 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][][] strArray7 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray8 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray9 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray10 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray11 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray12 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] { strArray7, strArray8, strArray9, strArray10, strArray11, strArray12 };
        java.lang.String[][][][] strArray14 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray15 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray16 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray17 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray18 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray19 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray20 = new java.lang.String[][][][][] { strArray14, strArray15, strArray16, strArray17, strArray18, strArray19 };
        java.lang.String[][][][] strArray21 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray22 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray23 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray25 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray26 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray27 = new java.lang.String[][][][][] { strArray21, strArray22, strArray23, strArray24, strArray25, strArray26 };
        java.lang.String[][][][] strArray28 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray29 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray30 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray31 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray32 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray33 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray34 = new java.lang.String[][][][][] { strArray28, strArray29, strArray30, strArray31, strArray32, strArray33 };
        java.lang.String[][][][][][] strArray35 = new java.lang.String[][][][][][] { strArray6, strArray13, strArray20, strArray27, strArray34 };
        java.lang.String[][][][] strArray36 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray37 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray38 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray39 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray40 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray41 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray42 = new java.lang.String[][][][][] { strArray36, strArray37, strArray38, strArray39, strArray40, strArray41 };
        java.lang.String[][][][] strArray43 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray44 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray45 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray46 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray47 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray48 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray49 = new java.lang.String[][][][][] { strArray43, strArray44, strArray45, strArray46, strArray47, strArray48 };
        java.lang.String[][][][] strArray50 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray51 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray52 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray53 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray54 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray55 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray56 = new java.lang.String[][][][][] { strArray50, strArray51, strArray52, strArray53, strArray54, strArray55 };
        java.lang.String[][][][] strArray57 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray58 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray59 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray60 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray61 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray62 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray63 = new java.lang.String[][][][][] { strArray57, strArray58, strArray59, strArray60, strArray61, strArray62 };
        java.lang.String[][][][] strArray64 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray65 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray66 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray67 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray68 = new java.lang.String[][][][] {};
        java.lang.String[][][][] strArray69 = new java.lang.String[][][][] {};
        java.lang.String[][][][][] strArray70 = new java.lang.String[][][][][] { strArray64, strArray65, strArray66, strArray67, strArray68, strArray69 };
        java.lang.String[][][][][][] strArray71 = new java.lang.String[][][][][][] { strArray42, strArray49, strArray56, strArray63, strArray70 };
        java.lang.String[][][][][][][] strArray72 = new java.lang.String[][][][][][][] { strArray35, strArray71 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList73 = com.thealgorithms.backtracking.Permutation.permutation(strArray72);
        java.lang.Class<?> wildcardClass74 = strArray72.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertNotNull(strArray56);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertNotNull(strArrayList73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(strArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!", "", "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList20 = com.thealgorithms.backtracking.Permutation.permutation(strArray19);
        java.util.List[] listArray22 = new java.util.List[3];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray23 = (java.util.List<java.lang.String[]>[]) listArray22;
        strArrayListArray23[0] = strArrayList6;
        strArrayListArray23[1] = strArrayList13;
        strArrayListArray23[2] = strArrayList20;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList33 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList34 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray23);
        java.lang.Class<?> wildcardClass35 = strArrayCollectionArrayList34.getClass();
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArrayList6);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArrayList20);
        org.junit.Assert.assertNotNull(listArray22);
        org.junit.Assert.assertNotNull(strArrayListArray23);
        org.junit.Assert.assertNotNull(strArrayListArrayList30);
        org.junit.Assert.assertNotNull(strArrayListArrayList31);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList32);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList33);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Object[]> objArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.reflect.GenericDeclaration[][]> genericDeclarationArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass13 = wildcardClassArray5.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(objArrayList9);
        org.junit.Assert.assertNotNull(typeArrayList10);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray5 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray5 };
        java.lang.String[] strArray9 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray13 = new java.lang.String[][] { strArray9, strArray12 };
        java.lang.String[] strArray16 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray19 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray20 = new java.lang.String[][] { strArray16, strArray19 };
        java.lang.String[] strArray23 = new java.lang.String[] { "", "hi!" };
        java.lang.String[] strArray26 = new java.lang.String[] { "", "hi!" };
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray23, strArray26 };
        java.lang.String[][][] strArray28 = new java.lang.String[][][] { strArray6, strArray13, strArray20, strArray27 };
        java.util.List<java.lang.String[][][]> strArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.String[][][]> strArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList31 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList32 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][][]) strArray28);
        java.lang.Class<?> wildcardClass33 = strArray28.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArrayList29);
        org.junit.Assert.assertNotNull(strArrayList30);
        org.junit.Assert.assertNotNull(constableArrayList31);
        org.junit.Assert.assertNotNull(constableArrayList32);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass2 = permutationArray0.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList12 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.lang.Class<?> wildcardClass13 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(charSequenceArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(strComparableArrayList10);
        org.junit.Assert.assertNotNull(strComparableArrayList11);
        org.junit.Assert.assertNotNull(serializableArrayList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][] typeArray1 = new java.lang.reflect.Type[][][][][] {};
        java.lang.reflect.Type[][][][][][] typeArray2 = new java.lang.reflect.Type[][][][][][] { typeArray0, typeArray1 };
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.util.List<java.lang.reflect.Type[][][][][][]> typeArrayList5 = com.thealgorithms.backtracking.Permutation.permutation(typeArray2);
        java.lang.Class<?> wildcardClass6 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(typeArrayList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.String[][][][][] strArray0 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray1 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray2 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray3 = new java.lang.String[][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][] strArray4 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray5 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray6 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray7 = new java.lang.String[][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][] strArray8 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray9 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray10 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray11 = new java.lang.String[][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][] strArray12 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray13 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][] strArray14 = new java.lang.String[][][][][] {};
        java.lang.String[][][][][][] strArray15 = new java.lang.String[][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] { strArray3, strArray7, strArray11, strArray15 };
        java.util.List<java.lang.String[][][][][][][]> strArrayList17 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.util.List<java.lang.String[][][][][][][]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray16);
        java.lang.Class<?> wildcardClass19 = strArray16.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArrayList17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass9 = strArrayList8.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.Type[]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = genericDeclarationArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.reflect.Type[][]> typeArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList10 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.invoke.TypeDescriptor[][]> typeDescriptorArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][]) wildcardClassArray5);
        java.util.List<java.lang.constant.Constable[][]> constableArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[][]) wildcardClassArray5);
        java.lang.Class<?> wildcardClass15 = constableArrayList14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(typeArrayList9);
        org.junit.Assert.assertNotNull(wildcardClassArrayList10);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList11);
        org.junit.Assert.assertNotNull(wildcardClassArrayList12);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList13);
        org.junit.Assert.assertNotNull(constableArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.CharSequence[]> charSequenceArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.CharSequence[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass8 = strArray2.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(charSequenceArrayList6);
        org.junit.Assert.assertNotNull(constantDescArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.thealgorithms.backtracking.Permutation[][][] permutationArray0 = new com.thealgorithms.backtracking.Permutation[][][] {};
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray0);
        java.lang.Class<?> wildcardClass3 = permutationArrayList2.getClass();
        org.junit.Assert.assertNotNull(permutationArray0);
        org.junit.Assert.assertNotNull(permutationArrayList1);
        org.junit.Assert.assertNotNull(permutationArrayList2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[2][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.lang.Class<?> wildcardClass14 = strArrayListArrayList13.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.lang.reflect.GenericDeclaration[][][][] genericDeclarationArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.reflect.GenericDeclaration[][][][]> genericDeclarationArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(genericDeclarationArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.util.List[][][][][][][] listArray1 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray1;
        java.util.List[][][][][][][] listArray4 = new java.util.List[0][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][] strArrayListArray5 = (java.util.List<java.lang.String[]>[][][][][][][]) listArray4;
        java.util.List[][][][][][][][] listArray7 = new java.util.List[2][][][][][][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][][][][][][] strArrayListArray8 = (java.util.List<java.lang.String[]>[][][][][][][][]) listArray7;
        strArrayListArray8[0] = strArrayListArray2;
        strArrayListArray8[1] = strArrayListArray5;
        java.util.List<java.util.List<java.lang.String[]>[][][][][][][][]> strArrayListArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray8);
        java.lang.Class<?> wildcardClass14 = strArrayListArray8.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(listArray4);
        org.junit.Assert.assertNotNull(strArrayListArray5);
        org.junit.Assert.assertNotNull(listArray7);
        org.junit.Assert.assertNotNull(strArrayListArray8);
        org.junit.Assert.assertNotNull(strArrayListArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] {};
        java.lang.String[][] strArray2 = new java.lang.String[][] {};
        java.lang.String[][][] strArray3 = new java.lang.String[][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][] strArray4 = new java.lang.String[][] {};
        java.lang.String[][] strArray5 = new java.lang.String[][] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] {};
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][] strArray8 = new java.lang.String[][] {};
        java.lang.String[][] strArray9 = new java.lang.String[][] {};
        java.lang.String[][] strArray10 = new java.lang.String[][] {};
        java.lang.String[][][] strArray11 = new java.lang.String[][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][] strArray12 = new java.lang.String[][] {};
        java.lang.String[][] strArray13 = new java.lang.String[][] {};
        java.lang.String[][] strArray14 = new java.lang.String[][] {};
        java.lang.String[][][] strArray15 = new java.lang.String[][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][] strArray16 = new java.lang.String[][] {};
        java.lang.String[][] strArray17 = new java.lang.String[][] {};
        java.lang.String[][] strArray18 = new java.lang.String[][] {};
        java.lang.String[][][] strArray19 = new java.lang.String[][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][] strArray20 = new java.lang.String[][] {};
        java.lang.String[][] strArray21 = new java.lang.String[][] {};
        java.lang.String[][] strArray22 = new java.lang.String[][] {};
        java.lang.String[][][] strArray23 = new java.lang.String[][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][] strArray24 = new java.lang.String[][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][] strArray25 = new java.lang.String[][][][][] { strArray24 };
        java.lang.String[][][][][][] strArray26 = new java.lang.String[][][][][][] { strArray25 };
        java.util.List<java.lang.String[][][][][][]> strArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.util.List<java.lang.String[][][][][][]> strArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(strArray26);
        java.lang.Class<?> wildcardClass29 = strArray26.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArrayList27);
        org.junit.Assert.assertNotNull(strArrayList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.lang.Class<?> wildcardClass8 = constableArrayList7.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(constableArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.GenericDeclaration[]> genericDeclarationArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass9 = wildcardClassArray2.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray1 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray2 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray1;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray4 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray5 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray4;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray7 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray8 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray7;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray10 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray11 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray10;
        java.lang.invoke.TypeDescriptor.OfField[][][][][] ofFieldArray13 = new java.lang.invoke.TypeDescriptor.OfField[0][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][] wildcardClassOfFieldArray14 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][]) ofFieldArray13;
        java.lang.invoke.TypeDescriptor.OfField[][][][][][] ofFieldArray16 = new java.lang.invoke.TypeDescriptor.OfField[5][][][][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][] wildcardClassOfFieldArray17 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]) ofFieldArray16;
        wildcardClassOfFieldArray17[0] = wildcardClassOfFieldArray2;
        wildcardClassOfFieldArray17[1] = wildcardClassOfFieldArray5;
        wildcardClassOfFieldArray17[2] = wildcardClassOfFieldArray8;
        wildcardClassOfFieldArray17[3] = wildcardClassOfFieldArray11;
        wildcardClassOfFieldArray17[4] = wildcardClassOfFieldArray14;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList30 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList31 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList32 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][][][][]> wildcardClassOfFieldArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray17);
        java.lang.Class<?> wildcardClass34 = wildcardClassOfFieldArrayList33.getClass();
        org.junit.Assert.assertNotNull(ofFieldArray1);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray2);
        org.junit.Assert.assertNotNull(ofFieldArray4);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray5);
        org.junit.Assert.assertNotNull(ofFieldArray7);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray8);
        org.junit.Assert.assertNotNull(ofFieldArray10);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray11);
        org.junit.Assert.assertNotNull(ofFieldArray13);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray14);
        org.junit.Assert.assertNotNull(ofFieldArray16);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray17);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList29);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList30);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList31);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass59 = strArrayListArray47.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(wildcardClassArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray6);
        java.util.List[] listArray9 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray10 = (java.util.List<java.lang.String[]>[]) listArray9;
        strArrayListArray10[0] = strArrayList3;
        strArrayListArray10[1] = strArrayList7;
        java.lang.String[] strArray17 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList18 = com.thealgorithms.backtracking.Permutation.permutation(strArray17);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList22 = com.thealgorithms.backtracking.Permutation.permutation(strArray21);
        java.util.List[] listArray24 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray25 = (java.util.List<java.lang.String[]>[]) listArray24;
        strArrayListArray25[0] = strArrayList18;
        strArrayListArray25[1] = strArrayList22;
        java.lang.String[] strArray32 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList33 = com.thealgorithms.backtracking.Permutation.permutation(strArray32);
        java.lang.String[] strArray36 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList37 = com.thealgorithms.backtracking.Permutation.permutation(strArray36);
        java.util.List[] listArray39 = new java.util.List[2];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray40 = (java.util.List<java.lang.String[]>[]) listArray39;
        strArrayListArray40[0] = strArrayList33;
        strArrayListArray40[1] = strArrayList37;
        java.util.List[][] listArray46 = new java.util.List[3][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][] strArrayListArray47 = (java.util.List<java.lang.String[]>[][]) listArray46;
        strArrayListArray47[0] = strArrayListArray10;
        strArrayListArray47[1] = strArrayListArray25;
        strArrayListArray47[2] = strArrayListArray40;
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList54 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.Collection[][]> collectionArrayList55 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][]) strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList56 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList57 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList58 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.util.List<java.util.List<java.lang.String[]>[][]> strArrayListArrayList59 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray47);
        java.lang.Class<?> wildcardClass60 = strArrayListArrayList59.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(listArray9);
        org.junit.Assert.assertNotNull(strArrayListArray10);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArrayList18);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArrayList22);
        org.junit.Assert.assertNotNull(listArray24);
        org.junit.Assert.assertNotNull(strArrayListArray25);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArrayList33);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArrayList37);
        org.junit.Assert.assertNotNull(listArray39);
        org.junit.Assert.assertNotNull(strArrayListArray40);
        org.junit.Assert.assertNotNull(listArray46);
        org.junit.Assert.assertNotNull(strArrayListArray47);
        org.junit.Assert.assertNotNull(strArrayListArrayList54);
        org.junit.Assert.assertNotNull(collectionArrayList55);
        org.junit.Assert.assertNotNull(strArrayListArrayList56);
        org.junit.Assert.assertNotNull(strArrayListArrayList57);
        org.junit.Assert.assertNotNull(strArrayListArrayList58);
        org.junit.Assert.assertNotNull(strArrayListArrayList59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.util.List<java.lang.String[]>[][][][][][] strArrayListArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.List<java.lang.String[]>[][][][][][]> strArrayListArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray2 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1 };
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.util.List<com.thealgorithms.backtracking.Permutation[]> permutationArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray2);
        java.lang.Class<?> wildcardClass5 = permutationArrayList4.getClass();
        org.junit.Assert.assertNotNull(permutationArray2);
        org.junit.Assert.assertNotNull(permutationArrayList3);
        org.junit.Assert.assertNotNull(permutationArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.Type[][][]> typeArrayList27 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass28 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassArrayList26);
        org.junit.Assert.assertNotNull(typeArrayList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.Object[]> objArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Object[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList8 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.util.List<java.lang.constant.ConstantDesc[]> constantDescArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.ConstantDesc[]) strArray2);
        java.lang.Class<?> wildcardClass10 = constantDescArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strComparableArrayList4);
        org.junit.Assert.assertNotNull(constantDescArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(objArrayList7);
        org.junit.Assert.assertNotNull(constantDescArrayList8);
        org.junit.Assert.assertNotNull(constantDescArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.io.Serializable[]> serializableArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.io.Serializable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) strArray2);
        java.util.List<java.lang.String[]> strArrayList7 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.String[]> strArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList9 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Comparable<java.lang.String>[]) strArray2);
        java.lang.Class<?> wildcardClass10 = strComparableArrayList9.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(serializableArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(strArrayList7);
        org.junit.Assert.assertNotNull(strArrayList8);
        org.junit.Assert.assertNotNull(strComparableArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.util.List[][][] listArray1 = new java.util.List[0][][];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[][][] strArrayListArray2 = (java.util.List<java.lang.String[]>[][][]) listArray1;
        java.util.List<java.util.List<java.lang.String[]>[][][]> strArrayListArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray2);
        java.util.List<java.util.Collection[][][]> collectionArrayList4 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection[][][]) strArrayListArray2);
        java.lang.Class<?> wildcardClass5 = collectionArrayList4.getClass();
        org.junit.Assert.assertNotNull(listArray1);
        org.junit.Assert.assertNotNull(strArrayListArray2);
        org.junit.Assert.assertNotNull(strArrayListArrayList3);
        org.junit.Assert.assertNotNull(collectionArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = annotatedElementArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(constableArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = annotatedElementArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(annotatedElementArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList25 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList26 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass27 = typeDescriptorArrayList26.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList24);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList25);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.constant.Constable[]> constableArrayList6 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.constant.Constable[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass7 = constableArrayList6.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(constableArrayList6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass10 = wildcardClassArrayList9.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClassArrayList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.lang.reflect.Type[][][][][] typeArray0 = new java.lang.reflect.Type[][][][][] {};
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.util.List<java.lang.reflect.Type[][][][][]> typeArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(typeArray0);
        java.lang.Class<?> wildcardClass5 = typeArrayList4.getClass();
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArrayList1);
        org.junit.Assert.assertNotNull(typeArrayList2);
        org.junit.Assert.assertNotNull(typeArrayList3);
        org.junit.Assert.assertNotNull(typeArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass53 = strArray50.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        com.thealgorithms.backtracking.Permutation permutation0 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation1 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation2 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation3 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation4 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation5 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray6 = new com.thealgorithms.backtracking.Permutation[] { permutation0, permutation1, permutation2, permutation3, permutation4, permutation5 };
        com.thealgorithms.backtracking.Permutation permutation7 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation8 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation9 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation10 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation11 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation12 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray13 = new com.thealgorithms.backtracking.Permutation[] { permutation7, permutation8, permutation9, permutation10, permutation11, permutation12 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray14 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray6, permutationArray13 };
        com.thealgorithms.backtracking.Permutation permutation15 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation16 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation17 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation18 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation19 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation20 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray21 = new com.thealgorithms.backtracking.Permutation[] { permutation15, permutation16, permutation17, permutation18, permutation19, permutation20 };
        com.thealgorithms.backtracking.Permutation permutation22 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation23 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation24 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation25 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation26 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation27 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray28 = new com.thealgorithms.backtracking.Permutation[] { permutation22, permutation23, permutation24, permutation25, permutation26, permutation27 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray29 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray21, permutationArray28 };
        com.thealgorithms.backtracking.Permutation permutation30 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation31 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation32 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation33 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation34 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation35 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray36 = new com.thealgorithms.backtracking.Permutation[] { permutation30, permutation31, permutation32, permutation33, permutation34, permutation35 };
        com.thealgorithms.backtracking.Permutation permutation37 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation38 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation39 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation40 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation41 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation42 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray43 = new com.thealgorithms.backtracking.Permutation[] { permutation37, permutation38, permutation39, permutation40, permutation41, permutation42 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray44 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray36, permutationArray43 };
        com.thealgorithms.backtracking.Permutation permutation45 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation46 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation47 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation48 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation49 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation50 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray51 = new com.thealgorithms.backtracking.Permutation[] { permutation45, permutation46, permutation47, permutation48, permutation49, permutation50 };
        com.thealgorithms.backtracking.Permutation permutation52 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation53 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation54 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation55 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation56 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation57 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray58 = new com.thealgorithms.backtracking.Permutation[] { permutation52, permutation53, permutation54, permutation55, permutation56, permutation57 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray59 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray51, permutationArray58 };
        com.thealgorithms.backtracking.Permutation permutation60 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation61 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation62 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation63 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation64 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation65 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray66 = new com.thealgorithms.backtracking.Permutation[] { permutation60, permutation61, permutation62, permutation63, permutation64, permutation65 };
        com.thealgorithms.backtracking.Permutation permutation67 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation68 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation69 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation70 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation71 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation permutation72 = new com.thealgorithms.backtracking.Permutation();
        com.thealgorithms.backtracking.Permutation[] permutationArray73 = new com.thealgorithms.backtracking.Permutation[] { permutation67, permutation68, permutation69, permutation70, permutation71, permutation72 };
        com.thealgorithms.backtracking.Permutation[][] permutationArray74 = new com.thealgorithms.backtracking.Permutation[][] { permutationArray66, permutationArray73 };
        com.thealgorithms.backtracking.Permutation[][][] permutationArray75 = new com.thealgorithms.backtracking.Permutation[][][] { permutationArray14, permutationArray29, permutationArray44, permutationArray59, permutationArray74 };
        java.util.List<com.thealgorithms.backtracking.Permutation[][][]> permutationArrayList76 = com.thealgorithms.backtracking.Permutation.permutation(permutationArray75);
        java.lang.Class<?> wildcardClass77 = permutationArrayList76.getClass();
        org.junit.Assert.assertNotNull(permutationArray6);
        org.junit.Assert.assertNotNull(permutationArray13);
        org.junit.Assert.assertNotNull(permutationArray14);
        org.junit.Assert.assertNotNull(permutationArray21);
        org.junit.Assert.assertNotNull(permutationArray28);
        org.junit.Assert.assertNotNull(permutationArray29);
        org.junit.Assert.assertNotNull(permutationArray36);
        org.junit.Assert.assertNotNull(permutationArray43);
        org.junit.Assert.assertNotNull(permutationArray44);
        org.junit.Assert.assertNotNull(permutationArray51);
        org.junit.Assert.assertNotNull(permutationArray58);
        org.junit.Assert.assertNotNull(permutationArray59);
        org.junit.Assert.assertNotNull(permutationArray66);
        org.junit.Assert.assertNotNull(permutationArray73);
        org.junit.Assert.assertNotNull(permutationArray74);
        org.junit.Assert.assertNotNull(permutationArray75);
        org.junit.Assert.assertNotNull(permutationArrayList76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.lang.Comparable<java.lang.String>[] strComparableArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.Comparable<java.lang.String>[]> strComparableArrayList1 = com.thealgorithms.backtracking.Permutation.permutation(strComparableArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot invoke \"[Ljava.lang.Object;.clone()\" because \"arr\" is null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.AnnotatedElement[]> annotatedElementArrayList5 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.AnnotatedElement[]) wildcardClassArray2);
        java.util.List<java.lang.Class<?>[]> wildcardClassArrayList6 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray2);
        java.util.List<java.lang.reflect.Type[]> typeArrayList7 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.Type[]) wildcardClassArray2);
        java.lang.Class<?> wildcardClass8 = typeArrayList7.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArrayList3);
        org.junit.Assert.assertNotNull(wildcardClassArrayList4);
        org.junit.Assert.assertNotNull(annotatedElementArrayList5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList6);
        org.junit.Assert.assertNotNull(typeArrayList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.lang.Class<?> wildcardClass4 = strArray2.getClass();
        java.lang.String[] strArray12 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList13 = com.thealgorithms.backtracking.Permutation.permutation(strArray12);
        java.lang.Class<?> wildcardClass14 = strArrayList13.getClass();
        java.lang.constant.Constable[] constableArray15 = new java.lang.constant.Constable[] { 0, (byte) 0, (-1L), false, (short) 10, wildcardClass14 };
        java.util.List<java.lang.constant.Constable[]> constableArrayList16 = com.thealgorithms.backtracking.Permutation.permutation(constableArray15);
        java.lang.Class<?> wildcardClass17 = constableArray15.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray19 = new java.lang.invoke.TypeDescriptor.OfField[2];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray20 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray19;
        wildcardClassOfFieldArray20[0] = wildcardClass4;
        wildcardClassOfFieldArray20[1] = wildcardClass17;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList25 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList26 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList27 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]> wildcardClassOfFieldArrayList28 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray20);
        java.util.List<java.lang.invoke.TypeDescriptor[]> typeDescriptorArrayList29 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[]) wildcardClassOfFieldArray20);
        java.lang.Class<?> wildcardClass30 = wildcardClassOfFieldArray20.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArrayList13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(constableArray15);
        org.junit.Assert.assertNotNull(constableArrayList16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(ofFieldArray19);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray20);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList25);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList26);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList27);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList28);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.lang.String[] strArray2 = new java.lang.String[] { "", "hi!" };
        java.util.List<java.lang.String[]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray2);
        java.util.List[] listArray5 = new java.util.List[1];
        @SuppressWarnings("unchecked")
        java.util.List<java.lang.String[]>[] strArrayListArray6 = (java.util.List<java.lang.String[]>[]) listArray5;
        strArrayListArray6[0] = strArrayList3;
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList9 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.lang.Iterable<java.lang.String[]>[]> strArrayIterableArrayList10 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.Iterable<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList11 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.List<java.lang.String[]>[]> strArrayListArrayList12 = com.thealgorithms.backtracking.Permutation.permutation(strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList13 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.util.List<java.util.Collection<java.lang.String[]>[]> strArrayCollectionArrayList14 = com.thealgorithms.backtracking.Permutation.permutation((java.util.Collection<java.lang.String[]>[]) strArrayListArray6);
        java.lang.Class<?> wildcardClass15 = strArrayCollectionArrayList14.getClass();
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(listArray5);
        org.junit.Assert.assertNotNull(strArrayListArray6);
        org.junit.Assert.assertNotNull(strArrayListArrayList9);
        org.junit.Assert.assertNotNull(strArrayIterableArrayList10);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList11);
        org.junit.Assert.assertNotNull(strArrayListArrayList12);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList13);
        org.junit.Assert.assertNotNull(strArrayCollectionArrayList14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.lang.Class[] classArray1 = new java.lang.Class[0];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[] wildcardClassArray2 = (java.lang.Class<?>[]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[1][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.lang.String[][][][][][][] strArray0 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray1 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray2 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray3 = new java.lang.String[][][][][][][][] { strArray0, strArray1, strArray2 };
        java.lang.String[][][][][][][] strArray4 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray5 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray6 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray7 = new java.lang.String[][][][][][][][] { strArray4, strArray5, strArray6 };
        java.lang.String[][][][][][][] strArray8 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray9 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray10 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray11 = new java.lang.String[][][][][][][][] { strArray8, strArray9, strArray10 };
        java.lang.String[][][][][][][] strArray12 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray13 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray14 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray15 = new java.lang.String[][][][][][][][] { strArray12, strArray13, strArray14 };
        java.lang.String[][][][][][][] strArray16 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray17 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray18 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray19 = new java.lang.String[][][][][][][][] { strArray16, strArray17, strArray18 };
        java.lang.String[][][][][][][] strArray20 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray21 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray22 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray23 = new java.lang.String[][][][][][][][] { strArray20, strArray21, strArray22 };
        java.lang.String[][][][][][][][][] strArray24 = new java.lang.String[][][][][][][][][] { strArray3, strArray7, strArray11, strArray15, strArray19, strArray23 };
        java.lang.String[][][][][][][] strArray25 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray26 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray27 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray28 = new java.lang.String[][][][][][][][] { strArray25, strArray26, strArray27 };
        java.lang.String[][][][][][][] strArray29 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray30 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray31 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray32 = new java.lang.String[][][][][][][][] { strArray29, strArray30, strArray31 };
        java.lang.String[][][][][][][] strArray33 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray34 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray35 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray36 = new java.lang.String[][][][][][][][] { strArray33, strArray34, strArray35 };
        java.lang.String[][][][][][][] strArray37 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray38 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray39 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray40 = new java.lang.String[][][][][][][][] { strArray37, strArray38, strArray39 };
        java.lang.String[][][][][][][] strArray41 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray42 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray43 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray44 = new java.lang.String[][][][][][][][] { strArray41, strArray42, strArray43 };
        java.lang.String[][][][][][][] strArray45 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray46 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][] strArray47 = new java.lang.String[][][][][][][] {};
        java.lang.String[][][][][][][][] strArray48 = new java.lang.String[][][][][][][][] { strArray45, strArray46, strArray47 };
        java.lang.String[][][][][][][][][] strArray49 = new java.lang.String[][][][][][][][][] { strArray28, strArray32, strArray36, strArray40, strArray44, strArray48 };
        java.lang.String[][][][][][][][][][] strArray50 = new java.lang.String[][][][][][][][][][] { strArray24, strArray49 };
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList51 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList52 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.util.List<java.lang.String[][][][][][][][][][]> strArrayList53 = com.thealgorithms.backtracking.Permutation.permutation(strArray50);
        java.lang.Class<?> wildcardClass54 = strArray50.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(strArrayList51);
        org.junit.Assert.assertNotNull(strArrayList52);
        org.junit.Assert.assertNotNull(strArrayList53);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.lang.Class[][][] classArray1 = new java.lang.Class[0][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray2 = (java.lang.Class<?>[][][]) classArray1;
        java.lang.Class[][][][] classArray4 = new java.lang.Class[1][][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][][] wildcardClassArray5 = (java.lang.Class<?>[][][][]) classArray4;
        wildcardClassArray5[0] = wildcardClassArray2;
        java.util.List<java.lang.Class<?>[][][][]> wildcardClassArrayList8 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray5);
        java.lang.Class<?> wildcardClass9 = wildcardClassArrayList8.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(wildcardClassArrayList8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.lang.constant.Constable[] constableArray0 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray1 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray2 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray3 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray4 = new java.lang.constant.Constable[][] { constableArray0, constableArray1, constableArray2, constableArray3 };
        java.lang.constant.Constable[] constableArray5 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray6 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray7 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray8 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray9 = new java.lang.constant.Constable[][] { constableArray5, constableArray6, constableArray7, constableArray8 };
        java.lang.constant.Constable[][][] constableArray10 = new java.lang.constant.Constable[][][] { constableArray4, constableArray9 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList11 = com.thealgorithms.backtracking.Permutation.permutation(constableArray10);
        java.lang.Class<?> wildcardClass12 = constableArray10.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray14 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray15 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray14;
        wildcardClassOfFieldArray15[0] = wildcardClass12;
        java.lang.constant.Constable[] constableArray18 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray19 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray20 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray21 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray22 = new java.lang.constant.Constable[][] { constableArray18, constableArray19, constableArray20, constableArray21 };
        java.lang.constant.Constable[] constableArray23 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray24 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray25 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray26 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray27 = new java.lang.constant.Constable[][] { constableArray23, constableArray24, constableArray25, constableArray26 };
        java.lang.constant.Constable[][][] constableArray28 = new java.lang.constant.Constable[][][] { constableArray22, constableArray27 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList29 = com.thealgorithms.backtracking.Permutation.permutation(constableArray28);
        java.lang.Class<?> wildcardClass30 = constableArray28.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray32 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray33 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray32;
        wildcardClassOfFieldArray33[0] = wildcardClass30;
        java.lang.constant.Constable[] constableArray36 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray37 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray38 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray39 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray40 = new java.lang.constant.Constable[][] { constableArray36, constableArray37, constableArray38, constableArray39 };
        java.lang.constant.Constable[] constableArray41 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray42 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray43 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray44 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray45 = new java.lang.constant.Constable[][] { constableArray41, constableArray42, constableArray43, constableArray44 };
        java.lang.constant.Constable[][][] constableArray46 = new java.lang.constant.Constable[][][] { constableArray40, constableArray45 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList47 = com.thealgorithms.backtracking.Permutation.permutation(constableArray46);
        java.lang.Class<?> wildcardClass48 = constableArray46.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray50 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray51 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray50;
        wildcardClassOfFieldArray51[0] = wildcardClass48;
        java.lang.constant.Constable[] constableArray54 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray55 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray56 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray57 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray58 = new java.lang.constant.Constable[][] { constableArray54, constableArray55, constableArray56, constableArray57 };
        java.lang.constant.Constable[] constableArray59 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray60 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray61 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[] constableArray62 = new java.lang.constant.Constable[] {};
        java.lang.constant.Constable[][] constableArray63 = new java.lang.constant.Constable[][] { constableArray59, constableArray60, constableArray61, constableArray62 };
        java.lang.constant.Constable[][][] constableArray64 = new java.lang.constant.Constable[][][] { constableArray58, constableArray63 };
        java.util.List<java.lang.constant.Constable[][][]> constableArrayList65 = com.thealgorithms.backtracking.Permutation.permutation(constableArray64);
        java.lang.Class<?> wildcardClass66 = constableArray64.getClass();
        java.lang.invoke.TypeDescriptor.OfField[] ofFieldArray68 = new java.lang.invoke.TypeDescriptor.OfField[1];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[] wildcardClassOfFieldArray69 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[]) ofFieldArray68;
        wildcardClassOfFieldArray69[0] = wildcardClass66;
        java.lang.invoke.TypeDescriptor.OfField[][] ofFieldArray73 = new java.lang.invoke.TypeDescriptor.OfField[4][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][] wildcardClassOfFieldArray74 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][]) ofFieldArray73;
        wildcardClassOfFieldArray74[0] = wildcardClassOfFieldArray15;
        wildcardClassOfFieldArray74[1] = wildcardClassOfFieldArray33;
        wildcardClassOfFieldArray74[2] = wildcardClassOfFieldArray51;
        wildcardClassOfFieldArray74[3] = wildcardClassOfFieldArray69;
        java.lang.invoke.TypeDescriptor.OfField[][][] ofFieldArray84 = new java.lang.invoke.TypeDescriptor.OfField[1][][];
        @SuppressWarnings("unchecked")
        java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][] wildcardClassOfFieldArray85 = (java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]) ofFieldArray84;
        wildcardClassOfFieldArray85[0] = wildcardClassOfFieldArray74;
        java.util.List<java.lang.invoke.TypeDescriptor.OfField<java.lang.Class<?>>[][][]> wildcardClassOfFieldArrayList88 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassOfFieldArray85);
        java.util.List<java.lang.invoke.TypeDescriptor[][][]> typeDescriptorArrayList89 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.invoke.TypeDescriptor[][][]) wildcardClassOfFieldArray85);
        java.lang.Class<?> wildcardClass90 = wildcardClassOfFieldArray85.getClass();
        org.junit.Assert.assertNotNull(constableArray0);
        org.junit.Assert.assertNotNull(constableArray1);
        org.junit.Assert.assertNotNull(constableArray2);
        org.junit.Assert.assertNotNull(constableArray3);
        org.junit.Assert.assertNotNull(constableArray4);
        org.junit.Assert.assertNotNull(constableArray5);
        org.junit.Assert.assertNotNull(constableArray6);
        org.junit.Assert.assertNotNull(constableArray7);
        org.junit.Assert.assertNotNull(constableArray8);
        org.junit.Assert.assertNotNull(constableArray9);
        org.junit.Assert.assertNotNull(constableArray10);
        org.junit.Assert.assertNotNull(constableArrayList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(ofFieldArray14);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray15);
        org.junit.Assert.assertNotNull(constableArray18);
        org.junit.Assert.assertNotNull(constableArray19);
        org.junit.Assert.assertNotNull(constableArray20);
        org.junit.Assert.assertNotNull(constableArray21);
        org.junit.Assert.assertNotNull(constableArray22);
        org.junit.Assert.assertNotNull(constableArray23);
        org.junit.Assert.assertNotNull(constableArray24);
        org.junit.Assert.assertNotNull(constableArray25);
        org.junit.Assert.assertNotNull(constableArray26);
        org.junit.Assert.assertNotNull(constableArray27);
        org.junit.Assert.assertNotNull(constableArray28);
        org.junit.Assert.assertNotNull(constableArrayList29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(ofFieldArray32);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray33);
        org.junit.Assert.assertNotNull(constableArray36);
        org.junit.Assert.assertNotNull(constableArray37);
        org.junit.Assert.assertNotNull(constableArray38);
        org.junit.Assert.assertNotNull(constableArray39);
        org.junit.Assert.assertNotNull(constableArray40);
        org.junit.Assert.assertNotNull(constableArray41);
        org.junit.Assert.assertNotNull(constableArray42);
        org.junit.Assert.assertNotNull(constableArray43);
        org.junit.Assert.assertNotNull(constableArray44);
        org.junit.Assert.assertNotNull(constableArray45);
        org.junit.Assert.assertNotNull(constableArray46);
        org.junit.Assert.assertNotNull(constableArrayList47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(ofFieldArray50);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray51);
        org.junit.Assert.assertNotNull(constableArray54);
        org.junit.Assert.assertNotNull(constableArray55);
        org.junit.Assert.assertNotNull(constableArray56);
        org.junit.Assert.assertNotNull(constableArray57);
        org.junit.Assert.assertNotNull(constableArray58);
        org.junit.Assert.assertNotNull(constableArray59);
        org.junit.Assert.assertNotNull(constableArray60);
        org.junit.Assert.assertNotNull(constableArray61);
        org.junit.Assert.assertNotNull(constableArray62);
        org.junit.Assert.assertNotNull(constableArray63);
        org.junit.Assert.assertNotNull(constableArray64);
        org.junit.Assert.assertNotNull(constableArrayList65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(ofFieldArray68);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray69);
        org.junit.Assert.assertNotNull(ofFieldArray73);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray74);
        org.junit.Assert.assertNotNull(ofFieldArray84);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArray85);
        org.junit.Assert.assertNotNull(wildcardClassOfFieldArrayList88);
        org.junit.Assert.assertNotNull(typeDescriptorArrayList89);
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[][] strArray1 = new java.lang.String[][] { strArray0 };
        java.util.List<java.lang.String[][]> strArrayList2 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList3 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.util.List<java.lang.String[][]> strArrayList4 = com.thealgorithms.backtracking.Permutation.permutation(strArray1);
        java.lang.Class<?> wildcardClass5 = strArray1.getClass();
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArrayList2);
        org.junit.Assert.assertNotNull(strArrayList3);
        org.junit.Assert.assertNotNull(strArrayList4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class[][] classArray4 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray5 = (java.lang.Class<?>[][]) classArray4;
        java.lang.Class[][] classArray7 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray8 = (java.lang.Class<?>[][]) classArray7;
        java.lang.Class[][] classArray10 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray11 = (java.lang.Class<?>[][]) classArray10;
        java.lang.Class[][][] classArray13 = new java.lang.Class[4][][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][][] wildcardClassArray14 = (java.lang.Class<?>[][][]) classArray13;
        wildcardClassArray14[0] = wildcardClassArray2;
        wildcardClassArray14[1] = wildcardClassArray5;
        wildcardClassArray14[2] = wildcardClassArray8;
        wildcardClassArray14[3] = wildcardClassArray11;
        java.util.List<java.lang.Class<?>[][][]> wildcardClassArrayList23 = com.thealgorithms.backtracking.Permutation.permutation(wildcardClassArray14);
        java.util.List<java.lang.reflect.GenericDeclaration[][][]> genericDeclarationArrayList24 = com.thealgorithms.backtracking.Permutation.permutation((java.lang.reflect.GenericDeclaration[][][]) wildcardClassArray14);
        java.lang.Class<?> wildcardClass25 = wildcardClassArray14.getClass();
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(classArray4);
        org.junit.Assert.assertNotNull(wildcardClassArray5);
        org.junit.Assert.assertNotNull(classArray7);
        org.junit.Assert.assertNotNull(wildcardClassArray8);
        org.junit.Assert.assertNotNull(classArray10);
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(classArray13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArrayList23);
        org.junit.Assert.assertNotNull(genericDeclarationArrayList24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }
}

